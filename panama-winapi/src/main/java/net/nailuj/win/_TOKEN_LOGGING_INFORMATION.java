// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _TOKEN_LOGGING_INFORMATION {
 *     TOKEN_TYPE TokenType;
 *     TOKEN_ELEVATION TokenElevation;
 *     TOKEN_ELEVATION_TYPE TokenElevationType;
 *     SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
 *     DWORD IntegrityLevel;
 *     SID_AND_ATTRIBUTES User;
 *     PSID TrustLevelSid;
 *     DWORD SessionId;
 *     DWORD AppContainerNumber;
 *     LUID AuthenticationId;
 *     DWORD GroupCount;
 *     DWORD GroupsLength;
 *     PSID_AND_ATTRIBUTES Groups;
 * }
 * }
 */
public class _TOKEN_LOGGING_INFORMATION {

    _TOKEN_LOGGING_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_INT.withName("TokenType"),
        _TOKEN_ELEVATION.layout().withName("TokenElevation"),
        winapi.C_INT.withName("TokenElevationType"),
        winapi.C_INT.withName("ImpersonationLevel"),
        winapi.C_LONG.withName("IntegrityLevel"),
        MemoryLayout.paddingLayout(4),
        _SID_AND_ATTRIBUTES.layout().withName("User"),
        winapi.C_POINTER.withName("TrustLevelSid"),
        winapi.C_LONG.withName("SessionId"),
        winapi.C_LONG.withName("AppContainerNumber"),
        _LUID.layout().withName("AuthenticationId"),
        winapi.C_LONG.withName("GroupCount"),
        winapi.C_LONG.withName("GroupsLength"),
        winapi.C_POINTER.withName("Groups")
    ).withName("_TOKEN_LOGGING_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt TokenType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TokenType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TOKEN_TYPE TokenType
     * }
     */
    public static final OfInt TokenType$layout() {
        return TokenType$LAYOUT;
    }

    private static final long TokenType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TOKEN_TYPE TokenType
     * }
     */
    public static final long TokenType$offset() {
        return TokenType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TOKEN_TYPE TokenType
     * }
     */
    public static int TokenType(MemorySegment struct) {
        return struct.get(TokenType$LAYOUT, TokenType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TOKEN_TYPE TokenType
     * }
     */
    public static void TokenType(MemorySegment struct, int fieldValue) {
        struct.set(TokenType$LAYOUT, TokenType$OFFSET, fieldValue);
    }

    private static final GroupLayout TokenElevation$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TokenElevation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TOKEN_ELEVATION TokenElevation
     * }
     */
    public static final GroupLayout TokenElevation$layout() {
        return TokenElevation$LAYOUT;
    }

    private static final long TokenElevation$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TOKEN_ELEVATION TokenElevation
     * }
     */
    public static final long TokenElevation$offset() {
        return TokenElevation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TOKEN_ELEVATION TokenElevation
     * }
     */
    public static MemorySegment TokenElevation(MemorySegment struct) {
        return struct.asSlice(TokenElevation$OFFSET, TokenElevation$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TOKEN_ELEVATION TokenElevation
     * }
     */
    public static void TokenElevation(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TokenElevation$OFFSET, TokenElevation$LAYOUT.byteSize());
    }

    private static final OfInt TokenElevationType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TokenElevationType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TOKEN_ELEVATION_TYPE TokenElevationType
     * }
     */
    public static final OfInt TokenElevationType$layout() {
        return TokenElevationType$LAYOUT;
    }

    private static final long TokenElevationType$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TOKEN_ELEVATION_TYPE TokenElevationType
     * }
     */
    public static final long TokenElevationType$offset() {
        return TokenElevationType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TOKEN_ELEVATION_TYPE TokenElevationType
     * }
     */
    public static int TokenElevationType(MemorySegment struct) {
        return struct.get(TokenElevationType$LAYOUT, TokenElevationType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TOKEN_ELEVATION_TYPE TokenElevationType
     * }
     */
    public static void TokenElevationType(MemorySegment struct, int fieldValue) {
        struct.set(TokenElevationType$LAYOUT, TokenElevationType$OFFSET, fieldValue);
    }

    private static final OfInt ImpersonationLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ImpersonationLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
     * }
     */
    public static final OfInt ImpersonationLevel$layout() {
        return ImpersonationLevel$LAYOUT;
    }

    private static final long ImpersonationLevel$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
     * }
     */
    public static final long ImpersonationLevel$offset() {
        return ImpersonationLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
     * }
     */
    public static int ImpersonationLevel(MemorySegment struct) {
        return struct.get(ImpersonationLevel$LAYOUT, ImpersonationLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
     * }
     */
    public static void ImpersonationLevel(MemorySegment struct, int fieldValue) {
        struct.set(ImpersonationLevel$LAYOUT, ImpersonationLevel$OFFSET, fieldValue);
    }

    private static final OfInt IntegrityLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("IntegrityLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD IntegrityLevel
     * }
     */
    public static final OfInt IntegrityLevel$layout() {
        return IntegrityLevel$LAYOUT;
    }

    private static final long IntegrityLevel$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD IntegrityLevel
     * }
     */
    public static final long IntegrityLevel$offset() {
        return IntegrityLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD IntegrityLevel
     * }
     */
    public static int IntegrityLevel(MemorySegment struct) {
        return struct.get(IntegrityLevel$LAYOUT, IntegrityLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD IntegrityLevel
     * }
     */
    public static void IntegrityLevel(MemorySegment struct, int fieldValue) {
        struct.set(IntegrityLevel$LAYOUT, IntegrityLevel$OFFSET, fieldValue);
    }

    private static final GroupLayout User$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("User"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SID_AND_ATTRIBUTES User
     * }
     */
    public static final GroupLayout User$layout() {
        return User$LAYOUT;
    }

    private static final long User$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SID_AND_ATTRIBUTES User
     * }
     */
    public static final long User$offset() {
        return User$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SID_AND_ATTRIBUTES User
     * }
     */
    public static MemorySegment User(MemorySegment struct) {
        return struct.asSlice(User$OFFSET, User$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SID_AND_ATTRIBUTES User
     * }
     */
    public static void User(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, User$OFFSET, User$LAYOUT.byteSize());
    }

    private static final AddressLayout TrustLevelSid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TrustLevelSid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PSID TrustLevelSid
     * }
     */
    public static final AddressLayout TrustLevelSid$layout() {
        return TrustLevelSid$LAYOUT;
    }

    private static final long TrustLevelSid$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PSID TrustLevelSid
     * }
     */
    public static final long TrustLevelSid$offset() {
        return TrustLevelSid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PSID TrustLevelSid
     * }
     */
    public static MemorySegment TrustLevelSid(MemorySegment struct) {
        return struct.get(TrustLevelSid$LAYOUT, TrustLevelSid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PSID TrustLevelSid
     * }
     */
    public static void TrustLevelSid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TrustLevelSid$LAYOUT, TrustLevelSid$OFFSET, fieldValue);
    }

    private static final OfInt SessionId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SessionId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SessionId
     * }
     */
    public static final OfInt SessionId$layout() {
        return SessionId$LAYOUT;
    }

    private static final long SessionId$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SessionId
     * }
     */
    public static final long SessionId$offset() {
        return SessionId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SessionId
     * }
     */
    public static int SessionId(MemorySegment struct) {
        return struct.get(SessionId$LAYOUT, SessionId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SessionId
     * }
     */
    public static void SessionId(MemorySegment struct, int fieldValue) {
        struct.set(SessionId$LAYOUT, SessionId$OFFSET, fieldValue);
    }

    private static final OfInt AppContainerNumber$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AppContainerNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD AppContainerNumber
     * }
     */
    public static final OfInt AppContainerNumber$layout() {
        return AppContainerNumber$LAYOUT;
    }

    private static final long AppContainerNumber$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD AppContainerNumber
     * }
     */
    public static final long AppContainerNumber$offset() {
        return AppContainerNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD AppContainerNumber
     * }
     */
    public static int AppContainerNumber(MemorySegment struct) {
        return struct.get(AppContainerNumber$LAYOUT, AppContainerNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD AppContainerNumber
     * }
     */
    public static void AppContainerNumber(MemorySegment struct, int fieldValue) {
        struct.set(AppContainerNumber$LAYOUT, AppContainerNumber$OFFSET, fieldValue);
    }

    private static final GroupLayout AuthenticationId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("AuthenticationId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LUID AuthenticationId
     * }
     */
    public static final GroupLayout AuthenticationId$layout() {
        return AuthenticationId$LAYOUT;
    }

    private static final long AuthenticationId$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LUID AuthenticationId
     * }
     */
    public static final long AuthenticationId$offset() {
        return AuthenticationId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LUID AuthenticationId
     * }
     */
    public static MemorySegment AuthenticationId(MemorySegment struct) {
        return struct.asSlice(AuthenticationId$OFFSET, AuthenticationId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LUID AuthenticationId
     * }
     */
    public static void AuthenticationId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, AuthenticationId$OFFSET, AuthenticationId$LAYOUT.byteSize());
    }

    private static final OfInt GroupCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("GroupCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD GroupCount
     * }
     */
    public static final OfInt GroupCount$layout() {
        return GroupCount$LAYOUT;
    }

    private static final long GroupCount$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD GroupCount
     * }
     */
    public static final long GroupCount$offset() {
        return GroupCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD GroupCount
     * }
     */
    public static int GroupCount(MemorySegment struct) {
        return struct.get(GroupCount$LAYOUT, GroupCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD GroupCount
     * }
     */
    public static void GroupCount(MemorySegment struct, int fieldValue) {
        struct.set(GroupCount$LAYOUT, GroupCount$OFFSET, fieldValue);
    }

    private static final OfInt GroupsLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("GroupsLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD GroupsLength
     * }
     */
    public static final OfInt GroupsLength$layout() {
        return GroupsLength$LAYOUT;
    }

    private static final long GroupsLength$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD GroupsLength
     * }
     */
    public static final long GroupsLength$offset() {
        return GroupsLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD GroupsLength
     * }
     */
    public static int GroupsLength(MemorySegment struct) {
        return struct.get(GroupsLength$LAYOUT, GroupsLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD GroupsLength
     * }
     */
    public static void GroupsLength(MemorySegment struct, int fieldValue) {
        struct.set(GroupsLength$LAYOUT, GroupsLength$OFFSET, fieldValue);
    }

    private static final AddressLayout Groups$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Groups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PSID_AND_ATTRIBUTES Groups
     * }
     */
    public static final AddressLayout Groups$layout() {
        return Groups$LAYOUT;
    }

    private static final long Groups$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PSID_AND_ATTRIBUTES Groups
     * }
     */
    public static final long Groups$offset() {
        return Groups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PSID_AND_ATTRIBUTES Groups
     * }
     */
    public static MemorySegment Groups(MemorySegment struct) {
        return struct.get(Groups$LAYOUT, Groups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PSID_AND_ATTRIBUTES Groups
     * }
     */
    public static void Groups(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Groups$LAYOUT, Groups$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

