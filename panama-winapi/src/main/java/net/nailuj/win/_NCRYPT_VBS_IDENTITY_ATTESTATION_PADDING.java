// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING {
 *     ULONG Version;
 *     ULONG ulPaddingScheme;
 *     ULONG cbHashAlg;
 *     ULONG ulSalt;
 * }
 * }
 */
public class _NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING {

    _NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("Version"),
        winapi.C_LONG.withName("ulPaddingScheme"),
        winapi.C_LONG.withName("cbHashAlg"),
        winapi.C_LONG.withName("ulSalt")
    ).withName("_NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt ulPaddingScheme$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulPaddingScheme"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulPaddingScheme
     * }
     */
    public static final OfInt ulPaddingScheme$layout() {
        return ulPaddingScheme$LAYOUT;
    }

    private static final long ulPaddingScheme$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulPaddingScheme
     * }
     */
    public static final long ulPaddingScheme$offset() {
        return ulPaddingScheme$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulPaddingScheme
     * }
     */
    public static int ulPaddingScheme(MemorySegment struct) {
        return struct.get(ulPaddingScheme$LAYOUT, ulPaddingScheme$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulPaddingScheme
     * }
     */
    public static void ulPaddingScheme(MemorySegment struct, int fieldValue) {
        struct.set(ulPaddingScheme$LAYOUT, ulPaddingScheme$OFFSET, fieldValue);
    }

    private static final OfInt cbHashAlg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbHashAlg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbHashAlg
     * }
     */
    public static final OfInt cbHashAlg$layout() {
        return cbHashAlg$LAYOUT;
    }

    private static final long cbHashAlg$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbHashAlg
     * }
     */
    public static final long cbHashAlg$offset() {
        return cbHashAlg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbHashAlg
     * }
     */
    public static int cbHashAlg(MemorySegment struct) {
        return struct.get(cbHashAlg$LAYOUT, cbHashAlg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbHashAlg
     * }
     */
    public static void cbHashAlg(MemorySegment struct, int fieldValue) {
        struct.set(cbHashAlg$LAYOUT, cbHashAlg$OFFSET, fieldValue);
    }

    private static final OfInt ulSalt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulSalt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulSalt
     * }
     */
    public static final OfInt ulSalt$layout() {
        return ulSalt$LAYOUT;
    }

    private static final long ulSalt$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulSalt
     * }
     */
    public static final long ulSalt$offset() {
        return ulSalt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulSalt
     * }
     */
    public static int ulSalt(MemorySegment struct) {
        return struct.get(ulSalt$LAYOUT, ulSalt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulSalt
     * }
     */
    public static void ulSalt(MemorySegment struct, int fieldValue) {
        struct.set(ulSalt$LAYOUT, ulSalt$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

