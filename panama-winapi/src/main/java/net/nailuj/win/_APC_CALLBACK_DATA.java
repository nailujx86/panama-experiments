// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _APC_CALLBACK_DATA {
 *     ULONG_PTR Parameter;
 *     PCONTEXT ContextRecord;
 *     ULONG_PTR Reserved0;
 *     ULONG_PTR Reserved1;
 * }
 * }
 */
public class _APC_CALLBACK_DATA {

    _APC_CALLBACK_DATA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG_LONG.withName("Parameter"),
        winapi.C_POINTER.withName("ContextRecord"),
        winapi.C_LONG_LONG.withName("Reserved0"),
        winapi.C_LONG_LONG.withName("Reserved1")
    ).withName("_APC_CALLBACK_DATA");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Parameter$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Parameter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG_PTR Parameter
     * }
     */
    public static final OfLong Parameter$layout() {
        return Parameter$LAYOUT;
    }

    private static final long Parameter$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG_PTR Parameter
     * }
     */
    public static final long Parameter$offset() {
        return Parameter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG_PTR Parameter
     * }
     */
    public static long Parameter(MemorySegment struct) {
        return struct.get(Parameter$LAYOUT, Parameter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG_PTR Parameter
     * }
     */
    public static void Parameter(MemorySegment struct, long fieldValue) {
        struct.set(Parameter$LAYOUT, Parameter$OFFSET, fieldValue);
    }

    private static final AddressLayout ContextRecord$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ContextRecord"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PCONTEXT ContextRecord
     * }
     */
    public static final AddressLayout ContextRecord$layout() {
        return ContextRecord$LAYOUT;
    }

    private static final long ContextRecord$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PCONTEXT ContextRecord
     * }
     */
    public static final long ContextRecord$offset() {
        return ContextRecord$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PCONTEXT ContextRecord
     * }
     */
    public static MemorySegment ContextRecord(MemorySegment struct) {
        return struct.get(ContextRecord$LAYOUT, ContextRecord$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PCONTEXT ContextRecord
     * }
     */
    public static void ContextRecord(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ContextRecord$LAYOUT, ContextRecord$OFFSET, fieldValue);
    }

    private static final OfLong Reserved0$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Reserved0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved0
     * }
     */
    public static final OfLong Reserved0$layout() {
        return Reserved0$LAYOUT;
    }

    private static final long Reserved0$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved0
     * }
     */
    public static final long Reserved0$offset() {
        return Reserved0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved0
     * }
     */
    public static long Reserved0(MemorySegment struct) {
        return struct.get(Reserved0$LAYOUT, Reserved0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved0
     * }
     */
    public static void Reserved0(MemorySegment struct, long fieldValue) {
        struct.set(Reserved0$LAYOUT, Reserved0$OFFSET, fieldValue);
    }

    private static final OfLong Reserved1$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved1
     * }
     */
    public static final OfLong Reserved1$layout() {
        return Reserved1$LAYOUT;
    }

    private static final long Reserved1$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved1
     * }
     */
    public static final long Reserved1$offset() {
        return Reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved1
     * }
     */
    public static long Reserved1(MemorySegment struct) {
        return struct.get(Reserved1$LAYOUT, Reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG_PTR Reserved1
     * }
     */
    public static void Reserved1(MemorySegment struct, long fieldValue) {
        struct.set(Reserved1$LAYOUT, Reserved1$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

