// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NCRYPT_VBS_ROOT_KEY_ATTESTATION_CLAIM_DETAILS {
 *     ULONG ulKeyFlags;
 *     ULONGLONG ullTrustletId;
 *     ULONG ulTrustletSecurityVersion;
 *     ULONG ulTrustletDebuggable;
 * }
 * }
 */
public class _NCRYPT_VBS_ROOT_KEY_ATTESTATION_CLAIM_DETAILS {

    _NCRYPT_VBS_ROOT_KEY_ATTESTATION_CLAIM_DETAILS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("ulKeyFlags"),
        MemoryLayout.paddingLayout(4),
        winapi.C_LONG_LONG.withName("ullTrustletId"),
        winapi.C_LONG.withName("ulTrustletSecurityVersion"),
        winapi.C_LONG.withName("ulTrustletDebuggable")
    ).withName("_NCRYPT_VBS_ROOT_KEY_ATTESTATION_CLAIM_DETAILS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ulKeyFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulKeyFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulKeyFlags
     * }
     */
    public static final OfInt ulKeyFlags$layout() {
        return ulKeyFlags$LAYOUT;
    }

    private static final long ulKeyFlags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulKeyFlags
     * }
     */
    public static final long ulKeyFlags$offset() {
        return ulKeyFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulKeyFlags
     * }
     */
    public static int ulKeyFlags(MemorySegment struct) {
        return struct.get(ulKeyFlags$LAYOUT, ulKeyFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulKeyFlags
     * }
     */
    public static void ulKeyFlags(MemorySegment struct, int fieldValue) {
        struct.set(ulKeyFlags$LAYOUT, ulKeyFlags$OFFSET, fieldValue);
    }

    private static final OfLong ullTrustletId$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ullTrustletId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG ullTrustletId
     * }
     */
    public static final OfLong ullTrustletId$layout() {
        return ullTrustletId$LAYOUT;
    }

    private static final long ullTrustletId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG ullTrustletId
     * }
     */
    public static final long ullTrustletId$offset() {
        return ullTrustletId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG ullTrustletId
     * }
     */
    public static long ullTrustletId(MemorySegment struct) {
        return struct.get(ullTrustletId$LAYOUT, ullTrustletId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG ullTrustletId
     * }
     */
    public static void ullTrustletId(MemorySegment struct, long fieldValue) {
        struct.set(ullTrustletId$LAYOUT, ullTrustletId$OFFSET, fieldValue);
    }

    private static final OfInt ulTrustletSecurityVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulTrustletSecurityVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulTrustletSecurityVersion
     * }
     */
    public static final OfInt ulTrustletSecurityVersion$layout() {
        return ulTrustletSecurityVersion$LAYOUT;
    }

    private static final long ulTrustletSecurityVersion$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulTrustletSecurityVersion
     * }
     */
    public static final long ulTrustletSecurityVersion$offset() {
        return ulTrustletSecurityVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulTrustletSecurityVersion
     * }
     */
    public static int ulTrustletSecurityVersion(MemorySegment struct) {
        return struct.get(ulTrustletSecurityVersion$LAYOUT, ulTrustletSecurityVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulTrustletSecurityVersion
     * }
     */
    public static void ulTrustletSecurityVersion(MemorySegment struct, int fieldValue) {
        struct.set(ulTrustletSecurityVersion$LAYOUT, ulTrustletSecurityVersion$OFFSET, fieldValue);
    }

    private static final OfInt ulTrustletDebuggable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulTrustletDebuggable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulTrustletDebuggable
     * }
     */
    public static final OfInt ulTrustletDebuggable$layout() {
        return ulTrustletDebuggable$LAYOUT;
    }

    private static final long ulTrustletDebuggable$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulTrustletDebuggable
     * }
     */
    public static final long ulTrustletDebuggable$offset() {
        return ulTrustletDebuggable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulTrustletDebuggable
     * }
     */
    public static int ulTrustletDebuggable(MemorySegment struct) {
        return struct.get(ulTrustletDebuggable$LAYOUT, ulTrustletDebuggable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulTrustletDebuggable
     * }
     */
    public static void ulTrustletDebuggable(MemorySegment struct, int fieldValue) {
        struct.set(ulTrustletDebuggable$LAYOUT, ulTrustletDebuggable$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

