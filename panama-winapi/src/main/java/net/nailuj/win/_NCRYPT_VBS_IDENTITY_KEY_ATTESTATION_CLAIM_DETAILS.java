// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NCRYPT_VBS_IDENTITY_KEY_ATTESTATION_CLAIM_DETAILS {
 *     ULONG ulKeyFlags;
 *     LPCWSTR pszSignatureHashAlg;
 *     ULONG ulPaddingScheme;
 *     LPCWSTR pszPaddingHashAlg;
 *     ULONG ulPaddingSalt;
 * }
 * }
 */
public class _NCRYPT_VBS_IDENTITY_KEY_ATTESTATION_CLAIM_DETAILS {

    _NCRYPT_VBS_IDENTITY_KEY_ATTESTATION_CLAIM_DETAILS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("ulKeyFlags"),
        MemoryLayout.paddingLayout(4),
        winapi.C_POINTER.withName("pszSignatureHashAlg"),
        winapi.C_LONG.withName("ulPaddingScheme"),
        MemoryLayout.paddingLayout(4),
        winapi.C_POINTER.withName("pszPaddingHashAlg"),
        winapi.C_LONG.withName("ulPaddingSalt"),
        MemoryLayout.paddingLayout(4)
    ).withName("_NCRYPT_VBS_IDENTITY_KEY_ATTESTATION_CLAIM_DETAILS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ulKeyFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulKeyFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulKeyFlags
     * }
     */
    public static final OfInt ulKeyFlags$layout() {
        return ulKeyFlags$LAYOUT;
    }

    private static final long ulKeyFlags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulKeyFlags
     * }
     */
    public static final long ulKeyFlags$offset() {
        return ulKeyFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulKeyFlags
     * }
     */
    public static int ulKeyFlags(MemorySegment struct) {
        return struct.get(ulKeyFlags$LAYOUT, ulKeyFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulKeyFlags
     * }
     */
    public static void ulKeyFlags(MemorySegment struct, int fieldValue) {
        struct.set(ulKeyFlags$LAYOUT, ulKeyFlags$OFFSET, fieldValue);
    }

    private static final AddressLayout pszSignatureHashAlg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszSignatureHashAlg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCWSTR pszSignatureHashAlg
     * }
     */
    public static final AddressLayout pszSignatureHashAlg$layout() {
        return pszSignatureHashAlg$LAYOUT;
    }

    private static final long pszSignatureHashAlg$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCWSTR pszSignatureHashAlg
     * }
     */
    public static final long pszSignatureHashAlg$offset() {
        return pszSignatureHashAlg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCWSTR pszSignatureHashAlg
     * }
     */
    public static MemorySegment pszSignatureHashAlg(MemorySegment struct) {
        return struct.get(pszSignatureHashAlg$LAYOUT, pszSignatureHashAlg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCWSTR pszSignatureHashAlg
     * }
     */
    public static void pszSignatureHashAlg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszSignatureHashAlg$LAYOUT, pszSignatureHashAlg$OFFSET, fieldValue);
    }

    private static final OfInt ulPaddingScheme$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulPaddingScheme"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulPaddingScheme
     * }
     */
    public static final OfInt ulPaddingScheme$layout() {
        return ulPaddingScheme$LAYOUT;
    }

    private static final long ulPaddingScheme$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulPaddingScheme
     * }
     */
    public static final long ulPaddingScheme$offset() {
        return ulPaddingScheme$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulPaddingScheme
     * }
     */
    public static int ulPaddingScheme(MemorySegment struct) {
        return struct.get(ulPaddingScheme$LAYOUT, ulPaddingScheme$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulPaddingScheme
     * }
     */
    public static void ulPaddingScheme(MemorySegment struct, int fieldValue) {
        struct.set(ulPaddingScheme$LAYOUT, ulPaddingScheme$OFFSET, fieldValue);
    }

    private static final AddressLayout pszPaddingHashAlg$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pszPaddingHashAlg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LPCWSTR pszPaddingHashAlg
     * }
     */
    public static final AddressLayout pszPaddingHashAlg$layout() {
        return pszPaddingHashAlg$LAYOUT;
    }

    private static final long pszPaddingHashAlg$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LPCWSTR pszPaddingHashAlg
     * }
     */
    public static final long pszPaddingHashAlg$offset() {
        return pszPaddingHashAlg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LPCWSTR pszPaddingHashAlg
     * }
     */
    public static MemorySegment pszPaddingHashAlg(MemorySegment struct) {
        return struct.get(pszPaddingHashAlg$LAYOUT, pszPaddingHashAlg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LPCWSTR pszPaddingHashAlg
     * }
     */
    public static void pszPaddingHashAlg(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pszPaddingHashAlg$LAYOUT, pszPaddingHashAlg$OFFSET, fieldValue);
    }

    private static final OfInt ulPaddingSalt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ulPaddingSalt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG ulPaddingSalt
     * }
     */
    public static final OfInt ulPaddingSalt$layout() {
        return ulPaddingSalt$LAYOUT;
    }

    private static final long ulPaddingSalt$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG ulPaddingSalt
     * }
     */
    public static final long ulPaddingSalt$offset() {
        return ulPaddingSalt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG ulPaddingSalt
     * }
     */
    public static int ulPaddingSalt(MemorySegment struct) {
        return struct.get(ulPaddingSalt$LAYOUT, ulPaddingSalt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG ulPaddingSalt
     * }
     */
    public static void ulPaddingSalt(MemorySegment struct, int fieldValue) {
        struct.set(ulPaddingSalt$LAYOUT, ulPaddingSalt$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

