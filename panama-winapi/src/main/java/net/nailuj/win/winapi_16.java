// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class winapi_16 extends winapi_17 {

    winapi_16() {
        // Should not be called directly
    }

    private static class IUnknown_AddRef_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IUnknown_AddRef_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IUnknown_AddRef_Stub$descriptor() {
        return IUnknown_AddRef_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IUnknown_AddRef_Stub$handle() {
        return IUnknown_AddRef_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IUnknown_AddRef_Stub$address() {
        return IUnknown_AddRef_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IUnknown_AddRef_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IUnknown_AddRef_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IUnknown_AddRef_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_AddRef_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_Release_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IUnknown_Release_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ULONG IUnknown_Release_Proxy(IUnknown *This)
     * }
     */
    public static FunctionDescriptor IUnknown_Release_Proxy$descriptor() {
        return IUnknown_Release_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ULONG IUnknown_Release_Proxy(IUnknown *This)
     * }
     */
    public static MethodHandle IUnknown_Release_Proxy$handle() {
        return IUnknown_Release_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ULONG IUnknown_Release_Proxy(IUnknown *This)
     * }
     */
    public static MemorySegment IUnknown_Release_Proxy$address() {
        return IUnknown_Release_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ULONG IUnknown_Release_Proxy(IUnknown *This)
     * }
     */
    public static int IUnknown_Release_Proxy(MemorySegment This) {
        var mh$ = IUnknown_Release_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_Release_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_Release_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IUnknown_Release_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IUnknown_Release_Stub$descriptor() {
        return IUnknown_Release_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IUnknown_Release_Stub$handle() {
        return IUnknown_Release_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IUnknown_Release_Stub$address() {
        return IUnknown_Release_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IUnknown_Release_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IUnknown_Release_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IUnknown_Release_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_Release_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_AsyncIUnknown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_AsyncIUnknown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIUnknown
     * }
     */
    public static GroupLayout IID_AsyncIUnknown$layout() {
        return IID_AsyncIUnknown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIUnknown
     * }
     */
    public static MemorySegment IID_AsyncIUnknown() {
        return IID_AsyncIUnknown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIUnknown
     * }
     */
    public static void IID_AsyncIUnknown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIUnknown$constants.SEGMENT, 0L, IID_AsyncIUnknown$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IClassFactory *LPCLASSFACTORY
     * }
     */
    public static final AddressLayout LPCLASSFACTORY = winapi.C_POINTER;

    private static class IID_IClassFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IClassFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassFactory
     * }
     */
    public static GroupLayout IID_IClassFactory$layout() {
        return IID_IClassFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassFactory
     * }
     */
    public static MemorySegment IID_IClassFactory() {
        return IID_IClassFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassFactory
     * }
     */
    public static void IID_IClassFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IClassFactory$constants.SEGMENT, 0L, IID_IClassFactory$constants.LAYOUT.byteSize());
    }

    private static class IClassFactory_RemoteCreateInstance_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IClassFactory_RemoteCreateInstance_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static FunctionDescriptor IClassFactory_RemoteCreateInstance_Proxy$descriptor() {
        return IClassFactory_RemoteCreateInstance_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MethodHandle IClassFactory_RemoteCreateInstance_Proxy$handle() {
        return IClassFactory_RemoteCreateInstance_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MemorySegment IClassFactory_RemoteCreateInstance_Proxy$address() {
        return IClassFactory_RemoteCreateInstance_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteCreateInstance_Proxy(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static int IClassFactory_RemoteCreateInstance_Proxy(MemorySegment This, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IClassFactory_RemoteCreateInstance_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_RemoteCreateInstance_Proxy", This, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_RemoteCreateInstance_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IClassFactory_RemoteCreateInstance_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IClassFactory_RemoteCreateInstance_Stub$descriptor() {
        return IClassFactory_RemoteCreateInstance_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IClassFactory_RemoteCreateInstance_Stub$handle() {
        return IClassFactory_RemoteCreateInstance_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IClassFactory_RemoteCreateInstance_Stub$address() {
        return IClassFactory_RemoteCreateInstance_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IClassFactory_RemoteCreateInstance_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IClassFactory_RemoteCreateInstance_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_RemoteCreateInstance_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_RemoteLockServer_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IClassFactory_RemoteLockServer_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static FunctionDescriptor IClassFactory_RemoteLockServer_Proxy$descriptor() {
        return IClassFactory_RemoteLockServer_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MethodHandle IClassFactory_RemoteLockServer_Proxy$handle() {
        return IClassFactory_RemoteLockServer_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MemorySegment IClassFactory_RemoteLockServer_Proxy$address() {
        return IClassFactory_RemoteLockServer_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_RemoteLockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static int IClassFactory_RemoteLockServer_Proxy(MemorySegment This, int fLock) {
        var mh$ = IClassFactory_RemoteLockServer_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_RemoteLockServer_Proxy", This, fLock);
            }
            return (int)mh$.invokeExact(This, fLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_RemoteLockServer_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IClassFactory_RemoteLockServer_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IClassFactory_RemoteLockServer_Stub$descriptor() {
        return IClassFactory_RemoteLockServer_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IClassFactory_RemoteLockServer_Stub$handle() {
        return IClassFactory_RemoteLockServer_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IClassFactory_RemoteLockServer_Stub$address() {
        return IClassFactory_RemoteLockServer_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IClassFactory_RemoteLockServer_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IClassFactory_RemoteLockServer_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_RemoteLockServer_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IClassFactory_CreateInstance_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IClassFactory_CreateInstance_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject)
     * }
     */
    public static FunctionDescriptor IClassFactory_CreateInstance_Proxy$descriptor() {
        return IClassFactory_CreateInstance_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject)
     * }
     */
    public static MethodHandle IClassFactory_CreateInstance_Proxy$handle() {
        return IClassFactory_CreateInstance_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject)
     * }
     */
    public static MemorySegment IClassFactory_CreateInstance_Proxy$address() {
        return IClassFactory_CreateInstance_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Proxy(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject)
     * }
     */
    public static int IClassFactory_CreateInstance_Proxy(MemorySegment This, MemorySegment pUnkOuter, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IClassFactory_CreateInstance_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_CreateInstance_Proxy", This, pUnkOuter, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, pUnkOuter, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_CreateInstance_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IClassFactory_CreateInstance_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Stub(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static FunctionDescriptor IClassFactory_CreateInstance_Stub$descriptor() {
        return IClassFactory_CreateInstance_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Stub(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MethodHandle IClassFactory_CreateInstance_Stub$handle() {
        return IClassFactory_CreateInstance_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Stub(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static MemorySegment IClassFactory_CreateInstance_Stub$address() {
        return IClassFactory_CreateInstance_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_CreateInstance_Stub(IClassFactory *This, const IID *const riid, IUnknown **ppvObject)
     * }
     */
    public static int IClassFactory_CreateInstance_Stub(MemorySegment This, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IClassFactory_CreateInstance_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_CreateInstance_Stub", This, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_LockServer_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IClassFactory_LockServer_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static FunctionDescriptor IClassFactory_LockServer_Proxy$descriptor() {
        return IClassFactory_LockServer_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MethodHandle IClassFactory_LockServer_Proxy$handle() {
        return IClassFactory_LockServer_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MemorySegment IClassFactory_LockServer_Proxy$address() {
        return IClassFactory_LockServer_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Proxy(IClassFactory *This, BOOL fLock)
     * }
     */
    public static int IClassFactory_LockServer_Proxy(MemorySegment This, int fLock) {
        var mh$ = IClassFactory_LockServer_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_LockServer_Proxy", This, fLock);
            }
            return (int)mh$.invokeExact(This, fLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IClassFactory_LockServer_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IClassFactory_LockServer_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Stub(IClassFactory *This, BOOL fLock)
     * }
     */
    public static FunctionDescriptor IClassFactory_LockServer_Stub$descriptor() {
        return IClassFactory_LockServer_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Stub(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MethodHandle IClassFactory_LockServer_Stub$handle() {
        return IClassFactory_LockServer_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Stub(IClassFactory *This, BOOL fLock)
     * }
     */
    public static MemorySegment IClassFactory_LockServer_Stub$address() {
        return IClassFactory_LockServer_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IClassFactory_LockServer_Stub(IClassFactory *This, BOOL fLock)
     * }
     */
    public static int IClassFactory_LockServer_Stub(MemorySegment This, int fLock) {
        var mh$ = IClassFactory_LockServer_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IClassFactory_LockServer_Stub", This, fLock);
            }
            return (int)mh$.invokeExact(This, fLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IMarshal *LPMARSHAL
     * }
     */
    public static final AddressLayout LPMARSHAL = winapi.C_POINTER;

    private static class IID_IMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal
     * }
     */
    public static GroupLayout IID_IMarshal$layout() {
        return IID_IMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal
     * }
     */
    public static MemorySegment IID_IMarshal() {
        return IID_IMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal
     * }
     */
    public static void IID_IMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMarshal$constants.SEGMENT, 0L, IID_IMarshal$constants.LAYOUT.byteSize());
    }

    private static class IID_INoMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_INoMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_INoMarshal
     * }
     */
    public static GroupLayout IID_INoMarshal$layout() {
        return IID_INoMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_INoMarshal
     * }
     */
    public static MemorySegment IID_INoMarshal() {
        return IID_INoMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_INoMarshal
     * }
     */
    public static void IID_INoMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_INoMarshal$constants.SEGMENT, 0L, IID_INoMarshal$constants.LAYOUT.byteSize());
    }

    private static class IID_IAgileObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IAgileObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileObject
     * }
     */
    public static GroupLayout IID_IAgileObject$layout() {
        return IID_IAgileObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileObject
     * }
     */
    public static MemorySegment IID_IAgileObject() {
        return IID_IAgileObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileObject
     * }
     */
    public static void IID_IAgileObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAgileObject$constants.SEGMENT, 0L, IID_IAgileObject$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int ACTIVATIONTYPE_UNCATEGORIZED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_UNCATEGORIZED = 0
     * }
     */
    public static int ACTIVATIONTYPE_UNCATEGORIZED() {
        return ACTIVATIONTYPE_UNCATEGORIZED;
    }
    private static final int ACTIVATIONTYPE_FROM_MONIKER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_MONIKER = 1
     * }
     */
    public static int ACTIVATIONTYPE_FROM_MONIKER() {
        return ACTIVATIONTYPE_FROM_MONIKER;
    }
    private static final int ACTIVATIONTYPE_FROM_DATA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_DATA = 2
     * }
     */
    public static int ACTIVATIONTYPE_FROM_DATA() {
        return ACTIVATIONTYPE_FROM_DATA;
    }
    private static final int ACTIVATIONTYPE_FROM_STORAGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_STORAGE = 4
     * }
     */
    public static int ACTIVATIONTYPE_FROM_STORAGE() {
        return ACTIVATIONTYPE_FROM_STORAGE;
    }
    private static final int ACTIVATIONTYPE_FROM_STREAM = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_STREAM = 8
     * }
     */
    public static int ACTIVATIONTYPE_FROM_STREAM() {
        return ACTIVATIONTYPE_FROM_STREAM;
    }
    private static final int ACTIVATIONTYPE_FROM_FILE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagACTIVATIONTYPE.ACTIVATIONTYPE_FROM_FILE = 16
     * }
     */
    public static int ACTIVATIONTYPE_FROM_FILE() {
        return ACTIVATIONTYPE_FROM_FILE;
    }

    private static class IID_IActivationFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IActivationFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IActivationFilter
     * }
     */
    public static GroupLayout IID_IActivationFilter$layout() {
        return IID_IActivationFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IActivationFilter
     * }
     */
    public static MemorySegment IID_IActivationFilter() {
        return IID_IActivationFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IActivationFilter
     * }
     */
    public static void IID_IActivationFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IActivationFilter$constants.SEGMENT, 0L, IID_IActivationFilter$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMarshal2 *LPMARSHAL2
     * }
     */
    public static final AddressLayout LPMARSHAL2 = winapi.C_POINTER;

    private static class IID_IMarshal2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMarshal2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal2
     * }
     */
    public static GroupLayout IID_IMarshal2$layout() {
        return IID_IMarshal2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal2
     * }
     */
    public static MemorySegment IID_IMarshal2() {
        return IID_IMarshal2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshal2
     * }
     */
    public static void IID_IMarshal2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMarshal2$constants.SEGMENT, 0L, IID_IMarshal2$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMalloc *LPMALLOC
     * }
     */
    public static final AddressLayout LPMALLOC = winapi.C_POINTER;

    private static class IID_IMalloc$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMalloc").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMalloc
     * }
     */
    public static GroupLayout IID_IMalloc$layout() {
        return IID_IMalloc$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMalloc
     * }
     */
    public static MemorySegment IID_IMalloc() {
        return IID_IMalloc$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMalloc
     * }
     */
    public static void IID_IMalloc(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMalloc$constants.SEGMENT, 0L, IID_IMalloc$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IStdMarshalInfo *LPSTDMARSHALINFO
     * }
     */
    public static final AddressLayout LPSTDMARSHALINFO = winapi.C_POINTER;

    private static class IID_IStdMarshalInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IStdMarshalInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStdMarshalInfo
     * }
     */
    public static GroupLayout IID_IStdMarshalInfo$layout() {
        return IID_IStdMarshalInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStdMarshalInfo
     * }
     */
    public static MemorySegment IID_IStdMarshalInfo() {
        return IID_IStdMarshalInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStdMarshalInfo
     * }
     */
    public static void IID_IStdMarshalInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStdMarshalInfo$constants.SEGMENT, 0L, IID_IStdMarshalInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IExternalConnection *LPEXTERNALCONNECTION
     * }
     */
    public static final AddressLayout LPEXTERNALCONNECTION = winapi.C_POINTER;
    private static final int EXTCONN_STRONG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagEXTCONN.EXTCONN_STRONG = 1
     * }
     */
    public static int EXTCONN_STRONG() {
        return EXTCONN_STRONG;
    }
    private static final int EXTCONN_WEAK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagEXTCONN.EXTCONN_WEAK = 2
     * }
     */
    public static int EXTCONN_WEAK() {
        return EXTCONN_WEAK;
    }
    private static final int EXTCONN_CALLABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagEXTCONN.EXTCONN_CALLABLE = 4
     * }
     */
    public static int EXTCONN_CALLABLE() {
        return EXTCONN_CALLABLE;
    }

    private static class IID_IExternalConnection$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IExternalConnection").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IExternalConnection
     * }
     */
    public static GroupLayout IID_IExternalConnection$layout() {
        return IID_IExternalConnection$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IExternalConnection
     * }
     */
    public static MemorySegment IID_IExternalConnection() {
        return IID_IExternalConnection$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IExternalConnection
     * }
     */
    public static void IID_IExternalConnection(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IExternalConnection$constants.SEGMENT, 0L, IID_IExternalConnection$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMultiQI *LPMULTIQI
     * }
     */
    public static final AddressLayout LPMULTIQI = winapi.C_POINTER;

    private static class __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IMultiQI$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMultiQI").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMultiQI
     * }
     */
    public static GroupLayout IID_IMultiQI$layout() {
        return IID_IMultiQI$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMultiQI
     * }
     */
    public static MemorySegment IID_IMultiQI() {
        return IID_IMultiQI$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMultiQI
     * }
     */
    public static void IID_IMultiQI(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMultiQI$constants.SEGMENT, 0L, IID_IMultiQI$constants.LAYOUT.byteSize());
    }

    private static class IID_AsyncIMultiQI$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_AsyncIMultiQI").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIMultiQI
     * }
     */
    public static GroupLayout IID_AsyncIMultiQI$layout() {
        return IID_AsyncIMultiQI$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIMultiQI
     * }
     */
    public static MemorySegment IID_AsyncIMultiQI() {
        return IID_AsyncIMultiQI$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIMultiQI
     * }
     */
    public static void IID_AsyncIMultiQI(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIMultiQI$constants.SEGMENT, 0L, IID_AsyncIMultiQI$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternalUnknown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternalUnknown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalUnknown
     * }
     */
    public static GroupLayout IID_IInternalUnknown$layout() {
        return IID_IInternalUnknown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalUnknown
     * }
     */
    public static MemorySegment IID_IInternalUnknown() {
        return IID_IInternalUnknown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalUnknown
     * }
     */
    public static void IID_IInternalUnknown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternalUnknown$constants.SEGMENT, 0L, IID_IInternalUnknown$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumUnknown *LPENUMUNKNOWN
     * }
     */
    public static final AddressLayout LPENUMUNKNOWN = winapi.C_POINTER;

    private static class IID_IEnumUnknown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumUnknown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumUnknown
     * }
     */
    public static GroupLayout IID_IEnumUnknown$layout() {
        return IID_IEnumUnknown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumUnknown
     * }
     */
    public static MemorySegment IID_IEnumUnknown() {
        return IID_IEnumUnknown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumUnknown
     * }
     */
    public static void IID_IEnumUnknown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumUnknown$constants.SEGMENT, 0L, IID_IEnumUnknown$constants.LAYOUT.byteSize());
    }

    private static class IEnumUnknown_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumUnknown_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumUnknown_RemoteNext_Proxy$descriptor() {
        return IEnumUnknown_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumUnknown_RemoteNext_Proxy$handle() {
        return IEnumUnknown_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumUnknown_RemoteNext_Proxy$address() {
        return IEnumUnknown_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_RemoteNext_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumUnknown_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumUnknown_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumUnknown_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumUnknown_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumUnknown_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumUnknown_RemoteNext_Stub$descriptor() {
        return IEnumUnknown_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumUnknown_RemoteNext_Stub$handle() {
        return IEnumUnknown_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumUnknown_RemoteNext_Stub$address() {
        return IEnumUnknown_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumUnknown_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumUnknown_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumUnknown_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumString *LPENUMSTRING
     * }
     */
    public static final AddressLayout LPENUMSTRING = winapi.C_POINTER;

    private static class IID_IEnumString$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumString").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumString
     * }
     */
    public static GroupLayout IID_IEnumString$layout() {
        return IID_IEnumString$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumString
     * }
     */
    public static MemorySegment IID_IEnumString() {
        return IID_IEnumString$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumString
     * }
     */
    public static void IID_IEnumString(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumString$constants.SEGMENT, 0L, IID_IEnumString$constants.LAYOUT.byteSize());
    }

    private static class IEnumString_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumString_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumString_RemoteNext_Proxy$descriptor() {
        return IEnumString_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumString_RemoteNext_Proxy$handle() {
        return IEnumString_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumString_RemoteNext_Proxy$address() {
        return IEnumString_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumString_RemoteNext_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumString_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumString_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumString_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumString_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumString_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumString_RemoteNext_Stub$descriptor() {
        return IEnumString_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumString_RemoteNext_Stub$handle() {
        return IEnumString_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumString_RemoteNext_Stub$address() {
        return IEnumString_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumString_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumString_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumString_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumString_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_ISequentialStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISequentialStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISequentialStream
     * }
     */
    public static GroupLayout IID_ISequentialStream$layout() {
        return IID_ISequentialStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISequentialStream
     * }
     */
    public static MemorySegment IID_ISequentialStream() {
        return IID_ISequentialStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISequentialStream
     * }
     */
    public static void IID_ISequentialStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISequentialStream$constants.SEGMENT, 0L, IID_ISequentialStream$constants.LAYOUT.byteSize());
    }

    private static class ISequentialStream_RemoteRead_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ISequentialStream_RemoteRead_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ISequentialStream_RemoteRead_Proxy$descriptor() {
        return ISequentialStream_RemoteRead_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ISequentialStream_RemoteRead_Proxy$handle() {
        return ISequentialStream_RemoteRead_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ISequentialStream_RemoteRead_Proxy$address() {
        return ISequentialStream_RemoteRead_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteRead_Proxy(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ISequentialStream_RemoteRead_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ISequentialStream_RemoteRead_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_RemoteRead_Proxy", This, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_RemoteRead_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ISequentialStream_RemoteRead_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ISequentialStream_RemoteRead_Stub$descriptor() {
        return ISequentialStream_RemoteRead_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ISequentialStream_RemoteRead_Stub$handle() {
        return ISequentialStream_RemoteRead_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ISequentialStream_RemoteRead_Stub$address() {
        return ISequentialStream_RemoteRead_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ISequentialStream_RemoteRead_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ISequentialStream_RemoteRead_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_RemoteRead_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_RemoteWrite_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ISequentialStream_RemoteWrite_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ISequentialStream_RemoteWrite_Proxy$descriptor() {
        return ISequentialStream_RemoteWrite_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ISequentialStream_RemoteWrite_Proxy$handle() {
        return ISequentialStream_RemoteWrite_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ISequentialStream_RemoteWrite_Proxy$address() {
        return ISequentialStream_RemoteWrite_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_RemoteWrite_Proxy(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ISequentialStream_RemoteWrite_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ISequentialStream_RemoteWrite_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_RemoteWrite_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_RemoteWrite_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ISequentialStream_RemoteWrite_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ISequentialStream_RemoteWrite_Stub$descriptor() {
        return ISequentialStream_RemoteWrite_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ISequentialStream_RemoteWrite_Stub$handle() {
        return ISequentialStream_RemoteWrite_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ISequentialStream_RemoteWrite_Stub$address() {
        return ISequentialStream_RemoteWrite_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ISequentialStream_RemoteWrite_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ISequentialStream_RemoteWrite_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_RemoteWrite_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IStream *LPSTREAM
     * }
     */
    public static final AddressLayout LPSTREAM = winapi.C_POINTER;
    private static final int STGTY_STORAGE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTGTY.STGTY_STORAGE = 1
     * }
     */
    public static int STGTY_STORAGE() {
        return STGTY_STORAGE;
    }
    private static final int STGTY_STREAM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTGTY.STGTY_STREAM = 2
     * }
     */
    public static int STGTY_STREAM() {
        return STGTY_STREAM;
    }
    private static final int STGTY_LOCKBYTES = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagSTGTY.STGTY_LOCKBYTES = 3
     * }
     */
    public static int STGTY_LOCKBYTES() {
        return STGTY_LOCKBYTES;
    }
    private static final int STGTY_PROPERTY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagSTGTY.STGTY_PROPERTY = 4
     * }
     */
    public static int STGTY_PROPERTY() {
        return STGTY_PROPERTY;
    }
    private static final int STREAM_SEEK_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSTREAM_SEEK.STREAM_SEEK_SET = 0
     * }
     */
    public static int STREAM_SEEK_SET() {
        return STREAM_SEEK_SET;
    }
    private static final int STREAM_SEEK_CUR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTREAM_SEEK.STREAM_SEEK_CUR = 1
     * }
     */
    public static int STREAM_SEEK_CUR() {
        return STREAM_SEEK_CUR;
    }
    private static final int STREAM_SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTREAM_SEEK.STREAM_SEEK_END = 2
     * }
     */
    public static int STREAM_SEEK_END() {
        return STREAM_SEEK_END;
    }
    private static final int LOCK_WRITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagLOCKTYPE.LOCK_WRITE = 1
     * }
     */
    public static int LOCK_WRITE() {
        return LOCK_WRITE;
    }
    private static final int LOCK_EXCLUSIVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagLOCKTYPE.LOCK_EXCLUSIVE = 2
     * }
     */
    public static int LOCK_EXCLUSIVE() {
        return LOCK_EXCLUSIVE;
    }
    private static final int LOCK_ONLYONCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagLOCKTYPE.LOCK_ONLYONCE = 4
     * }
     */
    public static int LOCK_ONLYONCE() {
        return LOCK_ONLYONCE;
    }

    private static class IID_IStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStream
     * }
     */
    public static GroupLayout IID_IStream$layout() {
        return IID_IStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStream
     * }
     */
    public static MemorySegment IID_IStream() {
        return IID_IStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStream
     * }
     */
    public static void IID_IStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStream$constants.SEGMENT, 0L, IID_IStream$constants.LAYOUT.byteSize());
    }

    private static class IStream_RemoteSeek_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _LARGE_INTEGER.layout(),
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStream_RemoteSeek_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static FunctionDescriptor IStream_RemoteSeek_Proxy$descriptor() {
        return IStream_RemoteSeek_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MethodHandle IStream_RemoteSeek_Proxy$handle() {
        return IStream_RemoteSeek_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MemorySegment IStream_RemoteSeek_Proxy$address() {
        return IStream_RemoteSeek_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_RemoteSeek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static int IStream_RemoteSeek_Proxy(MemorySegment This, MemorySegment dlibMove, int dwOrigin, MemorySegment plibNewPosition) {
        var mh$ = IStream_RemoteSeek_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_RemoteSeek_Proxy", This, dlibMove, dwOrigin, plibNewPosition);
            }
            return (int)mh$.invokeExact(This, dlibMove, dwOrigin, plibNewPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_RemoteSeek_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStream_RemoteSeek_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStream_RemoteSeek_Stub$descriptor() {
        return IStream_RemoteSeek_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStream_RemoteSeek_Stub$handle() {
        return IStream_RemoteSeek_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStream_RemoteSeek_Stub$address() {
        return IStream_RemoteSeek_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStream_RemoteSeek_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStream_RemoteSeek_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStream_RemoteSeek_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_RemoteSeek_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_RemoteCopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStream_RemoteCopyTo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static FunctionDescriptor IStream_RemoteCopyTo_Proxy$descriptor() {
        return IStream_RemoteCopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MethodHandle IStream_RemoteCopyTo_Proxy$handle() {
        return IStream_RemoteCopyTo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MemorySegment IStream_RemoteCopyTo_Proxy$address() {
        return IStream_RemoteCopyTo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_RemoteCopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static int IStream_RemoteCopyTo_Proxy(MemorySegment This, MemorySegment pstm, MemorySegment cb, MemorySegment pcbRead, MemorySegment pcbWritten) {
        var mh$ = IStream_RemoteCopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_RemoteCopyTo_Proxy", This, pstm, cb, pcbRead, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pstm, cb, pcbRead, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_RemoteCopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStream_RemoteCopyTo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStream_RemoteCopyTo_Stub$descriptor() {
        return IStream_RemoteCopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStream_RemoteCopyTo_Stub$handle() {
        return IStream_RemoteCopyTo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStream_RemoteCopyTo_Stub$address() {
        return IStream_RemoteCopyTo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStream_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStream_RemoteCopyTo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStream_RemoteCopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_RemoteCopyTo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ULONG RPCOLEDATAREP
     * }
     */
    public static final OfInt RPCOLEDATAREP = winapi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef RPCOLEMESSAGE *PRPCOLEMESSAGE
     * }
     */
    public static final AddressLayout PRPCOLEMESSAGE = winapi.C_POINTER;

    private static class IID_IRpcChannelBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcChannelBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer
     * }
     */
    public static GroupLayout IID_IRpcChannelBuffer$layout() {
        return IID_IRpcChannelBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer
     * }
     */
    public static MemorySegment IID_IRpcChannelBuffer() {
        return IID_IRpcChannelBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer
     * }
     */
    public static void IID_IRpcChannelBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcChannelBuffer$constants.SEGMENT, 0L, IID_IRpcChannelBuffer$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IRpcChannelBuffer2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcChannelBuffer2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer2
     * }
     */
    public static GroupLayout IID_IRpcChannelBuffer2$layout() {
        return IID_IRpcChannelBuffer2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer2
     * }
     */
    public static MemorySegment IID_IRpcChannelBuffer2() {
        return IID_IRpcChannelBuffer2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer2
     * }
     */
    public static void IID_IRpcChannelBuffer2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcChannelBuffer2$constants.SEGMENT, 0L, IID_IRpcChannelBuffer2$constants.LAYOUT.byteSize());
    }

    private static class IID_IAsyncRpcChannelBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IAsyncRpcChannelBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncRpcChannelBuffer
     * }
     */
    public static GroupLayout IID_IAsyncRpcChannelBuffer$layout() {
        return IID_IAsyncRpcChannelBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncRpcChannelBuffer
     * }
     */
    public static MemorySegment IID_IAsyncRpcChannelBuffer() {
        return IID_IAsyncRpcChannelBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncRpcChannelBuffer
     * }
     */
    public static void IID_IAsyncRpcChannelBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAsyncRpcChannelBuffer$constants.SEGMENT, 0L, IID_IAsyncRpcChannelBuffer$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcChannelBuffer3$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcChannelBuffer3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer3
     * }
     */
    public static GroupLayout IID_IRpcChannelBuffer3$layout() {
        return IID_IRpcChannelBuffer3$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer3
     * }
     */
    public static MemorySegment IID_IRpcChannelBuffer3() {
        return IID_IRpcChannelBuffer3$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannelBuffer3
     * }
     */
    public static void IID_IRpcChannelBuffer3(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcChannelBuffer3$constants.SEGMENT, 0L, IID_IRpcChannelBuffer3$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcSyntaxNegotiate$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcSyntaxNegotiate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcSyntaxNegotiate
     * }
     */
    public static GroupLayout IID_IRpcSyntaxNegotiate$layout() {
        return IID_IRpcSyntaxNegotiate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcSyntaxNegotiate
     * }
     */
    public static MemorySegment IID_IRpcSyntaxNegotiate() {
        return IID_IRpcSyntaxNegotiate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcSyntaxNegotiate
     * }
     */
    public static void IID_IRpcSyntaxNegotiate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcSyntaxNegotiate$constants.SEGMENT, 0L, IID_IRpcSyntaxNegotiate$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcProxyBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcProxyBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxyBuffer
     * }
     */
    public static GroupLayout IID_IRpcProxyBuffer$layout() {
        return IID_IRpcProxyBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxyBuffer
     * }
     */
    public static MemorySegment IID_IRpcProxyBuffer() {
        return IID_IRpcProxyBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxyBuffer
     * }
     */
    public static void IID_IRpcProxyBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcProxyBuffer$constants.SEGMENT, 0L, IID_IRpcProxyBuffer$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IRpcStubBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcStubBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStubBuffer
     * }
     */
    public static GroupLayout IID_IRpcStubBuffer$layout() {
        return IID_IRpcStubBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStubBuffer
     * }
     */
    public static MemorySegment IID_IRpcStubBuffer() {
        return IID_IRpcStubBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStubBuffer
     * }
     */
    public static void IID_IRpcStubBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcStubBuffer$constants.SEGMENT, 0L, IID_IRpcStubBuffer$constants.LAYOUT.byteSize());
    }

    private static class IID_IPSFactoryBuffer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPSFactoryBuffer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactoryBuffer
     * }
     */
    public static GroupLayout IID_IPSFactoryBuffer$layout() {
        return IID_IPSFactoryBuffer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactoryBuffer
     * }
     */
    public static MemorySegment IID_IPSFactoryBuffer() {
        return IID_IPSFactoryBuffer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactoryBuffer
     * }
     */
    public static void IID_IPSFactoryBuffer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPSFactoryBuffer$constants.SEGMENT, 0L, IID_IPSFactoryBuffer$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IChannelHook$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IChannelHook").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IChannelHook
     * }
     */
    public static GroupLayout IID_IChannelHook$layout() {
        return IID_IChannelHook$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IChannelHook
     * }
     */
    public static MemorySegment IID_IChannelHook() {
        return IID_IChannelHook$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IChannelHook
     * }
     */
    public static void IID_IChannelHook(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IChannelHook$constants.SEGMENT, 0L, IID_IChannelHook$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE
     * }
     */
    public static final AddressLayout PSOLE_AUTHENTICATION_SERVICE = winapi.C_POINTER;
    private static final int EOAC_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_NONE = 0
     * }
     */
    public static int EOAC_NONE() {
        return EOAC_NONE;
    }
    private static final int EOAC_MUTUAL_AUTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_MUTUAL_AUTH = 1
     * }
     */
    public static int EOAC_MUTUAL_AUTH() {
        return EOAC_MUTUAL_AUTH;
    }
    private static final int EOAC_STATIC_CLOAKING = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_STATIC_CLOAKING = 32
     * }
     */
    public static int EOAC_STATIC_CLOAKING() {
        return EOAC_STATIC_CLOAKING;
    }
    private static final int EOAC_DYNAMIC_CLOAKING = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_DYNAMIC_CLOAKING = 64
     * }
     */
    public static int EOAC_DYNAMIC_CLOAKING() {
        return EOAC_DYNAMIC_CLOAKING;
    }
    private static final int EOAC_ANY_AUTHORITY = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_ANY_AUTHORITY = 128
     * }
     */
    public static int EOAC_ANY_AUTHORITY() {
        return EOAC_ANY_AUTHORITY;
    }
    private static final int EOAC_MAKE_FULLSIC = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_MAKE_FULLSIC = 256
     * }
     */
    public static int EOAC_MAKE_FULLSIC() {
        return EOAC_MAKE_FULLSIC;
    }
    private static final int EOAC_DEFAULT = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_DEFAULT = 2048
     * }
     */
    public static int EOAC_DEFAULT() {
        return EOAC_DEFAULT;
    }
    private static final int EOAC_SECURE_REFS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_SECURE_REFS = 2
     * }
     */
    public static int EOAC_SECURE_REFS() {
        return EOAC_SECURE_REFS;
    }
    private static final int EOAC_ACCESS_CONTROL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_ACCESS_CONTROL = 4
     * }
     */
    public static int EOAC_ACCESS_CONTROL() {
        return EOAC_ACCESS_CONTROL;
    }
    private static final int EOAC_APPID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_APPID = 8
     * }
     */
    public static int EOAC_APPID() {
        return EOAC_APPID;
    }
    private static final int EOAC_DYNAMIC = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_DYNAMIC = 16
     * }
     */
    public static int EOAC_DYNAMIC() {
        return EOAC_DYNAMIC;
    }
    private static final int EOAC_REQUIRE_FULLSIC = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_REQUIRE_FULLSIC = 512
     * }
     */
    public static int EOAC_REQUIRE_FULLSIC() {
        return EOAC_REQUIRE_FULLSIC;
    }
    private static final int EOAC_AUTO_IMPERSONATE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_AUTO_IMPERSONATE = 1024
     * }
     */
    public static int EOAC_AUTO_IMPERSONATE() {
        return EOAC_AUTO_IMPERSONATE;
    }
    private static final int EOAC_DISABLE_AAA = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_DISABLE_AAA = 4096
     * }
     */
    public static int EOAC_DISABLE_AAA() {
        return EOAC_DISABLE_AAA;
    }
    private static final int EOAC_NO_CUSTOM_MARSHAL = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_NO_CUSTOM_MARSHAL = 8192
     * }
     */
    public static int EOAC_NO_CUSTOM_MARSHAL() {
        return EOAC_NO_CUSTOM_MARSHAL;
    }
    private static final int EOAC_RESERVED1 = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum tagEOLE_AUTHENTICATION_CAPABILITIES.EOAC_RESERVED1 = 16384
     * }
     */
    public static int EOAC_RESERVED1() {
        return EOAC_RESERVED1;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagSOLE_AUTHENTICATION_INFO {
     *     DWORD dwAuthnSvc;
     *     DWORD dwAuthzSvc;
     *     void *pAuthInfo;
     * } *PSOLE_AUTHENTICATION_INFO
     * }
     */
    public static final AddressLayout PSOLE_AUTHENTICATION_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSOLE_AUTHENTICATION_LIST {
     *     DWORD cAuthInfo;
     *     SOLE_AUTHENTICATION_INFO *aAuthInfo;
     * } *PSOLE_AUTHENTICATION_LIST
     * }
     */
    public static final AddressLayout PSOLE_AUTHENTICATION_LIST = winapi.C_POINTER;

    private static class IID_IClientSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IClientSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClientSecurity
     * }
     */
    public static GroupLayout IID_IClientSecurity$layout() {
        return IID_IClientSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClientSecurity
     * }
     */
    public static MemorySegment IID_IClientSecurity() {
        return IID_IClientSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClientSecurity
     * }
     */
    public static void IID_IClientSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IClientSecurity$constants.SEGMENT, 0L, IID_IClientSecurity$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IServerSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IServerSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServerSecurity
     * }
     */
    public static GroupLayout IID_IServerSecurity$layout() {
        return IID_IServerSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServerSecurity
     * }
     */
    public static MemorySegment IID_IServerSecurity() {
        return IID_IServerSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IServerSecurity
     * }
     */
    public static void IID_IServerSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IServerSecurity$constants.SEGMENT, 0L, IID_IServerSecurity$constants.LAYOUT.byteSize());
    }
    private static final int COMBND_RPCTIMEOUT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RPCTIMEOUT = 1
     * }
     */
    public static int COMBND_RPCTIMEOUT() {
        return COMBND_RPCTIMEOUT;
    }
    private static final int COMBND_SERVER_LOCALITY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_SERVER_LOCALITY = 2
     * }
     */
    public static int COMBND_SERVER_LOCALITY() {
        return COMBND_SERVER_LOCALITY;
    }
    private static final int COMBND_RESERVED1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RESERVED1 = 4
     * }
     */
    public static int COMBND_RESERVED1() {
        return COMBND_RESERVED1;
    }
    private static final int COMBND_RESERVED2 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RESERVED2 = 5
     * }
     */
    public static int COMBND_RESERVED2() {
        return COMBND_RESERVED2;
    }
    private static final int COMBND_RESERVED3 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RESERVED3 = 8
     * }
     */
    public static int COMBND_RESERVED3() {
        return COMBND_RESERVED3;
    }
    private static final int COMBND_RESERVED4 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_PROPERTIES.COMBND_RESERVED4 = 16
     * }
     */
    public static int COMBND_RESERVED4() {
        return COMBND_RESERVED4;
    }
    private static final int SERVER_LOCALITY_PROCESS_LOCAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_SERVER_LOCALITY_VALUES.SERVER_LOCALITY_PROCESS_LOCAL = 0
     * }
     */
    public static int SERVER_LOCALITY_PROCESS_LOCAL() {
        return SERVER_LOCALITY_PROCESS_LOCAL;
    }
    private static final int SERVER_LOCALITY_MACHINE_LOCAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_SERVER_LOCALITY_VALUES.SERVER_LOCALITY_MACHINE_LOCAL = 1
     * }
     */
    public static int SERVER_LOCALITY_MACHINE_LOCAL() {
        return SERVER_LOCALITY_MACHINE_LOCAL;
    }
    private static final int SERVER_LOCALITY_REMOTE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRPCOPT_SERVER_LOCALITY_VALUES.SERVER_LOCALITY_REMOTE = 2
     * }
     */
    public static int SERVER_LOCALITY_REMOTE() {
        return SERVER_LOCALITY_REMOTE;
    }

    private static class __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IRpcOptions$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcOptions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcOptions
     * }
     */
    public static GroupLayout IID_IRpcOptions$layout() {
        return IID_IRpcOptions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcOptions
     * }
     */
    public static MemorySegment IID_IRpcOptions() {
        return IID_IRpcOptions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcOptions
     * }
     */
    public static void IID_IRpcOptions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcOptions$constants.SEGMENT, 0L, IID_IRpcOptions$constants.LAYOUT.byteSize());
    }
    private static final int COMGLB_EXCEPTION_HANDLING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_EXCEPTION_HANDLING = 1
     * }
     */
    public static int COMGLB_EXCEPTION_HANDLING() {
        return COMGLB_EXCEPTION_HANDLING;
    }
    private static final int COMGLB_APPID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_APPID = 2
     * }
     */
    public static int COMGLB_APPID() {
        return COMGLB_APPID;
    }
    private static final int COMGLB_RPC_THREADPOOL_SETTING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_RPC_THREADPOOL_SETTING = 3
     * }
     */
    public static int COMGLB_RPC_THREADPOOL_SETTING() {
        return COMGLB_RPC_THREADPOOL_SETTING;
    }
    private static final int COMGLB_RO_SETTINGS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_RO_SETTINGS = 4
     * }
     */
    public static int COMGLB_RO_SETTINGS() {
        return COMGLB_RO_SETTINGS;
    }
    private static final int COMGLB_UNMARSHALING_POLICY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_UNMARSHALING_POLICY = 5
     * }
     */
    public static int COMGLB_UNMARSHALING_POLICY() {
        return COMGLB_UNMARSHALING_POLICY;
    }
    private static final int COMGLB_PROPERTIES_RESERVED1 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_PROPERTIES_RESERVED1 = 6
     * }
     */
    public static int COMGLB_PROPERTIES_RESERVED1() {
        return COMGLB_PROPERTIES_RESERVED1;
    }
    private static final int COMGLB_PROPERTIES_RESERVED2 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_PROPERTIES_RESERVED2 = 7
     * }
     */
    public static int COMGLB_PROPERTIES_RESERVED2() {
        return COMGLB_PROPERTIES_RESERVED2;
    }
    private static final int COMGLB_PROPERTIES_RESERVED3 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_PROPERTIES.COMGLB_PROPERTIES_RESERVED3 = 8
     * }
     */
    public static int COMGLB_PROPERTIES_RESERVED3() {
        return COMGLB_PROPERTIES_RESERVED3;
    }
    private static final int COMGLB_EXCEPTION_HANDLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_EH_VALUES.COMGLB_EXCEPTION_HANDLE = 0
     * }
     */
    public static int COMGLB_EXCEPTION_HANDLE() {
        return COMGLB_EXCEPTION_HANDLE;
    }
    private static final int COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_EH_VALUES.COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1
     * }
     */
    public static int COMGLB_EXCEPTION_DONOT_HANDLE_FATAL() {
        return COMGLB_EXCEPTION_DONOT_HANDLE_FATAL;
    }
    private static final int COMGLB_EXCEPTION_DONOT_HANDLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_EH_VALUES.COMGLB_EXCEPTION_DONOT_HANDLE = 1
     * }
     */
    public static int COMGLB_EXCEPTION_DONOT_HANDLE() {
        return COMGLB_EXCEPTION_DONOT_HANDLE;
    }
    private static final int COMGLB_EXCEPTION_DONOT_HANDLE_ANY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_EH_VALUES.COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2
     * }
     */
    public static int COMGLB_EXCEPTION_DONOT_HANDLE_ANY() {
        return COMGLB_EXCEPTION_DONOT_HANDLE_ANY;
    }
    private static final int COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RPCTP_VALUES.COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0
     * }
     */
    public static int COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL() {
        return COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL;
    }
    private static final int COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RPCTP_VALUES.COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
     * }
     */
    public static int COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL() {
        return COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL;
    }
    private static final int COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 1
     * }
     */
    public static int COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES() {
        return COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES;
    }
    private static final int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 2
     * }
     */
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES() {
        return COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES;
    }
    private static final int COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4
     * }
     */
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES() {
        return COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES;
    }
    private static final int COMGLB_FAST_RUNDOWN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_FAST_RUNDOWN = 8
     * }
     */
    public static int COMGLB_FAST_RUNDOWN() {
        return COMGLB_FAST_RUNDOWN;
    }
    private static final int COMGLB_RESERVED1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED1 = 16
     * }
     */
    public static int COMGLB_RESERVED1() {
        return COMGLB_RESERVED1;
    }
    private static final int COMGLB_RESERVED2 = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED2 = 32
     * }
     */
    public static int COMGLB_RESERVED2() {
        return COMGLB_RESERVED2;
    }
    private static final int COMGLB_RESERVED3 = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED3 = 64
     * }
     */
    public static int COMGLB_RESERVED3() {
        return COMGLB_RESERVED3;
    }
    private static final int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 128
     * }
     */
    public static int COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES() {
        return COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES;
    }
    private static final int COMGLB_RESERVED4 = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED4 = 256
     * }
     */
    public static int COMGLB_RESERVED4() {
        return COMGLB_RESERVED4;
    }
    private static final int COMGLB_RESERVED5 = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED5 = 512
     * }
     */
    public static int COMGLB_RESERVED5() {
        return COMGLB_RESERVED5;
    }
    private static final int COMGLB_RESERVED6 = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_RO_FLAGS.COMGLB_RESERVED6 = 1024
     * }
     */
    public static int COMGLB_RESERVED6() {
        return COMGLB_RESERVED6;
    }
    private static final int COMGLB_UNMARSHALING_POLICY_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES.COMGLB_UNMARSHALING_POLICY_NORMAL = 0
     * }
     */
    public static int COMGLB_UNMARSHALING_POLICY_NORMAL() {
        return COMGLB_UNMARSHALING_POLICY_NORMAL;
    }
    private static final int COMGLB_UNMARSHALING_POLICY_STRONG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES.COMGLB_UNMARSHALING_POLICY_STRONG = 1
     * }
     */
    public static int COMGLB_UNMARSHALING_POLICY_STRONG() {
        return COMGLB_UNMARSHALING_POLICY_STRONG;
    }
    private static final int COMGLB_UNMARSHALING_POLICY_HYBRID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES.COMGLB_UNMARSHALING_POLICY_HYBRID = 2
     * }
     */
    public static int COMGLB_UNMARSHALING_POLICY_HYBRID() {
        return COMGLB_UNMARSHALING_POLICY_HYBRID;
    }

    private static class __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IGlobalOptions$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IGlobalOptions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalOptions
     * }
     */
    public static GroupLayout IID_IGlobalOptions$layout() {
        return IID_IGlobalOptions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalOptions
     * }
     */
    public static MemorySegment IID_IGlobalOptions() {
        return IID_IGlobalOptions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalOptions
     * }
     */
    public static void IID_IGlobalOptions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IGlobalOptions$constants.SEGMENT, 0L, IID_IGlobalOptions$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ISurrogate *LPSURROGATE
     * }
     */
    public static final AddressLayout LPSURROGATE = winapi.C_POINTER;

    private static class IID_ISurrogate$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISurrogate").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogate
     * }
     */
    public static GroupLayout IID_ISurrogate$layout() {
        return IID_ISurrogate$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogate
     * }
     */
    public static MemorySegment IID_ISurrogate() {
        return IID_ISurrogate$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogate
     * }
     */
    public static void IID_ISurrogate(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISurrogate$constants.SEGMENT, 0L, IID_ISurrogate$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE
     * }
     */
    public static final AddressLayout LPGLOBALINTERFACETABLE = winapi.C_POINTER;

    private static class IID_IGlobalInterfaceTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IGlobalInterfaceTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalInterfaceTable
     * }
     */
    public static GroupLayout IID_IGlobalInterfaceTable$layout() {
        return IID_IGlobalInterfaceTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalInterfaceTable
     * }
     */
    public static MemorySegment IID_IGlobalInterfaceTable() {
        return IID_IGlobalInterfaceTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGlobalInterfaceTable
     * }
     */
    public static void IID_IGlobalInterfaceTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IGlobalInterfaceTable$constants.SEGMENT, 0L, IID_IGlobalInterfaceTable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ISynchronize$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISynchronize").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronize
     * }
     */
    public static GroupLayout IID_ISynchronize$layout() {
        return IID_ISynchronize$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronize
     * }
     */
    public static MemorySegment IID_ISynchronize() {
        return IID_ISynchronize$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronize
     * }
     */
    public static void IID_ISynchronize(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronize$constants.SEGMENT, 0L, IID_ISynchronize$constants.LAYOUT.byteSize());
    }

    private static class IID_ISynchronizeHandle$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISynchronizeHandle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeHandle
     * }
     */
    public static GroupLayout IID_ISynchronizeHandle$layout() {
        return IID_ISynchronizeHandle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeHandle
     * }
     */
    public static MemorySegment IID_ISynchronizeHandle() {
        return IID_ISynchronizeHandle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeHandle
     * }
     */
    public static void IID_ISynchronizeHandle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronizeHandle$constants.SEGMENT, 0L, IID_ISynchronizeHandle$constants.LAYOUT.byteSize());
    }

    private static class IID_ISynchronizeEvent$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISynchronizeEvent").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeEvent
     * }
     */
    public static GroupLayout IID_ISynchronizeEvent$layout() {
        return IID_ISynchronizeEvent$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeEvent
     * }
     */
    public static MemorySegment IID_ISynchronizeEvent() {
        return IID_ISynchronizeEvent$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeEvent
     * }
     */
    public static void IID_ISynchronizeEvent(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronizeEvent$constants.SEGMENT, 0L, IID_ISynchronizeEvent$constants.LAYOUT.byteSize());
    }

    private static class IID_ISynchronizeContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISynchronizeContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeContainer
     * }
     */
    public static GroupLayout IID_ISynchronizeContainer$layout() {
        return IID_ISynchronizeContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeContainer
     * }
     */
    public static MemorySegment IID_ISynchronizeContainer() {
        return IID_ISynchronizeContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeContainer
     * }
     */
    public static void IID_ISynchronizeContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronizeContainer$constants.SEGMENT, 0L, IID_ISynchronizeContainer$constants.LAYOUT.byteSize());
    }

    private static class IID_ISynchronizeMutex$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISynchronizeMutex").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeMutex
     * }
     */
    public static GroupLayout IID_ISynchronizeMutex$layout() {
        return IID_ISynchronizeMutex$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeMutex
     * }
     */
    public static MemorySegment IID_ISynchronizeMutex() {
        return IID_ISynchronizeMutex$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISynchronizeMutex
     * }
     */
    public static void IID_ISynchronizeMutex(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISynchronizeMutex$constants.SEGMENT, 0L, IID_ISynchronizeMutex$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICancelMethodCalls *LPCANCELMETHODCALLS
     * }
     */
    public static final AddressLayout LPCANCELMETHODCALLS = winapi.C_POINTER;

    private static class IID_ICancelMethodCalls$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ICancelMethodCalls").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICancelMethodCalls
     * }
     */
    public static GroupLayout IID_ICancelMethodCalls$layout() {
        return IID_ICancelMethodCalls$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICancelMethodCalls
     * }
     */
    public static MemorySegment IID_ICancelMethodCalls() {
        return IID_ICancelMethodCalls$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICancelMethodCalls
     * }
     */
    public static void IID_ICancelMethodCalls(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICancelMethodCalls$constants.SEGMENT, 0L, IID_ICancelMethodCalls$constants.LAYOUT.byteSize());
    }
    private static final int DCOM_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDCOM_CALL_STATE.DCOM_NONE = 0
     * }
     */
    public static int DCOM_NONE() {
        return DCOM_NONE;
    }
    private static final int DCOM_CALL_COMPLETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDCOM_CALL_STATE.DCOM_CALL_COMPLETE = 1
     * }
     */
    public static int DCOM_CALL_COMPLETE() {
        return DCOM_CALL_COMPLETE;
    }
    private static final int DCOM_CALL_CANCELED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDCOM_CALL_STATE.DCOM_CALL_CANCELED = 2
     * }
     */
    public static int DCOM_CALL_CANCELED() {
        return DCOM_CALL_CANCELED;
    }

    private static class IID_IAsyncManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IAsyncManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncManager
     * }
     */
    public static GroupLayout IID_IAsyncManager$layout() {
        return IID_IAsyncManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncManager
     * }
     */
    public static MemorySegment IID_IAsyncManager() {
        return IID_IAsyncManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAsyncManager
     * }
     */
    public static void IID_IAsyncManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAsyncManager$constants.SEGMENT, 0L, IID_IAsyncManager$constants.LAYOUT.byteSize());
    }

    private static class IID_ICallFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ICallFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICallFactory
     * }
     */
    public static GroupLayout IID_ICallFactory$layout() {
        return IID_ICallFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICallFactory
     * }
     */
    public static MemorySegment IID_ICallFactory() {
        return IID_ICallFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICallFactory
     * }
     */
    public static void IID_ICallFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICallFactory$constants.SEGMENT, 0L, IID_ICallFactory$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcHelper$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcHelper").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcHelper
     * }
     */
    public static GroupLayout IID_IRpcHelper$layout() {
        return IID_IRpcHelper$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcHelper
     * }
     */
    public static MemorySegment IID_IRpcHelper() {
        return IID_IRpcHelper$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcHelper
     * }
     */
    public static void IID_IRpcHelper(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcHelper$constants.SEGMENT, 0L, IID_IRpcHelper$constants.LAYOUT.byteSize());
    }

    private static class IID_IReleaseMarshalBuffers$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IReleaseMarshalBuffers").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IReleaseMarshalBuffers
     * }
     */
    public static GroupLayout IID_IReleaseMarshalBuffers$layout() {
        return IID_IReleaseMarshalBuffers$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IReleaseMarshalBuffers
     * }
     */
    public static MemorySegment IID_IReleaseMarshalBuffers() {
        return IID_IReleaseMarshalBuffers$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IReleaseMarshalBuffers
     * }
     */
    public static void IID_IReleaseMarshalBuffers(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IReleaseMarshalBuffers$constants.SEGMENT, 0L, IID_IReleaseMarshalBuffers$constants.LAYOUT.byteSize());
    }

    private static class IID_IWaitMultiple$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IWaitMultiple").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWaitMultiple
     * }
     */
    public static GroupLayout IID_IWaitMultiple$layout() {
        return IID_IWaitMultiple$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWaitMultiple
     * }
     */
    public static MemorySegment IID_IWaitMultiple() {
        return IID_IWaitMultiple$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWaitMultiple
     * }
     */
    public static void IID_IWaitMultiple(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWaitMultiple$constants.SEGMENT, 0L, IID_IWaitMultiple$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IAddrTrackingControl *LPADDRTRACKINGCONTROL
     * }
     */
    public static final AddressLayout LPADDRTRACKINGCONTROL = winapi.C_POINTER;

    private static class IID_IAddrTrackingControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IAddrTrackingControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrTrackingControl
     * }
     */
    public static GroupLayout IID_IAddrTrackingControl$layout() {
        return IID_IAddrTrackingControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrTrackingControl
     * }
     */
    public static MemorySegment IID_IAddrTrackingControl() {
        return IID_IAddrTrackingControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrTrackingControl
     * }
     */
    public static void IID_IAddrTrackingControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAddrTrackingControl$constants.SEGMENT, 0L, IID_IAddrTrackingControl$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IAddrExclusionControl *LPADDREXCLUSIONCONTROL
     * }
     */
    public static final AddressLayout LPADDREXCLUSIONCONTROL = winapi.C_POINTER;

    private static class IID_IAddrExclusionControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IAddrExclusionControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrExclusionControl
     * }
     */
    public static GroupLayout IID_IAddrExclusionControl$layout() {
        return IID_IAddrExclusionControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrExclusionControl
     * }
     */
    public static MemorySegment IID_IAddrExclusionControl() {
        return IID_IAddrExclusionControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAddrExclusionControl
     * }
     */
    public static void IID_IAddrExclusionControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAddrExclusionControl$constants.SEGMENT, 0L, IID_IAddrExclusionControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IPipeByte$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPipeByte").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeByte
     * }
     */
    public static GroupLayout IID_IPipeByte$layout() {
        return IID_IPipeByte$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeByte
     * }
     */
    public static MemorySegment IID_IPipeByte() {
        return IID_IPipeByte$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeByte
     * }
     */
    public static void IID_IPipeByte(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPipeByte$constants.SEGMENT, 0L, IID_IPipeByte$constants.LAYOUT.byteSize());
    }

    private static class IID_AsyncIPipeByte$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_AsyncIPipeByte").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeByte
     * }
     */
    public static GroupLayout IID_AsyncIPipeByte$layout() {
        return IID_AsyncIPipeByte$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeByte
     * }
     */
    public static MemorySegment IID_AsyncIPipeByte() {
        return IID_AsyncIPipeByte$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeByte
     * }
     */
    public static void IID_AsyncIPipeByte(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIPipeByte$constants.SEGMENT, 0L, IID_AsyncIPipeByte$constants.LAYOUT.byteSize());
    }

    private static class IID_IPipeLong$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPipeLong").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeLong
     * }
     */
    public static GroupLayout IID_IPipeLong$layout() {
        return IID_IPipeLong$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeLong
     * }
     */
    public static MemorySegment IID_IPipeLong() {
        return IID_IPipeLong$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeLong
     * }
     */
    public static void IID_IPipeLong(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPipeLong$constants.SEGMENT, 0L, IID_IPipeLong$constants.LAYOUT.byteSize());
    }

    private static class IID_AsyncIPipeLong$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_AsyncIPipeLong").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeLong
     * }
     */
    public static GroupLayout IID_AsyncIPipeLong$layout() {
        return IID_AsyncIPipeLong$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeLong
     * }
     */
    public static MemorySegment IID_AsyncIPipeLong() {
        return IID_AsyncIPipeLong$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeLong
     * }
     */
    public static void IID_AsyncIPipeLong(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIPipeLong$constants.SEGMENT, 0L, IID_AsyncIPipeLong$constants.LAYOUT.byteSize());
    }

    private static class IID_IPipeDouble$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPipeDouble").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeDouble
     * }
     */
    public static GroupLayout IID_IPipeDouble$layout() {
        return IID_IPipeDouble$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeDouble
     * }
     */
    public static MemorySegment IID_IPipeDouble() {
        return IID_IPipeDouble$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPipeDouble
     * }
     */
    public static void IID_IPipeDouble(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPipeDouble$constants.SEGMENT, 0L, IID_IPipeDouble$constants.LAYOUT.byteSize());
    }

    private static class IID_AsyncIPipeDouble$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_AsyncIPipeDouble").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeDouble
     * }
     */
    public static GroupLayout IID_AsyncIPipeDouble$layout() {
        return IID_AsyncIPipeDouble$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeDouble
     * }
     */
    public static MemorySegment IID_AsyncIPipeDouble() {
        return IID_AsyncIPipeDouble$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIPipeDouble
     * }
     */
    public static void IID_AsyncIPipeDouble(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIPipeDouble$constants.SEGMENT, 0L, IID_AsyncIPipeDouble$constants.LAYOUT.byteSize());
    }
    private static final int APTTYPEQUALIFIER_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NONE = 0
     * }
     */
    public static int APTTYPEQUALIFIER_NONE() {
        return APTTYPEQUALIFIER_NONE;
    }
    private static final int APTTYPEQUALIFIER_IMPLICIT_MTA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_IMPLICIT_MTA = 1
     * }
     */
    public static int APTTYPEQUALIFIER_IMPLICIT_MTA() {
        return APTTYPEQUALIFIER_IMPLICIT_MTA;
    }
    private static final int APTTYPEQUALIFIER_NA_ON_MTA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NA_ON_MTA = 2
     * }
     */
    public static int APTTYPEQUALIFIER_NA_ON_MTA() {
        return APTTYPEQUALIFIER_NA_ON_MTA;
    }
    private static final int APTTYPEQUALIFIER_NA_ON_STA = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NA_ON_STA = 3
     * }
     */
    public static int APTTYPEQUALIFIER_NA_ON_STA() {
        return APTTYPEQUALIFIER_NA_ON_STA;
    }
    private static final int APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4
     * }
     */
    public static int APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA() {
        return APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA;
    }
    private static final int APTTYPEQUALIFIER_NA_ON_MAINSTA = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_NA_ON_MAINSTA = 5
     * }
     */
    public static int APTTYPEQUALIFIER_NA_ON_MAINSTA() {
        return APTTYPEQUALIFIER_NA_ON_MAINSTA;
    }
    private static final int APTTYPEQUALIFIER_APPLICATION_STA = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_APPLICATION_STA = 6
     * }
     */
    public static int APTTYPEQUALIFIER_APPLICATION_STA() {
        return APTTYPEQUALIFIER_APPLICATION_STA;
    }
    private static final int APTTYPEQUALIFIER_RESERVED_1 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPEQUALIFIER.APTTYPEQUALIFIER_RESERVED_1 = 7
     * }
     */
    public static int APTTYPEQUALIFIER_RESERVED_1() {
        return APTTYPEQUALIFIER_RESERVED_1;
    }
    private static final int APTTYPE_CURRENT = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_CURRENT = -1
     * }
     */
    public static int APTTYPE_CURRENT() {
        return APTTYPE_CURRENT;
    }
    private static final int APTTYPE_STA = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_STA = 0
     * }
     */
    public static int APTTYPE_STA() {
        return APTTYPE_STA;
    }
    private static final int APTTYPE_MTA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_MTA = 1
     * }
     */
    public static int APTTYPE_MTA() {
        return APTTYPE_MTA;
    }
    private static final int APTTYPE_NA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_NA = 2
     * }
     */
    public static int APTTYPE_NA() {
        return APTTYPE_NA;
    }
    private static final int APTTYPE_MAINSTA = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _APTTYPE.APTTYPE_MAINSTA = 3
     * }
     */
    public static int APTTYPE_MAINSTA() {
        return APTTYPE_MAINSTA;
    }
    private static final int THDTYPE_BLOCKMESSAGES = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _THDTYPE.THDTYPE_BLOCKMESSAGES = 0
     * }
     */
    public static int THDTYPE_BLOCKMESSAGES() {
        return THDTYPE_BLOCKMESSAGES;
    }
    private static final int THDTYPE_PROCESSMESSAGES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _THDTYPE.THDTYPE_PROCESSMESSAGES = 1
     * }
     */
    public static int THDTYPE_PROCESSMESSAGES() {
        return THDTYPE_PROCESSMESSAGES;
    }
    /**
     * {@snippet lang=c :
     * typedef DWORD APARTMENTID
     * }
     */
    public static final OfInt APARTMENTID = winapi.C_LONG;

    private static class __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IComThreadingInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IComThreadingInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IComThreadingInfo
     * }
     */
    public static GroupLayout IID_IComThreadingInfo$layout() {
        return IID_IComThreadingInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IComThreadingInfo
     * }
     */
    public static MemorySegment IID_IComThreadingInfo() {
        return IID_IComThreadingInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IComThreadingInfo
     * }
     */
    public static void IID_IComThreadingInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IComThreadingInfo$constants.SEGMENT, 0L, IID_IComThreadingInfo$constants.LAYOUT.byteSize());
    }

    private static class IID_IProcessInitControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IProcessInitControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessInitControl
     * }
     */
    public static GroupLayout IID_IProcessInitControl$layout() {
        return IID_IProcessInitControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessInitControl
     * }
     */
    public static MemorySegment IID_IProcessInitControl() {
        return IID_IProcessInitControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessInitControl
     * }
     */
    public static void IID_IProcessInitControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProcessInitControl$constants.SEGMENT, 0L, IID_IProcessInitControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IFastRundown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IFastRundown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFastRundown
     * }
     */
    public static GroupLayout IID_IFastRundown$layout() {
        return IID_IFastRundown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFastRundown
     * }
     */
    public static MemorySegment IID_IFastRundown() {
        return IID_IFastRundown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFastRundown
     * }
     */
    public static void IID_IFastRundown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IFastRundown$constants.SEGMENT, 0L, IID_IFastRundown$constants.LAYOUT.byteSize());
    }
    private static final int CO_MARSHALING_SOURCE_IS_APP_CONTAINER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0
     * }
     */
    public static int CO_MARSHALING_SOURCE_IS_APP_CONTAINER() {
        return CO_MARSHALING_SOURCE_IS_APP_CONTAINER;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = -2147483648
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = (int)-2147483647L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = -2147483647
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = (int)-2147483646L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = -2147483646
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = (int)-2147483645L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = -2147483645
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = (int)-2147483644L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = -2147483644
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = (int)-2147483643L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = -2147483643
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = (int)-2147483642L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = -2147483642
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = (int)-2147483641L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = -2147483641
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = (int)-2147483640L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = -2147483640
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = (int)-2147483639L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = -2147483639
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = (int)-2147483638L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = -2147483638
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = (int)-2147483637L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = -2147483637
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = (int)-2147483636L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = -2147483636
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = (int)-2147483635L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = -2147483635
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = (int)-2147483634L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = -2147483634
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = (int)-2147483633L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = -2147483633
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = (int)-2147483632L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = -2147483632
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17;
    }
    private static final int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = (int)-2147483631L;
    /**
     * {@snippet lang=c :
     * enum CO_MARSHALING_CONTEXT_ATTRIBUTES.CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = -2147483631
     * }
     */
    public static int CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18() {
        return CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18;
    }

    private static class __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IMarshalingStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMarshalingStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshalingStream
     * }
     */
    public static GroupLayout IID_IMarshalingStream$layout() {
        return IID_IMarshalingStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshalingStream
     * }
     */
    public static MemorySegment IID_IMarshalingStream() {
        return IID_IMarshalingStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMarshalingStream
     * }
     */
    public static void IID_IMarshalingStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMarshalingStream$constants.SEGMENT, 0L, IID_IMarshalingStream$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IAgileReference$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IAgileReference").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileReference
     * }
     */
    public static GroupLayout IID_IAgileReference$layout() {
        return IID_IAgileReference$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileReference
     * }
     */
    public static MemorySegment IID_IAgileReference() {
        return IID_IAgileReference$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAgileReference
     * }
     */
    public static void IID_IAgileReference(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAgileReference$constants.SEGMENT, 0L, IID_IAgileReference$constants.LAYOUT.byteSize());
    }

    private static class IID_ICallbackWithNoReentrancyToApplicationSTA$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ICallbackWithNoReentrancyToApplicationSTA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID IID_ICallbackWithNoReentrancyToApplicationSTA
     * }
     */
    public static GroupLayout IID_ICallbackWithNoReentrancyToApplicationSTA$layout() {
        return IID_ICallbackWithNoReentrancyToApplicationSTA$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_ICallbackWithNoReentrancyToApplicationSTA
     * }
     */
    public static MemorySegment IID_ICallbackWithNoReentrancyToApplicationSTA() {
        return IID_ICallbackWithNoReentrancyToApplicationSTA$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_ICallbackWithNoReentrancyToApplicationSTA
     * }
     */
    public static void IID_ICallbackWithNoReentrancyToApplicationSTA(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICallbackWithNoReentrancyToApplicationSTA$constants.SEGMENT, 0L, IID_ICallbackWithNoReentrancyToApplicationSTA$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct MachineGlobalObjectTableRegistrationToken__ {
     *     int unused;
     * } *MachineGlobalObjectTableRegistrationToken
     * }
     */
    public static final AddressLayout MachineGlobalObjectTableRegistrationToken = winapi.C_POINTER;

    private static class __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IMachineGlobalObjectTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMachineGlobalObjectTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMachineGlobalObjectTable
     * }
     */
    public static GroupLayout IID_IMachineGlobalObjectTable$layout() {
        return IID_IMachineGlobalObjectTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMachineGlobalObjectTable
     * }
     */
    public static MemorySegment IID_IMachineGlobalObjectTable() {
        return IID_IMachineGlobalObjectTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMachineGlobalObjectTable
     * }
     */
    public static void IID_IMachineGlobalObjectTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMachineGlobalObjectTable$constants.SEGMENT, 0L, IID_IMachineGlobalObjectTable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ISupportAllowLowerTrustActivation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISupportAllowLowerTrustActivation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportAllowLowerTrustActivation
     * }
     */
    public static GroupLayout IID_ISupportAllowLowerTrustActivation$layout() {
        return IID_ISupportAllowLowerTrustActivation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportAllowLowerTrustActivation
     * }
     */
    public static MemorySegment IID_ISupportAllowLowerTrustActivation() {
        return IID_ISupportAllowLowerTrustActivation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISupportAllowLowerTrustActivation
     * }
     */
    public static void IID_ISupportAllowLowerTrustActivation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISupportAllowLowerTrustActivation$constants.SEGMENT, 0L, IID_ISupportAllowLowerTrustActivation$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec() {
        return __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec() {
        return __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IEnumUnknown_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumUnknown_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumUnknown_Next_Proxy$descriptor() {
        return IEnumUnknown_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumUnknown_Next_Proxy$handle() {
        return IEnumUnknown_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumUnknown_Next_Proxy$address() {
        return IEnumUnknown_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Proxy(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumUnknown_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumUnknown_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumUnknown_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumUnknown_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumUnknown_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumUnknown_Next_Stub$descriptor() {
        return IEnumUnknown_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumUnknown_Next_Stub$handle() {
        return IEnumUnknown_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumUnknown_Next_Stub$address() {
        return IEnumUnknown_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumUnknown_Next_Stub(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumUnknown_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumUnknown_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumUnknown_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumString_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumString_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumString_Next_Proxy$descriptor() {
        return IEnumString_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumString_Next_Proxy$handle() {
        return IEnumString_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumString_Next_Proxy$address() {
        return IEnumString_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Proxy(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumString_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumString_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumString_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumString_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumString_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumString_Next_Stub$descriptor() {
        return IEnumString_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumString_Next_Stub$handle() {
        return IEnumString_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumString_Next_Stub$address() {
        return IEnumString_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumString_Next_Stub(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumString_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumString_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumString_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_Read_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ISequentialStream_Read_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ISequentialStream_Read_Proxy$descriptor() {
        return ISequentialStream_Read_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ISequentialStream_Read_Proxy$handle() {
        return ISequentialStream_Read_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ISequentialStream_Read_Proxy$address() {
        return ISequentialStream_Read_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Proxy(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ISequentialStream_Read_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ISequentialStream_Read_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_Read_Proxy", This, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_Read_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ISequentialStream_Read_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ISequentialStream_Read_Stub$descriptor() {
        return ISequentialStream_Read_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ISequentialStream_Read_Stub$handle() {
        return ISequentialStream_Read_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ISequentialStream_Read_Stub$address() {
        return ISequentialStream_Read_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Read_Stub(ISequentialStream *This, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ISequentialStream_Read_Stub(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ISequentialStream_Read_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_Read_Stub", This, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_Write_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ISequentialStream_Write_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Proxy(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ISequentialStream_Write_Proxy$descriptor() {
        return ISequentialStream_Write_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Proxy(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ISequentialStream_Write_Proxy$handle() {
        return ISequentialStream_Write_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Proxy(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ISequentialStream_Write_Proxy$address() {
        return ISequentialStream_Write_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Proxy(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ISequentialStream_Write_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ISequentialStream_Write_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_Write_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ISequentialStream_Write_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ISequentialStream_Write_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Stub(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ISequentialStream_Write_Stub$descriptor() {
        return ISequentialStream_Write_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Stub(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ISequentialStream_Write_Stub$handle() {
        return ISequentialStream_Write_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Stub(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ISequentialStream_Write_Stub$address() {
        return ISequentialStream_Write_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ISequentialStream_Write_Stub(ISequentialStream *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ISequentialStream_Write_Stub(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ISequentialStream_Write_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ISequentialStream_Write_Stub", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_Seek_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _LARGE_INTEGER.layout(),
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStream_Seek_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static FunctionDescriptor IStream_Seek_Proxy$descriptor() {
        return IStream_Seek_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MethodHandle IStream_Seek_Proxy$handle() {
        return IStream_Seek_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MemorySegment IStream_Seek_Proxy$address() {
        return IStream_Seek_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Proxy(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static int IStream_Seek_Proxy(MemorySegment This, MemorySegment dlibMove, int dwOrigin, MemorySegment plibNewPosition) {
        var mh$ = IStream_Seek_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_Seek_Proxy", This, dlibMove, dwOrigin, plibNewPosition);
            }
            return (int)mh$.invokeExact(This, dlibMove, dwOrigin, plibNewPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_Seek_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _LARGE_INTEGER.layout(),
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStream_Seek_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static FunctionDescriptor IStream_Seek_Stub$descriptor() {
        return IStream_Seek_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MethodHandle IStream_Seek_Stub$handle() {
        return IStream_Seek_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static MemorySegment IStream_Seek_Stub$address() {
        return IStream_Seek_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_Seek_Stub(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)
     * }
     */
    public static int IStream_Seek_Stub(MemorySegment This, MemorySegment dlibMove, int dwOrigin, MemorySegment plibNewPosition) {
        var mh$ = IStream_Seek_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_Seek_Stub", This, dlibMove, dwOrigin, plibNewPosition);
            }
            return (int)mh$.invokeExact(This, dlibMove, dwOrigin, plibNewPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_CopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStream_CopyTo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static FunctionDescriptor IStream_CopyTo_Proxy$descriptor() {
        return IStream_CopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MethodHandle IStream_CopyTo_Proxy$handle() {
        return IStream_CopyTo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MemorySegment IStream_CopyTo_Proxy$address() {
        return IStream_CopyTo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Proxy(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static int IStream_CopyTo_Proxy(MemorySegment This, MemorySegment pstm, MemorySegment cb, MemorySegment pcbRead, MemorySegment pcbWritten) {
        var mh$ = IStream_CopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_CopyTo_Proxy", This, pstm, cb, pcbRead, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pstm, cb, pcbRead, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStream_CopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStream_CopyTo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static FunctionDescriptor IStream_CopyTo_Stub$descriptor() {
        return IStream_CopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MethodHandle IStream_CopyTo_Stub$handle() {
        return IStream_CopyTo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static MemorySegment IStream_CopyTo_Stub$address() {
        return IStream_CopyTo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStream_CopyTo_Stub(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)
     * }
     */
    public static int IStream_CopyTo_Stub(MemorySegment This, MemorySegment pstm, MemorySegment cb, MemorySegment pcbRead, MemorySegment pcbWritten) {
        var mh$ = IStream_CopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStream_CopyTo_Stub", This, pstm, cb, pcbRead, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pstm, cb, pcbRead, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GUID_NULL$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("GUID_NULL").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID GUID_NULL
     * }
     */
    public static GroupLayout GUID_NULL$layout() {
        return GUID_NULL$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID GUID_NULL
     * }
     */
    public static MemorySegment GUID_NULL() {
        return GUID_NULL$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID GUID_NULL
     * }
     */
    public static void GUID_NULL(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_NULL$constants.SEGMENT, 0L, GUID_NULL$constants.LAYOUT.byteSize());
    }

    private static class CATID_MARSHALER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CATID_MARSHALER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CATID_MARSHALER
     * }
     */
    public static GroupLayout CATID_MARSHALER$layout() {
        return CATID_MARSHALER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CATID_MARSHALER
     * }
     */
    public static MemorySegment CATID_MARSHALER() {
        return CATID_MARSHALER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CATID_MARSHALER
     * }
     */
    public static void CATID_MARSHALER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CATID_MARSHALER$constants.SEGMENT, 0L, CATID_MARSHALER$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcChannel$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcChannel").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannel
     * }
     */
    public static GroupLayout IID_IRpcChannel$layout() {
        return IID_IRpcChannel$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannel
     * }
     */
    public static MemorySegment IID_IRpcChannel() {
        return IID_IRpcChannel$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcChannel
     * }
     */
    public static void IID_IRpcChannel(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcChannel$constants.SEGMENT, 0L, IID_IRpcChannel$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcStub$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcStub").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStub
     * }
     */
    public static GroupLayout IID_IRpcStub$layout() {
        return IID_IRpcStub$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStub
     * }
     */
    public static MemorySegment IID_IRpcStub() {
        return IID_IRpcStub$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcStub
     * }
     */
    public static void IID_IRpcStub(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcStub$constants.SEGMENT, 0L, IID_IRpcStub$constants.LAYOUT.byteSize());
    }

    private static class IID_IStubManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IStubManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStubManager
     * }
     */
    public static GroupLayout IID_IStubManager$layout() {
        return IID_IStubManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStubManager
     * }
     */
    public static MemorySegment IID_IStubManager() {
        return IID_IStubManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStubManager
     * }
     */
    public static void IID_IStubManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStubManager$constants.SEGMENT, 0L, IID_IStubManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IRpcProxy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRpcProxy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxy
     * }
     */
    public static GroupLayout IID_IRpcProxy$layout() {
        return IID_IRpcProxy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxy
     * }
     */
    public static MemorySegment IID_IRpcProxy() {
        return IID_IRpcProxy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRpcProxy
     * }
     */
    public static void IID_IRpcProxy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRpcProxy$constants.SEGMENT, 0L, IID_IRpcProxy$constants.LAYOUT.byteSize());
    }

    private static class IID_IProxyManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IProxyManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxyManager
     * }
     */
    public static GroupLayout IID_IProxyManager$layout() {
        return IID_IProxyManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxyManager
     * }
     */
    public static MemorySegment IID_IProxyManager() {
        return IID_IProxyManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxyManager
     * }
     */
    public static void IID_IProxyManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProxyManager$constants.SEGMENT, 0L, IID_IProxyManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IPSFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPSFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactory
     * }
     */
    public static GroupLayout IID_IPSFactory$layout() {
        return IID_IPSFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactory
     * }
     */
    public static MemorySegment IID_IPSFactory() {
        return IID_IPSFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPSFactory
     * }
     */
    public static void IID_IPSFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPSFactory$constants.SEGMENT, 0L, IID_IPSFactory$constants.LAYOUT.byteSize());
    }

    private static class IID_IInternalMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternalMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalMoniker
     * }
     */
    public static GroupLayout IID_IInternalMoniker$layout() {
        return IID_IInternalMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalMoniker
     * }
     */
    public static MemorySegment IID_IInternalMoniker() {
        return IID_IInternalMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternalMoniker
     * }
     */
    public static void IID_IInternalMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternalMoniker$constants.SEGMENT, 0L, IID_IInternalMoniker$constants.LAYOUT.byteSize());
    }

    private static class IID_IDfReserved1$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDfReserved1").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved1
     * }
     */
    public static GroupLayout IID_IDfReserved1$layout() {
        return IID_IDfReserved1$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved1
     * }
     */
    public static MemorySegment IID_IDfReserved1() {
        return IID_IDfReserved1$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved1
     * }
     */
    public static void IID_IDfReserved1(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDfReserved1$constants.SEGMENT, 0L, IID_IDfReserved1$constants.LAYOUT.byteSize());
    }

    private static class IID_IDfReserved2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDfReserved2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved2
     * }
     */
    public static GroupLayout IID_IDfReserved2$layout() {
        return IID_IDfReserved2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved2
     * }
     */
    public static MemorySegment IID_IDfReserved2() {
        return IID_IDfReserved2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved2
     * }
     */
    public static void IID_IDfReserved2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDfReserved2$constants.SEGMENT, 0L, IID_IDfReserved2$constants.LAYOUT.byteSize());
    }

    private static class IID_IDfReserved3$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDfReserved3").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved3
     * }
     */
    public static GroupLayout IID_IDfReserved3$layout() {
        return IID_IDfReserved3$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved3
     * }
     */
    public static MemorySegment IID_IDfReserved3() {
        return IID_IDfReserved3$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDfReserved3
     * }
     */
    public static void IID_IDfReserved3(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDfReserved3$constants.SEGMENT, 0L, IID_IDfReserved3$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_StdMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdMarshal
     * }
     */
    public static GroupLayout CLSID_StdMarshal$layout() {
        return CLSID_StdMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdMarshal
     * }
     */
    public static MemorySegment CLSID_StdMarshal() {
        return CLSID_StdMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdMarshal
     * }
     */
    public static void CLSID_StdMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdMarshal$constants.SEGMENT, 0L, CLSID_StdMarshal$constants.LAYOUT.byteSize());
    }

    private static class CLSID_AggStdMarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_AggStdMarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AggStdMarshal
     * }
     */
    public static GroupLayout CLSID_AggStdMarshal$layout() {
        return CLSID_AggStdMarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AggStdMarshal
     * }
     */
    public static MemorySegment CLSID_AggStdMarshal() {
        return CLSID_AggStdMarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AggStdMarshal
     * }
     */
    public static void CLSID_AggStdMarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_AggStdMarshal$constants.SEGMENT, 0L, CLSID_AggStdMarshal$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdAsyncActManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_StdAsyncActManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdAsyncActManager
     * }
     */
    public static GroupLayout CLSID_StdAsyncActManager$layout() {
        return CLSID_StdAsyncActManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdAsyncActManager
     * }
     */
    public static MemorySegment CLSID_StdAsyncActManager() {
        return CLSID_StdAsyncActManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdAsyncActManager
     * }
     */
    public static void CLSID_StdAsyncActManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdAsyncActManager$constants.SEGMENT, 0L, CLSID_StdAsyncActManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IStub$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IStub").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStub
     * }
     */
    public static GroupLayout IID_IStub$layout() {
        return IID_IStub$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStub
     * }
     */
    public static MemorySegment IID_IStub() {
        return IID_IStub$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStub
     * }
     */
    public static void IID_IStub(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStub$constants.SEGMENT, 0L, IID_IStub$constants.LAYOUT.byteSize());
    }

    private static class IID_IProxy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IProxy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxy
     * }
     */
    public static GroupLayout IID_IProxy$layout() {
        return IID_IProxy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxy
     * }
     */
    public static MemorySegment IID_IProxy() {
        return IID_IProxy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProxy
     * }
     */
    public static void IID_IProxy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProxy$constants.SEGMENT, 0L, IID_IProxy$constants.LAYOUT.byteSize());
    }

    private static class IID_IEnumGeneric$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumGeneric").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumGeneric
     * }
     */
    public static GroupLayout IID_IEnumGeneric$layout() {
        return IID_IEnumGeneric$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumGeneric
     * }
     */
    public static MemorySegment IID_IEnumGeneric() {
        return IID_IEnumGeneric$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumGeneric
     * }
     */
    public static void IID_IEnumGeneric(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumGeneric$constants.SEGMENT, 0L, IID_IEnumGeneric$constants.LAYOUT.byteSize());
    }

    private static class IID_IEnumHolder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumHolder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumHolder
     * }
     */
    public static GroupLayout IID_IEnumHolder$layout() {
        return IID_IEnumHolder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumHolder
     * }
     */
    public static MemorySegment IID_IEnumHolder() {
        return IID_IEnumHolder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumHolder
     * }
     */
    public static void IID_IEnumHolder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumHolder$constants.SEGMENT, 0L, IID_IEnumHolder$constants.LAYOUT.byteSize());
    }

    private static class IID_IEnumCallback$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumCallback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumCallback
     * }
     */
    public static GroupLayout IID_IEnumCallback$layout() {
        return IID_IEnumCallback$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumCallback
     * }
     */
    public static MemorySegment IID_IEnumCallback() {
        return IID_IEnumCallback$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumCallback
     * }
     */
    public static void IID_IEnumCallback(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumCallback$constants.SEGMENT, 0L, IID_IEnumCallback$constants.LAYOUT.byteSize());
    }

    private static class IID_IOleManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IOleManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleManager
     * }
     */
    public static GroupLayout IID_IOleManager$layout() {
        return IID_IOleManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleManager
     * }
     */
    public static MemorySegment IID_IOleManager() {
        return IID_IOleManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOleManager
     * }
     */
    public static void IID_IOleManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOleManager$constants.SEGMENT, 0L, IID_IOleManager$constants.LAYOUT.byteSize());
    }

    private static class IID_IOlePresObj$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IOlePresObj").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOlePresObj
     * }
     */
    public static GroupLayout IID_IOlePresObj$layout() {
        return IID_IOlePresObj$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOlePresObj
     * }
     */
    public static MemorySegment IID_IOlePresObj() {
        return IID_IOlePresObj$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOlePresObj
     * }
     */
    public static void IID_IOlePresObj(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOlePresObj$constants.SEGMENT, 0L, IID_IOlePresObj$constants.LAYOUT.byteSize());
    }

    private static class IID_IDebug$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDebug").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebug
     * }
     */
    public static GroupLayout IID_IDebug$layout() {
        return IID_IDebug$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebug
     * }
     */
    public static MemorySegment IID_IDebug() {
        return IID_IDebug$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebug
     * }
     */
    public static void IID_IDebug(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDebug$constants.SEGMENT, 0L, IID_IDebug$constants.LAYOUT.byteSize());
    }

    private static class IID_IDebugStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDebugStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebugStream
     * }
     */
    public static GroupLayout IID_IDebugStream$layout() {
        return IID_IDebugStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebugStream
     * }
     */
    public static MemorySegment IID_IDebugStream() {
        return IID_IDebugStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDebugStream
     * }
     */
    public static void IID_IDebugStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDebugStream$constants.SEGMENT, 0L, IID_IDebugStream$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSGenObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PSGenObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSGenObject
     * }
     */
    public static GroupLayout CLSID_PSGenObject$layout() {
        return CLSID_PSGenObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSGenObject
     * }
     */
    public static MemorySegment CLSID_PSGenObject() {
        return CLSID_PSGenObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSGenObject
     * }
     */
    public static void CLSID_PSGenObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSGenObject$constants.SEGMENT, 0L, CLSID_PSGenObject$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSClientSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PSClientSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClientSite
     * }
     */
    public static GroupLayout CLSID_PSClientSite$layout() {
        return CLSID_PSClientSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClientSite
     * }
     */
    public static MemorySegment CLSID_PSClientSite() {
        return CLSID_PSClientSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClientSite
     * }
     */
    public static void CLSID_PSClientSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSClientSite$constants.SEGMENT, 0L, CLSID_PSClientSite$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSClassObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PSClassObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClassObject
     * }
     */
    public static GroupLayout CLSID_PSClassObject$layout() {
        return CLSID_PSClassObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClassObject
     * }
     */
    public static MemorySegment CLSID_PSClassObject() {
        return CLSID_PSClassObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSClassObject
     * }
     */
    public static void CLSID_PSClassObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSClassObject$constants.SEGMENT, 0L, CLSID_PSClassObject$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSInPlaceActive$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PSInPlaceActive").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceActive
     * }
     */
    public static GroupLayout CLSID_PSInPlaceActive$layout() {
        return CLSID_PSInPlaceActive$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceActive
     * }
     */
    public static MemorySegment CLSID_PSInPlaceActive() {
        return CLSID_PSInPlaceActive$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceActive
     * }
     */
    public static void CLSID_PSInPlaceActive(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSInPlaceActive$constants.SEGMENT, 0L, CLSID_PSInPlaceActive$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSInPlaceFrame$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PSInPlaceFrame").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceFrame
     * }
     */
    public static GroupLayout CLSID_PSInPlaceFrame$layout() {
        return CLSID_PSInPlaceFrame$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceFrame
     * }
     */
    public static MemorySegment CLSID_PSInPlaceFrame() {
        return CLSID_PSInPlaceFrame$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSInPlaceFrame
     * }
     */
    public static void CLSID_PSInPlaceFrame(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSInPlaceFrame$constants.SEGMENT, 0L, CLSID_PSInPlaceFrame$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSDragDrop$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PSDragDrop").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSDragDrop
     * }
     */
    public static GroupLayout CLSID_PSDragDrop$layout() {
        return CLSID_PSDragDrop$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSDragDrop
     * }
     */
    public static MemorySegment CLSID_PSDragDrop() {
        return CLSID_PSDragDrop$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSDragDrop
     * }
     */
    public static void CLSID_PSDragDrop(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSDragDrop$constants.SEGMENT, 0L, CLSID_PSDragDrop$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PSBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSBindCtx
     * }
     */
    public static GroupLayout CLSID_PSBindCtx$layout() {
        return CLSID_PSBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSBindCtx
     * }
     */
    public static MemorySegment CLSID_PSBindCtx() {
        return CLSID_PSBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSBindCtx
     * }
     */
    public static void CLSID_PSBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSBindCtx$constants.SEGMENT, 0L, CLSID_PSBindCtx$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PSEnumerators$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PSEnumerators").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSEnumerators
     * }
     */
    public static GroupLayout CLSID_PSEnumerators$layout() {
        return CLSID_PSEnumerators$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSEnumerators
     * }
     */
    public static MemorySegment CLSID_PSEnumerators() {
        return CLSID_PSEnumerators$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_PSEnumerators
     * }
     */
    public static void CLSID_PSEnumerators(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PSEnumerators$constants.SEGMENT, 0L, CLSID_PSEnumerators$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StaticMetafile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_StaticMetafile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticMetafile
     * }
     */
    public static GroupLayout CLSID_StaticMetafile$layout() {
        return CLSID_StaticMetafile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticMetafile
     * }
     */
    public static MemorySegment CLSID_StaticMetafile() {
        return CLSID_StaticMetafile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticMetafile
     * }
     */
    public static void CLSID_StaticMetafile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StaticMetafile$constants.SEGMENT, 0L, CLSID_StaticMetafile$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StaticDib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_StaticDib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticDib
     * }
     */
    public static GroupLayout CLSID_StaticDib$layout() {
        return CLSID_StaticDib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticDib
     * }
     */
    public static MemorySegment CLSID_StaticDib() {
        return CLSID_StaticDib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StaticDib
     * }
     */
    public static void CLSID_StaticDib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StaticDib$constants.SEGMENT, 0L, CLSID_StaticDib$constants.LAYOUT.byteSize());
    }

    private static class CID_CDfsVolume$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CID_CDfsVolume").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CID_CDfsVolume
     * }
     */
    public static GroupLayout CID_CDfsVolume$layout() {
        return CID_CDfsVolume$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CID_CDfsVolume
     * }
     */
    public static MemorySegment CID_CDfsVolume() {
        return CID_CDfsVolume$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CID_CDfsVolume
     * }
     */
    public static void CID_CDfsVolume(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CID_CDfsVolume$constants.SEGMENT, 0L, CID_CDfsVolume$constants.LAYOUT.byteSize());
    }

    private static class CLSID_DCOMAccessControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_DCOMAccessControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DCOMAccessControl
     * }
     */
    public static GroupLayout CLSID_DCOMAccessControl$layout() {
        return CLSID_DCOMAccessControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DCOMAccessControl
     * }
     */
    public static MemorySegment CLSID_DCOMAccessControl() {
        return CLSID_DCOMAccessControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_DCOMAccessControl
     * }
     */
    public static void CLSID_DCOMAccessControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_DCOMAccessControl$constants.SEGMENT, 0L, CLSID_DCOMAccessControl$constants.LAYOUT.byteSize());
    }

    private static class CLSID_GlobalOptions$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_GlobalOptions").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_GlobalOptions
     * }
     */
    public static GroupLayout CLSID_GlobalOptions$layout() {
        return CLSID_GlobalOptions$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_GlobalOptions
     * }
     */
    public static MemorySegment CLSID_GlobalOptions() {
        return CLSID_GlobalOptions$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_GlobalOptions
     * }
     */
    public static void CLSID_GlobalOptions(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_GlobalOptions$constants.SEGMENT, 0L, CLSID_GlobalOptions$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdGlobalInterfaceTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_StdGlobalInterfaceTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdGlobalInterfaceTable
     * }
     */
    public static GroupLayout CLSID_StdGlobalInterfaceTable$layout() {
        return CLSID_StdGlobalInterfaceTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdGlobalInterfaceTable
     * }
     */
    public static MemorySegment CLSID_StdGlobalInterfaceTable() {
        return CLSID_StdGlobalInterfaceTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdGlobalInterfaceTable
     * }
     */
    public static void CLSID_StdGlobalInterfaceTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdGlobalInterfaceTable$constants.SEGMENT, 0L, CLSID_StdGlobalInterfaceTable$constants.LAYOUT.byteSize());
    }

    private static class CLSID_MachineGlobalObjectTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_MachineGlobalObjectTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_MachineGlobalObjectTable
     * }
     */
    public static GroupLayout CLSID_MachineGlobalObjectTable$layout() {
        return CLSID_MachineGlobalObjectTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_MachineGlobalObjectTable
     * }
     */
    public static MemorySegment CLSID_MachineGlobalObjectTable() {
        return CLSID_MachineGlobalObjectTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_MachineGlobalObjectTable
     * }
     */
    public static void CLSID_MachineGlobalObjectTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_MachineGlobalObjectTable$constants.SEGMENT, 0L, CLSID_MachineGlobalObjectTable$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ActivationCapabilities$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_ActivationCapabilities").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ActivationCapabilities
     * }
     */
    public static GroupLayout CLSID_ActivationCapabilities$layout() {
        return CLSID_ActivationCapabilities$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ActivationCapabilities
     * }
     */
    public static MemorySegment CLSID_ActivationCapabilities() {
        return CLSID_ActivationCapabilities$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ActivationCapabilities
     * }
     */
    public static void CLSID_ActivationCapabilities(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ActivationCapabilities$constants.SEGMENT, 0L, CLSID_ActivationCapabilities$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ComBinding$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_ComBinding").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ComBinding
     * }
     */
    public static GroupLayout CLSID_ComBinding$layout() {
        return CLSID_ComBinding$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ComBinding
     * }
     */
    public static MemorySegment CLSID_ComBinding() {
        return CLSID_ComBinding$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ComBinding
     * }
     */
    public static void CLSID_ComBinding(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ComBinding$constants.SEGMENT, 0L, CLSID_ComBinding$constants.LAYOUT.byteSize());
    }

    private static class CLSID_StdEvent$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_StdEvent").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdEvent
     * }
     */
    public static GroupLayout CLSID_StdEvent$layout() {
        return CLSID_StdEvent$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdEvent
     * }
     */
    public static MemorySegment CLSID_StdEvent() {
        return CLSID_StdEvent$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_StdEvent
     * }
     */
    public static void CLSID_StdEvent(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_StdEvent$constants.SEGMENT, 0L, CLSID_StdEvent$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ManualResetEvent$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_ManualResetEvent").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ManualResetEvent
     * }
     */
    public static GroupLayout CLSID_ManualResetEvent$layout() {
        return CLSID_ManualResetEvent$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ManualResetEvent
     * }
     */
    public static MemorySegment CLSID_ManualResetEvent() {
        return CLSID_ManualResetEvent$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ManualResetEvent
     * }
     */
    public static void CLSID_ManualResetEvent(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ManualResetEvent$constants.SEGMENT, 0L, CLSID_ManualResetEvent$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SynchronizeContainer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_SynchronizeContainer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_SynchronizeContainer
     * }
     */
    public static GroupLayout CLSID_SynchronizeContainer$layout() {
        return CLSID_SynchronizeContainer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_SynchronizeContainer
     * }
     */
    public static MemorySegment CLSID_SynchronizeContainer() {
        return CLSID_SynchronizeContainer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_SynchronizeContainer
     * }
     */
    public static void CLSID_SynchronizeContainer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SynchronizeContainer$constants.SEGMENT, 0L, CLSID_SynchronizeContainer$constants.LAYOUT.byteSize());
    }

    private static class CLSID_AddrControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_AddrControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AddrControl
     * }
     */
    public static GroupLayout CLSID_AddrControl$layout() {
        return CLSID_AddrControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AddrControl
     * }
     */
    public static MemorySegment CLSID_AddrControl() {
        return CLSID_AddrControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_AddrControl
     * }
     */
    public static void CLSID_AddrControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_AddrControl$constants.SEGMENT, 0L, CLSID_AddrControl$constants.LAYOUT.byteSize());
    }

    private static class CLSID_ContextSwitcher$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_ContextSwitcher").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ContextSwitcher
     * }
     */
    public static GroupLayout CLSID_ContextSwitcher$layout() {
        return CLSID_ContextSwitcher$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ContextSwitcher
     * }
     */
    public static MemorySegment CLSID_ContextSwitcher() {
        return CLSID_ContextSwitcher$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_ContextSwitcher
     * }
     */
    public static void CLSID_ContextSwitcher(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_ContextSwitcher$constants.SEGMENT, 0L, CLSID_ContextSwitcher$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDFormKrnl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDFormKrnl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormKrnl
     * }
     */
    public static GroupLayout CLSID_CCDFormKrnl$layout() {
        return CLSID_CCDFormKrnl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormKrnl
     * }
     */
    public static MemorySegment CLSID_CCDFormKrnl() {
        return CLSID_CCDFormKrnl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormKrnl
     * }
     */
    public static void CLSID_CCDFormKrnl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDFormKrnl$constants.SEGMENT, 0L, CLSID_CCDFormKrnl$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDPropertyPage$layout() {
        return CLSID_CCDPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDPropertyPage() {
        return CLSID_CCDPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDPropertyPage
     * }
     */
    public static void CLSID_CCDPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDPropertyPage$constants.SEGMENT, 0L, CLSID_CCDPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDFormDialog$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDFormDialog").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormDialog
     * }
     */
    public static GroupLayout CLSID_CCDFormDialog$layout() {
        return CLSID_CCDFormDialog$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormDialog
     * }
     */
    public static MemorySegment CLSID_CCDFormDialog() {
        return CLSID_CCDFormDialog$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFormDialog
     * }
     */
    public static void CLSID_CCDFormDialog(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDFormDialog$constants.SEGMENT, 0L, CLSID_CCDFormDialog$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDCommandButton$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDCommandButton").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButton
     * }
     */
    public static GroupLayout CLSID_CCDCommandButton$layout() {
        return CLSID_CCDCommandButton$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButton
     * }
     */
    public static MemorySegment CLSID_CCDCommandButton() {
        return CLSID_CCDCommandButton$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButton
     * }
     */
    public static void CLSID_CCDCommandButton(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDCommandButton$constants.SEGMENT, 0L, CLSID_CCDCommandButton$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDComboBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDComboBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBox
     * }
     */
    public static GroupLayout CLSID_CCDComboBox$layout() {
        return CLSID_CCDComboBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBox
     * }
     */
    public static MemorySegment CLSID_CCDComboBox() {
        return CLSID_CCDComboBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBox
     * }
     */
    public static void CLSID_CCDComboBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDComboBox$constants.SEGMENT, 0L, CLSID_CCDComboBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDTextBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDTextBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBox
     * }
     */
    public static GroupLayout CLSID_CCDTextBox$layout() {
        return CLSID_CCDTextBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBox
     * }
     */
    public static MemorySegment CLSID_CCDTextBox() {
        return CLSID_CCDTextBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBox
     * }
     */
    public static void CLSID_CCDTextBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDTextBox$constants.SEGMENT, 0L, CLSID_CCDTextBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDCheckBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDCheckBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBox
     * }
     */
    public static GroupLayout CLSID_CCDCheckBox$layout() {
        return CLSID_CCDCheckBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBox
     * }
     */
    public static MemorySegment CLSID_CCDCheckBox() {
        return CLSID_CCDCheckBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBox
     * }
     */
    public static void CLSID_CCDCheckBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDCheckBox$constants.SEGMENT, 0L, CLSID_CCDCheckBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDLabel$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDLabel").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabel
     * }
     */
    public static GroupLayout CLSID_CCDLabel$layout() {
        return CLSID_CCDLabel$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabel
     * }
     */
    public static MemorySegment CLSID_CCDLabel() {
        return CLSID_CCDLabel$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabel
     * }
     */
    public static void CLSID_CCDLabel(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDLabel$constants.SEGMENT, 0L, CLSID_CCDLabel$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDOptionButton$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDOptionButton").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButton
     * }
     */
    public static GroupLayout CLSID_CCDOptionButton$layout() {
        return CLSID_CCDOptionButton$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButton
     * }
     */
    public static MemorySegment CLSID_CCDOptionButton() {
        return CLSID_CCDOptionButton$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButton
     * }
     */
    public static void CLSID_CCDOptionButton(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDOptionButton$constants.SEGMENT, 0L, CLSID_CCDOptionButton$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDListBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDListBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBox
     * }
     */
    public static GroupLayout CLSID_CCDListBox$layout() {
        return CLSID_CCDListBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBox
     * }
     */
    public static MemorySegment CLSID_CCDListBox() {
        return CLSID_CCDListBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBox
     * }
     */
    public static void CLSID_CCDListBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDListBox$constants.SEGMENT, 0L, CLSID_CCDListBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDScrollBar$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDScrollBar").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBar
     * }
     */
    public static GroupLayout CLSID_CCDScrollBar$layout() {
        return CLSID_CCDScrollBar$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBar
     * }
     */
    public static MemorySegment CLSID_CCDScrollBar() {
        return CLSID_CCDScrollBar$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBar
     * }
     */
    public static void CLSID_CCDScrollBar(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDScrollBar$constants.SEGMENT, 0L, CLSID_CCDScrollBar$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDGroupBox$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDGroupBox").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBox
     * }
     */
    public static GroupLayout CLSID_CCDGroupBox$layout() {
        return CLSID_CCDGroupBox$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBox
     * }
     */
    public static MemorySegment CLSID_CCDGroupBox() {
        return CLSID_CCDGroupBox$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBox
     * }
     */
    public static void CLSID_CCDGroupBox(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDGroupBox$constants.SEGMENT, 0L, CLSID_CCDGroupBox$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDGeneralPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDGeneralPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGeneralPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDGeneralPropertyPage$layout() {
        return CLSID_CCDGeneralPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGeneralPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDGeneralPropertyPage() {
        return CLSID_CCDGeneralPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGeneralPropertyPage
     * }
     */
    public static void CLSID_CCDGeneralPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDGeneralPropertyPage$constants.SEGMENT, 0L, CLSID_CCDGeneralPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDGenericPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDGenericPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGenericPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDGenericPropertyPage$layout() {
        return CLSID_CCDGenericPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGenericPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDGenericPropertyPage() {
        return CLSID_CCDGenericPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGenericPropertyPage
     * }
     */
    public static void CLSID_CCDGenericPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDGenericPropertyPage$constants.SEGMENT, 0L, CLSID_CCDGenericPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDFontPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDFontPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFontPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDFontPropertyPage$layout() {
        return CLSID_CCDFontPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFontPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDFontPropertyPage() {
        return CLSID_CCDFontPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDFontPropertyPage
     * }
     */
    public static void CLSID_CCDFontPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDFontPropertyPage$constants.SEGMENT, 0L, CLSID_CCDFontPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDColorPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDColorPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDColorPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDColorPropertyPage$layout() {
        return CLSID_CCDColorPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDColorPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDColorPropertyPage() {
        return CLSID_CCDColorPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDColorPropertyPage
     * }
     */
    public static void CLSID_CCDColorPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDColorPropertyPage$constants.SEGMENT, 0L, CLSID_CCDColorPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDLabelPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDLabelPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabelPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDLabelPropertyPage$layout() {
        return CLSID_CCDLabelPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabelPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDLabelPropertyPage() {
        return CLSID_CCDLabelPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDLabelPropertyPage
     * }
     */
    public static void CLSID_CCDLabelPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDLabelPropertyPage$constants.SEGMENT, 0L, CLSID_CCDLabelPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDCheckBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDCheckBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDCheckBoxPropertyPage$layout() {
        return CLSID_CCDCheckBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDCheckBoxPropertyPage() {
        return CLSID_CCDCheckBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCheckBoxPropertyPage
     * }
     */
    public static void CLSID_CCDCheckBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDCheckBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDCheckBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDTextBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDTextBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDTextBoxPropertyPage$layout() {
        return CLSID_CCDTextBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDTextBoxPropertyPage() {
        return CLSID_CCDTextBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDTextBoxPropertyPage
     * }
     */
    public static void CLSID_CCDTextBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDTextBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDTextBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDOptionButtonPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDOptionButtonPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButtonPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDOptionButtonPropertyPage$layout() {
        return CLSID_CCDOptionButtonPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButtonPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDOptionButtonPropertyPage() {
        return CLSID_CCDOptionButtonPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDOptionButtonPropertyPage
     * }
     */
    public static void CLSID_CCDOptionButtonPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDOptionButtonPropertyPage$constants.SEGMENT, 0L, CLSID_CCDOptionButtonPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDListBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDListBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDListBoxPropertyPage$layout() {
        return CLSID_CCDListBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDListBoxPropertyPage() {
        return CLSID_CCDListBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDListBoxPropertyPage
     * }
     */
    public static void CLSID_CCDListBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDListBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDListBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDCommandButtonPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDCommandButtonPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButtonPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDCommandButtonPropertyPage$layout() {
        return CLSID_CCDCommandButtonPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButtonPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDCommandButtonPropertyPage() {
        return CLSID_CCDCommandButtonPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDCommandButtonPropertyPage
     * }
     */
    public static void CLSID_CCDCommandButtonPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDCommandButtonPropertyPage$constants.SEGMENT, 0L, CLSID_CCDCommandButtonPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDComboBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDComboBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDComboBoxPropertyPage$layout() {
        return CLSID_CCDComboBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDComboBoxPropertyPage() {
        return CLSID_CCDComboBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDComboBoxPropertyPage
     * }
     */
    public static void CLSID_CCDComboBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDComboBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDComboBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDScrollBarPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDScrollBarPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBarPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDScrollBarPropertyPage$layout() {
        return CLSID_CCDScrollBarPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBarPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDScrollBarPropertyPage() {
        return CLSID_CCDScrollBarPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDScrollBarPropertyPage
     * }
     */
    public static void CLSID_CCDScrollBarPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDScrollBarPropertyPage$constants.SEGMENT, 0L, CLSID_CCDScrollBarPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDGroupBoxPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDGroupBoxPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBoxPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDGroupBoxPropertyPage$layout() {
        return CLSID_CCDGroupBoxPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBoxPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDGroupBoxPropertyPage() {
        return CLSID_CCDGroupBoxPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDGroupBoxPropertyPage
     * }
     */
    public static void CLSID_CCDGroupBoxPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDGroupBoxPropertyPage$constants.SEGMENT, 0L, CLSID_CCDGroupBoxPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CCDXObjectPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CCDXObjectPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDXObjectPropertyPage
     * }
     */
    public static GroupLayout CLSID_CCDXObjectPropertyPage$layout() {
        return CLSID_CCDXObjectPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDXObjectPropertyPage
     * }
     */
    public static MemorySegment CLSID_CCDXObjectPropertyPage() {
        return CLSID_CCDXObjectPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CCDXObjectPropertyPage
     * }
     */
    public static void CLSID_CCDXObjectPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CCDXObjectPropertyPage$constants.SEGMENT, 0L, CLSID_CCDXObjectPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CStdPropertyFrame$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CStdPropertyFrame").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CStdPropertyFrame
     * }
     */
    public static GroupLayout CLSID_CStdPropertyFrame$layout() {
        return CLSID_CStdPropertyFrame$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CStdPropertyFrame
     * }
     */
    public static MemorySegment CLSID_CStdPropertyFrame() {
        return CLSID_CStdPropertyFrame$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CStdPropertyFrame
     * }
     */
    public static void CLSID_CStdPropertyFrame(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CStdPropertyFrame$constants.SEGMENT, 0L, CLSID_CStdPropertyFrame$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CFormPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CFormPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CFormPropertyPage
     * }
     */
    public static GroupLayout CLSID_CFormPropertyPage$layout() {
        return CLSID_CFormPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CFormPropertyPage
     * }
     */
    public static MemorySegment CLSID_CFormPropertyPage() {
        return CLSID_CFormPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CFormPropertyPage
     * }
     */
    public static void CLSID_CFormPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CFormPropertyPage$constants.SEGMENT, 0L, CLSID_CFormPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CGridPropertyPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CGridPropertyPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CGridPropertyPage
     * }
     */
    public static GroupLayout CLSID_CGridPropertyPage$layout() {
        return CLSID_CGridPropertyPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CGridPropertyPage
     * }
     */
    public static MemorySegment CLSID_CGridPropertyPage() {
        return CLSID_CGridPropertyPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CGridPropertyPage
     * }
     */
    public static void CLSID_CGridPropertyPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CGridPropertyPage$constants.SEGMENT, 0L, CLSID_CGridPropertyPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CWSJArticlePage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CWSJArticlePage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CWSJArticlePage
     * }
     */
    public static GroupLayout CLSID_CWSJArticlePage$layout() {
        return CLSID_CWSJArticlePage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CWSJArticlePage
     * }
     */
    public static MemorySegment CLSID_CWSJArticlePage() {
        return CLSID_CWSJArticlePage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CWSJArticlePage
     * }
     */
    public static void CLSID_CWSJArticlePage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CWSJArticlePage$constants.SEGMENT, 0L, CLSID_CWSJArticlePage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_CSystemPage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_CSystemPage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CSystemPage
     * }
     */
    public static GroupLayout CLSID_CSystemPage$layout() {
        return CLSID_CSystemPage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CSystemPage
     * }
     */
    public static MemorySegment CLSID_CSystemPage() {
        return CLSID_CSystemPage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_CSystemPage
     * }
     */
    public static void CLSID_CSystemPage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_CSystemPage$constants.SEGMENT, 0L, CLSID_CSystemPage$constants.LAYOUT.byteSize());
    }

    private static class CLSID_IdentityUnmarshal$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_IdentityUnmarshal").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_IdentityUnmarshal
     * }
     */
    public static GroupLayout CLSID_IdentityUnmarshal$layout() {
        return CLSID_IdentityUnmarshal$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_IdentityUnmarshal
     * }
     */
    public static MemorySegment CLSID_IdentityUnmarshal() {
        return CLSID_IdentityUnmarshal$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_IdentityUnmarshal
     * }
     */
    public static void CLSID_IdentityUnmarshal(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_IdentityUnmarshal$constants.SEGMENT, 0L, CLSID_IdentityUnmarshal$constants.LAYOUT.byteSize());
    }

    private static class CLSID_InProcFreeMarshaler$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_InProcFreeMarshaler").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_InProcFreeMarshaler
     * }
     */
    public static GroupLayout CLSID_InProcFreeMarshaler$layout() {
        return CLSID_InProcFreeMarshaler$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_InProcFreeMarshaler
     * }
     */
    public static MemorySegment CLSID_InProcFreeMarshaler() {
        return CLSID_InProcFreeMarshaler$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_InProcFreeMarshaler
     * }
     */
    public static void CLSID_InProcFreeMarshaler(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_InProcFreeMarshaler$constants.SEGMENT, 0L, CLSID_InProcFreeMarshaler$constants.LAYOUT.byteSize());
    }

    private static class CLSID_Picture_Metafile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_Picture_Metafile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Metafile
     * }
     */
    public static GroupLayout CLSID_Picture_Metafile$layout() {
        return CLSID_Picture_Metafile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Metafile
     * }
     */
    public static MemorySegment CLSID_Picture_Metafile() {
        return CLSID_Picture_Metafile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Metafile
     * }
     */
    public static void CLSID_Picture_Metafile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_Picture_Metafile$constants.SEGMENT, 0L, CLSID_Picture_Metafile$constants.LAYOUT.byteSize());
    }

    private static class CLSID_Picture_EnhMetafile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_Picture_EnhMetafile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_EnhMetafile
     * }
     */
    public static GroupLayout CLSID_Picture_EnhMetafile$layout() {
        return CLSID_Picture_EnhMetafile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_EnhMetafile
     * }
     */
    public static MemorySegment CLSID_Picture_EnhMetafile() {
        return CLSID_Picture_EnhMetafile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_EnhMetafile
     * }
     */
    public static void CLSID_Picture_EnhMetafile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_Picture_EnhMetafile$constants.SEGMENT, 0L, CLSID_Picture_EnhMetafile$constants.LAYOUT.byteSize());
    }

    private static class CLSID_Picture_Dib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_Picture_Dib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Dib
     * }
     */
    public static GroupLayout CLSID_Picture_Dib$layout() {
        return CLSID_Picture_Dib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Dib
     * }
     */
    public static MemorySegment CLSID_Picture_Dib() {
        return CLSID_Picture_Dib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const CLSID CLSID_Picture_Dib
     * }
     */
    public static void CLSID_Picture_Dib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_Picture_Dib$constants.SEGMENT, 0L, CLSID_Picture_Dib$constants.LAYOUT.byteSize());
    }

    private static class GUID_TRISTATE$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("GUID_TRISTATE").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_TRISTATE
     * }
     */
    public static GroupLayout GUID_TRISTATE$layout() {
        return GUID_TRISTATE$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_TRISTATE
     * }
     */
    public static MemorySegment GUID_TRISTATE() {
        return GUID_TRISTATE$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_TRISTATE
     * }
     */
    public static void GUID_TRISTATE(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_TRISTATE$constants.SEGMENT, 0L, GUID_TRISTATE$constants.LAYOUT.byteSize());
    }

    private static class CoGetMalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetMalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc)
     * }
     */
    public static FunctionDescriptor CoGetMalloc$descriptor() {
        return CoGetMalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc)
     * }
     */
    public static MethodHandle CoGetMalloc$handle() {
        return CoGetMalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc)
     * }
     */
    public static MemorySegment CoGetMalloc$address() {
        return CoGetMalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetMalloc(DWORD dwMemContext, LPMALLOC *ppMalloc)
     * }
     */
    public static int CoGetMalloc(int dwMemContext, MemorySegment ppMalloc) {
        var mh$ = CoGetMalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetMalloc", dwMemContext, ppMalloc);
            }
            return (int)mh$.invokeExact(dwMemContext, ppMalloc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateStreamOnHGlobal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateStreamOnHGlobal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
     * }
     */
    public static FunctionDescriptor CreateStreamOnHGlobal$descriptor() {
        return CreateStreamOnHGlobal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
     * }
     */
    public static MethodHandle CreateStreamOnHGlobal$handle() {
        return CreateStreamOnHGlobal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
     * }
     */
    public static MemorySegment CreateStreamOnHGlobal$address() {
        return CreateStreamOnHGlobal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateStreamOnHGlobal(HGLOBAL hGlobal, BOOL fDeleteOnRelease, LPSTREAM *ppstm)
     * }
     */
    public static int CreateStreamOnHGlobal(MemorySegment hGlobal, int fDeleteOnRelease, MemorySegment ppstm) {
        var mh$ = CreateStreamOnHGlobal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateStreamOnHGlobal", hGlobal, fDeleteOnRelease, ppstm);
            }
            return (int)mh$.invokeExact(hGlobal, fDeleteOnRelease, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetHGlobalFromStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetHGlobalFromStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal)
     * }
     */
    public static FunctionDescriptor GetHGlobalFromStream$descriptor() {
        return GetHGlobalFromStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal)
     * }
     */
    public static MethodHandle GetHGlobalFromStream$handle() {
        return GetHGlobalFromStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal)
     * }
     */
    public static MemorySegment GetHGlobalFromStream$address() {
        return GetHGlobalFromStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetHGlobalFromStream(LPSTREAM pstm, HGLOBAL *phglobal)
     * }
     */
    public static int GetHGlobalFromStream(MemorySegment pstm, MemorySegment phglobal) {
        var mh$ = GetHGlobalFromStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetHGlobalFromStream", pstm, phglobal);
            }
            return (int)mh$.invokeExact(pstm, phglobal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoUninitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoUninitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoUninitialize()
     * }
     */
    public static FunctionDescriptor CoUninitialize$descriptor() {
        return CoUninitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoUninitialize()
     * }
     */
    public static MethodHandle CoUninitialize$handle() {
        return CoUninitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoUninitialize()
     * }
     */
    public static MemorySegment CoUninitialize$address() {
        return CoUninitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoUninitialize()
     * }
     */
    public static void CoUninitialize() {
        var mh$ = CoUninitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoUninitialize");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCurrentProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetCurrentProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD CoGetCurrentProcess()
     * }
     */
    public static FunctionDescriptor CoGetCurrentProcess$descriptor() {
        return CoGetCurrentProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD CoGetCurrentProcess()
     * }
     */
    public static MethodHandle CoGetCurrentProcess$handle() {
        return CoGetCurrentProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD CoGetCurrentProcess()
     * }
     */
    public static MemorySegment CoGetCurrentProcess$address() {
        return CoGetCurrentProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD CoGetCurrentProcess()
     * }
     */
    public static int CoGetCurrentProcess() {
        var mh$ = CoGetCurrentProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCurrentProcess");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInitializeEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInitializeEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
     * }
     */
    public static FunctionDescriptor CoInitializeEx$descriptor() {
        return CoInitializeEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
     * }
     */
    public static MethodHandle CoInitializeEx$handle() {
        return CoInitializeEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
     * }
     */
    public static MemorySegment CoInitializeEx$address() {
        return CoInitializeEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInitializeEx(LPVOID pvReserved, DWORD dwCoInit)
     * }
     */
    public static int CoInitializeEx(MemorySegment pvReserved, int dwCoInit) {
        var mh$ = CoInitializeEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInitializeEx", pvReserved, dwCoInit);
            }
            return (int)mh$.invokeExact(pvReserved, dwCoInit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCallerTID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetCallerTID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallerTID(LPDWORD lpdwTID)
     * }
     */
    public static FunctionDescriptor CoGetCallerTID$descriptor() {
        return CoGetCallerTID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallerTID(LPDWORD lpdwTID)
     * }
     */
    public static MethodHandle CoGetCallerTID$handle() {
        return CoGetCallerTID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallerTID(LPDWORD lpdwTID)
     * }
     */
    public static MemorySegment CoGetCallerTID$address() {
        return CoGetCallerTID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetCallerTID(LPDWORD lpdwTID)
     * }
     */
    public static int CoGetCallerTID(MemorySegment lpdwTID) {
        var mh$ = CoGetCallerTID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCallerTID", lpdwTID);
            }
            return (int)mh$.invokeExact(lpdwTID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCurrentLogicalThreadId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetCurrentLogicalThreadId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCurrentLogicalThreadId(GUID *pguid)
     * }
     */
    public static FunctionDescriptor CoGetCurrentLogicalThreadId$descriptor() {
        return CoGetCurrentLogicalThreadId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCurrentLogicalThreadId(GUID *pguid)
     * }
     */
    public static MethodHandle CoGetCurrentLogicalThreadId$handle() {
        return CoGetCurrentLogicalThreadId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCurrentLogicalThreadId(GUID *pguid)
     * }
     */
    public static MemorySegment CoGetCurrentLogicalThreadId$address() {
        return CoGetCurrentLogicalThreadId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetCurrentLogicalThreadId(GUID *pguid)
     * }
     */
    public static int CoGetCurrentLogicalThreadId(MemorySegment pguid) {
        var mh$ = CoGetCurrentLogicalThreadId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCurrentLogicalThreadId", pguid);
            }
            return (int)mh$.invokeExact(pguid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetContextToken {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetContextToken");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetContextToken(ULONG_PTR *pToken)
     * }
     */
    public static FunctionDescriptor CoGetContextToken$descriptor() {
        return CoGetContextToken.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetContextToken(ULONG_PTR *pToken)
     * }
     */
    public static MethodHandle CoGetContextToken$handle() {
        return CoGetContextToken.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetContextToken(ULONG_PTR *pToken)
     * }
     */
    public static MemorySegment CoGetContextToken$address() {
        return CoGetContextToken.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetContextToken(ULONG_PTR *pToken)
     * }
     */
    public static int CoGetContextToken(MemorySegment pToken) {
        var mh$ = CoGetContextToken.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetContextToken", pToken);
            }
            return (int)mh$.invokeExact(pToken);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetDefaultContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetDefaultContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetDefaultContext(APTTYPE aptType, const IID *const riid, void **ppv)
     * }
     */
    public static FunctionDescriptor CoGetDefaultContext$descriptor() {
        return CoGetDefaultContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetDefaultContext(APTTYPE aptType, const IID *const riid, void **ppv)
     * }
     */
    public static MethodHandle CoGetDefaultContext$handle() {
        return CoGetDefaultContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetDefaultContext(APTTYPE aptType, const IID *const riid, void **ppv)
     * }
     */
    public static MemorySegment CoGetDefaultContext$address() {
        return CoGetDefaultContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetDefaultContext(APTTYPE aptType, const IID *const riid, void **ppv)
     * }
     */
    public static int CoGetDefaultContext(int aptType, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetDefaultContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetDefaultContext", aptType, riid, ppv);
            }
            return (int)mh$.invokeExact(aptType, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetApartmentType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetApartmentType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetApartmentType(APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier)
     * }
     */
    public static FunctionDescriptor CoGetApartmentType$descriptor() {
        return CoGetApartmentType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetApartmentType(APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier)
     * }
     */
    public static MethodHandle CoGetApartmentType$handle() {
        return CoGetApartmentType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetApartmentType(APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier)
     * }
     */
    public static MemorySegment CoGetApartmentType$address() {
        return CoGetApartmentType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetApartmentType(APTTYPE *pAptType, APTTYPEQUALIFIER *pAptQualifier)
     * }
     */
    public static int CoGetApartmentType(MemorySegment pAptType, MemorySegment pAptQualifier) {
        var mh$ = CoGetApartmentType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetApartmentType", pAptType, pAptQualifier);
            }
            return (int)mh$.invokeExact(pAptType, pAptQualifier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagServerInformation {
     *     DWORD dwServerPid;
     *     DWORD dwServerTid;
     *     UINT64 ui64ServerAddress;
     * } *PServerInformation
     * }
     */
    public static final AddressLayout PServerInformation = winapi.C_POINTER;

    private static class CoDecodeProxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoDecodeProxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDecodeProxy(DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation)
     * }
     */
    public static FunctionDescriptor CoDecodeProxy$descriptor() {
        return CoDecodeProxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDecodeProxy(DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation)
     * }
     */
    public static MethodHandle CoDecodeProxy$handle() {
        return CoDecodeProxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDecodeProxy(DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation)
     * }
     */
    public static MemorySegment CoDecodeProxy$address() {
        return CoDecodeProxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDecodeProxy(DWORD dwClientPid, UINT64 ui64ProxyAddress, PServerInformation pServerInformation)
     * }
     */
    public static int CoDecodeProxy(int dwClientPid, long ui64ProxyAddress, MemorySegment pServerInformation) {
        var mh$ = CoDecodeProxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDecodeProxy", dwClientPid, ui64ProxyAddress, pServerInformation);
            }
            return (int)mh$.invokeExact(dwClientPid, ui64ProxyAddress, pServerInformation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct CO_MTA_USAGE_COOKIE__ {
     *     int unused;
     * } *CO_MTA_USAGE_COOKIE
     * }
     */
    public static final AddressLayout CO_MTA_USAGE_COOKIE = winapi.C_POINTER;

    private static class CoIncrementMTAUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoIncrementMTAUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *pCookie)
     * }
     */
    public static FunctionDescriptor CoIncrementMTAUsage$descriptor() {
        return CoIncrementMTAUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *pCookie)
     * }
     */
    public static MethodHandle CoIncrementMTAUsage$handle() {
        return CoIncrementMTAUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *pCookie)
     * }
     */
    public static MemorySegment CoIncrementMTAUsage$address() {
        return CoIncrementMTAUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE *pCookie)
     * }
     */
    public static int CoIncrementMTAUsage(MemorySegment pCookie) {
        var mh$ = CoIncrementMTAUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoIncrementMTAUsage", pCookie);
            }
            return (int)mh$.invokeExact(pCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDecrementMTAUsage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoDecrementMTAUsage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)
     * }
     */
    public static FunctionDescriptor CoDecrementMTAUsage$descriptor() {
        return CoDecrementMTAUsage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)
     * }
     */
    public static MethodHandle CoDecrementMTAUsage$handle() {
        return CoDecrementMTAUsage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)
     * }
     */
    public static MemorySegment CoDecrementMTAUsage$address() {
        return CoDecrementMTAUsage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE Cookie)
     * }
     */
    public static int CoDecrementMTAUsage(MemorySegment Cookie) {
        var mh$ = CoDecrementMTAUsage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDecrementMTAUsage", Cookie);
            }
            return (int)mh$.invokeExact(Cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoAllowUnmarshalerCLSID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoAllowUnmarshalerCLSID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowUnmarshalerCLSID(const IID *const clsid)
     * }
     */
    public static FunctionDescriptor CoAllowUnmarshalerCLSID$descriptor() {
        return CoAllowUnmarshalerCLSID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowUnmarshalerCLSID(const IID *const clsid)
     * }
     */
    public static MethodHandle CoAllowUnmarshalerCLSID$handle() {
        return CoAllowUnmarshalerCLSID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoAllowUnmarshalerCLSID(const IID *const clsid)
     * }
     */
    public static MemorySegment CoAllowUnmarshalerCLSID$address() {
        return CoAllowUnmarshalerCLSID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoAllowUnmarshalerCLSID(const IID *const clsid)
     * }
     */
    public static int CoAllowUnmarshalerCLSID(MemorySegment clsid) {
        var mh$ = CoAllowUnmarshalerCLSID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoAllowUnmarshalerCLSID", clsid);
            }
            return (int)mh$.invokeExact(clsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetObjectContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetObjectContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObjectContext(const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoGetObjectContext$descriptor() {
        return CoGetObjectContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObjectContext(const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoGetObjectContext$handle() {
        return CoGetObjectContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetObjectContext(const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoGetObjectContext$address() {
        return CoGetObjectContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetObjectContext(const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoGetObjectContext(MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetObjectContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetObjectContext", riid, ppv);
            }
            return (int)mh$.invokeExact(riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetClassObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObject(const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoGetClassObject$descriptor() {
        return CoGetClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObject(const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoGetClassObject$handle() {
        return CoGetClassObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObject(const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoGetClassObject$address() {
        return CoGetClassObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetClassObject(const IID *const rclsid, DWORD dwClsContext, LPVOID pvReserved, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoGetClassObject(MemorySegment rclsid, int dwClsContext, MemorySegment pvReserved, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoGetClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetClassObject", rclsid, dwClsContext, pvReserved, riid, ppv);
            }
            return (int)mh$.invokeExact(rclsid, dwClsContext, pvReserved, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoRegisterClassObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterClassObject(const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister)
     * }
     */
    public static FunctionDescriptor CoRegisterClassObject$descriptor() {
        return CoRegisterClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterClassObject(const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister)
     * }
     */
    public static MethodHandle CoRegisterClassObject$handle() {
        return CoRegisterClassObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterClassObject(const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister)
     * }
     */
    public static MemorySegment CoRegisterClassObject$address() {
        return CoRegisterClassObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterClassObject(const IID *const rclsid, LPUNKNOWN pUnk, DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister)
     * }
     */
    public static int CoRegisterClassObject(MemorySegment rclsid, MemorySegment pUnk, int dwClsContext, int flags, MemorySegment lpdwRegister) {
        var mh$ = CoRegisterClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterClassObject", rclsid, pUnk, dwClsContext, flags, lpdwRegister);
            }
            return (int)mh$.invokeExact(rclsid, pUnk, dwClsContext, flags, lpdwRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoRevokeClassObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeClassObject(DWORD dwRegister)
     * }
     */
    public static FunctionDescriptor CoRevokeClassObject$descriptor() {
        return CoRevokeClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeClassObject(DWORD dwRegister)
     * }
     */
    public static MethodHandle CoRevokeClassObject$handle() {
        return CoRevokeClassObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeClassObject(DWORD dwRegister)
     * }
     */
    public static MemorySegment CoRevokeClassObject$address() {
        return CoRevokeClassObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeClassObject(DWORD dwRegister)
     * }
     */
    public static int CoRevokeClassObject(int dwRegister) {
        var mh$ = CoRevokeClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeClassObject", dwRegister);
            }
            return (int)mh$.invokeExact(dwRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoResumeClassObjects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoResumeClassObjects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoResumeClassObjects()
     * }
     */
    public static FunctionDescriptor CoResumeClassObjects$descriptor() {
        return CoResumeClassObjects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoResumeClassObjects()
     * }
     */
    public static MethodHandle CoResumeClassObjects$handle() {
        return CoResumeClassObjects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoResumeClassObjects()
     * }
     */
    public static MemorySegment CoResumeClassObjects$address() {
        return CoResumeClassObjects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoResumeClassObjects()
     * }
     */
    public static int CoResumeClassObjects() {
        var mh$ = CoResumeClassObjects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoResumeClassObjects");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoSuspendClassObjects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoSuspendClassObjects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoSuspendClassObjects()
     * }
     */
    public static FunctionDescriptor CoSuspendClassObjects$descriptor() {
        return CoSuspendClassObjects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoSuspendClassObjects()
     * }
     */
    public static MethodHandle CoSuspendClassObjects$handle() {
        return CoSuspendClassObjects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoSuspendClassObjects()
     * }
     */
    public static MemorySegment CoSuspendClassObjects$address() {
        return CoSuspendClassObjects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoSuspendClassObjects()
     * }
     */
    public static int CoSuspendClassObjects() {
        var mh$ = CoSuspendClassObjects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoSuspendClassObjects");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoAddRefServerProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoAddRefServerProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG CoAddRefServerProcess()
     * }
     */
    public static FunctionDescriptor CoAddRefServerProcess$descriptor() {
        return CoAddRefServerProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG CoAddRefServerProcess()
     * }
     */
    public static MethodHandle CoAddRefServerProcess$handle() {
        return CoAddRefServerProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG CoAddRefServerProcess()
     * }
     */
    public static MemorySegment CoAddRefServerProcess$address() {
        return CoAddRefServerProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG CoAddRefServerProcess()
     * }
     */
    public static int CoAddRefServerProcess() {
        var mh$ = CoAddRefServerProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoAddRefServerProcess");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoReleaseServerProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoReleaseServerProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG CoReleaseServerProcess()
     * }
     */
    public static FunctionDescriptor CoReleaseServerProcess$descriptor() {
        return CoReleaseServerProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG CoReleaseServerProcess()
     * }
     */
    public static MethodHandle CoReleaseServerProcess$handle() {
        return CoReleaseServerProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG CoReleaseServerProcess()
     * }
     */
    public static MemorySegment CoReleaseServerProcess$address() {
        return CoReleaseServerProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG CoReleaseServerProcess()
     * }
     */
    public static int CoReleaseServerProcess() {
        var mh$ = CoReleaseServerProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoReleaseServerProcess");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetPSClsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetPSClsid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetPSClsid(const IID *const riid, CLSID *pClsid)
     * }
     */
    public static FunctionDescriptor CoGetPSClsid$descriptor() {
        return CoGetPSClsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetPSClsid(const IID *const riid, CLSID *pClsid)
     * }
     */
    public static MethodHandle CoGetPSClsid$handle() {
        return CoGetPSClsid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetPSClsid(const IID *const riid, CLSID *pClsid)
     * }
     */
    public static MemorySegment CoGetPSClsid$address() {
        return CoGetPSClsid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetPSClsid(const IID *const riid, CLSID *pClsid)
     * }
     */
    public static int CoGetPSClsid(MemorySegment riid, MemorySegment pClsid) {
        var mh$ = CoGetPSClsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetPSClsid", riid, pClsid);
            }
            return (int)mh$.invokeExact(riid, pClsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterPSClsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoRegisterPSClsid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterPSClsid(const IID *const riid, const IID *const rclsid)
     * }
     */
    public static FunctionDescriptor CoRegisterPSClsid$descriptor() {
        return CoRegisterPSClsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterPSClsid(const IID *const riid, const IID *const rclsid)
     * }
     */
    public static MethodHandle CoRegisterPSClsid$handle() {
        return CoRegisterPSClsid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterPSClsid(const IID *const riid, const IID *const rclsid)
     * }
     */
    public static MemorySegment CoRegisterPSClsid$address() {
        return CoRegisterPSClsid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterPSClsid(const IID *const riid, const IID *const rclsid)
     * }
     */
    public static int CoRegisterPSClsid(MemorySegment riid, MemorySegment rclsid) {
        var mh$ = CoRegisterPSClsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterPSClsid", riid, rclsid);
            }
            return (int)mh$.invokeExact(riid, rclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterSurrogate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoRegisterSurrogate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate)
     * }
     */
    public static FunctionDescriptor CoRegisterSurrogate$descriptor() {
        return CoRegisterSurrogate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate)
     * }
     */
    public static MethodHandle CoRegisterSurrogate$handle() {
        return CoRegisterSurrogate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate)
     * }
     */
    public static MemorySegment CoRegisterSurrogate$address() {
        return CoRegisterSurrogate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterSurrogate(LPSURROGATE pSurrogate)
     * }
     */
    public static int CoRegisterSurrogate(MemorySegment pSurrogate) {
        var mh$ = CoRegisterSurrogate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterSurrogate", pSurrogate);
            }
            return (int)mh$.invokeExact(pSurrogate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetMarshalSizeMax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetMarshalSizeMax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMarshalSizeMax(ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static FunctionDescriptor CoGetMarshalSizeMax$descriptor() {
        return CoGetMarshalSizeMax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMarshalSizeMax(ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static MethodHandle CoGetMarshalSizeMax$handle() {
        return CoGetMarshalSizeMax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetMarshalSizeMax(ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static MemorySegment CoGetMarshalSizeMax$address() {
        return CoGetMarshalSizeMax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetMarshalSizeMax(ULONG *pulSize, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static int CoGetMarshalSizeMax(MemorySegment pulSize, MemorySegment riid, MemorySegment pUnk, int dwDestContext, MemorySegment pvDestContext, int mshlflags) {
        var mh$ = CoGetMarshalSizeMax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetMarshalSizeMax", pulSize, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
            }
            return (int)mh$.invokeExact(pulSize, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoMarshalInterface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoMarshalInterface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterface(LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static FunctionDescriptor CoMarshalInterface$descriptor() {
        return CoMarshalInterface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterface(LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static MethodHandle CoMarshalInterface$handle() {
        return CoMarshalInterface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterface(LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static MemorySegment CoMarshalInterface$address() {
        return CoMarshalInterface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterface(LPSTREAM pStm, const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags)
     * }
     */
    public static int CoMarshalInterface(MemorySegment pStm, MemorySegment riid, MemorySegment pUnk, int dwDestContext, MemorySegment pvDestContext, int mshlflags) {
        var mh$ = CoMarshalInterface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoMarshalInterface", pStm, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
            }
            return (int)mh$.invokeExact(pStm, riid, pUnk, dwDestContext, pvDestContext, mshlflags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoUnmarshalInterface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoUnmarshalInterface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalInterface(LPSTREAM pStm, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoUnmarshalInterface$descriptor() {
        return CoUnmarshalInterface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalInterface(LPSTREAM pStm, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoUnmarshalInterface$handle() {
        return CoUnmarshalInterface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalInterface(LPSTREAM pStm, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoUnmarshalInterface$address() {
        return CoUnmarshalInterface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalInterface(LPSTREAM pStm, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoUnmarshalInterface(MemorySegment pStm, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoUnmarshalInterface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoUnmarshalInterface", pStm, riid, ppv);
            }
            return (int)mh$.invokeExact(pStm, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoMarshalHresult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoMarshalHresult");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalHresult(LPSTREAM pstm, HRESULT hresult)
     * }
     */
    public static FunctionDescriptor CoMarshalHresult$descriptor() {
        return CoMarshalHresult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalHresult(LPSTREAM pstm, HRESULT hresult)
     * }
     */
    public static MethodHandle CoMarshalHresult$handle() {
        return CoMarshalHresult.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalHresult(LPSTREAM pstm, HRESULT hresult)
     * }
     */
    public static MemorySegment CoMarshalHresult$address() {
        return CoMarshalHresult.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoMarshalHresult(LPSTREAM pstm, HRESULT hresult)
     * }
     */
    public static int CoMarshalHresult(MemorySegment pstm, int hresult) {
        var mh$ = CoMarshalHresult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoMarshalHresult", pstm, hresult);
            }
            return (int)mh$.invokeExact(pstm, hresult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoUnmarshalHresult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoUnmarshalHresult");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult)
     * }
     */
    public static FunctionDescriptor CoUnmarshalHresult$descriptor() {
        return CoUnmarshalHresult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult)
     * }
     */
    public static MethodHandle CoUnmarshalHresult$handle() {
        return CoUnmarshalHresult.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult)
     * }
     */
    public static MemorySegment CoUnmarshalHresult$address() {
        return CoUnmarshalHresult.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoUnmarshalHresult(LPSTREAM pstm, HRESULT *phresult)
     * }
     */
    public static int CoUnmarshalHresult(MemorySegment pstm, MemorySegment phresult) {
        var mh$ = CoUnmarshalHresult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoUnmarshalHresult", pstm, phresult);
            }
            return (int)mh$.invokeExact(pstm, phresult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoReleaseMarshalData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoReleaseMarshalData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoReleaseMarshalData(LPSTREAM pStm)
     * }
     */
    public static FunctionDescriptor CoReleaseMarshalData$descriptor() {
        return CoReleaseMarshalData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoReleaseMarshalData(LPSTREAM pStm)
     * }
     */
    public static MethodHandle CoReleaseMarshalData$handle() {
        return CoReleaseMarshalData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoReleaseMarshalData(LPSTREAM pStm)
     * }
     */
    public static MemorySegment CoReleaseMarshalData$address() {
        return CoReleaseMarshalData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoReleaseMarshalData(LPSTREAM pStm)
     * }
     */
    public static int CoReleaseMarshalData(MemorySegment pStm) {
        var mh$ = CoReleaseMarshalData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoReleaseMarshalData", pStm);
            }
            return (int)mh$.invokeExact(pStm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDisconnectObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoDisconnectObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoDisconnectObject$descriptor() {
        return CoDisconnectObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoDisconnectObject$handle() {
        return CoDisconnectObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoDisconnectObject$address() {
        return CoDisconnectObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved)
     * }
     */
    public static int CoDisconnectObject(MemorySegment pUnk, int dwReserved) {
        var mh$ = CoDisconnectObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDisconnectObject", pUnk, dwReserved);
            }
            return (int)mh$.invokeExact(pUnk, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoLockObjectExternal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoLockObjectExternal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases)
     * }
     */
    public static FunctionDescriptor CoLockObjectExternal$descriptor() {
        return CoLockObjectExternal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases)
     * }
     */
    public static MethodHandle CoLockObjectExternal$handle() {
        return CoLockObjectExternal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases)
     * }
     */
    public static MemorySegment CoLockObjectExternal$address() {
        return CoLockObjectExternal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases)
     * }
     */
    public static int CoLockObjectExternal(MemorySegment pUnk, int fLock, int fLastUnlockReleases) {
        var mh$ = CoLockObjectExternal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoLockObjectExternal", pUnk, fLock, fLastUnlockReleases);
            }
            return (int)mh$.invokeExact(pUnk, fLock, fLastUnlockReleases);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetStandardMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetStandardMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStandardMarshal(const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal)
     * }
     */
    public static FunctionDescriptor CoGetStandardMarshal$descriptor() {
        return CoGetStandardMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStandardMarshal(const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal)
     * }
     */
    public static MethodHandle CoGetStandardMarshal$handle() {
        return CoGetStandardMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStandardMarshal(const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal)
     * }
     */
    public static MemorySegment CoGetStandardMarshal$address() {
        return CoGetStandardMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetStandardMarshal(const IID *const riid, LPUNKNOWN pUnk, DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags, LPMARSHAL *ppMarshal)
     * }
     */
    public static int CoGetStandardMarshal(MemorySegment riid, MemorySegment pUnk, int dwDestContext, MemorySegment pvDestContext, int mshlflags, MemorySegment ppMarshal) {
        var mh$ = CoGetStandardMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetStandardMarshal", riid, pUnk, dwDestContext, pvDestContext, mshlflags, ppMarshal);
            }
            return (int)mh$.invokeExact(riid, pUnk, dwDestContext, pvDestContext, mshlflags, ppMarshal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetStdMarshalEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetStdMarshalEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner)
     * }
     */
    public static FunctionDescriptor CoGetStdMarshalEx$descriptor() {
        return CoGetStdMarshalEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner)
     * }
     */
    public static MethodHandle CoGetStdMarshalEx$handle() {
        return CoGetStdMarshalEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner)
     * }
     */
    public static MemorySegment CoGetStdMarshalEx$address() {
        return CoGetStdMarshalEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetStdMarshalEx(LPUNKNOWN pUnkOuter, DWORD smexflags, LPUNKNOWN *ppUnkInner)
     * }
     */
    public static int CoGetStdMarshalEx(MemorySegment pUnkOuter, int smexflags, MemorySegment ppUnkInner) {
        var mh$ = CoGetStdMarshalEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetStdMarshalEx", pUnkOuter, smexflags, ppUnkInner);
            }
            return (int)mh$.invokeExact(pUnkOuter, smexflags, ppUnkInner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SMEXF_SERVER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSTDMSHLFLAGS.SMEXF_SERVER = 1
     * }
     */
    public static int SMEXF_SERVER() {
        return SMEXF_SERVER;
    }
    private static final int SMEXF_HANDLER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSTDMSHLFLAGS.SMEXF_HANDLER = 2
     * }
     */
    public static int SMEXF_HANDLER() {
        return SMEXF_HANDLER;
    }

    private static class CoIsHandlerConnected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoIsHandlerConnected");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL CoIsHandlerConnected(LPUNKNOWN pUnk)
     * }
     */
    public static FunctionDescriptor CoIsHandlerConnected$descriptor() {
        return CoIsHandlerConnected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL CoIsHandlerConnected(LPUNKNOWN pUnk)
     * }
     */
    public static MethodHandle CoIsHandlerConnected$handle() {
        return CoIsHandlerConnected.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL CoIsHandlerConnected(LPUNKNOWN pUnk)
     * }
     */
    public static MemorySegment CoIsHandlerConnected$address() {
        return CoIsHandlerConnected.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL CoIsHandlerConnected(LPUNKNOWN pUnk)
     * }
     */
    public static int CoIsHandlerConnected(MemorySegment pUnk) {
        var mh$ = CoIsHandlerConnected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoIsHandlerConnected", pUnk);
            }
            return (int)mh$.invokeExact(pUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoMarshalInterThreadInterfaceInStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoMarshalInterThreadInterfaceInStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm)
     * }
     */
    public static FunctionDescriptor CoMarshalInterThreadInterfaceInStream$descriptor() {
        return CoMarshalInterThreadInterfaceInStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm)
     * }
     */
    public static MethodHandle CoMarshalInterThreadInterfaceInStream$handle() {
        return CoMarshalInterThreadInterfaceInStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm)
     * }
     */
    public static MemorySegment CoMarshalInterThreadInterfaceInStream$address() {
        return CoMarshalInterThreadInterfaceInStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoMarshalInterThreadInterfaceInStream(const IID *const riid, LPUNKNOWN pUnk, LPSTREAM *ppStm)
     * }
     */
    public static int CoMarshalInterThreadInterfaceInStream(MemorySegment riid, MemorySegment pUnk, MemorySegment ppStm) {
        var mh$ = CoMarshalInterThreadInterfaceInStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoMarshalInterThreadInterfaceInStream", riid, pUnk, ppStm);
            }
            return (int)mh$.invokeExact(riid, pUnk, ppStm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetInterfaceAndReleaseStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetInterfaceAndReleaseStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoGetInterfaceAndReleaseStream$descriptor() {
        return CoGetInterfaceAndReleaseStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoGetInterfaceAndReleaseStream$handle() {
        return CoGetInterfaceAndReleaseStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoGetInterfaceAndReleaseStream$address() {
        return CoGetInterfaceAndReleaseStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID *const iid, LPVOID *ppv)
     * }
     */
    public static int CoGetInterfaceAndReleaseStream(MemorySegment pStm, MemorySegment iid, MemorySegment ppv) {
        var mh$ = CoGetInterfaceAndReleaseStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetInterfaceAndReleaseStream", pStm, iid, ppv);
            }
            return (int)mh$.invokeExact(pStm, iid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateFreeThreadedMarshaler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoCreateFreeThreadedMarshaler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal)
     * }
     */
    public static FunctionDescriptor CoCreateFreeThreadedMarshaler$descriptor() {
        return CoCreateFreeThreadedMarshaler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal)
     * }
     */
    public static MethodHandle CoCreateFreeThreadedMarshaler$handle() {
        return CoCreateFreeThreadedMarshaler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal)
     * }
     */
    public static MemorySegment CoCreateFreeThreadedMarshaler$address() {
        return CoCreateFreeThreadedMarshaler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter, LPUNKNOWN *ppunkMarshal)
     * }
     */
    public static int CoCreateFreeThreadedMarshaler(MemorySegment punkOuter, MemorySegment ppunkMarshal) {
        var mh$ = CoCreateFreeThreadedMarshaler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateFreeThreadedMarshaler", punkOuter, ppunkMarshal);
            }
            return (int)mh$.invokeExact(punkOuter, ppunkMarshal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFreeUnusedLibraries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoFreeUnusedLibraries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibraries()
     * }
     */
    public static FunctionDescriptor CoFreeUnusedLibraries$descriptor() {
        return CoFreeUnusedLibraries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibraries()
     * }
     */
    public static MethodHandle CoFreeUnusedLibraries$handle() {
        return CoFreeUnusedLibraries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibraries()
     * }
     */
    public static MemorySegment CoFreeUnusedLibraries$address() {
        return CoFreeUnusedLibraries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibraries()
     * }
     */
    public static void CoFreeUnusedLibraries() {
        var mh$ = CoFreeUnusedLibraries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFreeUnusedLibraries");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFreeUnusedLibrariesEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoFreeUnusedLibrariesEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoFreeUnusedLibrariesEx$descriptor() {
        return CoFreeUnusedLibrariesEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoFreeUnusedLibrariesEx$handle() {
        return CoFreeUnusedLibrariesEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoFreeUnusedLibrariesEx$address() {
        return CoFreeUnusedLibrariesEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoFreeUnusedLibrariesEx(DWORD dwUnloadDelay, DWORD dwReserved)
     * }
     */
    public static void CoFreeUnusedLibrariesEx(int dwUnloadDelay, int dwReserved) {
        var mh$ = CoFreeUnusedLibrariesEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFreeUnusedLibrariesEx", dwUnloadDelay, dwReserved);
            }
            mh$.invokeExact(dwUnloadDelay, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDisconnectContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoDisconnectContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectContext(DWORD dwTimeout)
     * }
     */
    public static FunctionDescriptor CoDisconnectContext$descriptor() {
        return CoDisconnectContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectContext(DWORD dwTimeout)
     * }
     */
    public static MethodHandle CoDisconnectContext$handle() {
        return CoDisconnectContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectContext(DWORD dwTimeout)
     * }
     */
    public static MemorySegment CoDisconnectContext$address() {
        return CoDisconnectContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDisconnectContext(DWORD dwTimeout)
     * }
     */
    public static int CoDisconnectContext(int dwTimeout) {
        var mh$ = CoDisconnectContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDisconnectContext", dwTimeout);
            }
            return (int)mh$.invokeExact(dwTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInitializeSecurity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInitializeSecurity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
     * }
     */
    public static FunctionDescriptor CoInitializeSecurity$descriptor() {
        return CoInitializeSecurity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
     * }
     */
    public static MethodHandle CoInitializeSecurity$handle() {
        return CoInitializeSecurity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
     * }
     */
    public static MemorySegment CoInitializeSecurity$address() {
        return CoInitializeSecurity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInitializeSecurity(PSECURITY_DESCRIPTOR pSecDesc, LONG cAuthSvc, SOLE_AUTHENTICATION_SERVICE *asAuthSvc, void *pReserved1, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthList, DWORD dwCapabilities, void *pReserved3)
     * }
     */
    public static int CoInitializeSecurity(MemorySegment pSecDesc, int cAuthSvc, MemorySegment asAuthSvc, MemorySegment pReserved1, int dwAuthnLevel, int dwImpLevel, MemorySegment pAuthList, int dwCapabilities, MemorySegment pReserved3) {
        var mh$ = CoInitializeSecurity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInitializeSecurity", pSecDesc, cAuthSvc, asAuthSvc, pReserved1, dwAuthnLevel, dwImpLevel, pAuthList, dwCapabilities, pReserved3);
            }
            return (int)mh$.invokeExact(pSecDesc, cAuthSvc, asAuthSvc, pReserved1, dwAuthnLevel, dwImpLevel, pAuthList, dwCapabilities, pReserved3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCallContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetCallContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallContext(const IID *const riid, void **ppInterface)
     * }
     */
    public static FunctionDescriptor CoGetCallContext$descriptor() {
        return CoGetCallContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallContext(const IID *const riid, void **ppInterface)
     * }
     */
    public static MethodHandle CoGetCallContext$handle() {
        return CoGetCallContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCallContext(const IID *const riid, void **ppInterface)
     * }
     */
    public static MemorySegment CoGetCallContext$address() {
        return CoGetCallContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetCallContext(const IID *const riid, void **ppInterface)
     * }
     */
    public static int CoGetCallContext(MemorySegment riid, MemorySegment ppInterface) {
        var mh$ = CoGetCallContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCallContext", riid, ppInterface);
            }
            return (int)mh$.invokeExact(riid, ppInterface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoQueryProxyBlanket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoQueryProxyBlanket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites)
     * }
     */
    public static FunctionDescriptor CoQueryProxyBlanket$descriptor() {
        return CoQueryProxyBlanket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites)
     * }
     */
    public static MethodHandle CoQueryProxyBlanket$handle() {
        return CoQueryProxyBlanket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites)
     * }
     */
    public static MemorySegment CoQueryProxyBlanket$address() {
        return CoQueryProxyBlanket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoQueryProxyBlanket(IUnknown *pProxy, DWORD *pwAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTH_IDENTITY_HANDLE *pAuthInfo, DWORD *pCapabilites)
     * }
     */
    public static int CoQueryProxyBlanket(MemorySegment pProxy, MemorySegment pwAuthnSvc, MemorySegment pAuthzSvc, MemorySegment pServerPrincName, MemorySegment pAuthnLevel, MemorySegment pImpLevel, MemorySegment pAuthInfo, MemorySegment pCapabilites) {
        var mh$ = CoQueryProxyBlanket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoQueryProxyBlanket", pProxy, pwAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pAuthInfo, pCapabilites);
            }
            return (int)mh$.invokeExact(pProxy, pwAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pAuthInfo, pCapabilites);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoSetProxyBlanket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoSetProxyBlanket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities)
     * }
     */
    public static FunctionDescriptor CoSetProxyBlanket$descriptor() {
        return CoSetProxyBlanket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities)
     * }
     */
    public static MethodHandle CoSetProxyBlanket$handle() {
        return CoSetProxyBlanket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities)
     * }
     */
    public static MemorySegment CoSetProxyBlanket$address() {
        return CoSetProxyBlanket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoSetProxyBlanket(IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, RPC_AUTH_IDENTITY_HANDLE pAuthInfo, DWORD dwCapabilities)
     * }
     */
    public static int CoSetProxyBlanket(MemorySegment pProxy, int dwAuthnSvc, int dwAuthzSvc, MemorySegment pServerPrincName, int dwAuthnLevel, int dwImpLevel, MemorySegment pAuthInfo, int dwCapabilities) {
        var mh$ = CoSetProxyBlanket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoSetProxyBlanket", pProxy, dwAuthnSvc, dwAuthzSvc, pServerPrincName, dwAuthnLevel, dwImpLevel, pAuthInfo, dwCapabilities);
            }
            return (int)mh$.invokeExact(pProxy, dwAuthnSvc, dwAuthzSvc, pServerPrincName, dwAuthnLevel, dwImpLevel, pAuthInfo, dwCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCopyProxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoCopyProxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy)
     * }
     */
    public static FunctionDescriptor CoCopyProxy$descriptor() {
        return CoCopyProxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy)
     * }
     */
    public static MethodHandle CoCopyProxy$handle() {
        return CoCopyProxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy)
     * }
     */
    public static MemorySegment CoCopyProxy$address() {
        return CoCopyProxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCopyProxy(IUnknown *pProxy, IUnknown **ppCopy)
     * }
     */
    public static int CoCopyProxy(MemorySegment pProxy, MemorySegment ppCopy) {
        var mh$ = CoCopyProxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCopyProxy", pProxy, ppCopy);
            }
            return (int)mh$.invokeExact(pProxy, ppCopy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoQueryClientBlanket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoQueryClientBlanket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities)
     * }
     */
    public static FunctionDescriptor CoQueryClientBlanket$descriptor() {
        return CoQueryClientBlanket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities)
     * }
     */
    public static MethodHandle CoQueryClientBlanket$handle() {
        return CoQueryClientBlanket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities)
     * }
     */
    public static MemorySegment CoQueryClientBlanket$address() {
        return CoQueryClientBlanket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoQueryClientBlanket(DWORD *pAuthnSvc, DWORD *pAuthzSvc, LPOLESTR *pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, RPC_AUTHZ_HANDLE *pPrivs, DWORD *pCapabilities)
     * }
     */
    public static int CoQueryClientBlanket(MemorySegment pAuthnSvc, MemorySegment pAuthzSvc, MemorySegment pServerPrincName, MemorySegment pAuthnLevel, MemorySegment pImpLevel, MemorySegment pPrivs, MemorySegment pCapabilities) {
        var mh$ = CoQueryClientBlanket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoQueryClientBlanket", pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pPrivs, pCapabilities);
            }
            return (int)mh$.invokeExact(pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pPrivs, pCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoImpersonateClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoImpersonateClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoImpersonateClient()
     * }
     */
    public static FunctionDescriptor CoImpersonateClient$descriptor() {
        return CoImpersonateClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoImpersonateClient()
     * }
     */
    public static MethodHandle CoImpersonateClient$handle() {
        return CoImpersonateClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoImpersonateClient()
     * }
     */
    public static MemorySegment CoImpersonateClient$address() {
        return CoImpersonateClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoImpersonateClient()
     * }
     */
    public static int CoImpersonateClient() {
        var mh$ = CoImpersonateClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoImpersonateClient");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevertToSelf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoRevertToSelf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevertToSelf()
     * }
     */
    public static FunctionDescriptor CoRevertToSelf$descriptor() {
        return CoRevertToSelf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevertToSelf()
     * }
     */
    public static MethodHandle CoRevertToSelf$handle() {
        return CoRevertToSelf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRevertToSelf()
     * }
     */
    public static MemorySegment CoRevertToSelf$address() {
        return CoRevertToSelf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevertToSelf()
     * }
     */
    public static int CoRevertToSelf() {
        var mh$ = CoRevertToSelf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevertToSelf");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoQueryAuthenticationServices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoQueryAuthenticationServices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc)
     * }
     */
    public static FunctionDescriptor CoQueryAuthenticationServices$descriptor() {
        return CoQueryAuthenticationServices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc)
     * }
     */
    public static MethodHandle CoQueryAuthenticationServices$handle() {
        return CoQueryAuthenticationServices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc)
     * }
     */
    public static MemorySegment CoQueryAuthenticationServices$address() {
        return CoQueryAuthenticationServices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoQueryAuthenticationServices(DWORD *pcAuthSvc, SOLE_AUTHENTICATION_SERVICE **asAuthSvc)
     * }
     */
    public static int CoQueryAuthenticationServices(MemorySegment pcAuthSvc, MemorySegment asAuthSvc) {
        var mh$ = CoQueryAuthenticationServices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoQueryAuthenticationServices", pcAuthSvc, asAuthSvc);
            }
            return (int)mh$.invokeExact(pcAuthSvc, asAuthSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoSwitchCallContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoSwitchCallContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject)
     * }
     */
    public static FunctionDescriptor CoSwitchCallContext$descriptor() {
        return CoSwitchCallContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject)
     * }
     */
    public static MethodHandle CoSwitchCallContext$handle() {
        return CoSwitchCallContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject)
     * }
     */
    public static MemorySegment CoSwitchCallContext$address() {
        return CoSwitchCallContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoSwitchCallContext(IUnknown *pNewObject, IUnknown **ppOldObject)
     * }
     */
    public static int CoSwitchCallContext(MemorySegment pNewObject, MemorySegment ppOldObject) {
        var mh$ = CoSwitchCallContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoSwitchCallContext", pNewObject, ppOldObject);
            }
            return (int)mh$.invokeExact(pNewObject, ppOldObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateInstance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoCreateInstance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor CoCreateInstance$descriptor() {
        return CoCreateInstance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle CoCreateInstance$handle() {
        return CoCreateInstance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment CoCreateInstance$address() {
        return CoCreateInstance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int CoCreateInstance(MemorySegment rclsid, MemorySegment pUnkOuter, int dwClsContext, MemorySegment riid, MemorySegment ppv) {
        var mh$ = CoCreateInstance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateInstance", rclsid, pUnkOuter, dwClsContext, riid, ppv);
            }
            return (int)mh$.invokeExact(rclsid, pUnkOuter, dwClsContext, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateInstanceEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoCreateInstanceEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceEx(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static FunctionDescriptor CoCreateInstanceEx$descriptor() {
        return CoCreateInstanceEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceEx(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MethodHandle CoCreateInstanceEx$handle() {
        return CoCreateInstanceEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceEx(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MemorySegment CoCreateInstanceEx$address() {
        return CoCreateInstanceEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceEx(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, COSERVERINFO *pServerInfo, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static int CoCreateInstanceEx(MemorySegment Clsid, MemorySegment punkOuter, int dwClsCtx, MemorySegment pServerInfo, int dwCount, MemorySegment pResults) {
        var mh$ = CoCreateInstanceEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateInstanceEx", Clsid, punkOuter, dwClsCtx, pServerInfo, dwCount, pResults);
            }
            return (int)mh$.invokeExact(Clsid, punkOuter, dwClsCtx, pServerInfo, dwCount, pResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateInstanceFromApp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoCreateInstanceFromApp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceFromApp(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static FunctionDescriptor CoCreateInstanceFromApp$descriptor() {
        return CoCreateInstanceFromApp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceFromApp(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MethodHandle CoCreateInstanceFromApp$handle() {
        return CoCreateInstanceFromApp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceFromApp(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static MemorySegment CoCreateInstanceFromApp$address() {
        return CoCreateInstanceFromApp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateInstanceFromApp(const IID *const Clsid, IUnknown *punkOuter, DWORD dwClsCtx, PVOID reserved, DWORD dwCount, MULTI_QI *pResults)
     * }
     */
    public static int CoCreateInstanceFromApp(MemorySegment Clsid, MemorySegment punkOuter, int dwClsCtx, MemorySegment reserved, int dwCount, MemorySegment pResults) {
        var mh$ = CoCreateInstanceFromApp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateInstanceFromApp", Clsid, punkOuter, dwClsCtx, reserved, dwCount, pResults);
            }
            return (int)mh$.invokeExact(Clsid, punkOuter, dwClsCtx, reserved, dwCount, pResults);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRegisterActivationFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoRegisterActivationFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterActivationFilter(IActivationFilter *pActivationFilter)
     * }
     */
    public static FunctionDescriptor CoRegisterActivationFilter$descriptor() {
        return CoRegisterActivationFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterActivationFilter(IActivationFilter *pActivationFilter)
     * }
     */
    public static MethodHandle CoRegisterActivationFilter$handle() {
        return CoRegisterActivationFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterActivationFilter(IActivationFilter *pActivationFilter)
     * }
     */
    public static MemorySegment CoRegisterActivationFilter$address() {
        return CoRegisterActivationFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterActivationFilter(IActivationFilter *pActivationFilter)
     * }
     */
    public static int CoRegisterActivationFilter(MemorySegment pActivationFilter) {
        var mh$ = CoRegisterActivationFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterActivationFilter", pActivationFilter);
            }
            return (int)mh$.invokeExact(pActivationFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetCancelObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetCancelObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCancelObject(DWORD dwThreadId, const IID *const iid, void **ppUnk)
     * }
     */
    public static FunctionDescriptor CoGetCancelObject$descriptor() {
        return CoGetCancelObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCancelObject(DWORD dwThreadId, const IID *const iid, void **ppUnk)
     * }
     */
    public static MethodHandle CoGetCancelObject$handle() {
        return CoGetCancelObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetCancelObject(DWORD dwThreadId, const IID *const iid, void **ppUnk)
     * }
     */
    public static MemorySegment CoGetCancelObject$address() {
        return CoGetCancelObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetCancelObject(DWORD dwThreadId, const IID *const iid, void **ppUnk)
     * }
     */
    public static int CoGetCancelObject(int dwThreadId, MemorySegment iid, MemorySegment ppUnk) {
        var mh$ = CoGetCancelObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetCancelObject", dwThreadId, iid, ppUnk);
            }
            return (int)mh$.invokeExact(dwThreadId, iid, ppUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoSetCancelObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoSetCancelObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoSetCancelObject(IUnknown *pUnk)
     * }
     */
    public static FunctionDescriptor CoSetCancelObject$descriptor() {
        return CoSetCancelObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoSetCancelObject(IUnknown *pUnk)
     * }
     */
    public static MethodHandle CoSetCancelObject$handle() {
        return CoSetCancelObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoSetCancelObject(IUnknown *pUnk)
     * }
     */
    public static MemorySegment CoSetCancelObject$address() {
        return CoSetCancelObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoSetCancelObject(IUnknown *pUnk)
     * }
     */
    public static int CoSetCancelObject(MemorySegment pUnk) {
        var mh$ = CoSetCancelObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoSetCancelObject", pUnk);
            }
            return (int)mh$.invokeExact(pUnk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCancelCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoCancelCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static FunctionDescriptor CoCancelCall$descriptor() {
        return CoCancelCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static MethodHandle CoCancelCall$handle() {
        return CoCancelCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static MemorySegment CoCancelCall$address() {
        return CoCancelCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCancelCall(DWORD dwThreadId, ULONG ulTimeout)
     * }
     */
    public static int CoCancelCall(int dwThreadId, int ulTimeout) {
        var mh$ = CoCancelCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCancelCall", dwThreadId, ulTimeout);
            }
            return (int)mh$.invokeExact(dwThreadId, ulTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoTestCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static FunctionDescriptor CoTestCancel$descriptor() {
        return CoTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static MethodHandle CoTestCancel$handle() {
        return CoTestCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static MemorySegment CoTestCancel$address() {
        return CoTestCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoTestCancel()
     * }
     */
    public static int CoTestCancel() {
        var mh$ = CoTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTestCancel");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoEnableCallCancellation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoEnableCallCancellation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor CoEnableCallCancellation$descriptor() {
        return CoEnableCallCancellation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MethodHandle CoEnableCallCancellation$handle() {
        return CoEnableCallCancellation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MemorySegment CoEnableCallCancellation$address() {
        return CoEnableCallCancellation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoEnableCallCancellation(LPVOID pReserved)
     * }
     */
    public static int CoEnableCallCancellation(MemorySegment pReserved) {
        var mh$ = CoEnableCallCancellation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoEnableCallCancellation", pReserved);
            }
            return (int)mh$.invokeExact(pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoDisableCallCancellation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoDisableCallCancellation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static FunctionDescriptor CoDisableCallCancellation$descriptor() {
        return CoDisableCallCancellation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MethodHandle CoDisableCallCancellation$handle() {
        return CoDisableCallCancellation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static MemorySegment CoDisableCallCancellation$address() {
        return CoDisableCallCancellation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoDisableCallCancellation(LPVOID pReserved)
     * }
     */
    public static int CoDisableCallCancellation(MemorySegment pReserved) {
        var mh$ = CoDisableCallCancellation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoDisableCallCancellation", pReserved);
            }
            return (int)mh$.invokeExact(pReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromCLSID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StringFromCLSID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static FunctionDescriptor StringFromCLSID$descriptor() {
        return StringFromCLSID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MethodHandle StringFromCLSID$handle() {
        return StringFromCLSID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MemorySegment StringFromCLSID$address() {
        return StringFromCLSID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StringFromCLSID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static int StringFromCLSID(MemorySegment rclsid, MemorySegment lplpsz) {
        var mh$ = StringFromCLSID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromCLSID", rclsid, lplpsz);
            }
            return (int)mh$.invokeExact(rclsid, lplpsz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLSIDFromString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromString$descriptor() {
        return CLSIDFromString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static MethodHandle CLSIDFromString$handle() {
        return CLSIDFromString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static MemorySegment CLSIDFromString$address() {
        return CLSIDFromString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromString(LPCOLESTR lpsz, LPCLSID pclsid)
     * }
     */
    public static int CLSIDFromString(MemorySegment lpsz, MemorySegment pclsid) {
        var mh$ = CLSIDFromString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromString", lpsz, pclsid);
            }
            return (int)mh$.invokeExact(lpsz, pclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StringFromIID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static FunctionDescriptor StringFromIID$descriptor() {
        return StringFromIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MethodHandle StringFromIID$handle() {
        return StringFromIID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static MemorySegment StringFromIID$address() {
        return StringFromIID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT StringFromIID(const IID *const rclsid, LPOLESTR *lplpsz)
     * }
     */
    public static int StringFromIID(MemorySegment rclsid, MemorySegment lplpsz) {
        var mh$ = StringFromIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromIID", rclsid, lplpsz);
            }
            return (int)mh$.invokeExact(rclsid, lplpsz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IIDFromString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IIDFromString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static FunctionDescriptor IIDFromString$descriptor() {
        return IIDFromString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static MethodHandle IIDFromString$handle() {
        return IIDFromString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static MemorySegment IIDFromString$address() {
        return IIDFromString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT IIDFromString(LPCOLESTR lpsz, LPIID lpiid)
     * }
     */
    public static int IIDFromString(MemorySegment lpsz, MemorySegment lpiid) {
        var mh$ = IIDFromString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IIDFromString", lpsz, lpiid);
            }
            return (int)mh$.invokeExact(lpsz, lpiid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ProgIDFromCLSID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ProgIDFromCLSID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static FunctionDescriptor ProgIDFromCLSID$descriptor() {
        return ProgIDFromCLSID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static MethodHandle ProgIDFromCLSID$handle() {
        return ProgIDFromCLSID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static MemorySegment ProgIDFromCLSID$address() {
        return ProgIDFromCLSID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT ProgIDFromCLSID(const IID *const clsid, LPOLESTR *lplpszProgID)
     * }
     */
    public static int ProgIDFromCLSID(MemorySegment clsid, MemorySegment lplpszProgID) {
        var mh$ = ProgIDFromCLSID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ProgIDFromCLSID", clsid, lplpszProgID);
            }
            return (int)mh$.invokeExact(clsid, lplpszProgID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromProgID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLSIDFromProgID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromProgID$descriptor() {
        return CLSIDFromProgID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MethodHandle CLSIDFromProgID$handle() {
        return CLSIDFromProgID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MemorySegment CLSIDFromProgID$address() {
        return CLSIDFromProgID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgID(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static int CLSIDFromProgID(MemorySegment lpszProgID, MemorySegment lpclsid) {
        var mh$ = CLSIDFromProgID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromProgID", lpszProgID, lpclsid);
            }
            return (int)mh$.invokeExact(lpszProgID, lpclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StringFromGUID2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StringFromGUID2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static FunctionDescriptor StringFromGUID2$descriptor() {
        return StringFromGUID2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static MethodHandle StringFromGUID2$handle() {
        return StringFromGUID2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static MemorySegment StringFromGUID2$address() {
        return StringFromGUID2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int StringFromGUID2(const GUID *const rguid, LPOLESTR lpsz, int cchMax)
     * }
     */
    public static int StringFromGUID2(MemorySegment rguid, MemorySegment lpsz, int cchMax) {
        var mh$ = StringFromGUID2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StringFromGUID2", rguid, lpsz, cchMax);
            }
            return (int)mh$.invokeExact(rguid, lpsz, cchMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoCreateGuid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoCreateGuid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static FunctionDescriptor CoCreateGuid$descriptor() {
        return CoCreateGuid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static MethodHandle CoCreateGuid$handle() {
        return CoCreateGuid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static MemorySegment CoCreateGuid$address() {
        return CoCreateGuid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoCreateGuid(GUID *pguid)
     * }
     */
    public static int CoCreateGuid(MemorySegment pguid) {
        var mh$ = CoCreateGuid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoCreateGuid", pguid);
            }
            return (int)mh$.invokeExact(pguid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropVariantCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PropVariantCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static FunctionDescriptor PropVariantCopy$descriptor() {
        return PropVariantCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static MethodHandle PropVariantCopy$handle() {
        return PropVariantCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static MemorySegment PropVariantCopy$address() {
        return PropVariantCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT PropVariantCopy(PROPVARIANT *pvarDest, const PROPVARIANT *pvarSrc)
     * }
     */
    public static int PropVariantCopy(MemorySegment pvarDest, MemorySegment pvarSrc) {
        var mh$ = PropVariantCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropVariantCopy", pvarDest, pvarSrc);
            }
            return (int)mh$.invokeExact(pvarDest, pvarSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropVariantClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PropVariantClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static FunctionDescriptor PropVariantClear$descriptor() {
        return PropVariantClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static MethodHandle PropVariantClear$handle() {
        return PropVariantClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static MemorySegment PropVariantClear$address() {
        return PropVariantClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT PropVariantClear(PROPVARIANT *pvar)
     * }
     */
    public static int PropVariantClear(MemorySegment pvar) {
        var mh$ = PropVariantClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropVariantClear", pvar);
            }
            return (int)mh$.invokeExact(pvar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePropVariantArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FreePropVariantArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static FunctionDescriptor FreePropVariantArray$descriptor() {
        return FreePropVariantArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static MethodHandle FreePropVariantArray$handle() {
        return FreePropVariantArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static MemorySegment FreePropVariantArray$address() {
        return FreePropVariantArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT FreePropVariantArray(ULONG cVariants, PROPVARIANT *rgvars)
     * }
     */
    public static int FreePropVariantArray(int cVariants, MemorySegment rgvars) {
        var mh$ = FreePropVariantArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePropVariantArray", cVariants, rgvars);
            }
            return (int)mh$.invokeExact(cVariants, rgvars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoWaitForMultipleHandles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoWaitForMultipleHandles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static FunctionDescriptor CoWaitForMultipleHandles$descriptor() {
        return CoWaitForMultipleHandles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MethodHandle CoWaitForMultipleHandles$handle() {
        return CoWaitForMultipleHandles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MemorySegment CoWaitForMultipleHandles$address() {
        return CoWaitForMultipleHandles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleHandles(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, LPHANDLE pHandles, LPDWORD lpdwindex)
     * }
     */
    public static int CoWaitForMultipleHandles(int dwFlags, int dwTimeout, int cHandles, MemorySegment pHandles, MemorySegment lpdwindex) {
        var mh$ = CoWaitForMultipleHandles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoWaitForMultipleHandles", dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
            }
            return (int)mh$.invokeExact(dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int COWAIT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DEFAULT = 0
     * }
     */
    public static int COWAIT_DEFAULT() {
        return COWAIT_DEFAULT;
    }
    private static final int COWAIT_WAITALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_WAITALL = 1
     * }
     */
    public static int COWAIT_WAITALL() {
        return COWAIT_WAITALL;
    }
    private static final int COWAIT_ALERTABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_ALERTABLE = 2
     * }
     */
    public static int COWAIT_ALERTABLE() {
        return COWAIT_ALERTABLE;
    }
    private static final int COWAIT_INPUTAVAILABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_INPUTAVAILABLE = 4
     * }
     */
    public static int COWAIT_INPUTAVAILABLE() {
        return COWAIT_INPUTAVAILABLE;
    }
    private static final int COWAIT_DISPATCH_CALLS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DISPATCH_CALLS = 8
     * }
     */
    public static int COWAIT_DISPATCH_CALLS() {
        return COWAIT_DISPATCH_CALLS;
    }
    private static final int COWAIT_DISPATCH_WINDOW_MESSAGES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagCOWAIT_FLAGS.COWAIT_DISPATCH_WINDOW_MESSAGES = 16
     * }
     */
    public static int COWAIT_DISPATCH_WINDOW_MESSAGES() {
        return COWAIT_DISPATCH_WINDOW_MESSAGES;
    }
    private static final int CWMO_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DEFAULT = 0
     * }
     */
    public static int CWMO_DEFAULT() {
        return CWMO_DEFAULT;
    }
    private static final int CWMO_DISPATCH_CALLS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DISPATCH_CALLS = 1
     * }
     */
    public static int CWMO_DISPATCH_CALLS() {
        return CWMO_DISPATCH_CALLS;
    }
    private static final int CWMO_DISPATCH_WINDOW_MESSAGES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum CWMO_FLAGS.CWMO_DISPATCH_WINDOW_MESSAGES = 2
     * }
     */
    public static int CWMO_DISPATCH_WINDOW_MESSAGES() {
        return CWMO_DISPATCH_WINDOW_MESSAGES;
    }

    private static class CoWaitForMultipleObjects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoWaitForMultipleObjects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static FunctionDescriptor CoWaitForMultipleObjects$descriptor() {
        return CoWaitForMultipleObjects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MethodHandle CoWaitForMultipleObjects$handle() {
        return CoWaitForMultipleObjects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static MemorySegment CoWaitForMultipleObjects$address() {
        return CoWaitForMultipleObjects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoWaitForMultipleObjects(DWORD dwFlags, DWORD dwTimeout, ULONG cHandles, const HANDLE *pHandles, LPDWORD lpdwindex)
     * }
     */
    public static int CoWaitForMultipleObjects(int dwFlags, int dwTimeout, int cHandles, MemorySegment pHandles, MemorySegment lpdwindex) {
        var mh$ = CoWaitForMultipleObjects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoWaitForMultipleObjects", dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
            }
            return (int)mh$.invokeExact(dwFlags, dwTimeout, cHandles, pHandles, lpdwindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoGetTreatAsClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoGetTreatAsClass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static FunctionDescriptor CoGetTreatAsClass$descriptor() {
        return CoGetTreatAsClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static MethodHandle CoGetTreatAsClass$handle() {
        return CoGetTreatAsClass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static MemorySegment CoGetTreatAsClass$address() {
        return CoGetTreatAsClass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoGetTreatAsClass(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static int CoGetTreatAsClass(MemorySegment clsidOld, MemorySegment pClsidNew) {
        var mh$ = CoGetTreatAsClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoGetTreatAsClass", clsidOld, pClsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, pClsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInvalidateRemoteMachineBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInvalidateRemoteMachineBindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static FunctionDescriptor CoInvalidateRemoteMachineBindings$descriptor() {
        return CoInvalidateRemoteMachineBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static MethodHandle CoInvalidateRemoteMachineBindings$handle() {
        return CoInvalidateRemoteMachineBindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static MemorySegment CoInvalidateRemoteMachineBindings$address() {
        return CoInvalidateRemoteMachineBindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInvalidateRemoteMachineBindings(LPOLESTR pszMachineName)
     * }
     */
    public static int CoInvalidateRemoteMachineBindings(MemorySegment pszMachineName) {
        var mh$ = CoInvalidateRemoteMachineBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInvalidateRemoteMachineBindings", pszMachineName);
            }
            return (int)mh$.invokeExact(pszMachineName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int AGILEREFERENCE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum AgileReferenceOptions.AGILEREFERENCE_DEFAULT = 0
     * }
     */
    public static int AGILEREFERENCE_DEFAULT() {
        return AGILEREFERENCE_DEFAULT;
    }
    private static final int AGILEREFERENCE_DELAYEDMARSHAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum AgileReferenceOptions.AGILEREFERENCE_DELAYEDMARSHAL = 1
     * }
     */
    public static int AGILEREFERENCE_DELAYEDMARSHAL() {
        return AGILEREFERENCE_DELAYEDMARSHAL;
    }

    private static class RoGetAgileReference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RoGetAgileReference");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static FunctionDescriptor RoGetAgileReference$descriptor() {
        return RoGetAgileReference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static MethodHandle RoGetAgileReference$handle() {
        return RoGetAgileReference.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static MemorySegment RoGetAgileReference$address() {
        return RoGetAgileReference.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RoGetAgileReference(enum AgileReferenceOptions options, const IID *const riid, IUnknown *pUnk, IAgileReference **ppAgileReference)
     * }
     */
    public static int RoGetAgileReference(int options, MemorySegment riid, MemorySegment pUnk, MemorySegment ppAgileReference) {
        var mh$ = RoGetAgileReference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RoGetAgileReference", options, riid, pUnk, ppAgileReference);
            }
            return (int)mh$.invokeExact(options, riid, pUnk, ppAgileReference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DllGetClassObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DllGetClassObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static FunctionDescriptor DllGetClassObject$descriptor() {
        return DllGetClassObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MethodHandle DllGetClassObject$handle() {
        return DllGetClassObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static MemorySegment DllGetClassObject$address() {
        return DllGetClassObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DllGetClassObject(const IID *const rclsid, const IID *const riid, LPVOID *ppv)
     * }
     */
    public static int DllGetClassObject(MemorySegment rclsid, MemorySegment riid, MemorySegment ppv) {
        var mh$ = DllGetClassObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DllGetClassObject", rclsid, riid, ppv);
            }
            return (int)mh$.invokeExact(rclsid, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DllCanUnloadNow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("DllCanUnloadNow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static FunctionDescriptor DllCanUnloadNow$descriptor() {
        return DllCanUnloadNow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static MethodHandle DllCanUnloadNow$handle() {
        return DllCanUnloadNow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static MemorySegment DllCanUnloadNow$address() {
        return DllCanUnloadNow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DllCanUnloadNow()
     * }
     */
    public static int DllCanUnloadNow() {
        var mh$ = DllCanUnloadNow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DllCanUnloadNow");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoTaskMemAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static FunctionDescriptor CoTaskMemAlloc$descriptor() {
        return CoTaskMemAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static MethodHandle CoTaskMemAlloc$handle() {
        return CoTaskMemAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemAlloc$address() {
        return CoTaskMemAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemAlloc(SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemAlloc(long cb) {
        var mh$ = CoTaskMemAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemAlloc", cb);
            }
            return (MemorySegment)mh$.invokeExact(cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemRealloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoTaskMemRealloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static FunctionDescriptor CoTaskMemRealloc$descriptor() {
        return CoTaskMemRealloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static MethodHandle CoTaskMemRealloc$handle() {
        return CoTaskMemRealloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemRealloc$address() {
        return CoTaskMemRealloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LPVOID CoTaskMemRealloc(LPVOID pv, SIZE_T cb)
     * }
     */
    public static MemorySegment CoTaskMemRealloc(MemorySegment pv, long cb) {
        var mh$ = CoTaskMemRealloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemRealloc", pv, cb);
            }
            return (MemorySegment)mh$.invokeExact(pv, cb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoTaskMemFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoTaskMemFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static FunctionDescriptor CoTaskMemFree$descriptor() {
        return CoTaskMemFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static MethodHandle CoTaskMemFree$handle() {
        return CoTaskMemFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static MemorySegment CoTaskMemFree$address() {
        return CoTaskMemFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void CoTaskMemFree(LPVOID pv)
     * }
     */
    public static void CoTaskMemFree(MemorySegment pv) {
        var mh$ = CoTaskMemFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoTaskMemFree", pv);
            }
            mh$.invokeExact(pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoFileTimeNow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoFileTimeNow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static FunctionDescriptor CoFileTimeNow$descriptor() {
        return CoFileTimeNow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static MethodHandle CoFileTimeNow$handle() {
        return CoFileTimeNow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static MemorySegment CoFileTimeNow$address() {
        return CoFileTimeNow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoFileTimeNow(FILETIME *lpFileTime)
     * }
     */
    public static int CoFileTimeNow(MemorySegment lpFileTime) {
        var mh$ = CoFileTimeNow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoFileTimeNow", lpFileTime);
            }
            return (int)mh$.invokeExact(lpFileTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSIDFromProgIDEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLSIDFromProgIDEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static FunctionDescriptor CLSIDFromProgIDEx$descriptor() {
        return CLSIDFromProgIDEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MethodHandle CLSIDFromProgIDEx$handle() {
        return CLSIDFromProgIDEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static MemorySegment CLSIDFromProgIDEx$address() {
        return CLSIDFromProgIDEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CLSIDFromProgIDEx(LPCOLESTR lpszProgID, LPCLSID lpclsid)
     * }
     */
    public static int CLSIDFromProgIDEx(MemorySegment lpszProgID, MemorySegment lpclsid) {
        var mh$ = CLSIDFromProgIDEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLSIDFromProgIDEx", lpszProgID, lpclsid);
            }
            return (int)mh$.invokeExact(lpszProgID, lpclsid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct CO_DEVICE_CATALOG_COOKIE__ {
     *     int unused;
     * } *CO_DEVICE_CATALOG_COOKIE
     * }
     */
    public static final AddressLayout CO_DEVICE_CATALOG_COOKIE = winapi.C_POINTER;

    private static class CoRegisterDeviceCatalog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoRegisterDeviceCatalog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static FunctionDescriptor CoRegisterDeviceCatalog$descriptor() {
        return CoRegisterDeviceCatalog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static MethodHandle CoRegisterDeviceCatalog$handle() {
        return CoRegisterDeviceCatalog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static MemorySegment CoRegisterDeviceCatalog$address() {
        return CoRegisterDeviceCatalog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRegisterDeviceCatalog(PCWSTR deviceInstanceId, CO_DEVICE_CATALOG_COOKIE *cookie)
     * }
     */
    public static int CoRegisterDeviceCatalog(MemorySegment deviceInstanceId, MemorySegment cookie) {
        var mh$ = CoRegisterDeviceCatalog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRegisterDeviceCatalog", deviceInstanceId, cookie);
            }
            return (int)mh$.invokeExact(deviceInstanceId, cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoRevokeDeviceCatalog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoRevokeDeviceCatalog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static FunctionDescriptor CoRevokeDeviceCatalog$descriptor() {
        return CoRevokeDeviceCatalog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static MethodHandle CoRevokeDeviceCatalog$handle() {
        return CoRevokeDeviceCatalog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static MemorySegment CoRevokeDeviceCatalog$address() {
        return CoRevokeDeviceCatalog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE cookie)
     * }
     */
    public static int CoRevokeDeviceCatalog(MemorySegment cookie) {
        var mh$ = CoRevokeDeviceCatalog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoRevokeDeviceCatalog", cookie);
            }
            return (int)mh$.invokeExact(cookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec() {
        return __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0055_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0055_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IMallocSpy *LPMALLOCSPY
     * }
     */
    public static final AddressLayout LPMALLOCSPY = winapi.C_POINTER;

    private static class IID_IMallocSpy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMallocSpy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static GroupLayout IID_IMallocSpy$layout() {
        return IID_IMallocSpy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static MemorySegment IID_IMallocSpy() {
        return IID_IMallocSpy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMallocSpy
     * }
     */
    public static void IID_IMallocSpy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMallocSpy$constants.SEGMENT, 0L, IID_IMallocSpy$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindCtx *LPBC
     * }
     */
    public static final AddressLayout LPBC = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef IBindCtx *LPBINDCTX
     * }
     */
    public static final AddressLayout LPBINDCTX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     * } *LPBIND_OPTS
     * }
     */
    public static final AddressLayout LPBIND_OPTS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS2 {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     *     DWORD dwTrackFlags;
     *     DWORD dwClassContext;
     *     LCID locale;
     *     COSERVERINFO *pServerInfo;
     * } *LPBIND_OPTS2
     * }
     */
    public static final AddressLayout LPBIND_OPTS2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagBIND_OPTS3 {
     *     DWORD cbStruct;
     *     DWORD grfFlags;
     *     DWORD grfMode;
     *     DWORD dwTickCountDeadline;
     *     DWORD dwTrackFlags;
     *     DWORD dwClassContext;
     *     LCID locale;
     *     COSERVERINFO *pServerInfo;
     *     HWND hwnd;
     * } *LPBIND_OPTS3
     * }
     */
    public static final AddressLayout LPBIND_OPTS3 = winapi.C_POINTER;
    private static final int BIND_MAYBOTHERUSER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagBIND_FLAGS.BIND_MAYBOTHERUSER = 1
     * }
     */
    public static int BIND_MAYBOTHERUSER() {
        return BIND_MAYBOTHERUSER;
    }
    private static final int BIND_JUSTTESTEXISTENCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagBIND_FLAGS.BIND_JUSTTESTEXISTENCE = 2
     * }
     */
    public static int BIND_JUSTTESTEXISTENCE() {
        return BIND_JUSTTESTEXISTENCE;
    }

    private static class IID_IBindCtx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IBindCtx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static GroupLayout IID_IBindCtx$layout() {
        return IID_IBindCtx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static MemorySegment IID_IBindCtx() {
        return IID_IBindCtx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCtx
     * }
     */
    public static void IID_IBindCtx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindCtx$constants.SEGMENT, 0L, IID_IBindCtx$constants.LAYOUT.byteSize());
    }

    private static class IBindCtx_RemoteSetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindCtx_RemoteSetBindOptions_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteSetBindOptions_Proxy$descriptor() {
        return IBindCtx_RemoteSetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_RemoteSetBindOptions_Proxy$handle() {
        return IBindCtx_RemoteSetBindOptions_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_RemoteSetBindOptions_Proxy$address() {
        return IBindCtx_RemoteSetBindOptions_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_RemoteSetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_RemoteSetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteSetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteSetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindCtx_RemoteSetBindOptions_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteSetBindOptions_Stub$descriptor() {
        return IBindCtx_RemoteSetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindCtx_RemoteSetBindOptions_Stub$handle() {
        return IBindCtx_RemoteSetBindOptions_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindCtx_RemoteSetBindOptions_Stub$address() {
        return IBindCtx_RemoteSetBindOptions_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindCtx_RemoteSetBindOptions_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindCtx_RemoteSetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteSetBindOptions_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteGetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindCtx_RemoteGetBindOptions_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteGetBindOptions_Proxy$descriptor() {
        return IBindCtx_RemoteGetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_RemoteGetBindOptions_Proxy$handle() {
        return IBindCtx_RemoteGetBindOptions_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_RemoteGetBindOptions_Proxy$address() {
        return IBindCtx_RemoteGetBindOptions_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_RemoteGetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_RemoteGetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteGetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_RemoteGetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindCtx_RemoteGetBindOptions_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IBindCtx_RemoteGetBindOptions_Stub$descriptor() {
        return IBindCtx_RemoteGetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IBindCtx_RemoteGetBindOptions_Stub$handle() {
        return IBindCtx_RemoteGetBindOptions_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IBindCtx_RemoteGetBindOptions_Stub$address() {
        return IBindCtx_RemoteGetBindOptions_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IBindCtx_RemoteGetBindOptions_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IBindCtx_RemoteGetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_RemoteGetBindOptions_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumMoniker *LPENUMMONIKER
     * }
     */
    public static final AddressLayout LPENUMMONIKER = winapi.C_POINTER;

    private static class IID_IEnumMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static GroupLayout IID_IEnumMoniker$layout() {
        return IID_IEnumMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static MemorySegment IID_IEnumMoniker() {
        return IID_IEnumMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumMoniker
     * }
     */
    public static void IID_IEnumMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumMoniker$constants.SEGMENT, 0L, IID_IEnumMoniker$constants.LAYOUT.byteSize());
    }

    private static class IEnumMoniker_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumMoniker_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_RemoteNext_Proxy$descriptor() {
        return IEnumMoniker_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_RemoteNext_Proxy$handle() {
        return IEnumMoniker_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumMoniker_RemoteNext_Proxy$address() {
        return IEnumMoniker_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_RemoteNext_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumMoniker_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_RemoteNext_Stub$descriptor() {
        return IEnumMoniker_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumMoniker_RemoteNext_Stub$handle() {
        return IEnumMoniker_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumMoniker_RemoteNext_Stub$address() {
        return IEnumMoniker_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumMoniker_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumMoniker_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IRunnableObject *LPRUNNABLEOBJECT
     * }
     */
    public static final AddressLayout LPRUNNABLEOBJECT = winapi.C_POINTER;

    private static class IID_IRunnableObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRunnableObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static GroupLayout IID_IRunnableObject$layout() {
        return IID_IRunnableObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static MemorySegment IID_IRunnableObject() {
        return IID_IRunnableObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunnableObject
     * }
     */
    public static void IID_IRunnableObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRunnableObject$constants.SEGMENT, 0L, IID_IRunnableObject$constants.LAYOUT.byteSize());
    }

    private static class IRunnableObject_RemoteIsRunning_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IRunnableObject_RemoteIsRunning_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_RemoteIsRunning_Proxy$descriptor() {
        return IRunnableObject_RemoteIsRunning_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_RemoteIsRunning_Proxy$handle() {
        return IRunnableObject_RemoteIsRunning_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MemorySegment IRunnableObject_RemoteIsRunning_Proxy$address() {
        return IRunnableObject_RemoteIsRunning_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_RemoteIsRunning_Proxy(MemorySegment This) {
        var mh$ = IRunnableObject_RemoteIsRunning_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_RemoteIsRunning_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_RemoteIsRunning_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IRunnableObject_RemoteIsRunning_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IRunnableObject_RemoteIsRunning_Stub$descriptor() {
        return IRunnableObject_RemoteIsRunning_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IRunnableObject_RemoteIsRunning_Stub$handle() {
        return IRunnableObject_RemoteIsRunning_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IRunnableObject_RemoteIsRunning_Stub$address() {
        return IRunnableObject_RemoteIsRunning_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IRunnableObject_RemoteIsRunning_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IRunnableObject_RemoteIsRunning_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_RemoteIsRunning_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE
     * }
     */
    public static final AddressLayout LPRUNNINGOBJECTTABLE = winapi.C_POINTER;

    private static class IID_IRunningObjectTable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRunningObjectTable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static GroupLayout IID_IRunningObjectTable$layout() {
        return IID_IRunningObjectTable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static MemorySegment IID_IRunningObjectTable() {
        return IID_IRunningObjectTable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRunningObjectTable
     * }
     */
    public static void IID_IRunningObjectTable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRunningObjectTable$constants.SEGMENT, 0L, IID_IRunningObjectTable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0060_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0060_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0060_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0060_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IPersist *LPPERSIST
     * }
     */
    public static final AddressLayout LPPERSIST = winapi.C_POINTER;

    private static class IID_IPersist$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPersist").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static GroupLayout IID_IPersist$layout() {
        return IID_IPersist$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static MemorySegment IID_IPersist() {
        return IID_IPersist$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersist
     * }
     */
    public static void IID_IPersist(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersist$constants.SEGMENT, 0L, IID_IPersist$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistStream *LPPERSISTSTREAM
     * }
     */
    public static final AddressLayout LPPERSISTSTREAM = winapi.C_POINTER;

    private static class IID_IPersistStream$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPersistStream").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static GroupLayout IID_IPersistStream$layout() {
        return IID_IPersistStream$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static MemorySegment IID_IPersistStream() {
        return IID_IPersistStream$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStream
     * }
     */
    public static void IID_IPersistStream(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistStream$constants.SEGMENT, 0L, IID_IPersistStream$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMoniker *LPMONIKER
     * }
     */
    public static final AddressLayout LPMONIKER = winapi.C_POINTER;
    private static final int MKSYS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_NONE = 0
     * }
     */
    public static int MKSYS_NONE() {
        return MKSYS_NONE;
    }
    private static final int MKSYS_GENERICCOMPOSITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_GENERICCOMPOSITE = 1
     * }
     */
    public static int MKSYS_GENERICCOMPOSITE() {
        return MKSYS_GENERICCOMPOSITE;
    }
    private static final int MKSYS_FILEMONIKER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_FILEMONIKER = 2
     * }
     */
    public static int MKSYS_FILEMONIKER() {
        return MKSYS_FILEMONIKER;
    }
    private static final int MKSYS_ANTIMONIKER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_ANTIMONIKER = 3
     * }
     */
    public static int MKSYS_ANTIMONIKER() {
        return MKSYS_ANTIMONIKER;
    }
    private static final int MKSYS_ITEMMONIKER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_ITEMMONIKER = 4
     * }
     */
    public static int MKSYS_ITEMMONIKER() {
        return MKSYS_ITEMMONIKER;
    }
    private static final int MKSYS_POINTERMONIKER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_POINTERMONIKER = 5
     * }
     */
    public static int MKSYS_POINTERMONIKER() {
        return MKSYS_POINTERMONIKER;
    }
    private static final int MKSYS_CLASSMONIKER = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_CLASSMONIKER = 7
     * }
     */
    public static int MKSYS_CLASSMONIKER() {
        return MKSYS_CLASSMONIKER;
    }
    private static final int MKSYS_OBJREFMONIKER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_OBJREFMONIKER = 8
     * }
     */
    public static int MKSYS_OBJREFMONIKER() {
        return MKSYS_OBJREFMONIKER;
    }
    private static final int MKSYS_SESSIONMONIKER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_SESSIONMONIKER = 9
     * }
     */
    public static int MKSYS_SESSIONMONIKER() {
        return MKSYS_SESSIONMONIKER;
    }
    private static final int MKSYS_LUAMONIKER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagMKSYS.MKSYS_LUAMONIKER = 10
     * }
     */
    public static int MKSYS_LUAMONIKER() {
        return MKSYS_LUAMONIKER;
    }
    private static final int MKRREDUCE_ONE = (int)196608L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_ONE = 196608
     * }
     */
    public static int MKRREDUCE_ONE() {
        return MKRREDUCE_ONE;
    }
    private static final int MKRREDUCE_TOUSER = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_TOUSER = 131072
     * }
     */
    public static int MKRREDUCE_TOUSER() {
        return MKRREDUCE_TOUSER;
    }
    private static final int MKRREDUCE_THROUGHUSER = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_THROUGHUSER = 65536
     * }
     */
    public static int MKRREDUCE_THROUGHUSER() {
        return MKRREDUCE_THROUGHUSER;
    }
    private static final int MKRREDUCE_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagMKREDUCE.MKRREDUCE_ALL = 0
     * }
     */
    public static int MKRREDUCE_ALL() {
        return MKRREDUCE_ALL;
    }

    private static class IID_IMoniker$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMoniker").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static GroupLayout IID_IMoniker$layout() {
        return IID_IMoniker$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static MemorySegment IID_IMoniker() {
        return IID_IMoniker$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMoniker
     * }
     */
    public static void IID_IMoniker(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMoniker$constants.SEGMENT, 0L, IID_IMoniker$constants.LAYOUT.byteSize());
    }

    private static class IMoniker_RemoteBindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IMoniker_RemoteBindToObject_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToObject_Proxy$descriptor() {
        return IMoniker_RemoteBindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToObject_Proxy$handle() {
        return IMoniker_RemoteBindToObject_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MemorySegment IMoniker_RemoteBindToObject_Proxy$address() {
        return IMoniker_RemoteBindToObject_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static int IMoniker_RemoteBindToObject_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_RemoteBindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToObject_Proxy", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IMoniker_RemoteBindToObject_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToObject_Stub$descriptor() {
        return IMoniker_RemoteBindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToObject_Stub$handle() {
        return IMoniker_RemoteBindToObject_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IMoniker_RemoteBindToObject_Stub$address() {
        return IMoniker_RemoteBindToObject_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IMoniker_RemoteBindToObject_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IMoniker_RemoteBindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToObject_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IMoniker_RemoteBindToStorage_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToStorage_Proxy$descriptor() {
        return IMoniker_RemoteBindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToStorage_Proxy$handle() {
        return IMoniker_RemoteBindToStorage_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IMoniker_RemoteBindToStorage_Proxy$address() {
        return IMoniker_RemoteBindToStorage_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_RemoteBindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IMoniker_RemoteBindToStorage_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_RemoteBindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToStorage_Proxy", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_RemoteBindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IMoniker_RemoteBindToStorage_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IMoniker_RemoteBindToStorage_Stub$descriptor() {
        return IMoniker_RemoteBindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IMoniker_RemoteBindToStorage_Stub$handle() {
        return IMoniker_RemoteBindToStorage_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IMoniker_RemoteBindToStorage_Stub$address() {
        return IMoniker_RemoteBindToStorage_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IMoniker_RemoteBindToStorage_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IMoniker_RemoteBindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_RemoteBindToStorage_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0063_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0063_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0063_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0063_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IROTData$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IROTData").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static GroupLayout IID_IROTData$layout() {
        return IID_IROTData$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static MemorySegment IID_IROTData() {
        return IID_IROTData$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IROTData
     * }
     */
    public static void IID_IROTData(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IROTData$constants.SEGMENT, 0L, IID_IROTData$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATSTG *LPENUMSTATSTG
     * }
     */
    public static final AddressLayout LPENUMSTATSTG = winapi.C_POINTER;

    private static class IID_IEnumSTATSTG$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumSTATSTG").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static GroupLayout IID_IEnumSTATSTG$layout() {
        return IID_IEnumSTATSTG$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static MemorySegment IID_IEnumSTATSTG() {
        return IID_IEnumSTATSTG$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATSTG
     * }
     */
    public static void IID_IEnumSTATSTG(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATSTG$constants.SEGMENT, 0L, IID_IEnumSTATSTG$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATSTG_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumSTATSTG_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_RemoteNext_Proxy$descriptor() {
        return IEnumSTATSTG_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_RemoteNext_Proxy$handle() {
        return IEnumSTATSTG_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATSTG_RemoteNext_Proxy$address() {
        return IEnumSTATSTG_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumSTATSTG_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_RemoteNext_Stub$descriptor() {
        return IEnumSTATSTG_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATSTG_RemoteNext_Stub$handle() {
        return IEnumSTATSTG_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumSTATSTG_RemoteNext_Stub$address() {
        return IEnumSTATSTG_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATSTG_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATSTG_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IStorage *LPSTORAGE
     * }
     */
    public static final AddressLayout LPSTORAGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RemSNB *wireSNB
     * }
     */
    public static final AddressLayout wireSNB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOLESTR *SNB
     * }
     */
    public static final AddressLayout SNB = winapi.C_POINTER;

    private static class IID_IStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static GroupLayout IID_IStorage$layout() {
        return IID_IStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static MemorySegment IID_IStorage() {
        return IID_IStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IStorage
     * }
     */
    public static void IID_IStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IStorage$constants.SEGMENT, 0L, IID_IStorage$constants.LAYOUT.byteSize());
    }

    private static class IStorage_RemoteOpenStream_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_RemoteOpenStream_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteOpenStream_Proxy$descriptor() {
        return IStorage_RemoteOpenStream_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_RemoteOpenStream_Proxy$handle() {
        return IStorage_RemoteOpenStream_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MemorySegment IStorage_RemoteOpenStream_Proxy$address() {
        return IStorage_RemoteOpenStream_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteOpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_RemoteOpenStream_Proxy(MemorySegment This, MemorySegment pwcsName, int cbReserved1, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_RemoteOpenStream_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteOpenStream_Proxy", This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteOpenStream_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_RemoteOpenStream_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteOpenStream_Stub$descriptor() {
        return IStorage_RemoteOpenStream_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteOpenStream_Stub$handle() {
        return IStorage_RemoteOpenStream_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStorage_RemoteOpenStream_Stub$address() {
        return IStorage_RemoteOpenStream_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteOpenStream_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteOpenStream_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteOpenStream_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteCopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_RemoteCopyTo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteCopyTo_Proxy$descriptor() {
        return IStorage_RemoteCopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_RemoteCopyTo_Proxy$handle() {
        return IStorage_RemoteCopyTo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MemorySegment IStorage_RemoteCopyTo_Proxy$address() {
        return IStorage_RemoteCopyTo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteCopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_RemoteCopyTo_Proxy(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_RemoteCopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteCopyTo_Proxy", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteCopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_RemoteCopyTo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteCopyTo_Stub$descriptor() {
        return IStorage_RemoteCopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteCopyTo_Stub$handle() {
        return IStorage_RemoteCopyTo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStorage_RemoteCopyTo_Stub$address() {
        return IStorage_RemoteCopyTo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteCopyTo_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteCopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteCopyTo_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteEnumElements_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_RemoteEnumElements_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteEnumElements_Proxy$descriptor() {
        return IStorage_RemoteEnumElements_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_RemoteEnumElements_Proxy$handle() {
        return IStorage_RemoteEnumElements_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MemorySegment IStorage_RemoteEnumElements_Proxy$address() {
        return IStorage_RemoteEnumElements_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_RemoteEnumElements_Proxy(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_RemoteEnumElements_Proxy(MemorySegment This, int reserved1, int cbReserved2, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_RemoteEnumElements_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteEnumElements_Proxy", This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_RemoteEnumElements_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_RemoteEnumElements_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IStorage_RemoteEnumElements_Stub$descriptor() {
        return IStorage_RemoteEnumElements_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IStorage_RemoteEnumElements_Stub$handle() {
        return IStorage_RemoteEnumElements_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IStorage_RemoteEnumElements_Stub$address() {
        return IStorage_RemoteEnumElements_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IStorage_RemoteEnumElements_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IStorage_RemoteEnumElements_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_RemoteEnumElements_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistFile *LPPERSISTFILE
     * }
     */
    public static final AddressLayout LPPERSISTFILE = winapi.C_POINTER;

    private static class IID_IPersistFile$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPersistFile").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static GroupLayout IID_IPersistFile$layout() {
        return IID_IPersistFile$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static MemorySegment IID_IPersistFile() {
        return IID_IPersistFile$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistFile
     * }
     */
    public static void IID_IPersistFile(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistFile$constants.SEGMENT, 0L, IID_IPersistFile$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IPersistStorage *LPPERSISTSTORAGE
     * }
     */
    public static final AddressLayout LPPERSISTSTORAGE = winapi.C_POINTER;

    private static class IID_IPersistStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPersistStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static GroupLayout IID_IPersistStorage$layout() {
        return IID_IPersistStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static MemorySegment IID_IPersistStorage() {
        return IID_IPersistStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IPersistStorage
     * }
     */
    public static void IID_IPersistStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPersistStorage$constants.SEGMENT, 0L, IID_IPersistStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0068_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0068_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0068_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0068_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ILockBytes *LPLOCKBYTES
     * }
     */
    public static final AddressLayout LPLOCKBYTES = winapi.C_POINTER;

    private static class IID_ILockBytes$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ILockBytes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static GroupLayout IID_ILockBytes$layout() {
        return IID_ILockBytes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static MemorySegment IID_ILockBytes() {
        return IID_ILockBytes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILockBytes
     * }
     */
    public static void IID_ILockBytes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ILockBytes$constants.SEGMENT, 0L, IID_ILockBytes$constants.LAYOUT.byteSize());
    }

    private static class ILockBytes_RemoteReadAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ILockBytes_RemoteReadAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteReadAt_Proxy$descriptor() {
        return ILockBytes_RemoteReadAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_RemoteReadAt_Proxy$handle() {
        return ILockBytes_RemoteReadAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ILockBytes_RemoteReadAt_Proxy$address() {
        return ILockBytes_RemoteReadAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_RemoteReadAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_RemoteReadAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteReadAt_Proxy", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteReadAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ILockBytes_RemoteReadAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteReadAt_Stub$descriptor() {
        return ILockBytes_RemoteReadAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ILockBytes_RemoteReadAt_Stub$handle() {
        return ILockBytes_RemoteReadAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ILockBytes_RemoteReadAt_Stub$address() {
        return ILockBytes_RemoteReadAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ILockBytes_RemoteReadAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ILockBytes_RemoteReadAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteReadAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteWriteAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ILockBytes_RemoteWriteAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteWriteAt_Proxy$descriptor() {
        return ILockBytes_RemoteWriteAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_RemoteWriteAt_Proxy$handle() {
        return ILockBytes_RemoteWriteAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ILockBytes_RemoteWriteAt_Proxy$address() {
        return ILockBytes_RemoteWriteAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_RemoteWriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_RemoteWriteAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_RemoteWriteAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteWriteAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_RemoteWriteAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ILockBytes_RemoteWriteAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ILockBytes_RemoteWriteAt_Stub$descriptor() {
        return ILockBytes_RemoteWriteAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ILockBytes_RemoteWriteAt_Stub$handle() {
        return ILockBytes_RemoteWriteAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ILockBytes_RemoteWriteAt_Stub$address() {
        return ILockBytes_RemoteWriteAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ILockBytes_RemoteWriteAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ILockBytes_RemoteWriteAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_RemoteWriteAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumFORMATETC *LPENUMFORMATETC
     * }
     */
    public static final AddressLayout LPENUMFORMATETC = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef CLIPFORMAT *LPCLIPFORMAT
     * }
     */
    public static final AddressLayout LPCLIPFORMAT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagFORMATETC {
     *     CLIPFORMAT cfFormat;
     *     DVTARGETDEVICE *ptd;
     *     DWORD dwAspect;
     *     LONG lindex;
     *     DWORD tymed;
     * } *LPFORMATETC
     * }
     */
    public static final AddressLayout LPFORMATETC = winapi.C_POINTER;

    private static class IID_IEnumFORMATETC$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumFORMATETC").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static GroupLayout IID_IEnumFORMATETC$layout() {
        return IID_IEnumFORMATETC$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static MemorySegment IID_IEnumFORMATETC() {
        return IID_IEnumFORMATETC$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumFORMATETC
     * }
     */
    public static void IID_IEnumFORMATETC(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumFORMATETC$constants.SEGMENT, 0L, IID_IEnumFORMATETC$constants.LAYOUT.byteSize());
    }

    private static class IEnumFORMATETC_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumFORMATETC_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_RemoteNext_Proxy$descriptor() {
        return IEnumFORMATETC_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_RemoteNext_Proxy$handle() {
        return IEnumFORMATETC_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumFORMATETC_RemoteNext_Proxy$address() {
        return IEnumFORMATETC_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumFORMATETC_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_RemoteNext_Stub$descriptor() {
        return IEnumFORMATETC_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumFORMATETC_RemoteNext_Stub$handle() {
        return IEnumFORMATETC_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumFORMATETC_RemoteNext_Stub$address() {
        return IEnumFORMATETC_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumFORMATETC_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumFORMATETC_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumSTATDATA *LPENUMSTATDATA
     * }
     */
    public static final AddressLayout LPENUMSTATDATA = winapi.C_POINTER;
    private static final int ADVF_NODATA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_NODATA = 1
     * }
     */
    public static int ADVF_NODATA() {
        return ADVF_NODATA;
    }
    private static final int ADVF_PRIMEFIRST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_PRIMEFIRST = 2
     * }
     */
    public static int ADVF_PRIMEFIRST() {
        return ADVF_PRIMEFIRST;
    }
    private static final int ADVF_ONLYONCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_ONLYONCE = 4
     * }
     */
    public static int ADVF_ONLYONCE() {
        return ADVF_ONLYONCE;
    }
    private static final int ADVF_DATAONSTOP = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVF_DATAONSTOP = 64
     * }
     */
    public static int ADVF_DATAONSTOP() {
        return ADVF_DATAONSTOP;
    }
    private static final int ADVFCACHE_NOHANDLER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_NOHANDLER = 8
     * }
     */
    public static int ADVFCACHE_NOHANDLER() {
        return ADVFCACHE_NOHANDLER;
    }
    private static final int ADVFCACHE_FORCEBUILTIN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_FORCEBUILTIN = 16
     * }
     */
    public static int ADVFCACHE_FORCEBUILTIN() {
        return ADVFCACHE_FORCEBUILTIN;
    }
    private static final int ADVFCACHE_ONSAVE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagADVF.ADVFCACHE_ONSAVE = 32
     * }
     */
    public static int ADVFCACHE_ONSAVE() {
        return ADVFCACHE_ONSAVE;
    }
    /**
     * {@snippet lang=c :
     * typedef STATDATA *LPSTATDATA
     * }
     */
    public static final AddressLayout LPSTATDATA = winapi.C_POINTER;

    private static class IID_IEnumSTATDATA$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumSTATDATA").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static GroupLayout IID_IEnumSTATDATA$layout() {
        return IID_IEnumSTATDATA$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static MemorySegment IID_IEnumSTATDATA() {
        return IID_IEnumSTATDATA$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumSTATDATA
     * }
     */
    public static void IID_IEnumSTATDATA(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumSTATDATA$constants.SEGMENT, 0L, IID_IEnumSTATDATA$constants.LAYOUT.byteSize());
    }

    private static class IEnumSTATDATA_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumSTATDATA_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_RemoteNext_Proxy$descriptor() {
        return IEnumSTATDATA_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_RemoteNext_Proxy$handle() {
        return IEnumSTATDATA_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATDATA_RemoteNext_Proxy$address() {
        return IEnumSTATDATA_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_RemoteNext_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumSTATDATA_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_RemoteNext_Stub$descriptor() {
        return IEnumSTATDATA_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumSTATDATA_RemoteNext_Stub$handle() {
        return IEnumSTATDATA_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumSTATDATA_RemoteNext_Stub$address() {
        return IEnumSTATDATA_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumSTATDATA_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumSTATDATA_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IRootStorage *LPROOTSTORAGE
     * }
     */
    public static final AddressLayout LPROOTSTORAGE = winapi.C_POINTER;

    private static class IID_IRootStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IRootStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static GroupLayout IID_IRootStorage$layout() {
        return IID_IRootStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static MemorySegment IID_IRootStorage() {
        return IID_IRootStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IRootStorage
     * }
     */
    public static void IID_IRootStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IRootStorage$constants.SEGMENT, 0L, IID_IRootStorage$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IAdviseSink *LPADVISESINK
     * }
     */
    public static final AddressLayout LPADVISESINK = winapi.C_POINTER;
    private static final int TYMED_HGLOBAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_HGLOBAL = 1
     * }
     */
    public static int TYMED_HGLOBAL() {
        return TYMED_HGLOBAL;
    }
    private static final int TYMED_FILE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_FILE = 2
     * }
     */
    public static int TYMED_FILE() {
        return TYMED_FILE;
    }
    private static final int TYMED_ISTREAM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ISTREAM = 4
     * }
     */
    public static int TYMED_ISTREAM() {
        return TYMED_ISTREAM;
    }
    private static final int TYMED_ISTORAGE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ISTORAGE = 8
     * }
     */
    public static int TYMED_ISTORAGE() {
        return TYMED_ISTORAGE;
    }
    private static final int TYMED_GDI = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_GDI = 16
     * }
     */
    public static int TYMED_GDI() {
        return TYMED_GDI;
    }
    private static final int TYMED_MFPICT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_MFPICT = 32
     * }
     */
    public static int TYMED_MFPICT() {
        return TYMED_MFPICT;
    }
    private static final int TYMED_ENHMF = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_ENHMF = 64
     * }
     */
    public static int TYMED_ENHMF() {
        return TYMED_ENHMF;
    }
    private static final int TYMED_NULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagTYMED.TYMED_NULL = 0
     * }
     */
    public static int TYMED_NULL() {
        return TYMED_NULL;
    }
    /**
     * {@snippet lang=c :
     * typedef userSTGMEDIUM *wireSTGMEDIUM
     * }
     */
    public static final AddressLayout wireSTGMEDIUM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userSTGMEDIUM *wireASYNC_STGMEDIUM
     * }
     */
    public static final AddressLayout wireASYNC_STGMEDIUM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef STGMEDIUM *LPSTGMEDIUM
     * }
     */
    public static final AddressLayout LPSTGMEDIUM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM
     * }
     */
    public static final AddressLayout wireFLAG_STGMEDIUM = winapi.C_POINTER;

    private static class IID_IAdviseSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IAdviseSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static GroupLayout IID_IAdviseSink$layout() {
        return IID_IAdviseSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static MemorySegment IID_IAdviseSink() {
        return IID_IAdviseSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink
     * }
     */
    public static void IID_IAdviseSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAdviseSink$constants.SEGMENT, 0L, IID_IAdviseSink$constants.LAYOUT.byteSize());
    }

    private static class IAdviseSink_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnDataChange_Proxy$descriptor() {
        return IAdviseSink_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnDataChange_Proxy$handle() {
        return IAdviseSink_RemoteOnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnDataChange_Proxy$address() {
        return IAdviseSink_RemoteOnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int IAdviseSink_RemoteOnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnDataChange_Stub$descriptor() {
        return IAdviseSink_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnDataChange_Stub$handle() {
        return IAdviseSink_RemoteOnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnDataChange_Stub$address() {
        return IAdviseSink_RemoteOnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnViewChange_Proxy$descriptor() {
        return IAdviseSink_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnViewChange_Proxy$handle() {
        return IAdviseSink_RemoteOnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnViewChange_Proxy$address() {
        return IAdviseSink_RemoteOnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int IAdviseSink_RemoteOnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnViewChange_Proxy", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnViewChange_Stub$descriptor() {
        return IAdviseSink_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnViewChange_Stub$handle() {
        return IAdviseSink_RemoteOnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnViewChange_Stub$address() {
        return IAdviseSink_RemoteOnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnRename_Proxy$descriptor() {
        return IAdviseSink_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnRename_Proxy$handle() {
        return IAdviseSink_RemoteOnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnRename_Proxy$address() {
        return IAdviseSink_RemoteOnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink_RemoteOnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnRename_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnRename_Stub$descriptor() {
        return IAdviseSink_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnRename_Stub$handle() {
        return IAdviseSink_RemoteOnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnRename_Stub$address() {
        return IAdviseSink_RemoteOnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnSave_Proxy$descriptor() {
        return IAdviseSink_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnSave_Proxy$handle() {
        return IAdviseSink_RemoteOnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnSave_Proxy$address() {
        return IAdviseSink_RemoteOnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnSave_Stub$descriptor() {
        return IAdviseSink_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnSave_Stub$handle() {
        return IAdviseSink_RemoteOnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnSave_Stub$address() {
        return IAdviseSink_RemoteOnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnClose_Proxy$descriptor() {
        return IAdviseSink_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnClose_Proxy$handle() {
        return IAdviseSink_RemoteOnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnClose_Proxy$address() {
        return IAdviseSink_RemoteOnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_RemoteOnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_RemoteOnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink_RemoteOnClose_Stub$descriptor() {
        return IAdviseSink_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink_RemoteOnClose_Stub$handle() {
        return IAdviseSink_RemoteOnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink_RemoteOnClose_Stub$address() {
        return IAdviseSink_RemoteOnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_AsyncIAdviseSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_AsyncIAdviseSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static GroupLayout IID_AsyncIAdviseSink$layout() {
        return IID_AsyncIAdviseSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static MemorySegment IID_AsyncIAdviseSink() {
        return IID_AsyncIAdviseSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink
     * }
     */
    public static void IID_AsyncIAdviseSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIAdviseSink$constants.SEGMENT, 0L, IID_AsyncIAdviseSink$constants.LAYOUT.byteSize());
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnRename_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnRename_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnRename_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnRename_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnRename_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnRename_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnRename_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnRename_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnRename_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnRename_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnRename_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnSave_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnSave_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnSave_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnSave_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnSave_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnSave_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnSave_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnSave_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnSave_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnSave_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnClose_Proxy$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnClose_Proxy$address() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_RemoteOnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_RemoteOnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_RemoteOnClose_Stub$handle() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_RemoteOnClose_Stub$address() {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Begin_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnClose_Proxy$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnClose_Proxy$address() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnClose_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_RemoteOnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_RemoteOnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_RemoteOnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_RemoteOnClose_Stub$handle() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_RemoteOnClose_Stub$address() {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink_Finish_RemoteOnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_RemoteOnClose_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IAdviseSink2 *LPADVISESINK2
     * }
     */
    public static final AddressLayout LPADVISESINK2 = winapi.C_POINTER;

    private static class IID_IAdviseSink2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IAdviseSink2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static GroupLayout IID_IAdviseSink2$layout() {
        return IID_IAdviseSink2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static MemorySegment IID_IAdviseSink2() {
        return IID_IAdviseSink2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IAdviseSink2
     * }
     */
    public static void IID_IAdviseSink2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IAdviseSink2$constants.SEGMENT, 0L, IID_IAdviseSink2$constants.LAYOUT.byteSize());
    }

    private static class IAdviseSink2_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink2_RemoteOnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_RemoteOnLinkSrcChange_Proxy$handle() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink2_RemoteOnLinkSrcChange_Proxy$address() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink2_RemoteOnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_RemoteOnLinkSrcChange_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink2_RemoteOnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_RemoteOnLinkSrcChange_Stub$descriptor() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IAdviseSink2_RemoteOnLinkSrcChange_Stub$handle() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IAdviseSink2_RemoteOnLinkSrcChange_Stub$address() {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IAdviseSink2_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IAdviseSink2_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_AsyncIAdviseSink2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_AsyncIAdviseSink2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static GroupLayout IID_AsyncIAdviseSink2$layout() {
        return IID_AsyncIAdviseSink2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static MemorySegment IID_AsyncIAdviseSink2() {
        return IID_AsyncIAdviseSink2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_AsyncIAdviseSink2
     * }
     */
    public static void IID_AsyncIAdviseSink2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_AsyncIAdviseSink2$constants.SEGMENT, 0L, IID_AsyncIAdviseSink2$constants.LAYOUT.byteSize());
    }

    private static class AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy$address() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub$address() {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy$address() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static int AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub$address() {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0074_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0074_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0074_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0074_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataObject *LPDATAOBJECT
     * }
     */
    public static final AddressLayout LPDATAOBJECT = winapi.C_POINTER;
    private static final int DATADIR_GET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDATADIR.DATADIR_GET = 1
     * }
     */
    public static int DATADIR_GET() {
        return DATADIR_GET;
    }
    private static final int DATADIR_SET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDATADIR.DATADIR_SET = 2
     * }
     */
    public static int DATADIR_SET() {
        return DATADIR_SET;
    }

    private static class IID_IDataObject$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDataObject").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static GroupLayout IID_IDataObject$layout() {
        return IID_IDataObject$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static MemorySegment IID_IDataObject() {
        return IID_IDataObject$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataObject
     * }
     */
    public static void IID_IDataObject(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataObject$constants.SEGMENT, 0L, IID_IDataObject$constants.LAYOUT.byteSize());
    }

    private static class IDataObject_RemoteGetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_RemoteGetData_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetData_Proxy$descriptor() {
        return IDataObject_RemoteGetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetData_Proxy$handle() {
        return IDataObject_RemoteGetData_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MemorySegment IDataObject_RemoteGetData_Proxy$address() {
        return IDataObject_RemoteGetData_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_RemoteGetData_Proxy(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_RemoteGetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetData_Proxy", This, pformatetcIn, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_RemoteGetData_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetData_Stub$descriptor() {
        return IDataObject_RemoteGetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetData_Stub$handle() {
        return IDataObject_RemoteGetData_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IDataObject_RemoteGetData_Stub$address() {
        return IDataObject_RemoteGetData_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteGetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteGetData_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteGetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetData_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetDataHere_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_RemoteGetDataHere_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetDataHere_Proxy$descriptor() {
        return IDataObject_RemoteGetDataHere_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetDataHere_Proxy$handle() {
        return IDataObject_RemoteGetDataHere_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MemorySegment IDataObject_RemoteGetDataHere_Proxy$address() {
        return IDataObject_RemoteGetDataHere_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteGetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_RemoteGetDataHere_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_RemoteGetDataHere_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetDataHere_Proxy", This, pformatetc, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteGetDataHere_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_RemoteGetDataHere_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteGetDataHere_Stub$descriptor() {
        return IDataObject_RemoteGetDataHere_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteGetDataHere_Stub$handle() {
        return IDataObject_RemoteGetDataHere_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IDataObject_RemoteGetDataHere_Stub$address() {
        return IDataObject_RemoteGetDataHere_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteGetDataHere_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteGetDataHere_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteGetDataHere_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteSetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_RemoteSetData_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteSetData_Proxy$descriptor() {
        return IDataObject_RemoteSetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_RemoteSetData_Proxy$handle() {
        return IDataObject_RemoteSetData_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MemorySegment IDataObject_RemoteSetData_Proxy$address() {
        return IDataObject_RemoteSetData_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_RemoteSetData_Proxy(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_RemoteSetData_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_RemoteSetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteSetData_Proxy", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_RemoteSetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_RemoteSetData_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDataObject_RemoteSetData_Stub$descriptor() {
        return IDataObject_RemoteSetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDataObject_RemoteSetData_Stub$handle() {
        return IDataObject_RemoteSetData_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IDataObject_RemoteSetData_Stub$address() {
        return IDataObject_RemoteSetData_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IDataObject_RemoteSetData_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDataObject_RemoteSetData_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDataObject_RemoteSetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_RemoteSetData_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataAdviseHolder *LPDATAADVISEHOLDER
     * }
     */
    public static final AddressLayout LPDATAADVISEHOLDER = winapi.C_POINTER;

    private static class IID_IDataAdviseHolder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDataAdviseHolder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static GroupLayout IID_IDataAdviseHolder$layout() {
        return IID_IDataAdviseHolder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static MemorySegment IID_IDataAdviseHolder() {
        return IID_IDataAdviseHolder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataAdviseHolder
     * }
     */
    public static void IID_IDataAdviseHolder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataAdviseHolder$constants.SEGMENT, 0L, IID_IDataAdviseHolder$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef IMessageFilter *LPMESSAGEFILTER
     * }
     */
    public static final AddressLayout LPMESSAGEFILTER = winapi.C_POINTER;
    private static final int CALLTYPE_TOPLEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_TOPLEVEL = 1
     * }
     */
    public static int CALLTYPE_TOPLEVEL() {
        return CALLTYPE_TOPLEVEL;
    }
    private static final int CALLTYPE_NESTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_NESTED = 2
     * }
     */
    public static int CALLTYPE_NESTED() {
        return CALLTYPE_NESTED;
    }
    private static final int CALLTYPE_ASYNC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_ASYNC = 3
     * }
     */
    public static int CALLTYPE_ASYNC() {
        return CALLTYPE_ASYNC;
    }
    private static final int CALLTYPE_TOPLEVEL_CALLPENDING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_TOPLEVEL_CALLPENDING = 4
     * }
     */
    public static int CALLTYPE_TOPLEVEL_CALLPENDING() {
        return CALLTYPE_TOPLEVEL_CALLPENDING;
    }
    private static final int CALLTYPE_ASYNC_CALLPENDING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagCALLTYPE.CALLTYPE_ASYNC_CALLPENDING = 5
     * }
     */
    public static int CALLTYPE_ASYNC_CALLPENDING() {
        return CALLTYPE_ASYNC_CALLPENDING;
    }
    private static final int SERVERCALL_ISHANDLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_ISHANDLED = 0
     * }
     */
    public static int SERVERCALL_ISHANDLED() {
        return SERVERCALL_ISHANDLED;
    }
    private static final int SERVERCALL_REJECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_REJECTED = 1
     * }
     */
    public static int SERVERCALL_REJECTED() {
        return SERVERCALL_REJECTED;
    }
    private static final int SERVERCALL_RETRYLATER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSERVERCALL.SERVERCALL_RETRYLATER = 2
     * }
     */
    public static int SERVERCALL_RETRYLATER() {
        return SERVERCALL_RETRYLATER;
    }
    private static final int PENDINGTYPE_TOPLEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGTYPE.PENDINGTYPE_TOPLEVEL = 1
     * }
     */
    public static int PENDINGTYPE_TOPLEVEL() {
        return PENDINGTYPE_TOPLEVEL;
    }
    private static final int PENDINGTYPE_NESTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGTYPE.PENDINGTYPE_NESTED = 2
     * }
     */
    public static int PENDINGTYPE_NESTED() {
        return PENDINGTYPE_NESTED;
    }
    private static final int PENDINGMSG_CANCELCALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_CANCELCALL = 0
     * }
     */
    public static int PENDINGMSG_CANCELCALL() {
        return PENDINGMSG_CANCELCALL;
    }
    private static final int PENDINGMSG_WAITNOPROCESS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_WAITNOPROCESS = 1
     * }
     */
    public static int PENDINGMSG_WAITNOPROCESS() {
        return PENDINGMSG_WAITNOPROCESS;
    }
    private static final int PENDINGMSG_WAITDEFPROCESS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagPENDINGMSG.PENDINGMSG_WAITDEFPROCESS = 2
     * }
     */
    public static int PENDINGMSG_WAITDEFPROCESS() {
        return PENDINGMSG_WAITDEFPROCESS;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagINTERFACEINFO {
     *     IUnknown *pUnk;
     *     IID iid;
     *     WORD wMethod;
     * } *LPINTERFACEINFO
     * }
     */
    public static final AddressLayout LPINTERFACEINFO = winapi.C_POINTER;

    private static class IID_IMessageFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IMessageFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static GroupLayout IID_IMessageFilter$layout() {
        return IID_IMessageFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static MemorySegment IID_IMessageFilter() {
        return IID_IMessageFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IMessageFilter
     * }
     */
    public static void IID_IMessageFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IMessageFilter$constants.SEGMENT, 0L, IID_IMessageFilter$constants.LAYOUT.byteSize());
    }

    private static class FMTID_SummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FMTID_SummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static GroupLayout FMTID_SummaryInformation$layout() {
        return FMTID_SummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static MemorySegment FMTID_SummaryInformation() {
        return FMTID_SummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_SummaryInformation
     * }
     */
    public static void FMTID_SummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_SummaryInformation$constants.SEGMENT, 0L, FMTID_SummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_DocSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FMTID_DocSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static GroupLayout FMTID_DocSummaryInformation$layout() {
        return FMTID_DocSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static MemorySegment FMTID_DocSummaryInformation() {
        return FMTID_DocSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DocSummaryInformation
     * }
     */
    public static void FMTID_DocSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_DocSummaryInformation$constants.SEGMENT, 0L, FMTID_DocSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_UserDefinedProperties$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FMTID_UserDefinedProperties").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static GroupLayout FMTID_UserDefinedProperties$layout() {
        return FMTID_UserDefinedProperties$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static MemorySegment FMTID_UserDefinedProperties() {
        return FMTID_UserDefinedProperties$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_UserDefinedProperties
     * }
     */
    public static void FMTID_UserDefinedProperties(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_UserDefinedProperties$constants.SEGMENT, 0L, FMTID_UserDefinedProperties$constants.LAYOUT.byteSize());
    }

    private static class FMTID_DiscardableInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FMTID_DiscardableInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static GroupLayout FMTID_DiscardableInformation$layout() {
        return FMTID_DiscardableInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static MemorySegment FMTID_DiscardableInformation() {
        return FMTID_DiscardableInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_DiscardableInformation
     * }
     */
    public static void FMTID_DiscardableInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_DiscardableInformation$constants.SEGMENT, 0L, FMTID_DiscardableInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_ImageSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FMTID_ImageSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static GroupLayout FMTID_ImageSummaryInformation$layout() {
        return FMTID_ImageSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static MemorySegment FMTID_ImageSummaryInformation() {
        return FMTID_ImageSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_ImageSummaryInformation
     * }
     */
    public static void FMTID_ImageSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_ImageSummaryInformation$constants.SEGMENT, 0L, FMTID_ImageSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_AudioSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FMTID_AudioSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static GroupLayout FMTID_AudioSummaryInformation$layout() {
        return FMTID_AudioSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static MemorySegment FMTID_AudioSummaryInformation() {
        return FMTID_AudioSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_AudioSummaryInformation
     * }
     */
    public static void FMTID_AudioSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_AudioSummaryInformation$constants.SEGMENT, 0L, FMTID_AudioSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_VideoSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FMTID_VideoSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static GroupLayout FMTID_VideoSummaryInformation$layout() {
        return FMTID_VideoSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static MemorySegment FMTID_VideoSummaryInformation() {
        return FMTID_VideoSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_VideoSummaryInformation
     * }
     */
    public static void FMTID_VideoSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_VideoSummaryInformation$constants.SEGMENT, 0L, FMTID_VideoSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class FMTID_MediaFileSummaryInformation$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FMTID_MediaFileSummaryInformation").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static GroupLayout FMTID_MediaFileSummaryInformation$layout() {
        return FMTID_MediaFileSummaryInformation$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static MemorySegment FMTID_MediaFileSummaryInformation() {
        return FMTID_MediaFileSummaryInformation$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const FMTID FMTID_MediaFileSummaryInformation
     * }
     */
    public static void FMTID_MediaFileSummaryInformation(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FMTID_MediaFileSummaryInformation$constants.SEGMENT, 0L, FMTID_MediaFileSummaryInformation$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IClassActivator$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IClassActivator").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static GroupLayout IID_IClassActivator$layout() {
        return IID_IClassActivator$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static MemorySegment IID_IClassActivator() {
        return IID_IClassActivator$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IClassActivator
     * }
     */
    public static void IID_IClassActivator(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IClassActivator$constants.SEGMENT, 0L, IID_IClassActivator$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IFillLockBytes$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IFillLockBytes").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static GroupLayout IID_IFillLockBytes$layout() {
        return IID_IFillLockBytes$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static MemorySegment IID_IFillLockBytes() {
        return IID_IFillLockBytes$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IFillLockBytes
     * }
     */
    public static void IID_IFillLockBytes(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IFillLockBytes$constants.SEGMENT, 0L, IID_IFillLockBytes$constants.LAYOUT.byteSize());
    }

    private static class IFillLockBytes_RemoteFillAppend_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IFillLockBytes_RemoteFillAppend_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAppend_Proxy$descriptor() {
        return IFillLockBytes_RemoteFillAppend_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAppend_Proxy$handle() {
        return IFillLockBytes_RemoteFillAppend_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_RemoteFillAppend_Proxy$address() {
        return IFillLockBytes_RemoteFillAppend_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_RemoteFillAppend_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_RemoteFillAppend_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAppend_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAppend_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IFillLockBytes_RemoteFillAppend_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAppend_Stub$descriptor() {
        return IFillLockBytes_RemoteFillAppend_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAppend_Stub$handle() {
        return IFillLockBytes_RemoteFillAppend_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IFillLockBytes_RemoteFillAppend_Stub$address() {
        return IFillLockBytes_RemoteFillAppend_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IFillLockBytes_RemoteFillAppend_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IFillLockBytes_RemoteFillAppend_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAppend_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IFillLockBytes_RemoteFillAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAt_Proxy$descriptor() {
        return IFillLockBytes_RemoteFillAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAt_Proxy$handle() {
        return IFillLockBytes_RemoteFillAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_RemoteFillAt_Proxy$address() {
        return IFillLockBytes_RemoteFillAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_RemoteFillAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_RemoteFillAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_RemoteFillAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IFillLockBytes_RemoteFillAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_RemoteFillAt_Stub$descriptor() {
        return IFillLockBytes_RemoteFillAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IFillLockBytes_RemoteFillAt_Stub$handle() {
        return IFillLockBytes_RemoteFillAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IFillLockBytes_RemoteFillAt_Stub$address() {
        return IFillLockBytes_RemoteFillAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IFillLockBytes_RemoteFillAt_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IFillLockBytes_RemoteFillAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_RemoteFillAt_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IProgressNotify$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IProgressNotify").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static GroupLayout IID_IProgressNotify$layout() {
        return IID_IProgressNotify$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static MemorySegment IID_IProgressNotify() {
        return IID_IProgressNotify$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProgressNotify
     * }
     */
    public static void IID_IProgressNotify(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProgressNotify$constants.SEGMENT, 0L, IID_IProgressNotify$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0080_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0080_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0080_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0080_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ILayoutStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ILayoutStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static GroupLayout IID_ILayoutStorage$layout() {
        return IID_ILayoutStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static MemorySegment IID_ILayoutStorage() {
        return IID_ILayoutStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ILayoutStorage
     * }
     */
    public static void IID_ILayoutStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ILayoutStorage$constants.SEGMENT, 0L, IID_ILayoutStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0081_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0081_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0081_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0081_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IBlockingLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IBlockingLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static GroupLayout IID_IBlockingLock$layout() {
        return IID_IBlockingLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static MemorySegment IID_IBlockingLock() {
        return IID_IBlockingLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBlockingLock
     * }
     */
    public static void IID_IBlockingLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBlockingLock$constants.SEGMENT, 0L, IID_IBlockingLock$constants.LAYOUT.byteSize());
    }

    private static class IID_ITimeAndNoticeControl$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ITimeAndNoticeControl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static GroupLayout IID_ITimeAndNoticeControl$layout() {
        return IID_ITimeAndNoticeControl$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static MemorySegment IID_ITimeAndNoticeControl() {
        return IID_ITimeAndNoticeControl$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITimeAndNoticeControl
     * }
     */
    public static void IID_ITimeAndNoticeControl(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITimeAndNoticeControl$constants.SEGMENT, 0L, IID_ITimeAndNoticeControl$constants.LAYOUT.byteSize());
    }

    private static class IID_IOplockStorage$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IOplockStorage").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static GroupLayout IID_IOplockStorage$layout() {
        return IID_IOplockStorage$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static MemorySegment IID_IOplockStorage() {
        return IID_IOplockStorage$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IOplockStorage
     * }
     */
    public static void IID_IOplockStorage(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IOplockStorage$constants.SEGMENT, 0L, IID_IOplockStorage$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0084_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0084_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0084_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0084_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IDirectWriterLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDirectWriterLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static GroupLayout IID_IDirectWriterLock$layout() {
        return IID_IDirectWriterLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static MemorySegment IID_IDirectWriterLock() {
        return IID_IDirectWriterLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDirectWriterLock
     * }
     */
    public static void IID_IDirectWriterLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDirectWriterLock$constants.SEGMENT, 0L, IID_IDirectWriterLock$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0085_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0085_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0085_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0085_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IUrlMon$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IUrlMon").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static GroupLayout IID_IUrlMon$layout() {
        return IID_IUrlMon$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static MemorySegment IID_IUrlMon() {
        return IID_IUrlMon$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUrlMon
     * }
     */
    public static void IID_IUrlMon(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUrlMon$constants.SEGMENT, 0L, IID_IUrlMon$constants.LAYOUT.byteSize());
    }

    private static class IID_IForegroundTransfer$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IForegroundTransfer").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static GroupLayout IID_IForegroundTransfer$layout() {
        return IID_IForegroundTransfer$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static MemorySegment IID_IForegroundTransfer() {
        return IID_IForegroundTransfer$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IForegroundTransfer
     * }
     */
    public static void IID_IForegroundTransfer(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IForegroundTransfer$constants.SEGMENT, 0L, IID_IForegroundTransfer$constants.LAYOUT.byteSize());
    }

    private static class IID_IThumbnailExtractor$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IThumbnailExtractor").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static GroupLayout IID_IThumbnailExtractor$layout() {
        return IID_IThumbnailExtractor$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static MemorySegment IID_IThumbnailExtractor() {
        return IID_IThumbnailExtractor$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IThumbnailExtractor
     * }
     */
    public static void IID_IThumbnailExtractor(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IThumbnailExtractor$constants.SEGMENT, 0L, IID_IThumbnailExtractor$constants.LAYOUT.byteSize());
    }

    private static class IID_IDummyHICONIncluder$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDummyHICONIncluder").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static GroupLayout IID_IDummyHICONIncluder$layout() {
        return IID_IDummyHICONIncluder$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static MemorySegment IID_IDummyHICONIncluder() {
        return IID_IDummyHICONIncluder$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDummyHICONIncluder
     * }
     */
    public static void IID_IDummyHICONIncluder(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDummyHICONIncluder$constants.SEGMENT, 0L, IID_IDummyHICONIncluder$constants.LAYOUT.byteSize());
    }
    private static final int ServerApplication = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagApplicationType.ServerApplication = 0
     * }
     */
    public static int ServerApplication() {
        return ServerApplication;
    }
    private static final int LibraryApplication = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagApplicationType.LibraryApplication = 1
     * }
     */
    public static int LibraryApplication() {
        return LibraryApplication;
    }
    private static final int IdleShutdown = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagShutdownType.IdleShutdown = 0
     * }
     */
    public static int IdleShutdown() {
        return IdleShutdown;
    }
    private static final int ForcedShutdown = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagShutdownType.ForcedShutdown = 1
     * }
     */
    public static int ForcedShutdown() {
        return ForcedShutdown;
    }

    private static class __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IProcessLock$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IProcessLock").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static GroupLayout IID_IProcessLock$layout() {
        return IID_IProcessLock$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static MemorySegment IID_IProcessLock() {
        return IID_IProcessLock$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IProcessLock
     * }
     */
    public static void IID_IProcessLock(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IProcessLock$constants.SEGMENT, 0L, IID_IProcessLock$constants.LAYOUT.byteSize());
    }

    private static class IID_ISurrogateService$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISurrogateService").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static GroupLayout IID_ISurrogateService$layout() {
        return IID_ISurrogateService$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static MemorySegment IID_ISurrogateService() {
        return IID_ISurrogateService$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISurrogateService
     * }
     */
    public static void IID_ISurrogateService(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISurrogateService$constants.SEGMENT, 0L, IID_ISurrogateService$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInitializeSpy *LPINITIALIZESPY
     * }
     */
    public static final AddressLayout LPINITIALIZESPY = winapi.C_POINTER;

    private static class IID_IInitializeSpy$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInitializeSpy").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static GroupLayout IID_IInitializeSpy$layout() {
        return IID_IInitializeSpy$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static MemorySegment IID_IInitializeSpy() {
        return IID_IInitializeSpy$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInitializeSpy
     * }
     */
    public static void IID_IInitializeSpy(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInitializeSpy$constants.SEGMENT, 0L, IID_IInitializeSpy$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0092_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0092_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0092_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0092_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IApartmentShutdown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IApartmentShutdown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static GroupLayout IID_IApartmentShutdown$layout() {
        return IID_IApartmentShutdown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static MemorySegment IID_IApartmentShutdown() {
        return IID_IApartmentShutdown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IApartmentShutdown
     * }
     */
    public static void IID_IApartmentShutdown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IApartmentShutdown$constants.SEGMENT, 0L, IID_IApartmentShutdown$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0093_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec() {
        return __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0093_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_objidl_0000_0093_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$layout() {
        return __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$segment() {
        return __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec() {
        return __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_objidl_0000_0093_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class ASYNC_STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ASYNC_STGMEDIUM_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserSize$descriptor() {
        return ASYNC_STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserSize$handle() {
        return ASYNC_STGMEDIUM_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserSize$address() {
        return ASYNC_STGMEDIUM_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static int ASYNC_STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ASYNC_STGMEDIUM_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserMarshal$descriptor() {
        return ASYNC_STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserMarshal$handle() {
        return ASYNC_STGMEDIUM_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal$address() {
        return ASYNC_STGMEDIUM_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ASYNC_STGMEDIUM_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserUnmarshal$descriptor() {
        return ASYNC_STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserUnmarshal$handle() {
        return ASYNC_STGMEDIUM_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal$address() {
        return ASYNC_STGMEDIUM_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ASYNC_STGMEDIUM_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserFree$descriptor() {
        return ASYNC_STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserFree$handle() {
        return ASYNC_STGMEDIUM_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserFree$address() {
        return ASYNC_STGMEDIUM_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static void ASYNC_STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = ASYNC_STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLIPFORMAT_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserSize$descriptor() {
        return CLIPFORMAT_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserSize$handle() {
        return CLIPFORMAT_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserSize$address() {
        return CLIPFORMAT_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static int CLIPFORMAT_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLIPFORMAT_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserMarshal$descriptor() {
        return CLIPFORMAT_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserMarshal$handle() {
        return CLIPFORMAT_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal$address() {
        return CLIPFORMAT_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLIPFORMAT_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserUnmarshal$descriptor() {
        return CLIPFORMAT_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserUnmarshal$handle() {
        return CLIPFORMAT_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal$address() {
        return CLIPFORMAT_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLIPFORMAT_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserFree$descriptor() {
        return CLIPFORMAT_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserFree$handle() {
        return CLIPFORMAT_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserFree$address() {
        return CLIPFORMAT_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static void CLIPFORMAT_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLIPFORMAT_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FLAG_STGMEDIUM_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserSize$descriptor() {
        return FLAG_STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserSize$handle() {
        return FLAG_STGMEDIUM_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserSize$address() {
        return FLAG_STGMEDIUM_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static int FLAG_STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FLAG_STGMEDIUM_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserMarshal$descriptor() {
        return FLAG_STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserMarshal$handle() {
        return FLAG_STGMEDIUM_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal$address() {
        return FLAG_STGMEDIUM_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FLAG_STGMEDIUM_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserUnmarshal$descriptor() {
        return FLAG_STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserUnmarshal$handle() {
        return FLAG_STGMEDIUM_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal$address() {
        return FLAG_STGMEDIUM_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FLAG_STGMEDIUM_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserFree$descriptor() {
        return FLAG_STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserFree$handle() {
        return FLAG_STGMEDIUM_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserFree$address() {
        return FLAG_STGMEDIUM_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static void FLAG_STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = FLAG_STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HBITMAP_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserSize$descriptor() {
        return HBITMAP_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserSize$handle() {
        return HBITMAP_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserSize$address() {
        return HBITMAP_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static int HBITMAP_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HBITMAP_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserMarshal$descriptor() {
        return HBITMAP_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserMarshal$handle() {
        return HBITMAP_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal$address() {
        return HBITMAP_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HBITMAP_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserUnmarshal$descriptor() {
        return HBITMAP_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserUnmarshal$handle() {
        return HBITMAP_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal$address() {
        return HBITMAP_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HBITMAP_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserFree$descriptor() {
        return HBITMAP_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserFree$handle() {
        return HBITMAP_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserFree$address() {
        return HBITMAP_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HBITMAP_UserFree(unsigned long *, HBITMAP *)
     * }
     */
    public static void HBITMAP_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HBITMAP_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HDC_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserSize$descriptor() {
        return HDC_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MethodHandle HDC_UserSize$handle() {
        return HDC_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MemorySegment HDC_UserSize$address() {
        return HDC_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HDC_UserSize(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static int HDC_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HDC_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HDC_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserMarshal$descriptor() {
        return HDC_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserMarshal$handle() {
        return HDC_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal$address() {
        return HDC_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HDC_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserUnmarshal$descriptor() {
        return HDC_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserUnmarshal$handle() {
        return HDC_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal$address() {
        return HDC_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HDC_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserFree$descriptor() {
        return HDC_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserFree$handle() {
        return HDC_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserFree$address() {
        return HDC_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HDC_UserFree(unsigned long *, HDC *)
     * }
     */
    public static void HDC_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HDC_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HICON_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserSize$descriptor() {
        return HICON_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MethodHandle HICON_UserSize$handle() {
        return HICON_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MemorySegment HICON_UserSize$address() {
        return HICON_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HICON_UserSize(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static int HICON_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HICON_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HICON_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserMarshal$descriptor() {
        return HICON_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserMarshal$handle() {
        return HICON_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal$address() {
        return HICON_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HICON_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserUnmarshal$descriptor() {
        return HICON_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserUnmarshal$handle() {
        return HICON_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal$address() {
        return HICON_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HICON_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserFree$descriptor() {
        return HICON_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserFree$handle() {
        return HICON_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserFree$address() {
        return HICON_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HICON_UserFree(unsigned long *, HICON *)
     * }
     */
    public static void HICON_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = HICON_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SNB_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserSize$descriptor() {
        return SNB_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MethodHandle SNB_UserSize$handle() {
        return SNB_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MemorySegment SNB_UserSize$address() {
        return SNB_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long SNB_UserSize(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static int SNB_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = SNB_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SNB_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserMarshal$descriptor() {
        return SNB_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserMarshal$handle() {
        return SNB_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal$address() {
        return SNB_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SNB_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserUnmarshal$descriptor() {
        return SNB_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserUnmarshal$handle() {
        return SNB_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal$address() {
        return SNB_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SNB_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserFree$descriptor() {
        return SNB_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserFree$handle() {
        return SNB_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserFree$address() {
        return SNB_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SNB_UserFree(unsigned long *, SNB *)
     * }
     */
    public static void SNB_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = SNB_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("STGMEDIUM_UserSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserSize$descriptor() {
        return STGMEDIUM_UserSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserSize$handle() {
        return STGMEDIUM_UserSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserSize$address() {
        return STGMEDIUM_UserSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static int STGMEDIUM_UserSize(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserSize", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserMarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("STGMEDIUM_UserMarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserMarshal$descriptor() {
        return STGMEDIUM_UserMarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserMarshal$handle() {
        return STGMEDIUM_UserMarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal$address() {
        return STGMEDIUM_UserMarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserMarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserMarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserUnmarshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("STGMEDIUM_UserUnmarshal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserUnmarshal$descriptor() {
        return STGMEDIUM_UserUnmarshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserUnmarshal$handle() {
        return STGMEDIUM_UserUnmarshal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal$address() {
        return STGMEDIUM_UserUnmarshal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserUnmarshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserUnmarshal", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("STGMEDIUM_UserFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserFree$descriptor() {
        return STGMEDIUM_UserFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserFree$handle() {
        return STGMEDIUM_UserFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserFree$address() {
        return STGMEDIUM_UserFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree(unsigned long *, STGMEDIUM *)
     * }
     */
    public static void STGMEDIUM_UserFree(MemorySegment x0, MemorySegment x1) {
        var mh$ = STGMEDIUM_UserFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserFree", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ASYNC_STGMEDIUM_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserSize64$descriptor() {
        return ASYNC_STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserSize64$handle() {
        return ASYNC_STGMEDIUM_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserSize64$address() {
        return ASYNC_STGMEDIUM_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long ASYNC_STGMEDIUM_UserSize64(unsigned long *, unsigned long, ASYNC_STGMEDIUM *)
     * }
     */
    public static int ASYNC_STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ASYNC_STGMEDIUM_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserMarshal64$descriptor() {
        return ASYNC_STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserMarshal64$handle() {
        return ASYNC_STGMEDIUM_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal64$address() {
        return ASYNC_STGMEDIUM_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ASYNC_STGMEDIUM_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserUnmarshal64$descriptor() {
        return ASYNC_STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserUnmarshal64$handle() {
        return ASYNC_STGMEDIUM_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal64$address() {
        return ASYNC_STGMEDIUM_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *ASYNC_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = ASYNC_STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ASYNC_STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ASYNC_STGMEDIUM_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor ASYNC_STGMEDIUM_UserFree64$descriptor() {
        return ASYNC_STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MethodHandle ASYNC_STGMEDIUM_UserFree64$handle() {
        return ASYNC_STGMEDIUM_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static MemorySegment ASYNC_STGMEDIUM_UserFree64$address() {
        return ASYNC_STGMEDIUM_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ASYNC_STGMEDIUM_UserFree64(unsigned long *, ASYNC_STGMEDIUM *)
     * }
     */
    public static void ASYNC_STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = ASYNC_STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ASYNC_STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLIPFORMAT_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserSize64$descriptor() {
        return CLIPFORMAT_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserSize64$handle() {
        return CLIPFORMAT_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserSize64$address() {
        return CLIPFORMAT_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long CLIPFORMAT_UserSize64(unsigned long *, unsigned long, CLIPFORMAT *)
     * }
     */
    public static int CLIPFORMAT_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLIPFORMAT_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserMarshal64$descriptor() {
        return CLIPFORMAT_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserMarshal64$handle() {
        return CLIPFORMAT_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal64$address() {
        return CLIPFORMAT_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserMarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLIPFORMAT_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserUnmarshal64$descriptor() {
        return CLIPFORMAT_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserUnmarshal64$handle() {
        return CLIPFORMAT_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal64$address() {
        return CLIPFORMAT_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *CLIPFORMAT_UserUnmarshal64(unsigned long *, unsigned char *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = CLIPFORMAT_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLIPFORMAT_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CLIPFORMAT_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static FunctionDescriptor CLIPFORMAT_UserFree64$descriptor() {
        return CLIPFORMAT_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MethodHandle CLIPFORMAT_UserFree64$handle() {
        return CLIPFORMAT_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static MemorySegment CLIPFORMAT_UserFree64$address() {
        return CLIPFORMAT_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void CLIPFORMAT_UserFree64(unsigned long *, CLIPFORMAT *)
     * }
     */
    public static void CLIPFORMAT_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = CLIPFORMAT_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CLIPFORMAT_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FLAG_STGMEDIUM_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserSize64$descriptor() {
        return FLAG_STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserSize64$handle() {
        return FLAG_STGMEDIUM_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserSize64$address() {
        return FLAG_STGMEDIUM_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long FLAG_STGMEDIUM_UserSize64(unsigned long *, unsigned long, FLAG_STGMEDIUM *)
     * }
     */
    public static int FLAG_STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FLAG_STGMEDIUM_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserMarshal64$descriptor() {
        return FLAG_STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserMarshal64$handle() {
        return FLAG_STGMEDIUM_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal64$address() {
        return FLAG_STGMEDIUM_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FLAG_STGMEDIUM_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserUnmarshal64$descriptor() {
        return FLAG_STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserUnmarshal64$handle() {
        return FLAG_STGMEDIUM_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal64$address() {
        return FLAG_STGMEDIUM_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *FLAG_STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = FLAG_STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FLAG_STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FLAG_STGMEDIUM_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor FLAG_STGMEDIUM_UserFree64$descriptor() {
        return FLAG_STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MethodHandle FLAG_STGMEDIUM_UserFree64$handle() {
        return FLAG_STGMEDIUM_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static MemorySegment FLAG_STGMEDIUM_UserFree64$address() {
        return FLAG_STGMEDIUM_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FLAG_STGMEDIUM_UserFree64(unsigned long *, FLAG_STGMEDIUM *)
     * }
     */
    public static void FLAG_STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = FLAG_STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FLAG_STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HBITMAP_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserSize64$descriptor() {
        return HBITMAP_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserSize64$handle() {
        return HBITMAP_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserSize64$address() {
        return HBITMAP_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HBITMAP_UserSize64(unsigned long *, unsigned long, HBITMAP *)
     * }
     */
    public static int HBITMAP_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HBITMAP_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserMarshal64$descriptor() {
        return HBITMAP_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserMarshal64$handle() {
        return HBITMAP_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal64$address() {
        return HBITMAP_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserMarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HBITMAP_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserUnmarshal64$descriptor() {
        return HBITMAP_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserUnmarshal64$handle() {
        return HBITMAP_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal64$address() {
        return HBITMAP_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HBITMAP_UserUnmarshal64(unsigned long *, unsigned char *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HBITMAP_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HBITMAP_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HBITMAP_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static FunctionDescriptor HBITMAP_UserFree64$descriptor() {
        return HBITMAP_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static MethodHandle HBITMAP_UserFree64$handle() {
        return HBITMAP_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static MemorySegment HBITMAP_UserFree64$address() {
        return HBITMAP_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HBITMAP_UserFree64(unsigned long *, HBITMAP *)
     * }
     */
    public static void HBITMAP_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HBITMAP_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HBITMAP_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HDC_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserSize64$descriptor() {
        return HDC_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MethodHandle HDC_UserSize64$handle() {
        return HDC_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static MemorySegment HDC_UserSize64$address() {
        return HDC_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HDC_UserSize64(unsigned long *, unsigned long, HDC *)
     * }
     */
    public static int HDC_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HDC_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HDC_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserMarshal64$descriptor() {
        return HDC_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserMarshal64$handle() {
        return HDC_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal64$address() {
        return HDC_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserMarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HDC_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserUnmarshal64$descriptor() {
        return HDC_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserUnmarshal64$handle() {
        return HDC_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal64$address() {
        return HDC_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HDC_UserUnmarshal64(unsigned long *, unsigned char *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HDC_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HDC_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HDC_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static FunctionDescriptor HDC_UserFree64$descriptor() {
        return HDC_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static MethodHandle HDC_UserFree64$handle() {
        return HDC_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static MemorySegment HDC_UserFree64$address() {
        return HDC_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HDC_UserFree64(unsigned long *, HDC *)
     * }
     */
    public static void HDC_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HDC_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HDC_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HICON_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserSize64$descriptor() {
        return HICON_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MethodHandle HICON_UserSize64$handle() {
        return HICON_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static MemorySegment HICON_UserSize64$address() {
        return HICON_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long HICON_UserSize64(unsigned long *, unsigned long, HICON *)
     * }
     */
    public static int HICON_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = HICON_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HICON_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserMarshal64$descriptor() {
        return HICON_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserMarshal64$handle() {
        return HICON_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal64$address() {
        return HICON_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserMarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HICON_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserUnmarshal64$descriptor() {
        return HICON_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserUnmarshal64$handle() {
        return HICON_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal64$address() {
        return HICON_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *HICON_UserUnmarshal64(unsigned long *, unsigned char *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = HICON_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class HICON_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("HICON_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static FunctionDescriptor HICON_UserFree64$descriptor() {
        return HICON_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static MethodHandle HICON_UserFree64$handle() {
        return HICON_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static MemorySegment HICON_UserFree64$address() {
        return HICON_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void HICON_UserFree64(unsigned long *, HICON *)
     * }
     */
    public static void HICON_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = HICON_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("HICON_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SNB_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserSize64$descriptor() {
        return SNB_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MethodHandle SNB_UserSize64$handle() {
        return SNB_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static MemorySegment SNB_UserSize64$address() {
        return SNB_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long SNB_UserSize64(unsigned long *, unsigned long, SNB *)
     * }
     */
    public static int SNB_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = SNB_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SNB_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserMarshal64$descriptor() {
        return SNB_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserMarshal64$handle() {
        return SNB_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal64$address() {
        return SNB_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserMarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SNB_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserUnmarshal64$descriptor() {
        return SNB_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserUnmarshal64$handle() {
        return SNB_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal64$address() {
        return SNB_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *SNB_UserUnmarshal64(unsigned long *, unsigned char *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = SNB_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SNB_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SNB_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static FunctionDescriptor SNB_UserFree64$descriptor() {
        return SNB_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static MethodHandle SNB_UserFree64$handle() {
        return SNB_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static MemorySegment SNB_UserFree64$address() {
        return SNB_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SNB_UserFree64(unsigned long *, SNB *)
     * }
     */
    public static void SNB_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = SNB_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SNB_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserSize64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("STGMEDIUM_UserSize64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserSize64$descriptor() {
        return STGMEDIUM_UserSize64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserSize64$handle() {
        return STGMEDIUM_UserSize64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserSize64$address() {
        return STGMEDIUM_UserSize64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long STGMEDIUM_UserSize64(unsigned long *, unsigned long, STGMEDIUM *)
     * }
     */
    public static int STGMEDIUM_UserSize64(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserSize64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserSize64", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserMarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("STGMEDIUM_UserMarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserMarshal64$descriptor() {
        return STGMEDIUM_UserMarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserMarshal64$handle() {
        return STGMEDIUM_UserMarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal64$address() {
        return STGMEDIUM_UserMarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserMarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserMarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserMarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserMarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserUnmarshal64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("STGMEDIUM_UserUnmarshal64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserUnmarshal64$descriptor() {
        return STGMEDIUM_UserUnmarshal64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserUnmarshal64$handle() {
        return STGMEDIUM_UserUnmarshal64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal64$address() {
        return STGMEDIUM_UserUnmarshal64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned char *STGMEDIUM_UserUnmarshal64(unsigned long *, unsigned char *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserUnmarshal64(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = STGMEDIUM_UserUnmarshal64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserUnmarshal64", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class STGMEDIUM_UserFree64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("STGMEDIUM_UserFree64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static FunctionDescriptor STGMEDIUM_UserFree64$descriptor() {
        return STGMEDIUM_UserFree64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MethodHandle STGMEDIUM_UserFree64$handle() {
        return STGMEDIUM_UserFree64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static MemorySegment STGMEDIUM_UserFree64$address() {
        return STGMEDIUM_UserFree64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void STGMEDIUM_UserFree64(unsigned long *, STGMEDIUM *)
     * }
     */
    public static void STGMEDIUM_UserFree64(MemorySegment x0, MemorySegment x1) {
        var mh$ = STGMEDIUM_UserFree64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("STGMEDIUM_UserFree64", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_SetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindCtx_SetBindOptions_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_SetBindOptions_Proxy$descriptor() {
        return IBindCtx_SetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_SetBindOptions_Proxy$handle() {
        return IBindCtx_SetBindOptions_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_SetBindOptions_Proxy$address() {
        return IBindCtx_SetBindOptions_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static int IBindCtx_SetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_SetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_SetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_SetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindCtx_SetBindOptions_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_SetBindOptions_Stub$descriptor() {
        return IBindCtx_SetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_SetBindOptions_Stub$handle() {
        return IBindCtx_SetBindOptions_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_SetBindOptions_Stub$address() {
        return IBindCtx_SetBindOptions_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_SetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_SetBindOptions_Stub(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_SetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_SetBindOptions_Stub", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_GetBindOptions_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindCtx_GetBindOptions_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_GetBindOptions_Proxy$descriptor() {
        return IBindCtx_GetBindOptions_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_GetBindOptions_Proxy$handle() {
        return IBindCtx_GetBindOptions_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_GetBindOptions_Proxy$address() {
        return IBindCtx_GetBindOptions_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Proxy(IBindCtx *This, BIND_OPTS *pbindopts)
     * }
     */
    public static int IBindCtx_GetBindOptions_Proxy(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_GetBindOptions_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_GetBindOptions_Proxy", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindCtx_GetBindOptions_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindCtx_GetBindOptions_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static FunctionDescriptor IBindCtx_GetBindOptions_Stub$descriptor() {
        return IBindCtx_GetBindOptions_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MethodHandle IBindCtx_GetBindOptions_Stub$handle() {
        return IBindCtx_GetBindOptions_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static MemorySegment IBindCtx_GetBindOptions_Stub$address() {
        return IBindCtx_GetBindOptions_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindCtx_GetBindOptions_Stub(IBindCtx *This, BIND_OPTS2 *pbindopts)
     * }
     */
    public static int IBindCtx_GetBindOptions_Stub(MemorySegment This, MemorySegment pbindopts) {
        var mh$ = IBindCtx_GetBindOptions_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindCtx_GetBindOptions_Stub", This, pbindopts);
            }
            return (int)mh$.invokeExact(This, pbindopts);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumMoniker_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_Next_Proxy$descriptor() {
        return IEnumMoniker_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_Next_Proxy$handle() {
        return IEnumMoniker_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumMoniker_Next_Proxy$address() {
        return IEnumMoniker_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Proxy(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumMoniker_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumMoniker_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumMoniker_Next_Stub$descriptor() {
        return IEnumMoniker_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumMoniker_Next_Stub$handle() {
        return IEnumMoniker_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumMoniker_Next_Stub$address() {
        return IEnumMoniker_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumMoniker_Next_Stub(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumMoniker_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumMoniker_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumMoniker_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_IsRunning_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IRunnableObject_IsRunning_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_IsRunning_Proxy$descriptor() {
        return IRunnableObject_IsRunning_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_IsRunning_Proxy$handle() {
        return IRunnableObject_IsRunning_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static MemorySegment IRunnableObject_IsRunning_Proxy$address() {
        return IRunnableObject_IsRunning_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IRunnableObject_IsRunning_Proxy(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_IsRunning_Proxy(MemorySegment This) {
        var mh$ = IRunnableObject_IsRunning_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_IsRunning_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IRunnableObject_IsRunning_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IRunnableObject_IsRunning_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static FunctionDescriptor IRunnableObject_IsRunning_Stub$descriptor() {
        return IRunnableObject_IsRunning_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static MethodHandle IRunnableObject_IsRunning_Stub$handle() {
        return IRunnableObject_IsRunning_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static MemorySegment IRunnableObject_IsRunning_Stub$address() {
        return IRunnableObject_IsRunning_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IRunnableObject_IsRunning_Stub(IRunnableObject *This)
     * }
     */
    public static int IRunnableObject_IsRunning_Stub(MemorySegment This) {
        var mh$ = IRunnableObject_IsRunning_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IRunnableObject_IsRunning_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IMoniker_BindToObject_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToObject_Proxy$descriptor() {
        return IMoniker_BindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_BindToObject_Proxy$handle() {
        return IMoniker_BindToObject_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static MemorySegment IMoniker_BindToObject_Proxy$address() {
        return IMoniker_BindToObject_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult)
     * }
     */
    public static int IMoniker_BindToObject_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_BindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToObject_Proxy", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IMoniker_BindToObject_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToObject_Stub$descriptor() {
        return IMoniker_BindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MethodHandle IMoniker_BindToObject_Stub$handle() {
        return IMoniker_BindToObject_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static MemorySegment IMoniker_BindToObject_Stub$address() {
        return IMoniker_BindToObject_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToObject_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, IUnknown **ppvResult)
     * }
     */
    public static int IMoniker_BindToObject_Stub(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riidResult, MemorySegment ppvResult) {
        var mh$ = IMoniker_BindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToObject_Stub", This, pbc, pmkToLeft, riidResult, ppvResult);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riidResult, ppvResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IMoniker_BindToStorage_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToStorage_Proxy$descriptor() {
        return IMoniker_BindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_BindToStorage_Proxy$handle() {
        return IMoniker_BindToStorage_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static MemorySegment IMoniker_BindToStorage_Proxy$address() {
        return IMoniker_BindToStorage_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Proxy(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IMoniker_BindToStorage_Proxy(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_BindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToStorage_Proxy", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IMoniker_BindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IMoniker_BindToStorage_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IMoniker_BindToStorage_Stub$descriptor() {
        return IMoniker_BindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IMoniker_BindToStorage_Stub$handle() {
        return IMoniker_BindToStorage_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IMoniker_BindToStorage_Stub$address() {
        return IMoniker_BindToStorage_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IMoniker_BindToStorage_Stub(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IMoniker_BindToStorage_Stub(MemorySegment This, MemorySegment pbc, MemorySegment pmkToLeft, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IMoniker_BindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IMoniker_BindToStorage_Stub", This, pbc, pmkToLeft, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pbc, pmkToLeft, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumSTATSTG_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_Next_Proxy$descriptor() {
        return IEnumSTATSTG_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_Next_Proxy$handle() {
        return IEnumSTATSTG_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATSTG_Next_Proxy$address() {
        return IEnumSTATSTG_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Proxy(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATSTG_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumSTATSTG_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATSTG_Next_Stub$descriptor() {
        return IEnumSTATSTG_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATSTG_Next_Stub$handle() {
        return IEnumSTATSTG_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATSTG_Next_Stub$address() {
        return IEnumSTATSTG_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATSTG_Next_Stub(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATSTG_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATSTG_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATSTG_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_OpenStream_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_OpenStream_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_OpenStream_Proxy$descriptor() {
        return IStorage_OpenStream_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_OpenStream_Proxy$handle() {
        return IStorage_OpenStream_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MemorySegment IStorage_OpenStream_Proxy$address() {
        return IStorage_OpenStream_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Proxy(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_OpenStream_Proxy(MemorySegment This, MemorySegment pwcsName, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_OpenStream_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_OpenStream_Proxy", This, pwcsName, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_OpenStream_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_OpenStream_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static FunctionDescriptor IStorage_OpenStream_Stub$descriptor() {
        return IStorage_OpenStream_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MethodHandle IStorage_OpenStream_Stub$handle() {
        return IStorage_OpenStream_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static MemorySegment IStorage_OpenStream_Stub$address() {
        return IStorage_OpenStream_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_OpenStream_Stub(IStorage *This, const OLECHAR *pwcsName, ULONG cbReserved1, byte *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm)
     * }
     */
    public static int IStorage_OpenStream_Stub(MemorySegment This, MemorySegment pwcsName, int cbReserved1, MemorySegment reserved1, int grfMode, int reserved2, MemorySegment ppstm) {
        var mh$ = IStorage_OpenStream_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_OpenStream_Stub", This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
            }
            return (int)mh$.invokeExact(This, pwcsName, cbReserved1, reserved1, grfMode, reserved2, ppstm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_CopyTo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_CopyTo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_CopyTo_Proxy$descriptor() {
        return IStorage_CopyTo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_CopyTo_Proxy$handle() {
        return IStorage_CopyTo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MemorySegment IStorage_CopyTo_Proxy$address() {
        return IStorage_CopyTo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Proxy(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_CopyTo_Proxy(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_CopyTo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_CopyTo_Proxy", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_CopyTo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_CopyTo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static FunctionDescriptor IStorage_CopyTo_Stub$descriptor() {
        return IStorage_CopyTo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MethodHandle IStorage_CopyTo_Stub$handle() {
        return IStorage_CopyTo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static MemorySegment IStorage_CopyTo_Stub$address() {
        return IStorage_CopyTo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_CopyTo_Stub(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest)
     * }
     */
    public static int IStorage_CopyTo_Stub(MemorySegment This, int ciidExclude, MemorySegment rgiidExclude, MemorySegment snbExclude, MemorySegment pstgDest) {
        var mh$ = IStorage_CopyTo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_CopyTo_Stub", This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
            }
            return (int)mh$.invokeExact(This, ciidExclude, rgiidExclude, snbExclude, pstgDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_EnumElements_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_EnumElements_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_EnumElements_Proxy$descriptor() {
        return IStorage_EnumElements_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_EnumElements_Proxy$handle() {
        return IStorage_EnumElements_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MemorySegment IStorage_EnumElements_Proxy$address() {
        return IStorage_EnumElements_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Proxy(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_EnumElements_Proxy(MemorySegment This, int reserved1, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_EnumElements_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_EnumElements_Proxy", This, reserved1, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IStorage_EnumElements_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IStorage_EnumElements_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static FunctionDescriptor IStorage_EnumElements_Stub$descriptor() {
        return IStorage_EnumElements_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MethodHandle IStorage_EnumElements_Stub$handle() {
        return IStorage_EnumElements_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static MemorySegment IStorage_EnumElements_Stub$address() {
        return IStorage_EnumElements_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IStorage_EnumElements_Stub(IStorage *This, DWORD reserved1, ULONG cbReserved2, byte *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum)
     * }
     */
    public static int IStorage_EnumElements_Stub(MemorySegment This, int reserved1, int cbReserved2, MemorySegment reserved2, int reserved3, MemorySegment ppenum) {
        var mh$ = IStorage_EnumElements_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IStorage_EnumElements_Stub", This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
            }
            return (int)mh$.invokeExact(This, reserved1, cbReserved2, reserved2, reserved3, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_ReadAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ILockBytes_ReadAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_ReadAt_Proxy$descriptor() {
        return ILockBytes_ReadAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_ReadAt_Proxy$handle() {
        return ILockBytes_ReadAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ILockBytes_ReadAt_Proxy$address() {
        return ILockBytes_ReadAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_ReadAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_ReadAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_ReadAt_Proxy", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_ReadAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ILockBytes_ReadAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static FunctionDescriptor ILockBytes_ReadAt_Stub$descriptor() {
        return ILockBytes_ReadAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MethodHandle ILockBytes_ReadAt_Stub$handle() {
        return ILockBytes_ReadAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static MemorySegment ILockBytes_ReadAt_Stub$address() {
        return ILockBytes_ReadAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_ReadAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, byte *pv, ULONG cb, ULONG *pcbRead)
     * }
     */
    public static int ILockBytes_ReadAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbRead) {
        var mh$ = ILockBytes_ReadAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_ReadAt_Stub", This, ulOffset, pv, cb, pcbRead);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_WriteAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ILockBytes_WriteAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_WriteAt_Proxy$descriptor() {
        return ILockBytes_WriteAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_WriteAt_Proxy$handle() {
        return ILockBytes_WriteAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ILockBytes_WriteAt_Proxy$address() {
        return ILockBytes_WriteAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Proxy(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_WriteAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_WriteAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_WriteAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ILockBytes_WriteAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ILockBytes_WriteAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor ILockBytes_WriteAt_Stub$descriptor() {
        return ILockBytes_WriteAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle ILockBytes_WriteAt_Stub$handle() {
        return ILockBytes_WriteAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment ILockBytes_WriteAt_Stub$address() {
        return ILockBytes_WriteAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ILockBytes_WriteAt_Stub(ILockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int ILockBytes_WriteAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = ILockBytes_WriteAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ILockBytes_WriteAt_Stub", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumFORMATETC_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_Next_Proxy$descriptor() {
        return IEnumFORMATETC_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_Next_Proxy$handle() {
        return IEnumFORMATETC_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumFORMATETC_Next_Proxy$address() {
        return IEnumFORMATETC_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Proxy(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumFORMATETC_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumFORMATETC_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumFORMATETC_Next_Stub$descriptor() {
        return IEnumFORMATETC_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumFORMATETC_Next_Stub$handle() {
        return IEnumFORMATETC_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumFORMATETC_Next_Stub$address() {
        return IEnumFORMATETC_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumFORMATETC_Next_Stub(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumFORMATETC_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumFORMATETC_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumFORMATETC_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_Next_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumSTATDATA_Next_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_Next_Proxy$descriptor() {
        return IEnumSTATDATA_Next_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_Next_Proxy$handle() {
        return IEnumSTATDATA_Next_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATDATA_Next_Proxy$address() {
        return IEnumSTATDATA_Next_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Proxy(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_Next_Proxy(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_Next_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_Next_Proxy", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumSTATDATA_Next_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumSTATDATA_Next_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static FunctionDescriptor IEnumSTATDATA_Next_Stub$descriptor() {
        return IEnumSTATDATA_Next_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MethodHandle IEnumSTATDATA_Next_Stub$handle() {
        return IEnumSTATDATA_Next_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static MemorySegment IEnumSTATDATA_Next_Stub$address() {
        return IEnumSTATDATA_Next_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumSTATDATA_Next_Stub(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched)
     * }
     */
    public static int IEnumSTATDATA_Next_Stub(MemorySegment This, int celt, MemorySegment rgelt, MemorySegment pceltFetched) {
        var mh$ = IEnumSTATDATA_Next_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumSTATDATA_Next_Stub", This, celt, rgelt, pceltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgelt, pceltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnDataChange_Proxy$descriptor() {
        return IAdviseSink_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_OnDataChange_Proxy$handle() {
        return IAdviseSink_OnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment IAdviseSink_OnDataChange_Proxy$address() {
        return IAdviseSink_OnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnDataChange_Proxy(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static void IAdviseSink_OnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnDataChange_Stub$descriptor() {
        return IAdviseSink_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle IAdviseSink_OnDataChange_Stub$handle() {
        return IAdviseSink_OnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment IAdviseSink_OnDataChange_Stub$address() {
        return IAdviseSink_OnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnDataChange_Stub(IAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int IAdviseSink_OnDataChange_Stub(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = IAdviseSink_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnDataChange_Stub", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnViewChange_Proxy$descriptor() {
        return IAdviseSink_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_OnViewChange_Proxy$handle() {
        return IAdviseSink_OnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment IAdviseSink_OnViewChange_Proxy$address() {
        return IAdviseSink_OnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnViewChange_Proxy(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static void IAdviseSink_OnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnViewChange_Proxy", This, dwAspect, lindex);
            }
            mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnViewChange_Stub$descriptor() {
        return IAdviseSink_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle IAdviseSink_OnViewChange_Stub$handle() {
        return IAdviseSink_OnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment IAdviseSink_OnViewChange_Stub$address() {
        return IAdviseSink_OnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnViewChange_Stub(IAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int IAdviseSink_OnViewChange_Stub(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = IAdviseSink_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnViewChange_Stub", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnRename_Proxy$descriptor() {
        return IAdviseSink_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_OnRename_Proxy$handle() {
        return IAdviseSink_OnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink_OnRename_Proxy$address() {
        return IAdviseSink_OnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnRename_Proxy(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static void IAdviseSink_OnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnRename_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnRename_Stub$descriptor() {
        return IAdviseSink_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink_OnRename_Stub$handle() {
        return IAdviseSink_OnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink_OnRename_Stub$address() {
        return IAdviseSink_OnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnRename_Stub(IAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink_OnRename_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnRename_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnSave_Proxy$descriptor() {
        return IAdviseSink_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnSave_Proxy$handle() {
        return IAdviseSink_OnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_OnSave_Proxy$address() {
        return IAdviseSink_OnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnSave_Proxy(IAdviseSink *This)
     * }
     */
    public static void IAdviseSink_OnSave_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnSave_Stub$descriptor() {
        return IAdviseSink_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnSave_Stub$handle() {
        return IAdviseSink_OnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_OnSave_Stub$address() {
        return IAdviseSink_OnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnSave_Stub(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_OnSave_Stub(MemorySegment This) {
        var mh$ = IAdviseSink_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnClose_Proxy$descriptor() {
        return IAdviseSink_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnClose_Proxy$handle() {
        return IAdviseSink_OnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_OnClose_Proxy$address() {
        return IAdviseSink_OnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink_OnClose_Proxy(IAdviseSink *This)
     * }
     */
    public static void IAdviseSink_OnClose_Proxy(MemorySegment This) {
        var mh$ = IAdviseSink_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink_OnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static FunctionDescriptor IAdviseSink_OnClose_Stub$descriptor() {
        return IAdviseSink_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static MethodHandle IAdviseSink_OnClose_Stub$handle() {
        return IAdviseSink_OnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static MemorySegment IAdviseSink_OnClose_Stub$address() {
        return IAdviseSink_OnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink_OnClose_Stub(IAdviseSink *This)
     * }
     */
    public static int IAdviseSink_OnClose_Stub(MemorySegment This) {
        var mh$ = IAdviseSink_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnDataChange_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnDataChange_Proxy(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnDataChange_Proxy", This, pFormatetc, pStgmed);
            }
            mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnDataChange_Stub$address() {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink *This, FORMATETC *pFormatetc, ASYNC_STGMEDIUM *pStgmed)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnDataChange_Stub(MemorySegment This, MemorySegment pFormatetc, MemorySegment pStgmed) {
        var mh$ = AsyncIAdviseSink_Begin_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnDataChange_Stub", This, pFormatetc, pStgmed);
            }
            return (int)mh$.invokeExact(This, pFormatetc, pStgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnDataChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnDataChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnDataChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnDataChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnDataChange_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnDataChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnDataChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnDataChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnDataChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnDataChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnDataChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnDataChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnDataChange_Stub$address() {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnDataChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnDataChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnDataChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnViewChange_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnViewChange_Proxy(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnViewChange_Proxy", This, dwAspect, lindex);
            }
            mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnViewChange_Stub$address() {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnViewChange_Stub(MemorySegment This, int dwAspect, int lindex) {
        var mh$ = AsyncIAdviseSink_Begin_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnViewChange_Stub", This, dwAspect, lindex);
            }
            return (int)mh$.invokeExact(This, dwAspect, lindex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnViewChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnViewChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnViewChange_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnViewChange_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnViewChange_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnViewChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnViewChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnViewChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnViewChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnViewChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnViewChange_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnViewChange_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnViewChange_Stub$address() {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnViewChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnViewChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnViewChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnRename_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnRename_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnRename_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnRename_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnRename_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnRename_Stub$address() {
        return AsyncIAdviseSink_Begin_OnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnRename_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink_Begin_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnRename_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnRename_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnRename_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnRename_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnRename_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnRename_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnRename_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnRename_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnRename_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnRename_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnRename_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnRename_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnRename_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnRename_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnRename_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnRename_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnRename_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnRename_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnRename_Stub$address() {
        return AsyncIAdviseSink_Finish_OnRename_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnRename_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnRename_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnRename_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnSave_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnSave_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnSave_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnSave_Stub$address() {
        return AsyncIAdviseSink_Begin_OnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnSave_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnSave_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnSave_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnSave_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnSave_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnSave_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnSave_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnSave_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnSave_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnSave_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnSave_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnSave_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnSave_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnSave_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnSave_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnSave_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnSave_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnSave_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnSave_Stub$address() {
        return AsyncIAdviseSink_Finish_OnSave_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnSave_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnSave_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnSave_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Begin_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnClose_Proxy$handle() {
        return AsyncIAdviseSink_Begin_OnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnClose_Proxy$address() {
        return AsyncIAdviseSink_Begin_OnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Begin_OnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Begin_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Begin_OnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Begin_OnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Begin_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Begin_OnClose_Stub$handle() {
        return AsyncIAdviseSink_Begin_OnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Begin_OnClose_Stub$address() {
        return AsyncIAdviseSink_Begin_OnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Begin_OnClose_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Begin_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Begin_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnClose_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnClose_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnClose_Proxy$descriptor() {
        return AsyncIAdviseSink_Finish_OnClose_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnClose_Proxy$handle() {
        return AsyncIAdviseSink_Finish_OnClose_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnClose_Proxy$address() {
        return AsyncIAdviseSink_Finish_OnClose_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink *This)
     * }
     */
    public static void AsyncIAdviseSink_Finish_OnClose_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnClose_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnClose_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink_Finish_OnClose_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink_Finish_OnClose_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink_Finish_OnClose_Stub$descriptor() {
        return AsyncIAdviseSink_Finish_OnClose_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink_Finish_OnClose_Stub$handle() {
        return AsyncIAdviseSink_Finish_OnClose_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink_Finish_OnClose_Stub$address() {
        return AsyncIAdviseSink_Finish_OnClose_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink *This)
     * }
     */
    public static int AsyncIAdviseSink_Finish_OnClose_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink_Finish_OnClose_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink_Finish_OnClose_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink2_OnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_OnLinkSrcChange_Proxy$descriptor() {
        return IAdviseSink2_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_OnLinkSrcChange_Proxy$handle() {
        return IAdviseSink2_OnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink2_OnLinkSrcChange_Proxy$address() {
        return IAdviseSink2_OnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static void IAdviseSink2_OnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_OnLinkSrcChange_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IAdviseSink2_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IAdviseSink2_OnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor IAdviseSink2_OnLinkSrcChange_Stub$descriptor() {
        return IAdviseSink2_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle IAdviseSink2_OnLinkSrcChange_Stub$handle() {
        return IAdviseSink2_OnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment IAdviseSink2_OnLinkSrcChange_Stub$address() {
        return IAdviseSink2_OnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int IAdviseSink2_OnLinkSrcChange_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = IAdviseSink2_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IAdviseSink2_OnLinkSrcChange_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy$address() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy", This, pmk);
            }
            mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub$address() {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This, IMoniker *pmk)
     * }
     */
    public static int AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(MemorySegment This, MemorySegment pmk) {
        var mh$ = AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub", This, pmk);
            }
            return (int)mh$.invokeExact(This, pmk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy$descriptor() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy$handle() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy$address() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2 *This)
     * }
     */
    public static void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy", This);
            }
            mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static FunctionDescriptor AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub$descriptor() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static MethodHandle AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub$handle() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static MemorySegment AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub$address() {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2 *This)
     * }
     */
    public static int AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(MemorySegment This) {
        var mh$ = AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_GetData_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetData_Proxy$descriptor() {
        return IDataObject_GetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static MethodHandle IDataObject_GetData_Proxy$handle() {
        return IDataObject_GetData_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static MemorySegment IDataObject_GetData_Proxy$address() {
        return IDataObject_GetData_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Proxy(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium)
     * }
     */
    public static int IDataObject_GetData_Proxy(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pmedium) {
        var mh$ = IDataObject_GetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetData_Proxy", This, pformatetcIn, pmedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pmedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_GetData_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetData_Stub$descriptor() {
        return IDataObject_GetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_GetData_Stub$handle() {
        return IDataObject_GetData_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MemorySegment IDataObject_GetData_Stub$address() {
        return IDataObject_GetData_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetData_Stub(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_GetData_Stub(MemorySegment This, MemorySegment pformatetcIn, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_GetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetData_Stub", This, pformatetcIn, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetcIn, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetDataHere_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_GetDataHere_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetDataHere_Proxy$descriptor() {
        return IDataObject_GetDataHere_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static MethodHandle IDataObject_GetDataHere_Proxy$handle() {
        return IDataObject_GetDataHere_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static MemorySegment IDataObject_GetDataHere_Proxy$address() {
        return IDataObject_GetDataHere_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium)
     * }
     */
    public static int IDataObject_GetDataHere_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium) {
        var mh$ = IDataObject_GetDataHere_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetDataHere_Proxy", This, pformatetc, pmedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_GetDataHere_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_GetDataHere_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static FunctionDescriptor IDataObject_GetDataHere_Stub$descriptor() {
        return IDataObject_GetDataHere_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MethodHandle IDataObject_GetDataHere_Stub$handle() {
        return IDataObject_GetDataHere_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static MemorySegment IDataObject_GetDataHere_Stub$address() {
        return IDataObject_GetDataHere_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_GetDataHere_Stub(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pRemoteMedium)
     * }
     */
    public static int IDataObject_GetDataHere_Stub(MemorySegment This, MemorySegment pformatetc, MemorySegment pRemoteMedium) {
        var mh$ = IDataObject_GetDataHere_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_GetDataHere_Stub", This, pformatetc, pRemoteMedium);
            }
            return (int)mh$.invokeExact(This, pformatetc, pRemoteMedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_SetData_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_SetData_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_SetData_Proxy$descriptor() {
        return IDataObject_SetData_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_SetData_Proxy$handle() {
        return IDataObject_SetData_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MemorySegment IDataObject_SetData_Proxy$address() {
        return IDataObject_SetData_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Proxy(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_SetData_Proxy(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_SetData_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_SetData_Proxy", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDataObject_SetData_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDataObject_SetData_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static FunctionDescriptor IDataObject_SetData_Stub$descriptor() {
        return IDataObject_SetData_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MethodHandle IDataObject_SetData_Stub$handle() {
        return IDataObject_SetData_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static MemorySegment IDataObject_SetData_Stub$address() {
        return IDataObject_SetData_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDataObject_SetData_Stub(IDataObject *This, FORMATETC *pformatetc, FLAG_STGMEDIUM *pmedium, BOOL fRelease)
     * }
     */
    public static int IDataObject_SetData_Stub(MemorySegment This, MemorySegment pformatetc, MemorySegment pmedium, int fRelease) {
        var mh$ = IDataObject_SetData_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDataObject_SetData_Stub", This, pformatetc, pmedium, fRelease);
            }
            return (int)mh$.invokeExact(This, pformatetc, pmedium, fRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAppend_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IFillLockBytes_FillAppend_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAppend_Proxy$descriptor() {
        return IFillLockBytes_FillAppend_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAppend_Proxy$handle() {
        return IFillLockBytes_FillAppend_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_FillAppend_Proxy$address() {
        return IFillLockBytes_FillAppend_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Proxy(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAppend_Proxy(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAppend_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAppend_Proxy", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAppend_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IFillLockBytes_FillAppend_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAppend_Stub$descriptor() {
        return IFillLockBytes_FillAppend_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAppend_Stub$handle() {
        return IFillLockBytes_FillAppend_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_FillAppend_Stub$address() {
        return IFillLockBytes_FillAppend_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAppend_Stub(IFillLockBytes *This, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAppend_Stub(MemorySegment This, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAppend_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAppend_Stub", This, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAt_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IFillLockBytes_FillAt_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAt_Proxy$descriptor() {
        return IFillLockBytes_FillAt_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAt_Proxy$handle() {
        return IFillLockBytes_FillAt_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_FillAt_Proxy$address() {
        return IFillLockBytes_FillAt_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Proxy(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAt_Proxy(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAt_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAt_Proxy", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IFillLockBytes_FillAt_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _ULARGE_INTEGER.layout(),
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IFillLockBytes_FillAt_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static FunctionDescriptor IFillLockBytes_FillAt_Stub$descriptor() {
        return IFillLockBytes_FillAt_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MethodHandle IFillLockBytes_FillAt_Stub$handle() {
        return IFillLockBytes_FillAt_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static MemorySegment IFillLockBytes_FillAt_Stub$address() {
        return IFillLockBytes_FillAt_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IFillLockBytes_FillAt_Stub(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const byte *pv, ULONG cb, ULONG *pcbWritten)
     * }
     */
    public static int IFillLockBytes_FillAt_Stub(MemorySegment This, MemorySegment ulOffset, MemorySegment pv, int cb, MemorySegment pcbWritten) {
        var mh$ = IFillLockBytes_FillAt_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IFillLockBytes_FillAt_Stub", This, ulOffset, pv, cb, pcbWritten);
            }
            return (int)mh$.invokeExact(This, ulOffset, pv, cb, pcbWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagSAFEARRAYBOUND {
     *     ULONG cElements;
     *     LONG lLbound;
     * } *LPSAFEARRAYBOUND
     * }
     */
    public static final AddressLayout LPSAFEARRAYBOUND = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _wireVARIANT *wireVARIANT
     * }
     */
    public static final AddressLayout wireVARIANT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _wireBRECORD *wireBRECORD
     * }
     */
    public static final AddressLayout wireBRECORD = winapi.C_POINTER;
    private static final int SF_ERROR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_ERROR = 10
     * }
     */
    public static int SF_ERROR() {
        return SF_ERROR;
    }
    private static final int SF_I1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I1 = 16
     * }
     */
    public static int SF_I1() {
        return SF_I1;
    }
    private static final int SF_I2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I2 = 2
     * }
     */
    public static int SF_I2() {
        return SF_I2;
    }
    private static final int SF_I4 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I4 = 3
     * }
     */
    public static int SF_I4() {
        return SF_I4;
    }
    private static final int SF_I8 = (int)20L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_I8 = 20
     * }
     */
    public static int SF_I8() {
        return SF_I8;
    }
    private static final int SF_BSTR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_BSTR = 8
     * }
     */
    public static int SF_BSTR() {
        return SF_BSTR;
    }
    private static final int SF_UNKNOWN = (int)13L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_UNKNOWN = 13
     * }
     */
    public static int SF_UNKNOWN() {
        return SF_UNKNOWN;
    }
    private static final int SF_DISPATCH = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_DISPATCH = 9
     * }
     */
    public static int SF_DISPATCH() {
        return SF_DISPATCH;
    }
    private static final int SF_VARIANT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_VARIANT = 12
     * }
     */
    public static int SF_VARIANT() {
        return SF_VARIANT;
    }
    private static final int SF_RECORD = (int)36L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_RECORD = 36
     * }
     */
    public static int SF_RECORD() {
        return SF_RECORD;
    }
    private static final int SF_HAVEIID = (int)32781L;
    /**
     * {@snippet lang=c :
     * enum tagSF_TYPE.SF_HAVEIID = 32781
     * }
     */
    public static int SF_HAVEIID() {
        return SF_HAVEIID;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _wireSAFEARRAY {
     *     USHORT cDims;
     *     USHORT fFeatures;
     *     ULONG cbElements;
     *     ULONG cLocks;
     *     SAFEARRAYUNION uArrayStructs;
     *     SAFEARRAYBOUND rgsabound[1];
     * } *wireSAFEARRAY
     * }
     */
    public static final AddressLayout wireSAFEARRAY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef wireSAFEARRAY *wirePSAFEARRAY
     * }
     */
    public static final AddressLayout wirePSAFEARRAY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SAFEARRAY *LPSAFEARRAY
     * }
     */
    public static final AddressLayout LPSAFEARRAY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VARIANT *LPVARIANT
     * }
     */
    public static final AddressLayout LPVARIANT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VARIANT *LPVARIANTARG
     * }
     */
    public static final AddressLayout LPVARIANTARG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LONG DISPID
     * }
     */
    public static final OfInt DISPID = winapi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DISPID MEMBERID
     * }
     */
    public static final OfInt MEMBERID = winapi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef DWORD HREFTYPE
     * }
     */
    public static final OfInt HREFTYPE = winapi.C_LONG;
    private static final int TKIND_ENUM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_ENUM = 0
     * }
     */
    public static int TKIND_ENUM() {
        return TKIND_ENUM;
    }
    private static final int TKIND_RECORD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_RECORD = 1
     * }
     */
    public static int TKIND_RECORD() {
        return TKIND_RECORD;
    }
    private static final int TKIND_MODULE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_MODULE = 2
     * }
     */
    public static int TKIND_MODULE() {
        return TKIND_MODULE;
    }
    private static final int TKIND_INTERFACE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_INTERFACE = 3
     * }
     */
    public static int TKIND_INTERFACE() {
        return TKIND_INTERFACE;
    }
    private static final int TKIND_DISPATCH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_DISPATCH = 4
     * }
     */
    public static int TKIND_DISPATCH() {
        return TKIND_DISPATCH;
    }
    private static final int TKIND_COCLASS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_COCLASS = 5
     * }
     */
    public static int TKIND_COCLASS() {
        return TKIND_COCLASS;
    }
    private static final int TKIND_ALIAS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_ALIAS = 6
     * }
     */
    public static int TKIND_ALIAS() {
        return TKIND_ALIAS;
    }
    private static final int TKIND_UNION = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_UNION = 7
     * }
     */
    public static int TKIND_UNION() {
        return TKIND_UNION;
    }
    private static final int TKIND_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEKIND.TKIND_MAX = 8
     * }
     */
    public static int TKIND_MAX() {
        return TKIND_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDESCEX {
     *     ULONG cBytes;
     *     VARIANTARG varDefaultValue;
     * } *LPPARAMDESCEX
     * }
     */
    public static final AddressLayout LPPARAMDESCEX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDESC {
     *     LPPARAMDESCEX pparamdescex;
     *     USHORT wParamFlags;
     * } *LPPARAMDESC
     * }
     */
    public static final AddressLayout LPPARAMDESC = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIDLDESC {
     *     ULONG_PTR dwReserved;
     *     USHORT wIDLFlags;
     * } *LPIDLDESC
     * }
     */
    public static final AddressLayout LPIDLDESC = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagELEMDESC {
     *     TYPEDESC tdesc;
     *     union {
     *         IDLDESC idldesc;
     *         PARAMDESC paramdesc;
     *     };
     * } *LPELEMDESC
     * }
     */
    public static final AddressLayout LPELEMDESC = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagTYPEATTR {
     *     GUID guid;
     *     LCID lcid;
     *     DWORD dwReserved;
     *     MEMBERID memidConstructor;
     *     MEMBERID memidDestructor;
     *     LPOLESTR lpstrSchema;
     *     ULONG cbSizeInstance;
     *     TYPEKIND typekind;
     *     WORD cFuncs;
     *     WORD cVars;
     *     WORD cImplTypes;
     *     WORD cbSizeVft;
     *     WORD cbAlignment;
     *     WORD wTypeFlags;
     *     WORD wMajorVerNum;
     *     WORD wMinorVerNum;
     *     TYPEDESC tdescAlias;
     *     IDLDESC idldescType;
     * } *LPTYPEATTR
     * }
     */
    public static final AddressLayout LPTYPEATTR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagEXCEPINFO {
     *     WORD wCode;
     *     WORD wReserved;
     *     BSTR bstrSource;
     *     BSTR bstrDescription;
     *     BSTR bstrHelpFile;
     *     DWORD dwHelpContext;
     *     PVOID pvReserved;
     *     HRESULT (*pfnDeferredFillIn)(struct tagEXCEPINFO *) __attribute__((stdcall));
     *     SCODE scode;
     * } *LPEXCEPINFO
     * }
     */
    public static final AddressLayout LPEXCEPINFO = winapi.C_POINTER;
    private static final int CC_FASTCALL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_FASTCALL = 0
     * }
     */
    public static int CC_FASTCALL() {
        return CC_FASTCALL;
    }
    private static final int CC_CDECL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_CDECL = 1
     * }
     */
    public static int CC_CDECL() {
        return CC_CDECL;
    }
    private static final int CC_MSCPASCAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MSCPASCAL = 2
     * }
     */
    public static int CC_MSCPASCAL() {
        return CC_MSCPASCAL;
    }
    private static final int CC_PASCAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_PASCAL = 2
     * }
     */
    public static int CC_PASCAL() {
        return CC_PASCAL;
    }
    private static final int CC_MACPASCAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MACPASCAL = 3
     * }
     */
    public static int CC_MACPASCAL() {
        return CC_MACPASCAL;
    }
    private static final int CC_STDCALL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_STDCALL = 4
     * }
     */
    public static int CC_STDCALL() {
        return CC_STDCALL;
    }
    private static final int CC_FPFASTCALL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_FPFASTCALL = 5
     * }
     */
    public static int CC_FPFASTCALL() {
        return CC_FPFASTCALL;
    }
    private static final int CC_SYSCALL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_SYSCALL = 6
     * }
     */
    public static int CC_SYSCALL() {
        return CC_SYSCALL;
    }
    private static final int CC_MPWCDECL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MPWCDECL = 7
     * }
     */
    public static int CC_MPWCDECL() {
        return CC_MPWCDECL;
    }
    private static final int CC_MPWPASCAL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MPWPASCAL = 8
     * }
     */
    public static int CC_MPWPASCAL() {
        return CC_MPWPASCAL;
    }
    private static final int CC_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * enum tagCALLCONV.CC_MAX = 9
     * }
     */
    public static int CC_MAX() {
        return CC_MAX;
    }
    private static final int FUNC_VIRTUAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_VIRTUAL = 0
     * }
     */
    public static int FUNC_VIRTUAL() {
        return FUNC_VIRTUAL;
    }
    private static final int FUNC_PUREVIRTUAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_PUREVIRTUAL = 1
     * }
     */
    public static int FUNC_PUREVIRTUAL() {
        return FUNC_PUREVIRTUAL;
    }
    private static final int FUNC_NONVIRTUAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_NONVIRTUAL = 2
     * }
     */
    public static int FUNC_NONVIRTUAL() {
        return FUNC_NONVIRTUAL;
    }
    private static final int FUNC_STATIC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_STATIC = 3
     * }
     */
    public static int FUNC_STATIC() {
        return FUNC_STATIC;
    }
    private static final int FUNC_DISPATCH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCKIND.FUNC_DISPATCH = 4
     * }
     */
    public static int FUNC_DISPATCH() {
        return FUNC_DISPATCH;
    }
    private static final int INVOKE_FUNC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_FUNC = 1
     * }
     */
    public static int INVOKE_FUNC() {
        return INVOKE_FUNC;
    }
    private static final int INVOKE_PROPERTYGET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYGET = 2
     * }
     */
    public static int INVOKE_PROPERTYGET() {
        return INVOKE_PROPERTYGET;
    }
    private static final int INVOKE_PROPERTYPUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYPUT = 4
     * }
     */
    public static int INVOKE_PROPERTYPUT() {
        return INVOKE_PROPERTYPUT;
    }
    private static final int INVOKE_PROPERTYPUTREF = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagINVOKEKIND.INVOKE_PROPERTYPUTREF = 8
     * }
     */
    public static int INVOKE_PROPERTYPUTREF() {
        return INVOKE_PROPERTYPUTREF;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagFUNCDESC {
     *     MEMBERID memid;
     *     SCODE *lprgscode;
     *     ELEMDESC *lprgelemdescParam;
     *     FUNCKIND funckind;
     *     INVOKEKIND invkind;
     *     CALLCONV callconv;
     *     SHORT cParams;
     *     SHORT cParamsOpt;
     *     SHORT oVft;
     *     SHORT cScodes;
     *     ELEMDESC elemdescFunc;
     *     WORD wFuncFlags;
     * } *LPFUNCDESC
     * }
     */
    public static final AddressLayout LPFUNCDESC = winapi.C_POINTER;
    private static final int VAR_PERINSTANCE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_PERINSTANCE = 0
     * }
     */
    public static int VAR_PERINSTANCE() {
        return VAR_PERINSTANCE;
    }
    private static final int VAR_STATIC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_STATIC = 1
     * }
     */
    public static int VAR_STATIC() {
        return VAR_STATIC;
    }
    private static final int VAR_CONST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_CONST = 2
     * }
     */
    public static int VAR_CONST() {
        return VAR_CONST;
    }
    private static final int VAR_DISPATCH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagVARKIND.VAR_DISPATCH = 3
     * }
     */
    public static int VAR_DISPATCH() {
        return VAR_DISPATCH;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagVARDESC {
     *     MEMBERID memid;
     *     LPOLESTR lpstrSchema;
     *     union {
     *         ULONG oInst;
     *         VARIANT *lpvarValue;
     *     };
     *     ELEMDESC elemdescVar;
     *     WORD wVarFlags;
     *     VARKIND varkind;
     * } *LPVARDESC
     * }
     */
    public static final AddressLayout LPVARDESC = winapi.C_POINTER;
    private static final int TYPEFLAG_FAPPOBJECT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FAPPOBJECT = 1
     * }
     */
    public static int TYPEFLAG_FAPPOBJECT() {
        return TYPEFLAG_FAPPOBJECT;
    }
    private static final int TYPEFLAG_FCANCREATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FCANCREATE = 2
     * }
     */
    public static int TYPEFLAG_FCANCREATE() {
        return TYPEFLAG_FCANCREATE;
    }
    private static final int TYPEFLAG_FLICENSED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FLICENSED = 4
     * }
     */
    public static int TYPEFLAG_FLICENSED() {
        return TYPEFLAG_FLICENSED;
    }
    private static final int TYPEFLAG_FPREDECLID = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FPREDECLID = 8
     * }
     */
    public static int TYPEFLAG_FPREDECLID() {
        return TYPEFLAG_FPREDECLID;
    }
    private static final int TYPEFLAG_FHIDDEN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FHIDDEN = 16
     * }
     */
    public static int TYPEFLAG_FHIDDEN() {
        return TYPEFLAG_FHIDDEN;
    }
    private static final int TYPEFLAG_FCONTROL = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FCONTROL = 32
     * }
     */
    public static int TYPEFLAG_FCONTROL() {
        return TYPEFLAG_FCONTROL;
    }
    private static final int TYPEFLAG_FDUAL = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FDUAL = 64
     * }
     */
    public static int TYPEFLAG_FDUAL() {
        return TYPEFLAG_FDUAL;
    }
    private static final int TYPEFLAG_FNONEXTENSIBLE = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE = 128
     * }
     */
    public static int TYPEFLAG_FNONEXTENSIBLE() {
        return TYPEFLAG_FNONEXTENSIBLE;
    }
    private static final int TYPEFLAG_FOLEAUTOMATION = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FOLEAUTOMATION = 256
     * }
     */
    public static int TYPEFLAG_FOLEAUTOMATION() {
        return TYPEFLAG_FOLEAUTOMATION;
    }
    private static final int TYPEFLAG_FRESTRICTED = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FRESTRICTED = 512
     * }
     */
    public static int TYPEFLAG_FRESTRICTED() {
        return TYPEFLAG_FRESTRICTED;
    }
    private static final int TYPEFLAG_FAGGREGATABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FAGGREGATABLE = 1024
     * }
     */
    public static int TYPEFLAG_FAGGREGATABLE() {
        return TYPEFLAG_FAGGREGATABLE;
    }
    private static final int TYPEFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int TYPEFLAG_FREPLACEABLE() {
        return TYPEFLAG_FREPLACEABLE;
    }
    private static final int TYPEFLAG_FDISPATCHABLE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FDISPATCHABLE = 4096
     * }
     */
    public static int TYPEFLAG_FDISPATCHABLE() {
        return TYPEFLAG_FDISPATCHABLE;
    }
    private static final int TYPEFLAG_FREVERSEBIND = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FREVERSEBIND = 8192
     * }
     */
    public static int TYPEFLAG_FREVERSEBIND() {
        return TYPEFLAG_FREVERSEBIND;
    }
    private static final int TYPEFLAG_FPROXY = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum tagTYPEFLAGS.TYPEFLAG_FPROXY = 16384
     * }
     */
    public static int TYPEFLAG_FPROXY() {
        return TYPEFLAG_FPROXY;
    }
    private static final int FUNCFLAG_FRESTRICTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FRESTRICTED = 1
     * }
     */
    public static int FUNCFLAG_FRESTRICTED() {
        return FUNCFLAG_FRESTRICTED;
    }
    private static final int FUNCFLAG_FSOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FSOURCE = 2
     * }
     */
    public static int FUNCFLAG_FSOURCE() {
        return FUNCFLAG_FSOURCE;
    }
    private static final int FUNCFLAG_FBINDABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FBINDABLE = 4
     * }
     */
    public static int FUNCFLAG_FBINDABLE() {
        return FUNCFLAG_FBINDABLE;
    }
    private static final int FUNCFLAG_FREQUESTEDIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FREQUESTEDIT = 8
     * }
     */
    public static int FUNCFLAG_FREQUESTEDIT() {
        return FUNCFLAG_FREQUESTEDIT;
    }
    private static final int FUNCFLAG_FDISPLAYBIND = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDISPLAYBIND = 16
     * }
     */
    public static int FUNCFLAG_FDISPLAYBIND() {
        return FUNCFLAG_FDISPLAYBIND;
    }
    private static final int FUNCFLAG_FDEFAULTBIND = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDEFAULTBIND = 32
     * }
     */
    public static int FUNCFLAG_FDEFAULTBIND() {
        return FUNCFLAG_FDEFAULTBIND;
    }
    private static final int FUNCFLAG_FHIDDEN = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FHIDDEN = 64
     * }
     */
    public static int FUNCFLAG_FHIDDEN() {
        return FUNCFLAG_FHIDDEN;
    }
    private static final int FUNCFLAG_FUSESGETLASTERROR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR = 128
     * }
     */
    public static int FUNCFLAG_FUSESGETLASTERROR() {
        return FUNCFLAG_FUSESGETLASTERROR;
    }
    private static final int FUNCFLAG_FDEFAULTCOLLELEM = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM = 256
     * }
     */
    public static int FUNCFLAG_FDEFAULTCOLLELEM() {
        return FUNCFLAG_FDEFAULTCOLLELEM;
    }
    private static final int FUNCFLAG_FUIDEFAULT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FUIDEFAULT = 512
     * }
     */
    public static int FUNCFLAG_FUIDEFAULT() {
        return FUNCFLAG_FUIDEFAULT;
    }
    private static final int FUNCFLAG_FNONBROWSABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FNONBROWSABLE = 1024
     * }
     */
    public static int FUNCFLAG_FNONBROWSABLE() {
        return FUNCFLAG_FNONBROWSABLE;
    }
    private static final int FUNCFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int FUNCFLAG_FREPLACEABLE() {
        return FUNCFLAG_FREPLACEABLE;
    }
    private static final int FUNCFLAG_FIMMEDIATEBIND = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagFUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND = 4096
     * }
     */
    public static int FUNCFLAG_FIMMEDIATEBIND() {
        return FUNCFLAG_FIMMEDIATEBIND;
    }
    private static final int VARFLAG_FREADONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREADONLY = 1
     * }
     */
    public static int VARFLAG_FREADONLY() {
        return VARFLAG_FREADONLY;
    }
    private static final int VARFLAG_FSOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FSOURCE = 2
     * }
     */
    public static int VARFLAG_FSOURCE() {
        return VARFLAG_FSOURCE;
    }
    private static final int VARFLAG_FBINDABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FBINDABLE = 4
     * }
     */
    public static int VARFLAG_FBINDABLE() {
        return VARFLAG_FBINDABLE;
    }
    private static final int VARFLAG_FREQUESTEDIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREQUESTEDIT = 8
     * }
     */
    public static int VARFLAG_FREQUESTEDIT() {
        return VARFLAG_FREQUESTEDIT;
    }
    private static final int VARFLAG_FDISPLAYBIND = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDISPLAYBIND = 16
     * }
     */
    public static int VARFLAG_FDISPLAYBIND() {
        return VARFLAG_FDISPLAYBIND;
    }
    private static final int VARFLAG_FDEFAULTBIND = (int)32L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDEFAULTBIND = 32
     * }
     */
    public static int VARFLAG_FDEFAULTBIND() {
        return VARFLAG_FDEFAULTBIND;
    }
    private static final int VARFLAG_FHIDDEN = (int)64L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FHIDDEN = 64
     * }
     */
    public static int VARFLAG_FHIDDEN() {
        return VARFLAG_FHIDDEN;
    }
    private static final int VARFLAG_FRESTRICTED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FRESTRICTED = 128
     * }
     */
    public static int VARFLAG_FRESTRICTED() {
        return VARFLAG_FRESTRICTED;
    }
    private static final int VARFLAG_FDEFAULTCOLLELEM = (int)256L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FDEFAULTCOLLELEM = 256
     * }
     */
    public static int VARFLAG_FDEFAULTCOLLELEM() {
        return VARFLAG_FDEFAULTCOLLELEM;
    }
    private static final int VARFLAG_FUIDEFAULT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FUIDEFAULT = 512
     * }
     */
    public static int VARFLAG_FUIDEFAULT() {
        return VARFLAG_FUIDEFAULT;
    }
    private static final int VARFLAG_FNONBROWSABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FNONBROWSABLE = 1024
     * }
     */
    public static int VARFLAG_FNONBROWSABLE() {
        return VARFLAG_FNONBROWSABLE;
    }
    private static final int VARFLAG_FREPLACEABLE = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FREPLACEABLE = 2048
     * }
     */
    public static int VARFLAG_FREPLACEABLE() {
        return VARFLAG_FREPLACEABLE;
    }
    private static final int VARFLAG_FIMMEDIATEBIND = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum tagVARFLAGS.VARFLAG_FIMMEDIATEBIND = 4096
     * }
     */
    public static int VARFLAG_FIMMEDIATEBIND() {
        return VARFLAG_FIMMEDIATEBIND;
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagCUSTDATAITEM {
     *     GUID guid;
     *     VARIANTARG varValue;
     * } *LPCUSTDATAITEM
     * }
     */
    public static final AddressLayout LPCUSTDATAITEM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCUSTDATA {
     *     DWORD cCustData;
     *     LPCUSTDATAITEM prgCustData;
     * } *LPCUSTDATA
     * }
     */
    public static final AddressLayout LPCUSTDATA = winapi.C_POINTER;

    private static class IOleAutomationTypes_v1_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IOleAutomationTypes_v1_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static AddressLayout IOleAutomationTypes_v1_0_c_ifspec$layout() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_c_ifspec$segment() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_c_ifspec() {
        return IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT.get(IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec
     * }
     */
    public static void IOleAutomationTypes_v1_0_c_ifspec(MemorySegment varValue) {
        IOleAutomationTypes_v1_0_c_ifspec$constants.SEGMENT.set(IOleAutomationTypes_v1_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IOleAutomationTypes_v1_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IOleAutomationTypes_v1_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static AddressLayout IOleAutomationTypes_v1_0_s_ifspec$layout() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_s_ifspec$segment() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static MemorySegment IOleAutomationTypes_v1_0_s_ifspec() {
        return IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT.get(IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec
     * }
     */
    public static void IOleAutomationTypes_v1_0_s_ifspec(MemorySegment varValue) {
        IOleAutomationTypes_v1_0_s_ifspec$constants.SEGMENT.set(IOleAutomationTypes_v1_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeInfo *LPCREATETYPEINFO
     * }
     */
    public static final AddressLayout LPCREATETYPEINFO = winapi.C_POINTER;

    private static class IID_ICreateTypeInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ICreateTypeInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static GroupLayout IID_ICreateTypeInfo$layout() {
        return IID_ICreateTypeInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static MemorySegment IID_ICreateTypeInfo() {
        return IID_ICreateTypeInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo
     * }
     */
    public static void IID_ICreateTypeInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeInfo$constants.SEGMENT, 0L, IID_ICreateTypeInfo$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeInfo2 *LPCREATETYPEINFO2
     * }
     */
    public static final AddressLayout LPCREATETYPEINFO2 = winapi.C_POINTER;

    private static class IID_ICreateTypeInfo2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ICreateTypeInfo2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static GroupLayout IID_ICreateTypeInfo2$layout() {
        return IID_ICreateTypeInfo2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static MemorySegment IID_ICreateTypeInfo2() {
        return IID_ICreateTypeInfo2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeInfo2
     * }
     */
    public static void IID_ICreateTypeInfo2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeInfo2$constants.SEGMENT, 0L, IID_ICreateTypeInfo2$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeLib *LPCREATETYPELIB
     * }
     */
    public static final AddressLayout LPCREATETYPELIB = winapi.C_POINTER;

    private static class IID_ICreateTypeLib$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ICreateTypeLib").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static GroupLayout IID_ICreateTypeLib$layout() {
        return IID_ICreateTypeLib$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static MemorySegment IID_ICreateTypeLib() {
        return IID_ICreateTypeLib$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib
     * }
     */
    public static void IID_ICreateTypeLib(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeLib$constants.SEGMENT, 0L, IID_ICreateTypeLib$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ICreateTypeLib2 *LPCREATETYPELIB2
     * }
     */
    public static final AddressLayout LPCREATETYPELIB2 = winapi.C_POINTER;

    private static class IID_ICreateTypeLib2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ICreateTypeLib2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static GroupLayout IID_ICreateTypeLib2$layout() {
        return IID_ICreateTypeLib2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static MemorySegment IID_ICreateTypeLib2() {
        return IID_ICreateTypeLib2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICreateTypeLib2
     * }
     */
    public static void IID_ICreateTypeLib2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICreateTypeLib2$constants.SEGMENT, 0L, IID_ICreateTypeLib2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec() {
        return __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDispatch *LPDISPATCH
     * }
     */
    public static final AddressLayout LPDISPATCH = winapi.C_POINTER;

    private static class IID_IDispatch$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDispatch").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static GroupLayout IID_IDispatch$layout() {
        return IID_IDispatch$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static MemorySegment IID_IDispatch() {
        return IID_IDispatch$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDispatch
     * }
     */
    public static void IID_IDispatch(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDispatch$constants.SEGMENT, 0L, IID_IDispatch$constants.LAYOUT.byteSize());
    }

    private static class IDispatch_RemoteInvoke_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDispatch_RemoteInvoke_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static FunctionDescriptor IDispatch_RemoteInvoke_Proxy$descriptor() {
        return IDispatch_RemoteInvoke_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static MethodHandle IDispatch_RemoteInvoke_Proxy$handle() {
        return IDispatch_RemoteInvoke_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static MemorySegment IDispatch_RemoteInvoke_Proxy$address() {
        return IDispatch_RemoteInvoke_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IDispatch_RemoteInvoke_Proxy(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, DWORD dwFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *pArgErr, UINT cVarRef, UINT *rgVarRefIdx, VARIANTARG *rgVarRef)
     * }
     */
    public static int IDispatch_RemoteInvoke_Proxy(MemorySegment This, int dispIdMember, MemorySegment riid, int lcid, int dwFlags, MemorySegment pDispParams, MemorySegment pVarResult, MemorySegment pExcepInfo, MemorySegment pArgErr, int cVarRef, MemorySegment rgVarRefIdx, MemorySegment rgVarRef) {
        var mh$ = IDispatch_RemoteInvoke_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_RemoteInvoke_Proxy", This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
            }
            return (int)mh$.invokeExact(This, dispIdMember, riid, lcid, dwFlags, pDispParams, pVarResult, pExcepInfo, pArgErr, cVarRef, rgVarRefIdx, rgVarRef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IDispatch_RemoteInvoke_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IDispatch_RemoteInvoke_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IDispatch_RemoteInvoke_Stub$descriptor() {
        return IDispatch_RemoteInvoke_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IDispatch_RemoteInvoke_Stub$handle() {
        return IDispatch_RemoteInvoke_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IDispatch_RemoteInvoke_Stub$address() {
        return IDispatch_RemoteInvoke_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IDispatch_RemoteInvoke_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IDispatch_RemoteInvoke_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IDispatch_RemoteInvoke_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef IEnumVARIANT *LPENUMVARIANT
     * }
     */
    public static final AddressLayout LPENUMVARIANT = winapi.C_POINTER;

    private static class IID_IEnumVARIANT$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEnumVARIANT").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static GroupLayout IID_IEnumVARIANT$layout() {
        return IID_IEnumVARIANT$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static MemorySegment IID_IEnumVARIANT() {
        return IID_IEnumVARIANT$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEnumVARIANT
     * }
     */
    public static void IID_IEnumVARIANT(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEnumVARIANT$constants.SEGMENT, 0L, IID_IEnumVARIANT$constants.LAYOUT.byteSize());
    }

    private static class IEnumVARIANT_RemoteNext_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumVARIANT_RemoteNext_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_RemoteNext_Proxy$descriptor() {
        return IEnumVARIANT_RemoteNext_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MethodHandle IEnumVARIANT_RemoteNext_Proxy$handle() {
        return IEnumVARIANT_RemoteNext_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static MemorySegment IEnumVARIANT_RemoteNext_Proxy$address() {
        return IEnumVARIANT_RemoteNext_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched)
     * }
     */
    public static int IEnumVARIANT_RemoteNext_Proxy(MemorySegment This, int celt, MemorySegment rgVar, MemorySegment pCeltFetched) {
        var mh$ = IEnumVARIANT_RemoteNext_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_RemoteNext_Proxy", This, celt, rgVar, pCeltFetched);
            }
            return (int)mh$.invokeExact(This, celt, rgVar, pCeltFetched);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEnumVARIANT_RemoteNext_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEnumVARIANT_RemoteNext_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IEnumVARIANT_RemoteNext_Stub$descriptor() {
        return IEnumVARIANT_RemoteNext_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IEnumVARIANT_RemoteNext_Stub$handle() {
        return IEnumVARIANT_RemoteNext_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IEnumVARIANT_RemoteNext_Stub$address() {
        return IEnumVARIANT_RemoteNext_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IEnumVARIANT_RemoteNext_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IEnumVARIANT_RemoteNext_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEnumVARIANT_RemoteNext_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ITypeComp *LPTYPECOMP
     * }
     */
    public static final AddressLayout LPTYPECOMP = winapi.C_POINTER;
    private static final int DESCKIND_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_NONE = 0
     * }
     */
    public static int DESCKIND_NONE() {
        return DESCKIND_NONE;
    }
    private static final int DESCKIND_FUNCDESC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_FUNCDESC = 1
     * }
     */
    public static int DESCKIND_FUNCDESC() {
        return DESCKIND_FUNCDESC;
    }
    private static final int DESCKIND_VARDESC = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_VARDESC = 2
     * }
     */
    public static int DESCKIND_VARDESC() {
        return DESCKIND_VARDESC;
    }
    private static final int DESCKIND_TYPECOMP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_TYPECOMP = 3
     * }
     */
    public static int DESCKIND_TYPECOMP() {
        return DESCKIND_TYPECOMP;
    }
    private static final int DESCKIND_IMPLICITAPPOBJ = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_IMPLICITAPPOBJ = 4
     * }
     */
    public static int DESCKIND_IMPLICITAPPOBJ() {
        return DESCKIND_IMPLICITAPPOBJ;
    }
    private static final int DESCKIND_MAX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagDESCKIND.DESCKIND_MAX = 5
     * }
     */
    public static int DESCKIND_MAX() {
        return DESCKIND_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef union tagBINDPTR {
     *     FUNCDESC *lpfuncdesc;
     *     VARDESC *lpvardesc;
     *     ITypeComp *lptcomp;
     * } *LPBINDPTR
     * }
     */
    public static final AddressLayout LPBINDPTR = winapi.C_POINTER;

    private static class IID_ITypeComp$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ITypeComp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static GroupLayout IID_ITypeComp$layout() {
        return IID_ITypeComp$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static MemorySegment IID_ITypeComp() {
        return IID_ITypeComp$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ITypeComp
     * }
     */
    public static void IID_ITypeComp(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ITypeComp$constants.SEGMENT, 0L, IID_ITypeComp$constants.LAYOUT.byteSize());
    }

    private static class ITypeComp_RemoteBind_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ITypeComp_RemoteBind_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBind_Proxy$descriptor() {
        return ITypeComp_RemoteBind_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBind_Proxy$handle() {
        return ITypeComp_RemoteBind_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static MemorySegment ITypeComp_RemoteBind_Proxy$address() {
        return ITypeComp_RemoteBind_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBind_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, LPFUNCDESC *ppFuncDesc, LPVARDESC *ppVarDesc, ITypeComp **ppTypeComp, CLEANLOCALSTORAGE *pDummy)
     * }
     */
    public static int ITypeComp_RemoteBind_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, short wFlags, MemorySegment ppTInfo, MemorySegment pDescKind, MemorySegment ppFuncDesc, MemorySegment ppVarDesc, MemorySegment ppTypeComp, MemorySegment pDummy) {
        var mh$ = ITypeComp_RemoteBind_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBind_Proxy", This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, wFlags, ppTInfo, pDescKind, ppFuncDesc, ppVarDesc, ppTypeComp, pDummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBind_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ITypeComp_RemoteBind_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBind_Stub$descriptor() {
        return ITypeComp_RemoteBind_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBind_Stub$handle() {
        return ITypeComp_RemoteBind_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeComp_RemoteBind_Stub$address() {
        return ITypeComp_RemoteBind_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeComp_RemoteBind_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeComp_RemoteBind_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeComp_RemoteBind_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBind_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBindType_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ITypeComp_RemoteBindType_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBindType_Proxy$descriptor() {
        return ITypeComp_RemoteBindType_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBindType_Proxy$handle() {
        return ITypeComp_RemoteBindType_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static MemorySegment ITypeComp_RemoteBindType_Proxy$address() {
        return ITypeComp_RemoteBindType_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ITypeComp_RemoteBindType_Proxy(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo)
     * }
     */
    public static int ITypeComp_RemoteBindType_Proxy(MemorySegment This, MemorySegment szName, int lHashVal, MemorySegment ppTInfo) {
        var mh$ = ITypeComp_RemoteBindType_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBindType_Proxy", This, szName, lHashVal, ppTInfo);
            }
            return (int)mh$.invokeExact(This, szName, lHashVal, ppTInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ITypeComp_RemoteBindType_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ITypeComp_RemoteBindType_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor ITypeComp_RemoteBindType_Stub$descriptor() {
        return ITypeComp_RemoteBindType_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle ITypeComp_RemoteBindType_Stub$handle() {
        return ITypeComp_RemoteBindType_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment ITypeComp_RemoteBindType_Stub$address() {
        return ITypeComp_RemoteBindType_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void ITypeComp_RemoteBindType_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = ITypeComp_RemoteBindType_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ITypeComp_RemoteBindType_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$layout() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$segment() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec() {
        return __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }
}

