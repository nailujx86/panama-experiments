// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _XSAVE_ARM64_SVE_HEADER {
 *     DWORD VectorLength;
 *     DWORD VectorRegisterOffset;
 *     DWORD PredicateRegisterOffset;
 *     DWORD Reserved[5];
 * }
 * }
 */
public class _XSAVE_ARM64_SVE_HEADER {

    _XSAVE_ARM64_SVE_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("VectorLength"),
        winapi.C_LONG.withName("VectorRegisterOffset"),
        winapi.C_LONG.withName("PredicateRegisterOffset"),
        MemoryLayout.sequenceLayout(5, winapi.C_LONG).withName("Reserved")
    ).withName("_XSAVE_ARM64_SVE_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt VectorLength$LAYOUT = (OfInt)$LAYOUT.select(groupElement("VectorLength"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD VectorLength
     * }
     */
    public static final OfInt VectorLength$layout() {
        return VectorLength$LAYOUT;
    }

    private static final long VectorLength$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD VectorLength
     * }
     */
    public static final long VectorLength$offset() {
        return VectorLength$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD VectorLength
     * }
     */
    public static int VectorLength(MemorySegment struct) {
        return struct.get(VectorLength$LAYOUT, VectorLength$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD VectorLength
     * }
     */
    public static void VectorLength(MemorySegment struct, int fieldValue) {
        struct.set(VectorLength$LAYOUT, VectorLength$OFFSET, fieldValue);
    }

    private static final OfInt VectorRegisterOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("VectorRegisterOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD VectorRegisterOffset
     * }
     */
    public static final OfInt VectorRegisterOffset$layout() {
        return VectorRegisterOffset$LAYOUT;
    }

    private static final long VectorRegisterOffset$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD VectorRegisterOffset
     * }
     */
    public static final long VectorRegisterOffset$offset() {
        return VectorRegisterOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD VectorRegisterOffset
     * }
     */
    public static int VectorRegisterOffset(MemorySegment struct) {
        return struct.get(VectorRegisterOffset$LAYOUT, VectorRegisterOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD VectorRegisterOffset
     * }
     */
    public static void VectorRegisterOffset(MemorySegment struct, int fieldValue) {
        struct.set(VectorRegisterOffset$LAYOUT, VectorRegisterOffset$OFFSET, fieldValue);
    }

    private static final OfInt PredicateRegisterOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PredicateRegisterOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD PredicateRegisterOffset
     * }
     */
    public static final OfInt PredicateRegisterOffset$layout() {
        return PredicateRegisterOffset$LAYOUT;
    }

    private static final long PredicateRegisterOffset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD PredicateRegisterOffset
     * }
     */
    public static final long PredicateRegisterOffset$offset() {
        return PredicateRegisterOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD PredicateRegisterOffset
     * }
     */
    public static int PredicateRegisterOffset(MemorySegment struct) {
        return struct.get(PredicateRegisterOffset$LAYOUT, PredicateRegisterOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD PredicateRegisterOffset
     * }
     */
    public static void PredicateRegisterOffset(MemorySegment struct, int fieldValue) {
        struct.set(PredicateRegisterOffset$LAYOUT, PredicateRegisterOffset$OFFSET, fieldValue);
    }

    private static final SequenceLayout Reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Reserved[5]
     * }
     */
    public static final SequenceLayout Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Reserved[5]
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Reserved[5]
     * }
     */
    public static MemorySegment Reserved(MemorySegment struct) {
        return struct.asSlice(Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Reserved[5]
     * }
     */
    public static void Reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    private static long[] Reserved$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * DWORD Reserved[5]
     * }
     */
    public static long[] Reserved$dimensions() {
        return Reserved$DIMS;
    }
    private static final VarHandle Reserved$ELEM_HANDLE = Reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * DWORD Reserved[5]
     * }
     */
    public static int Reserved(MemorySegment struct, long index0) {
        return (int)Reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * DWORD Reserved[5]
     * }
     */
    public static void Reserved(MemorySegment struct, long index0, int fieldValue) {
        Reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

