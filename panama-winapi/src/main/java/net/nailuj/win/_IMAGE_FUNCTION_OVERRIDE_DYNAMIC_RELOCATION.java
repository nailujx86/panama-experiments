// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION {
 *     DWORD OriginalRva;
 *     DWORD BDDOffset;
 *     DWORD RvaSize;
 *     DWORD BaseRelocSize;
 * }
 * }
 */
public class _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION {

    _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.align(winapi.C_LONG, 1).withName("OriginalRva"),
        winapi.align(winapi.C_LONG, 1).withName("BDDOffset"),
        winapi.align(winapi.C_LONG, 1).withName("RvaSize"),
        winapi.align(winapi.C_LONG, 1).withName("BaseRelocSize")
    ).withName("_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt OriginalRva$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OriginalRva"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD OriginalRva
     * }
     */
    public static final OfInt OriginalRva$layout() {
        return OriginalRva$LAYOUT;
    }

    private static final long OriginalRva$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD OriginalRva
     * }
     */
    public static final long OriginalRva$offset() {
        return OriginalRva$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD OriginalRva
     * }
     */
    public static int OriginalRva(MemorySegment struct) {
        return struct.get(OriginalRva$LAYOUT, OriginalRva$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD OriginalRva
     * }
     */
    public static void OriginalRva(MemorySegment struct, int fieldValue) {
        struct.set(OriginalRva$LAYOUT, OriginalRva$OFFSET, fieldValue);
    }

    private static final OfInt BDDOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BDDOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BDDOffset
     * }
     */
    public static final OfInt BDDOffset$layout() {
        return BDDOffset$LAYOUT;
    }

    private static final long BDDOffset$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BDDOffset
     * }
     */
    public static final long BDDOffset$offset() {
        return BDDOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BDDOffset
     * }
     */
    public static int BDDOffset(MemorySegment struct) {
        return struct.get(BDDOffset$LAYOUT, BDDOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BDDOffset
     * }
     */
    public static void BDDOffset(MemorySegment struct, int fieldValue) {
        struct.set(BDDOffset$LAYOUT, BDDOffset$OFFSET, fieldValue);
    }

    private static final OfInt RvaSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RvaSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD RvaSize
     * }
     */
    public static final OfInt RvaSize$layout() {
        return RvaSize$LAYOUT;
    }

    private static final long RvaSize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD RvaSize
     * }
     */
    public static final long RvaSize$offset() {
        return RvaSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD RvaSize
     * }
     */
    public static int RvaSize(MemorySegment struct) {
        return struct.get(RvaSize$LAYOUT, RvaSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD RvaSize
     * }
     */
    public static void RvaSize(MemorySegment struct, int fieldValue) {
        struct.set(RvaSize$LAYOUT, RvaSize$OFFSET, fieldValue);
    }

    private static final OfInt BaseRelocSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BaseRelocSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BaseRelocSize
     * }
     */
    public static final OfInt BaseRelocSize$layout() {
        return BaseRelocSize$LAYOUT;
    }

    private static final long BaseRelocSize$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BaseRelocSize
     * }
     */
    public static final long BaseRelocSize$offset() {
        return BaseRelocSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BaseRelocSize
     * }
     */
    public static int BaseRelocSize(MemorySegment struct) {
        return struct.get(BaseRelocSize$LAYOUT, BaseRelocSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BaseRelocSize
     * }
     */
    public static void BaseRelocSize(MemorySegment struct, int fieldValue) {
        struct.set(BaseRelocSize$LAYOUT, BaseRelocSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

