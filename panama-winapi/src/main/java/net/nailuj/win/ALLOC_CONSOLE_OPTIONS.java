// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ALLOC_CONSOLE_OPTIONS {
 *     ALLOC_CONSOLE_MODE mode;
 *     BOOL useShowWindow;
 *     WORD showWindow;
 * }
 * }
 */
public class ALLOC_CONSOLE_OPTIONS {

    ALLOC_CONSOLE_OPTIONS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_INT.withName("mode"),
        winapi.C_INT.withName("useShowWindow"),
        winapi.C_SHORT.withName("showWindow"),
        MemoryLayout.paddingLayout(2)
    ).withName("ALLOC_CONSOLE_OPTIONS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ALLOC_CONSOLE_MODE mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ALLOC_CONSOLE_MODE mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ALLOC_CONSOLE_MODE mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ALLOC_CONSOLE_MODE mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final OfInt useShowWindow$LAYOUT = (OfInt)$LAYOUT.select(groupElement("useShowWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BOOL useShowWindow
     * }
     */
    public static final OfInt useShowWindow$layout() {
        return useShowWindow$LAYOUT;
    }

    private static final long useShowWindow$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BOOL useShowWindow
     * }
     */
    public static final long useShowWindow$offset() {
        return useShowWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BOOL useShowWindow
     * }
     */
    public static int useShowWindow(MemorySegment struct) {
        return struct.get(useShowWindow$LAYOUT, useShowWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BOOL useShowWindow
     * }
     */
    public static void useShowWindow(MemorySegment struct, int fieldValue) {
        struct.set(useShowWindow$LAYOUT, useShowWindow$OFFSET, fieldValue);
    }

    private static final OfShort showWindow$LAYOUT = (OfShort)$LAYOUT.select(groupElement("showWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD showWindow
     * }
     */
    public static final OfShort showWindow$layout() {
        return showWindow$LAYOUT;
    }

    private static final long showWindow$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD showWindow
     * }
     */
    public static final long showWindow$offset() {
        return showWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD showWindow
     * }
     */
    public static short showWindow(MemorySegment struct) {
        return struct.get(showWindow$LAYOUT, showWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD showWindow
     * }
     */
    public static void showWindow(MemorySegment struct, short fieldValue) {
        struct.set(showWindow$LAYOUT, showWindow$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

