// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY {
 *     ULONG InitiatorNodeNumber;
 *     ULONG TargetNodeNumber;
 *     UCHAR DataType;
 *     struct {
 *         UCHAR MinTransferSizeToAchieveValues : 1;
 *         UCHAR NonSequentialTransfers : 1;
 *         UCHAR Reserved : 6;
 *     } Flags;
 *     ULONGLONG MinTransferSizeInBytes;
 *     ULONGLONG EntryValue;
 * }
 * }
 */
public class _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY {

    _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("InitiatorNodeNumber"),
        winapi.C_LONG.withName("TargetNodeNumber"),
        winapi.C_CHAR.withName("DataType"),
        _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY.Flags.layout().withName("Flags"),
        MemoryLayout.paddingLayout(6),
        winapi.C_LONG_LONG.withName("MinTransferSizeInBytes"),
        winapi.C_LONG_LONG.withName("EntryValue")
    ).withName("_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt InitiatorNodeNumber$LAYOUT = (OfInt)$LAYOUT.select(groupElement("InitiatorNodeNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG InitiatorNodeNumber
     * }
     */
    public static final OfInt InitiatorNodeNumber$layout() {
        return InitiatorNodeNumber$LAYOUT;
    }

    private static final long InitiatorNodeNumber$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG InitiatorNodeNumber
     * }
     */
    public static final long InitiatorNodeNumber$offset() {
        return InitiatorNodeNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG InitiatorNodeNumber
     * }
     */
    public static int InitiatorNodeNumber(MemorySegment struct) {
        return struct.get(InitiatorNodeNumber$LAYOUT, InitiatorNodeNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG InitiatorNodeNumber
     * }
     */
    public static void InitiatorNodeNumber(MemorySegment struct, int fieldValue) {
        struct.set(InitiatorNodeNumber$LAYOUT, InitiatorNodeNumber$OFFSET, fieldValue);
    }

    private static final OfInt TargetNodeNumber$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TargetNodeNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG TargetNodeNumber
     * }
     */
    public static final OfInt TargetNodeNumber$layout() {
        return TargetNodeNumber$LAYOUT;
    }

    private static final long TargetNodeNumber$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG TargetNodeNumber
     * }
     */
    public static final long TargetNodeNumber$offset() {
        return TargetNodeNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG TargetNodeNumber
     * }
     */
    public static int TargetNodeNumber(MemorySegment struct) {
        return struct.get(TargetNodeNumber$LAYOUT, TargetNodeNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG TargetNodeNumber
     * }
     */
    public static void TargetNodeNumber(MemorySegment struct, int fieldValue) {
        struct.set(TargetNodeNumber$LAYOUT, TargetNodeNumber$OFFSET, fieldValue);
    }

    private static final OfByte DataType$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DataType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UCHAR DataType
     * }
     */
    public static final OfByte DataType$layout() {
        return DataType$LAYOUT;
    }

    private static final long DataType$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UCHAR DataType
     * }
     */
    public static final long DataType$offset() {
        return DataType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UCHAR DataType
     * }
     */
    public static byte DataType(MemorySegment struct) {
        return struct.get(DataType$LAYOUT, DataType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UCHAR DataType
     * }
     */
    public static void DataType(MemorySegment struct, byte fieldValue) {
        struct.set(DataType$LAYOUT, DataType$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     UCHAR MinTransferSizeToAchieveValues : 1;
     *     UCHAR NonSequentialTransfers : 1;
     *     UCHAR Reserved : 6;
     * }
     * }
     */
    public static class Flags {

        Flags() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(1)
        ).withName("$anon$1200:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout Flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     UCHAR MinTransferSizeToAchieveValues : 1;
     *     UCHAR NonSequentialTransfers : 1;
     *     UCHAR Reserved : 6;
     * } Flags
     * }
     */
    public static final GroupLayout Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     UCHAR MinTransferSizeToAchieveValues : 1;
     *     UCHAR NonSequentialTransfers : 1;
     *     UCHAR Reserved : 6;
     * } Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     UCHAR MinTransferSizeToAchieveValues : 1;
     *     UCHAR NonSequentialTransfers : 1;
     *     UCHAR Reserved : 6;
     * } Flags
     * }
     */
    public static MemorySegment Flags(MemorySegment struct) {
        return struct.asSlice(Flags$OFFSET, Flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     UCHAR MinTransferSizeToAchieveValues : 1;
     *     UCHAR NonSequentialTransfers : 1;
     *     UCHAR Reserved : 6;
     * } Flags
     * }
     */
    public static void Flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Flags$OFFSET, Flags$LAYOUT.byteSize());
    }

    private static final OfLong MinTransferSizeInBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("MinTransferSizeInBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG MinTransferSizeInBytes
     * }
     */
    public static final OfLong MinTransferSizeInBytes$layout() {
        return MinTransferSizeInBytes$LAYOUT;
    }

    private static final long MinTransferSizeInBytes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG MinTransferSizeInBytes
     * }
     */
    public static final long MinTransferSizeInBytes$offset() {
        return MinTransferSizeInBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG MinTransferSizeInBytes
     * }
     */
    public static long MinTransferSizeInBytes(MemorySegment struct) {
        return struct.get(MinTransferSizeInBytes$LAYOUT, MinTransferSizeInBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG MinTransferSizeInBytes
     * }
     */
    public static void MinTransferSizeInBytes(MemorySegment struct, long fieldValue) {
        struct.set(MinTransferSizeInBytes$LAYOUT, MinTransferSizeInBytes$OFFSET, fieldValue);
    }

    private static final OfLong EntryValue$LAYOUT = (OfLong)$LAYOUT.select(groupElement("EntryValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONGLONG EntryValue
     * }
     */
    public static final OfLong EntryValue$layout() {
        return EntryValue$LAYOUT;
    }

    private static final long EntryValue$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONGLONG EntryValue
     * }
     */
    public static final long EntryValue$offset() {
        return EntryValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONGLONG EntryValue
     * }
     */
    public static long EntryValue(MemorySegment struct) {
        return struct.get(EntryValue$LAYOUT, EntryValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONGLONG EntryValue
     * }
     */
    public static void EntryValue(MemorySegment struct, long fieldValue) {
        struct.set(EntryValue$LAYOUT, EntryValue$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

