// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class winapi_20 extends winapi_21 {

    winapi_20() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef NPJOYCAPSA NPJOYCAPS
     * }
     */
    public static final AddressLayout NPJOYCAPS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOYCAPSA LPJOYCAPS
     * }
     */
    public static final AddressLayout LPJOYCAPS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PJOYCAPS2A
     * }
     */
    public static final AddressLayout PJOYCAPS2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPJOYCAPS2A
     * }
     */
    public static final AddressLayout NPJOYCAPS2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2A {
     *     WORD wMid;
     *     WORD wPid;
     *     CHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     CHAR szRegKey[32];
     *     CHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPJOYCAPS2A
     * }
     */
    public static final AddressLayout LPJOYCAPS2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *PJOYCAPS2W
     * }
     */
    public static final AddressLayout PJOYCAPS2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *NPJOYCAPS2W
     * }
     */
    public static final AddressLayout NPJOYCAPS2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagJOYCAPS2W {
     *     WORD wMid;
     *     WORD wPid;
     *     WCHAR szPname[32];
     *     UINT wXmin;
     *     UINT wXmax;
     *     UINT wYmin;
     *     UINT wYmax;
     *     UINT wZmin;
     *     UINT wZmax;
     *     UINT wNumButtons;
     *     UINT wPeriodMin;
     *     UINT wPeriodMax;
     *     UINT wRmin;
     *     UINT wRmax;
     *     UINT wUmin;
     *     UINT wUmax;
     *     UINT wVmin;
     *     UINT wVmax;
     *     UINT wCaps;
     *     UINT wMaxAxes;
     *     UINT wNumAxes;
     *     UINT wMaxButtons;
     *     WCHAR szRegKey[32];
     *     WCHAR szOEMVxD[260];
     *     GUID ManufacturerGuid;
     *     GUID ProductGuid;
     *     GUID NameGuid;
     * } *LPJOYCAPS2W
     * }
     */
    public static final AddressLayout LPJOYCAPS2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOYCAPS2A PJOYCAPS2
     * }
     */
    public static final AddressLayout PJOYCAPS2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPJOYCAPS2A NPJOYCAPS2
     * }
     */
    public static final AddressLayout NPJOYCAPS2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOYCAPS2A LPJOYCAPS2
     * }
     */
    public static final AddressLayout LPJOYCAPS2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *PJOYINFO
     * }
     */
    public static final AddressLayout PJOYINFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *NPJOYINFO
     * }
     */
    public static final AddressLayout NPJOYINFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfo_tag {
     *     UINT wXpos;
     *     UINT wYpos;
     *     UINT wZpos;
     *     UINT wButtons;
     * } *LPJOYINFO
     * }
     */
    public static final AddressLayout LPJOYINFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *PJOYINFOEX
     * }
     */
    public static final AddressLayout PJOYINFOEX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *NPJOYINFOEX
     * }
     */
    public static final AddressLayout NPJOYINFOEX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct joyinfoex_tag {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     DWORD dwXpos;
     *     DWORD dwYpos;
     *     DWORD dwZpos;
     *     DWORD dwRpos;
     *     DWORD dwUpos;
     *     DWORD dwVpos;
     *     DWORD dwButtons;
     *     DWORD dwButtonNumber;
     *     DWORD dwPOV;
     *     DWORD dwReserved1;
     *     DWORD dwReserved2;
     * } *LPJOYINFOEX
     * }
     */
    public static final AddressLayout LPJOYINFOEX = winapi.C_POINTER;

    private static class joyGetPosEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joyGetPosEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static FunctionDescriptor joyGetPosEx$descriptor() {
        return joyGetPosEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static MethodHandle joyGetPosEx$handle() {
        return joyGetPosEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static MemorySegment joyGetPosEx$address() {
        return joyGetPosEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetPosEx(UINT uJoyID, LPJOYINFOEX pji)
     * }
     */
    public static int joyGetPosEx(int uJoyID, MemorySegment pji) {
        var mh$ = joyGetPosEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetPosEx", uJoyID, pji);
            }
            return (int)mh$.invokeExact(uJoyID, pji);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetNumDevs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("joyGetNumDevs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static FunctionDescriptor joyGetNumDevs$descriptor() {
        return joyGetNumDevs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static MethodHandle joyGetNumDevs$handle() {
        return joyGetNumDevs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static MemorySegment joyGetNumDevs$address() {
        return joyGetNumDevs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT joyGetNumDevs()
     * }
     */
    public static int joyGetNumDevs() {
        var mh$ = joyGetNumDevs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetNumDevs");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetDevCapsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joyGetDevCapsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static FunctionDescriptor joyGetDevCapsA$descriptor() {
        return joyGetDevCapsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static MethodHandle joyGetDevCapsA$handle() {
        return joyGetDevCapsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static MemorySegment joyGetDevCapsA$address() {
        return joyGetDevCapsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsA(UINT_PTR uJoyID, LPJOYCAPSA pjc, UINT cbjc)
     * }
     */
    public static int joyGetDevCapsA(long uJoyID, MemorySegment pjc, int cbjc) {
        var mh$ = joyGetDevCapsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetDevCapsA", uJoyID, pjc, cbjc);
            }
            return (int)mh$.invokeExact(uJoyID, pjc, cbjc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetDevCapsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joyGetDevCapsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static FunctionDescriptor joyGetDevCapsW$descriptor() {
        return joyGetDevCapsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static MethodHandle joyGetDevCapsW$handle() {
        return joyGetDevCapsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static MemorySegment joyGetDevCapsW$address() {
        return joyGetDevCapsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetDevCapsW(UINT_PTR uJoyID, LPJOYCAPSW pjc, UINT cbjc)
     * }
     */
    public static int joyGetDevCapsW(long uJoyID, MemorySegment pjc, int cbjc) {
        var mh$ = joyGetDevCapsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetDevCapsW", uJoyID, pjc, cbjc);
            }
            return (int)mh$.invokeExact(uJoyID, pjc, cbjc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joyGetPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static FunctionDescriptor joyGetPos$descriptor() {
        return joyGetPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static MethodHandle joyGetPos$handle() {
        return joyGetPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static MemorySegment joyGetPos$address() {
        return joyGetPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetPos(UINT uJoyID, LPJOYINFO pji)
     * }
     */
    public static int joyGetPos(int uJoyID, MemorySegment pji) {
        var mh$ = joyGetPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetPos", uJoyID, pji);
            }
            return (int)mh$.invokeExact(uJoyID, pji);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyGetThreshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joyGetThreshold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static FunctionDescriptor joyGetThreshold$descriptor() {
        return joyGetThreshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static MethodHandle joyGetThreshold$handle() {
        return joyGetThreshold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static MemorySegment joyGetThreshold$address() {
        return joyGetThreshold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyGetThreshold(UINT uJoyID, LPUINT puThreshold)
     * }
     */
    public static int joyGetThreshold(int uJoyID, MemorySegment puThreshold) {
        var mh$ = joyGetThreshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyGetThreshold", uJoyID, puThreshold);
            }
            return (int)mh$.invokeExact(uJoyID, puThreshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyReleaseCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joyReleaseCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static FunctionDescriptor joyReleaseCapture$descriptor() {
        return joyReleaseCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static MethodHandle joyReleaseCapture$handle() {
        return joyReleaseCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static MemorySegment joyReleaseCapture$address() {
        return joyReleaseCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyReleaseCapture(UINT uJoyID)
     * }
     */
    public static int joyReleaseCapture(int uJoyID) {
        var mh$ = joyReleaseCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyReleaseCapture", uJoyID);
            }
            return (int)mh$.invokeExact(uJoyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joySetCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joySetCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static FunctionDescriptor joySetCapture$descriptor() {
        return joySetCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static MethodHandle joySetCapture$handle() {
        return joySetCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static MemorySegment joySetCapture$address() {
        return joySetCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joySetCapture(HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged)
     * }
     */
    public static int joySetCapture(MemorySegment hwnd, int uJoyID, int uPeriod, int fChanged) {
        var mh$ = joySetCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joySetCapture", hwnd, uJoyID, uPeriod, fChanged);
            }
            return (int)mh$.invokeExact(hwnd, uJoyID, uPeriod, fChanged);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joySetThreshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joySetThreshold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static FunctionDescriptor joySetThreshold$descriptor() {
        return joySetThreshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static MethodHandle joySetThreshold$handle() {
        return joySetThreshold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static MemorySegment joySetThreshold$address() {
        return joySetThreshold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joySetThreshold(UINT uJoyID, UINT uThreshold)
     * }
     */
    public static int joySetThreshold(int uJoyID, int uThreshold) {
        var mh$ = joySetThreshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joySetThreshold", uJoyID, uThreshold);
            }
            return (int)mh$.invokeExact(uJoyID, uThreshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class joyConfigChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("joyConfigChanged");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor joyConfigChanged$descriptor() {
        return joyConfigChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static MethodHandle joyConfigChanged$handle() {
        return joyConfigChanged.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static MemorySegment joyConfigChanged$address() {
        return joyConfigChanged.ADDR;
    }

    /**
     * {@snippet lang=c :
     * MMRESULT joyConfigChanged(DWORD dwFlags)
     * }
     */
    public static int joyConfigChanged(int dwFlags) {
        var mh$ = joyConfigChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("joyConfigChanged", dwFlags);
            }
            return (int)mh$.invokeExact(dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NCB {
     *     UCHAR ncb_command;
     *     UCHAR ncb_retcode;
     *     UCHAR ncb_lsn;
     *     UCHAR ncb_num;
     *     PUCHAR ncb_buffer;
     *     WORD ncb_length;
     *     UCHAR ncb_callname[16];
     *     UCHAR ncb_name[16];
     *     UCHAR ncb_rto;
     *     UCHAR ncb_sto;
     *     void (*ncb_post)(struct _NCB *) __attribute__((stdcall));
     *     UCHAR ncb_lana_num;
     *     UCHAR ncb_cmd_cplt;
     *     UCHAR ncb_reserve[18];
     *     HANDLE ncb_event;
     * } *PNCB
     * }
     */
    public static final AddressLayout PNCB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADAPTER_STATUS {
     *     UCHAR adapter_address[6];
     *     UCHAR rev_major;
     *     UCHAR reserved0;
     *     UCHAR adapter_type;
     *     UCHAR rev_minor;
     *     WORD duration;
     *     WORD frmr_recv;
     *     WORD frmr_xmit;
     *     WORD iframe_recv_err;
     *     WORD xmit_aborts;
     *     DWORD xmit_success;
     *     DWORD recv_success;
     *     WORD iframe_xmit_err;
     *     WORD recv_buff_unavail;
     *     WORD t1_timeouts;
     *     WORD ti_timeouts;
     *     DWORD reserved1;
     *     WORD free_ncbs;
     *     WORD max_cfg_ncbs;
     *     WORD max_ncbs;
     *     WORD xmit_buf_unavail;
     *     WORD max_dgram_size;
     *     WORD pending_sess;
     *     WORD max_cfg_sess;
     *     WORD max_sess;
     *     WORD max_sess_pkt_size;
     *     WORD name_count;
     * } *PADAPTER_STATUS
     * }
     */
    public static final AddressLayout PADAPTER_STATUS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NAME_BUFFER {
     *     UCHAR name[16];
     *     UCHAR name_num;
     *     UCHAR name_flags;
     * } *PNAME_BUFFER
     * }
     */
    public static final AddressLayout PNAME_BUFFER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SESSION_HEADER {
     *     UCHAR sess_name;
     *     UCHAR num_sess;
     *     UCHAR rcv_dg_outstanding;
     *     UCHAR rcv_any_outstanding;
     * } *PSESSION_HEADER
     * }
     */
    public static final AddressLayout PSESSION_HEADER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SESSION_BUFFER {
     *     UCHAR lsn;
     *     UCHAR state;
     *     UCHAR local_name[16];
     *     UCHAR remote_name[16];
     *     UCHAR rcvs_outstanding;
     *     UCHAR sends_outstanding;
     * } *PSESSION_BUFFER
     * }
     */
    public static final AddressLayout PSESSION_BUFFER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _LANA_ENUM {
     *     UCHAR length;
     *     UCHAR lana[255];
     * } *PLANA_ENUM
     * }
     */
    public static final AddressLayout PLANA_ENUM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FIND_NAME_HEADER {
     *     WORD node_count;
     *     UCHAR reserved;
     *     UCHAR unique_group;
     * } *PFIND_NAME_HEADER
     * }
     */
    public static final AddressLayout PFIND_NAME_HEADER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FIND_NAME_BUFFER {
     *     UCHAR length;
     *     UCHAR access_control;
     *     UCHAR frame_control;
     *     UCHAR destination_addr[6];
     *     UCHAR source_addr[6];
     *     UCHAR routing_info[18];
     * } *PFIND_NAME_BUFFER
     * }
     */
    public static final AddressLayout PFIND_NAME_BUFFER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ACTION_HEADER {
     *     ULONG transport_id;
     *     USHORT action_code;
     *     USHORT reserved;
     * } *PACTION_HEADER
     * }
     */
    public static final AddressLayout PACTION_HEADER = winapi.C_POINTER;

    private static class Netbios {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("Netbios");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static FunctionDescriptor Netbios$descriptor() {
        return Netbios.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static MethodHandle Netbios$handle() {
        return Netbios.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static MemorySegment Netbios$address() {
        return Netbios.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UCHAR Netbios(PNCB pncb)
     * }
     */
    public static byte Netbios(MemorySegment pncb) {
        var mh$ = Netbios.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Netbios", pncb);
            }
            return (byte)mh$.invokeExact(pncb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *I_RPC_HANDLE
     * }
     */
    public static final AddressLayout I_RPC_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef long RPC_STATUS
     * }
     */
    public static final OfInt RPC_STATUS = winapi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char *RPC_CSTR
     * }
     */
    public static final AddressLayout RPC_CSTR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short *RPC_WSTR
     * }
     */
    public static final AddressLayout RPC_WSTR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const unsigned short *RPC_CWSTR
     * }
     */
    public static final AddressLayout RPC_CWSTR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef I_RPC_HANDLE RPC_BINDING_HANDLE
     * }
     */
    public static final AddressLayout RPC_BINDING_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef RPC_BINDING_HANDLE handle_t
     * }
     */
    public static final AddressLayout handle_t = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *RPC_IF_HANDLE
     * }
     */
    public static final AddressLayout RPC_IF_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_POLICY {
     *     unsigned int Length;
     *     unsigned long EndpointFlags;
     *     unsigned long NICFlags;
     * } *PRPC_POLICY
     * }
     */
    public static final AddressLayout PRPC_POLICY = winapi.C_POINTER;

    private static class RpcBindingCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingCopy$descriptor() {
        return RpcBindingCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MethodHandle RpcBindingCopy$handle() {
        return RpcBindingCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MemorySegment RpcBindingCopy$address() {
        return RpcBindingCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static int RpcBindingCopy(MemorySegment SourceBinding, MemorySegment DestinationBinding) {
        var mh$ = RpcBindingCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCopy", SourceBinding, DestinationBinding);
            }
            return (int)mh$.invokeExact(SourceBinding, DestinationBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFree$descriptor() {
        return RpcBindingFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFree$handle() {
        return RpcBindingFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingFree$address() {
        return RpcBindingFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFree(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFree(MemorySegment Binding) {
        var mh$ = RpcBindingFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFree", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingSetOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static FunctionDescriptor RpcBindingSetOption$descriptor() {
        return RpcBindingSetOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MethodHandle RpcBindingSetOption$handle() {
        return RpcBindingSetOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MemorySegment RpcBindingSetOption$address() {
        return RpcBindingSetOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static int RpcBindingSetOption(MemorySegment hBinding, int option, long optionValue) {
        var mh$ = RpcBindingSetOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetOption", hBinding, option, optionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, optionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static FunctionDescriptor RpcBindingInqOption$descriptor() {
        return RpcBindingInqOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static MethodHandle RpcBindingInqOption$handle() {
        return RpcBindingInqOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static MemorySegment RpcBindingInqOption$address() {
        return RpcBindingInqOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR *pOptionValue)
     * }
     */
    public static int RpcBindingInqOption(MemorySegment hBinding, int option, MemorySegment pOptionValue) {
        var mh$ = RpcBindingInqOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqOption", hBinding, option, pOptionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, pOptionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFromStringBindingA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingFromStringBindingA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFromStringBindingA$descriptor() {
        return RpcBindingFromStringBindingA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFromStringBindingA$handle() {
        return RpcBindingFromStringBindingA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingFromStringBindingA$address() {
        return RpcBindingFromStringBindingA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingA(RPC_CSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFromStringBindingA(MemorySegment StringBinding, MemorySegment Binding) {
        var mh$ = RpcBindingFromStringBindingA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFromStringBindingA", StringBinding, Binding);
            }
            return (int)mh$.invokeExact(StringBinding, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingFromStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingFromStringBindingW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingFromStringBindingW$descriptor() {
        return RpcBindingFromStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingFromStringBindingW$handle() {
        return RpcBindingFromStringBindingW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingFromStringBindingW$address() {
        return RpcBindingFromStringBindingW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingFromStringBindingW(RPC_WSTR StringBinding, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingFromStringBindingW(MemorySegment StringBinding, MemorySegment Binding) {
        var mh$ = RpcBindingFromStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingFromStringBindingW", StringBinding, Binding);
            }
            return (int)mh$.invokeExact(StringBinding, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsGetContextBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcSsGetContextBinding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcSsGetContextBinding$descriptor() {
        return RpcSsGetContextBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcSsGetContextBinding$handle() {
        return RpcSsGetContextBinding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcSsGetContextBinding$address() {
        return RpcSsGetContextBinding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSsGetContextBinding(void *ContextHandle, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcSsGetContextBinding(MemorySegment ContextHandle, MemorySegment Binding) {
        var mh$ = RpcSsGetContextBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsGetContextBinding", ContextHandle, Binding);
            }
            return (int)mh$.invokeExact(ContextHandle, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqMaxCalls {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqMaxCalls");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqMaxCalls(RPC_BINDING_HANDLE Binding, unsigned int *MaxCalls)
     * }
     */
    public static FunctionDescriptor RpcBindingInqMaxCalls$descriptor() {
        return RpcBindingInqMaxCalls.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqMaxCalls(RPC_BINDING_HANDLE Binding, unsigned int *MaxCalls)
     * }
     */
    public static MethodHandle RpcBindingInqMaxCalls$handle() {
        return RpcBindingInqMaxCalls.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqMaxCalls(RPC_BINDING_HANDLE Binding, unsigned int *MaxCalls)
     * }
     */
    public static MemorySegment RpcBindingInqMaxCalls$address() {
        return RpcBindingInqMaxCalls.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqMaxCalls(RPC_BINDING_HANDLE Binding, unsigned int *MaxCalls)
     * }
     */
    public static int RpcBindingInqMaxCalls(MemorySegment Binding, MemorySegment MaxCalls) {
        var mh$ = RpcBindingInqMaxCalls.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqMaxCalls", Binding, MaxCalls);
            }
            return (int)mh$.invokeExact(Binding, MaxCalls);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcBindingInqObject$descriptor() {
        return RpcBindingInqObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcBindingInqObject$handle() {
        return RpcBindingInqObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MemorySegment RpcBindingInqObject$address() {
        return RpcBindingInqObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcBindingInqObject(MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcBindingInqObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqObject", Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingReset$descriptor() {
        return RpcBindingReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcBindingReset$handle() {
        return RpcBindingReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MemorySegment RpcBindingReset$address() {
        return RpcBindingReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingReset(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcBindingReset(MemorySegment Binding) {
        var mh$ = RpcBindingReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingReset", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingSetObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcBindingSetObject$descriptor() {
        return RpcBindingSetObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcBindingSetObject$handle() {
        return RpcBindingSetObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MemorySegment RpcBindingSetObject$address() {
        return RpcBindingSetObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetObject(RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcBindingSetObject(MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcBindingSetObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetObject", Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqDefaultProtectLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtInqDefaultProtectLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqDefaultProtectLevel$descriptor() {
        return RpcMgmtInqDefaultProtectLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static MethodHandle RpcMgmtInqDefaultProtectLevel$handle() {
        return RpcMgmtInqDefaultProtectLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static MemorySegment RpcMgmtInqDefaultProtectLevel$address() {
        return RpcMgmtInqDefaultProtectLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqDefaultProtectLevel(unsigned long AuthnSvc, unsigned long *AuthnLevel)
     * }
     */
    public static int RpcMgmtInqDefaultProtectLevel(int AuthnSvc, MemorySegment AuthnLevel) {
        var mh$ = RpcMgmtInqDefaultProtectLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqDefaultProtectLevel", AuthnSvc, AuthnLevel);
            }
            return (int)mh$.invokeExact(AuthnSvc, AuthnLevel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingToStringBindingA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingToStringBindingA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingToStringBindingA$descriptor() {
        return RpcBindingToStringBindingA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcBindingToStringBindingA$handle() {
        return RpcBindingToStringBindingA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static MemorySegment RpcBindingToStringBindingA$address() {
        return RpcBindingToStringBindingA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingA(RPC_BINDING_HANDLE Binding, RPC_CSTR *StringBinding)
     * }
     */
    public static int RpcBindingToStringBindingA(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = RpcBindingToStringBindingA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingToStringBindingA", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingToStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingToStringBindingW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingToStringBindingW$descriptor() {
        return RpcBindingToStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcBindingToStringBindingW$handle() {
        return RpcBindingToStringBindingW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static MemorySegment RpcBindingToStringBindingW$address() {
        return RpcBindingToStringBindingW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingToStringBindingW(RPC_BINDING_HANDLE Binding, RPC_WSTR *StringBinding)
     * }
     */
    public static int RpcBindingToStringBindingW(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = RpcBindingToStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingToStringBindingW", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingVectorFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcBindingVectorFree$descriptor() {
        return RpcBindingVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcBindingVectorFree$handle() {
        return RpcBindingVectorFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MemorySegment RpcBindingVectorFree$address() {
        return RpcBindingVectorFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingVectorFree(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcBindingVectorFree(MemorySegment BindingVector) {
        var mh$ = RpcBindingVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingVectorFree", BindingVector);
            }
            return (int)mh$.invokeExact(BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingComposeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcStringBindingComposeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcStringBindingComposeA$descriptor() {
        return RpcStringBindingComposeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcStringBindingComposeA$handle() {
        return RpcStringBindingComposeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static MemorySegment RpcStringBindingComposeA$address() {
        return RpcStringBindingComposeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeA(RPC_CSTR ObjUuid, RPC_CSTR ProtSeq, RPC_CSTR NetworkAddr, RPC_CSTR Endpoint, RPC_CSTR Options, RPC_CSTR *StringBinding)
     * }
     */
    public static int RpcStringBindingComposeA(MemorySegment ObjUuid, MemorySegment ProtSeq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment Options, MemorySegment StringBinding) {
        var mh$ = RpcStringBindingComposeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingComposeA", ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
            }
            return (int)mh$.invokeExact(ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingComposeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcStringBindingComposeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static FunctionDescriptor RpcStringBindingComposeW$descriptor() {
        return RpcStringBindingComposeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static MethodHandle RpcStringBindingComposeW$handle() {
        return RpcStringBindingComposeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static MemorySegment RpcStringBindingComposeW$address() {
        return RpcStringBindingComposeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingComposeW(RPC_WSTR ObjUuid, RPC_WSTR ProtSeq, RPC_WSTR NetworkAddr, RPC_WSTR Endpoint, RPC_WSTR Options, RPC_WSTR *StringBinding)
     * }
     */
    public static int RpcStringBindingComposeW(MemorySegment ObjUuid, MemorySegment ProtSeq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment Options, MemorySegment StringBinding) {
        var mh$ = RpcStringBindingComposeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingComposeW", ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
            }
            return (int)mh$.invokeExact(ObjUuid, ProtSeq, NetworkAddr, Endpoint, Options, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingParseA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcStringBindingParseA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static FunctionDescriptor RpcStringBindingParseA$descriptor() {
        return RpcStringBindingParseA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static MethodHandle RpcStringBindingParseA$handle() {
        return RpcStringBindingParseA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static MemorySegment RpcStringBindingParseA$address() {
        return RpcStringBindingParseA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseA(RPC_CSTR StringBinding, RPC_CSTR *ObjUuid, RPC_CSTR *Protseq, RPC_CSTR *NetworkAddr, RPC_CSTR *Endpoint, RPC_CSTR *NetworkOptions)
     * }
     */
    public static int RpcStringBindingParseA(MemorySegment StringBinding, MemorySegment ObjUuid, MemorySegment Protseq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment NetworkOptions) {
        var mh$ = RpcStringBindingParseA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingParseA", StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
            }
            return (int)mh$.invokeExact(StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringBindingParseW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcStringBindingParseW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static FunctionDescriptor RpcStringBindingParseW$descriptor() {
        return RpcStringBindingParseW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static MethodHandle RpcStringBindingParseW$handle() {
        return RpcStringBindingParseW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static MemorySegment RpcStringBindingParseW$address() {
        return RpcStringBindingParseW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringBindingParseW(RPC_WSTR StringBinding, RPC_WSTR *ObjUuid, RPC_WSTR *Protseq, RPC_WSTR *NetworkAddr, RPC_WSTR *Endpoint, RPC_WSTR *NetworkOptions)
     * }
     */
    public static int RpcStringBindingParseW(MemorySegment StringBinding, MemorySegment ObjUuid, MemorySegment Protseq, MemorySegment NetworkAddr, MemorySegment Endpoint, MemorySegment NetworkOptions) {
        var mh$ = RpcStringBindingParseW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringBindingParseW", StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
            }
            return (int)mh$.invokeExact(StringBinding, ObjUuid, Protseq, NetworkAddr, Endpoint, NetworkOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringFreeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcStringFreeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static FunctionDescriptor RpcStringFreeA$descriptor() {
        return RpcStringFreeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static MethodHandle RpcStringFreeA$handle() {
        return RpcStringFreeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static MemorySegment RpcStringFreeA$address() {
        return RpcStringFreeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeA(RPC_CSTR *String)
     * }
     */
    public static int RpcStringFreeA(MemorySegment String_) {
        var mh$ = RpcStringFreeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringFreeA", String_);
            }
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcStringFreeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcStringFreeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static FunctionDescriptor RpcStringFreeW$descriptor() {
        return RpcStringFreeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static MethodHandle RpcStringFreeW$handle() {
        return RpcStringFreeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static MemorySegment RpcStringFreeW$address() {
        return RpcStringFreeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcStringFreeW(RPC_WSTR *String)
     * }
     */
    public static int RpcStringFreeW(MemorySegment String_) {
        var mh$ = RpcStringFreeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcStringFreeW", String_);
            }
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcIfInqId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcIfInqId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static FunctionDescriptor RpcIfInqId$descriptor() {
        return RpcIfInqId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static MethodHandle RpcIfInqId$handle() {
        return RpcIfInqId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static MemorySegment RpcIfInqId$address() {
        return RpcIfInqId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcIfInqId(RPC_IF_HANDLE RpcIfHandle, RPC_IF_ID *RpcIfId)
     * }
     */
    public static int RpcIfInqId(MemorySegment RpcIfHandle, MemorySegment RpcIfId) {
        var mh$ = RpcIfInqId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcIfInqId", RpcIfHandle, RpcIfId);
            }
            return (int)mh$.invokeExact(RpcIfHandle, RpcIfId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkIsProtseqValidA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNetworkIsProtseqValidA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static FunctionDescriptor RpcNetworkIsProtseqValidA$descriptor() {
        return RpcNetworkIsProtseqValidA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static MethodHandle RpcNetworkIsProtseqValidA$handle() {
        return RpcNetworkIsProtseqValidA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static MemorySegment RpcNetworkIsProtseqValidA$address() {
        return RpcNetworkIsProtseqValidA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidA(RPC_CSTR Protseq)
     * }
     */
    public static int RpcNetworkIsProtseqValidA(MemorySegment Protseq) {
        var mh$ = RpcNetworkIsProtseqValidA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkIsProtseqValidA", Protseq);
            }
            return (int)mh$.invokeExact(Protseq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkIsProtseqValidW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNetworkIsProtseqValidW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static FunctionDescriptor RpcNetworkIsProtseqValidW$descriptor() {
        return RpcNetworkIsProtseqValidW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static MethodHandle RpcNetworkIsProtseqValidW$handle() {
        return RpcNetworkIsProtseqValidW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static MemorySegment RpcNetworkIsProtseqValidW$address() {
        return RpcNetworkIsProtseqValidW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkIsProtseqValidW(RPC_WSTR Protseq)
     * }
     */
    public static int RpcNetworkIsProtseqValidW(MemorySegment Protseq) {
        var mh$ = RpcNetworkIsProtseqValidW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkIsProtseqValidW", Protseq);
            }
            return (int)mh$.invokeExact(Protseq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqComTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtInqComTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqComTimeout$descriptor() {
        return RpcMgmtInqComTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static MethodHandle RpcMgmtInqComTimeout$handle() {
        return RpcMgmtInqComTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static MemorySegment RpcMgmtInqComTimeout$address() {
        return RpcMgmtInqComTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqComTimeout(RPC_BINDING_HANDLE Binding, unsigned int *Timeout)
     * }
     */
    public static int RpcMgmtInqComTimeout(MemorySegment Binding, MemorySegment Timeout) {
        var mh$ = RpcMgmtInqComTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqComTimeout", Binding, Timeout);
            }
            return (int)mh$.invokeExact(Binding, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetComTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtSetComTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetComTimeout$descriptor() {
        return RpcMgmtSetComTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static MethodHandle RpcMgmtSetComTimeout$handle() {
        return RpcMgmtSetComTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static MemorySegment RpcMgmtSetComTimeout$address() {
        return RpcMgmtSetComTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetComTimeout(RPC_BINDING_HANDLE Binding, unsigned int Timeout)
     * }
     */
    public static int RpcMgmtSetComTimeout(MemorySegment Binding, int Timeout) {
        var mh$ = RpcMgmtSetComTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetComTimeout", Binding, Timeout);
            }
            return (int)mh$.invokeExact(Binding, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetCancelTimeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtSetCancelTimeout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetCancelTimeout$descriptor() {
        return RpcMgmtSetCancelTimeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static MethodHandle RpcMgmtSetCancelTimeout$handle() {
        return RpcMgmtSetCancelTimeout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static MemorySegment RpcMgmtSetCancelTimeout$address() {
        return RpcMgmtSetCancelTimeout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetCancelTimeout(long Timeout)
     * }
     */
    public static int RpcMgmtSetCancelTimeout(int Timeout) {
        var mh$ = RpcMgmtSetCancelTimeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetCancelTimeout", Timeout);
            }
            return (int)mh$.invokeExact(Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkInqProtseqsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNetworkInqProtseqsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcNetworkInqProtseqsA$descriptor() {
        return RpcNetworkInqProtseqsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MethodHandle RpcNetworkInqProtseqsA$handle() {
        return RpcNetworkInqProtseqsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MemorySegment RpcNetworkInqProtseqsA$address() {
        return RpcNetworkInqProtseqsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static int RpcNetworkInqProtseqsA(MemorySegment ProtseqVector) {
        var mh$ = RpcNetworkInqProtseqsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkInqProtseqsA", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNetworkInqProtseqsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNetworkInqProtseqsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcNetworkInqProtseqsW$descriptor() {
        return RpcNetworkInqProtseqsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MethodHandle RpcNetworkInqProtseqsW$handle() {
        return RpcNetworkInqProtseqsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MemorySegment RpcNetworkInqProtseqsW$address() {
        return RpcNetworkInqProtseqsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNetworkInqProtseqsW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static int RpcNetworkInqProtseqsW(MemorySegment ProtseqVector) {
        var mh$ = RpcNetworkInqProtseqsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNetworkInqProtseqsW", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectInqType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcObjectInqType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static FunctionDescriptor RpcObjectInqType$descriptor() {
        return RpcObjectInqType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MethodHandle RpcObjectInqType$handle() {
        return RpcObjectInqType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MemorySegment RpcObjectInqType$address() {
        return RpcObjectInqType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectInqType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static int RpcObjectInqType(MemorySegment ObjUuid, MemorySegment TypeUuid) {
        var mh$ = RpcObjectInqType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectInqType", ObjUuid, TypeUuid);
            }
            return (int)mh$.invokeExact(ObjUuid, TypeUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectSetInqFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcObjectSetInqFn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static FunctionDescriptor RpcObjectSetInqFn$descriptor() {
        return RpcObjectSetInqFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static MethodHandle RpcObjectSetInqFn$handle() {
        return RpcObjectSetInqFn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static MemorySegment RpcObjectSetInqFn$address() {
        return RpcObjectSetInqFn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetInqFn(RPC_OBJECT_INQ_FN *InquiryFn)
     * }
     */
    public static int RpcObjectSetInqFn(MemorySegment InquiryFn) {
        var mh$ = RpcObjectSetInqFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectSetInqFn", InquiryFn);
            }
            return (int)mh$.invokeExact(InquiryFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcObjectSetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcObjectSetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static FunctionDescriptor RpcObjectSetType$descriptor() {
        return RpcObjectSetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MethodHandle RpcObjectSetType$handle() {
        return RpcObjectSetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static MemorySegment RpcObjectSetType$address() {
        return RpcObjectSetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcObjectSetType(UUID *ObjUuid, UUID *TypeUuid)
     * }
     */
    public static int RpcObjectSetType(MemorySegment ObjUuid, MemorySegment TypeUuid) {
        var mh$ = RpcObjectSetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcObjectSetType", ObjUuid, TypeUuid);
            }
            return (int)mh$.invokeExact(ObjUuid, TypeUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcProtseqVectorFreeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcProtseqVectorFreeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcProtseqVectorFreeA$descriptor() {
        return RpcProtseqVectorFreeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MethodHandle RpcProtseqVectorFreeA$handle() {
        return RpcProtseqVectorFreeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static MemorySegment RpcProtseqVectorFreeA$address() {
        return RpcProtseqVectorFreeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeA(RPC_PROTSEQ_VECTORA **ProtseqVector)
     * }
     */
    public static int RpcProtseqVectorFreeA(MemorySegment ProtseqVector) {
        var mh$ = RpcProtseqVectorFreeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcProtseqVectorFreeA", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcProtseqVectorFreeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcProtseqVectorFreeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static FunctionDescriptor RpcProtseqVectorFreeW$descriptor() {
        return RpcProtseqVectorFreeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MethodHandle RpcProtseqVectorFreeW$handle() {
        return RpcProtseqVectorFreeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static MemorySegment RpcProtseqVectorFreeW$address() {
        return RpcProtseqVectorFreeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcProtseqVectorFreeW(RPC_PROTSEQ_VECTORW **ProtseqVector)
     * }
     */
    public static int RpcProtseqVectorFreeW(MemorySegment ProtseqVector) {
        var mh$ = RpcProtseqVectorFreeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcProtseqVectorFreeW", ProtseqVector);
            }
            return (int)mh$.invokeExact(ProtseqVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInqBindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindings$descriptor() {
        return RpcServerInqBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInqBindings$handle() {
        return RpcServerInqBindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MemorySegment RpcServerInqBindings$address() {
        return RpcServerInqBindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindings(RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInqBindings(MemorySegment BindingVector) {
        var mh$ = RpcServerInqBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindings", BindingVector);
            }
            return (int)mh$.invokeExact(BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindingsEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInqBindingsEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindingsEx$descriptor() {
        return RpcServerInqBindingsEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInqBindingsEx$handle() {
        return RpcServerInqBindingsEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MemorySegment RpcServerInqBindingsEx$address() {
        return RpcServerInqBindingsEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingsEx(void *SecurityDescriptor, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInqBindingsEx(MemorySegment SecurityDescriptor, MemorySegment BindingVector) {
        var mh$ = RpcServerInqBindingsEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindingsEx", SecurityDescriptor, BindingVector);
            }
            return (int)mh$.invokeExact(SecurityDescriptor, BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInqIf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static FunctionDescriptor RpcServerInqIf$descriptor() {
        return RpcServerInqIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static MethodHandle RpcServerInqIf$handle() {
        return RpcServerInqIf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static MemorySegment RpcServerInqIf$address() {
        return RpcServerInqIf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void **MgrEpv)
     * }
     */
    public static int RpcServerInqIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv) {
        var mh$ = RpcServerInqIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqIf", IfSpec, MgrTypeUuid, MgrEpv);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerListen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerListen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static FunctionDescriptor RpcServerListen$descriptor() {
        return RpcServerListen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static MethodHandle RpcServerListen$handle() {
        return RpcServerListen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static MemorySegment RpcServerListen$address() {
        return RpcServerListen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerListen(unsigned int MinimumCallThreads, unsigned int MaxCalls, unsigned int DontWait)
     * }
     */
    public static int RpcServerListen(int MinimumCallThreads, int MaxCalls, int DontWait) {
        var mh$ = RpcServerListen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerListen", MinimumCallThreads, MaxCalls, DontWait);
            }
            return (int)mh$.invokeExact(MinimumCallThreads, MaxCalls, DontWait);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerRegisterIf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf$descriptor() {
        return RpcServerRegisterIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static MethodHandle RpcServerRegisterIf$handle() {
        return RpcServerRegisterIf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static MemorySegment RpcServerRegisterIf$address() {
        return RpcServerRegisterIf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv)
     * }
     */
    public static int RpcServerRegisterIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv) {
        var mh$ = RpcServerRegisterIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf", IfSpec, MgrTypeUuid, MgrEpv);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerRegisterIfEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIfEx$descriptor() {
        return RpcServerRegisterIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static MethodHandle RpcServerRegisterIfEx$handle() {
        return RpcServerRegisterIfEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static MemorySegment RpcServerRegisterIfEx$address() {
        return RpcServerRegisterIfEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, RPC_IF_CALLBACK_FN *IfCallback)
     * }
     */
    public static int RpcServerRegisterIfEx(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, MemorySegment IfCallback) {
        var mh$ = RpcServerRegisterIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIfEx", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, IfCallback);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, IfCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerRegisterIf2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf2$descriptor() {
        return RpcServerRegisterIf2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static MethodHandle RpcServerRegisterIf2$handle() {
        return RpcServerRegisterIf2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static MemorySegment RpcServerRegisterIf2$address() {
        return RpcServerRegisterIf2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallbackFn)
     * }
     */
    public static int RpcServerRegisterIf2(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, int MaxRpcSize, MemorySegment IfCallbackFn) {
        var mh$ = RpcServerRegisterIf2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf2", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallbackFn);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallbackFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterIf3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerRegisterIf3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterIf3$descriptor() {
        return RpcServerRegisterIf3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerRegisterIf3$handle() {
        return RpcServerRegisterIf3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerRegisterIf3$address() {
        return RpcServerRegisterIf3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterIf3(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, void *MgrEpv, unsigned int Flags, unsigned int MaxCalls, unsigned int MaxRpcSize, RPC_IF_CALLBACK_FN *IfCallback, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerRegisterIf3(MemorySegment IfSpec, MemorySegment MgrTypeUuid, MemorySegment MgrEpv, int Flags, int MaxCalls, int MaxRpcSize, MemorySegment IfCallback, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerRegisterIf3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterIf3", IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallback, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, MgrEpv, Flags, MaxCalls, MaxRpcSize, IfCallback, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUnregisterIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUnregisterIf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static FunctionDescriptor RpcServerUnregisterIf$descriptor() {
        return RpcServerUnregisterIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static MethodHandle RpcServerUnregisterIf$handle() {
        return RpcServerUnregisterIf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static MemorySegment RpcServerUnregisterIf$address() {
        return RpcServerUnregisterIf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIf(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, unsigned int WaitForCallsToComplete)
     * }
     */
    public static int RpcServerUnregisterIf(MemorySegment IfSpec, MemorySegment MgrTypeUuid, int WaitForCallsToComplete) {
        var mh$ = RpcServerUnregisterIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUnregisterIf", IfSpec, MgrTypeUuid, WaitForCallsToComplete);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, WaitForCallsToComplete);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUnregisterIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUnregisterIfEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static FunctionDescriptor RpcServerUnregisterIfEx$descriptor() {
        return RpcServerUnregisterIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static MethodHandle RpcServerUnregisterIfEx$handle() {
        return RpcServerUnregisterIfEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static MemorySegment RpcServerUnregisterIfEx$address() {
        return RpcServerUnregisterIfEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnregisterIfEx(RPC_IF_HANDLE IfSpec, UUID *MgrTypeUuid, int RundownContextHandles)
     * }
     */
    public static int RpcServerUnregisterIfEx(MemorySegment IfSpec, MemorySegment MgrTypeUuid, int RundownContextHandles) {
        var mh$ = RpcServerUnregisterIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUnregisterIfEx", IfSpec, MgrTypeUuid, RundownContextHandles);
            }
            return (int)mh$.invokeExact(IfSpec, MgrTypeUuid, RundownContextHandles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseAllProtseqs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqs$descriptor() {
        return RpcServerUseAllProtseqs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqs$handle() {
        return RpcServerUseAllProtseqs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseAllProtseqs$address() {
        return RpcServerUseAllProtseqs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqs(unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseAllProtseqs(int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseAllProtseqs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqs", MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseAllProtseqsEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsEx$descriptor() {
        return RpcServerUseAllProtseqsEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsEx$handle() {
        return RpcServerUseAllProtseqsEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseAllProtseqsEx$address() {
        return RpcServerUseAllProtseqsEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsEx(unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseAllProtseqsEx(int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseAllProtseqsEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsEx", MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsIf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseAllProtseqsIf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsIf$descriptor() {
        return RpcServerUseAllProtseqsIf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsIf$handle() {
        return RpcServerUseAllProtseqsIf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseAllProtseqsIf$address() {
        return RpcServerUseAllProtseqsIf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIf(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseAllProtseqsIf(int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseAllProtseqsIf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsIf", MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseAllProtseqsIfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseAllProtseqsIfEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseAllProtseqsIfEx$descriptor() {
        return RpcServerUseAllProtseqsIfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseAllProtseqsIfEx$handle() {
        return RpcServerUseAllProtseqsIfEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseAllProtseqsIfEx$address() {
        return RpcServerUseAllProtseqsIfEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseAllProtseqsIfEx(unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseAllProtseqsIfEx(int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseAllProtseqsIfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseAllProtseqsIfEx", MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqA$descriptor() {
        return RpcServerUseProtseqA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqA$handle() {
        return RpcServerUseProtseqA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqA$address() {
        return RpcServerUseProtseqA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqA(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqA", Protseq, MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqExA$descriptor() {
        return RpcServerUseProtseqExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqExA$handle() {
        return RpcServerUseProtseqExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqExA$address() {
        return RpcServerUseProtseqExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExA(RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqExA(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqExA", Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqW$descriptor() {
        return RpcServerUseProtseqW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqW$handle() {
        return RpcServerUseProtseqW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqW$address() {
        return RpcServerUseProtseqW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqW(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqW", Protseq, MaxCalls, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqExW$descriptor() {
        return RpcServerUseProtseqExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqExW$handle() {
        return RpcServerUseProtseqExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqExW$address() {
        return RpcServerUseProtseqExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqExW(RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqExW(MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqExW", Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqEpA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpA$descriptor() {
        return RpcServerUseProtseqEpA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpA$handle() {
        return RpcServerUseProtseqEpA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqEpA$address() {
        return RpcServerUseProtseqEpA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqEpA(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqEpA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpA", Protseq, MaxCalls, Endpoint, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqEpExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpExA$descriptor() {
        return RpcServerUseProtseqEpExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpExA$handle() {
        return RpcServerUseProtseqEpExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqEpExA$address() {
        return RpcServerUseProtseqEpExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqEpExA(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqEpExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpExA", Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqEpW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpW$descriptor() {
        return RpcServerUseProtseqEpW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpW$handle() {
        return RpcServerUseProtseqEpW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqEpW$address() {
        return RpcServerUseProtseqEpW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqEpW(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqEpW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpW", Protseq, MaxCalls, Endpoint, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqEpExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqEpExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqEpExW$descriptor() {
        return RpcServerUseProtseqEpExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqEpExW$handle() {
        return RpcServerUseProtseqEpExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqEpExW$address() {
        return RpcServerUseProtseqEpExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqEpExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqEpExW(MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqEpExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqEpExW", Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqIfA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfA$descriptor() {
        return RpcServerUseProtseqIfA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfA$handle() {
        return RpcServerUseProtseqIfA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqIfA$address() {
        return RpcServerUseProtseqIfA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqIfA(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqIfA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfA", Protseq, MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqIfExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfExA$descriptor() {
        return RpcServerUseProtseqIfExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfExA$handle() {
        return RpcServerUseProtseqIfExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqIfExA$address() {
        return RpcServerUseProtseqIfExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExA(RPC_CSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqIfExA(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqIfExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfExA", Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqIfW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfW$descriptor() {
        return RpcServerUseProtseqIfW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfW$handle() {
        return RpcServerUseProtseqIfW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static MemorySegment RpcServerUseProtseqIfW$address() {
        return RpcServerUseProtseqIfW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor)
     * }
     */
    public static int RpcServerUseProtseqIfW(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor) {
        var mh$ = RpcServerUseProtseqIfW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfW", Protseq, MaxCalls, IfSpec, SecurityDescriptor);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUseProtseqIfExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUseProtseqIfExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static FunctionDescriptor RpcServerUseProtseqIfExW$descriptor() {
        return RpcServerUseProtseqIfExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MethodHandle RpcServerUseProtseqIfExW$handle() {
        return RpcServerUseProtseqIfExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static MemorySegment RpcServerUseProtseqIfExW$address() {
        return RpcServerUseProtseqIfExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUseProtseqIfExW(RPC_WSTR Protseq, unsigned int MaxCalls, RPC_IF_HANDLE IfSpec, void *SecurityDescriptor, PRPC_POLICY Policy)
     * }
     */
    public static int RpcServerUseProtseqIfExW(MemorySegment Protseq, int MaxCalls, MemorySegment IfSpec, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = RpcServerUseProtseqIfExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUseProtseqIfExW", Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(Protseq, MaxCalls, IfSpec, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerYield {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerYield");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static FunctionDescriptor RpcServerYield$descriptor() {
        return RpcServerYield.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static MethodHandle RpcServerYield$handle() {
        return RpcServerYield.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static MemorySegment RpcServerYield$address() {
        return RpcServerYield.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcServerYield()
     * }
     */
    public static void RpcServerYield() {
        var mh$ = RpcServerYield.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerYield");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtStatsVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtStatsVectorFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static FunctionDescriptor RpcMgmtStatsVectorFree$descriptor() {
        return RpcMgmtStatsVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static MethodHandle RpcMgmtStatsVectorFree$handle() {
        return RpcMgmtStatsVectorFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static MemorySegment RpcMgmtStatsVectorFree$address() {
        return RpcMgmtStatsVectorFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStatsVectorFree(RPC_STATS_VECTOR **StatsVector)
     * }
     */
    public static int RpcMgmtStatsVectorFree(MemorySegment StatsVector) {
        var mh$ = RpcMgmtStatsVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtStatsVectorFree", StatsVector);
            }
            return (int)mh$.invokeExact(StatsVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqStats {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtInqStats");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqStats$descriptor() {
        return RpcMgmtInqStats.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static MethodHandle RpcMgmtInqStats$handle() {
        return RpcMgmtInqStats.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static MemorySegment RpcMgmtInqStats$address() {
        return RpcMgmtInqStats.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqStats(RPC_BINDING_HANDLE Binding, RPC_STATS_VECTOR **Statistics)
     * }
     */
    public static int RpcMgmtInqStats(MemorySegment Binding, MemorySegment Statistics) {
        var mh$ = RpcMgmtInqStats.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqStats", Binding, Statistics);
            }
            return (int)mh$.invokeExact(Binding, Statistics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtIsServerListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtIsServerListening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcMgmtIsServerListening$descriptor() {
        return RpcMgmtIsServerListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcMgmtIsServerListening$handle() {
        return RpcMgmtIsServerListening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MemorySegment RpcMgmtIsServerListening$address() {
        return RpcMgmtIsServerListening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtIsServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcMgmtIsServerListening(MemorySegment Binding) {
        var mh$ = RpcMgmtIsServerListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtIsServerListening", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtStopServerListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtStopServerListening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcMgmtStopServerListening$descriptor() {
        return RpcMgmtStopServerListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcMgmtStopServerListening$handle() {
        return RpcMgmtStopServerListening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MemorySegment RpcMgmtStopServerListening$address() {
        return RpcMgmtStopServerListening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtStopServerListening(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcMgmtStopServerListening(MemorySegment Binding) {
        var mh$ = RpcMgmtStopServerListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtStopServerListening", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtWaitServerListen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtWaitServerListen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static FunctionDescriptor RpcMgmtWaitServerListen$descriptor() {
        return RpcMgmtWaitServerListen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static MethodHandle RpcMgmtWaitServerListen$handle() {
        return RpcMgmtWaitServerListen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static MemorySegment RpcMgmtWaitServerListen$address() {
        return RpcMgmtWaitServerListen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtWaitServerListen()
     * }
     */
    public static int RpcMgmtWaitServerListen() {
        var mh$ = RpcMgmtWaitServerListen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtWaitServerListen");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetServerStackSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtSetServerStackSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetServerStackSize$descriptor() {
        return RpcMgmtSetServerStackSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static MethodHandle RpcMgmtSetServerStackSize$handle() {
        return RpcMgmtSetServerStackSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static MemorySegment RpcMgmtSetServerStackSize$address() {
        return RpcMgmtSetServerStackSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetServerStackSize(unsigned long ThreadStackSize)
     * }
     */
    public static int RpcMgmtSetServerStackSize(int ThreadStackSize) {
        var mh$ = RpcMgmtSetServerStackSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetServerStackSize", ThreadStackSize);
            }
            return (int)mh$.invokeExact(ThreadStackSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsDontSerializeContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcSsDontSerializeContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static FunctionDescriptor RpcSsDontSerializeContext$descriptor() {
        return RpcSsDontSerializeContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static MethodHandle RpcSsDontSerializeContext$handle() {
        return RpcSsDontSerializeContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static MemorySegment RpcSsDontSerializeContext$address() {
        return RpcSsDontSerializeContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcSsDontSerializeContext()
     * }
     */
    public static void RpcSsDontSerializeContext() {
        var mh$ = RpcSsDontSerializeContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsDontSerializeContext");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEnableIdleCleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtEnableIdleCleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static FunctionDescriptor RpcMgmtEnableIdleCleanup$descriptor() {
        return RpcMgmtEnableIdleCleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static MethodHandle RpcMgmtEnableIdleCleanup$handle() {
        return RpcMgmtEnableIdleCleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static MemorySegment RpcMgmtEnableIdleCleanup$address() {
        return RpcMgmtEnableIdleCleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEnableIdleCleanup()
     * }
     */
    public static int RpcMgmtEnableIdleCleanup() {
        var mh$ = RpcMgmtEnableIdleCleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEnableIdleCleanup");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqIfIds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtInqIfIds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqIfIds$descriptor() {
        return RpcMgmtInqIfIds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MethodHandle RpcMgmtInqIfIds$handle() {
        return RpcMgmtInqIfIds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MemorySegment RpcMgmtInqIfIds$address() {
        return RpcMgmtInqIfIds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqIfIds(RPC_BINDING_HANDLE Binding, RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static int RpcMgmtInqIfIds(MemorySegment Binding, MemorySegment IfIdVector) {
        var mh$ = RpcMgmtInqIfIds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqIfIds", Binding, IfIdVector);
            }
            return (int)mh$.invokeExact(Binding, IfIdVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcIfIdVectorFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcIfIdVectorFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static FunctionDescriptor RpcIfIdVectorFree$descriptor() {
        return RpcIfIdVectorFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MethodHandle RpcIfIdVectorFree$handle() {
        return RpcIfIdVectorFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static MemorySegment RpcIfIdVectorFree$address() {
        return RpcIfIdVectorFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcIfIdVectorFree(RPC_IF_ID_VECTOR **IfIdVector)
     * }
     */
    public static int RpcIfIdVectorFree(MemorySegment IfIdVector) {
        var mh$ = RpcIfIdVectorFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcIfIdVectorFree", IfIdVector);
            }
            return (int)mh$.invokeExact(IfIdVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqServerPrincNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtInqServerPrincNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqServerPrincNameA$descriptor() {
        return RpcMgmtInqServerPrincNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static MethodHandle RpcMgmtInqServerPrincNameA$handle() {
        return RpcMgmtInqServerPrincNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static MemorySegment RpcMgmtInqServerPrincNameA$address() {
        return RpcMgmtInqServerPrincNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameA(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_CSTR *ServerPrincName)
     * }
     */
    public static int RpcMgmtInqServerPrincNameA(MemorySegment Binding, int AuthnSvc, MemorySegment ServerPrincName) {
        var mh$ = RpcMgmtInqServerPrincNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqServerPrincNameA", Binding, AuthnSvc, ServerPrincName);
            }
            return (int)mh$.invokeExact(Binding, AuthnSvc, ServerPrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtInqServerPrincNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtInqServerPrincNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static FunctionDescriptor RpcMgmtInqServerPrincNameW$descriptor() {
        return RpcMgmtInqServerPrincNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static MethodHandle RpcMgmtInqServerPrincNameW$handle() {
        return RpcMgmtInqServerPrincNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static MemorySegment RpcMgmtInqServerPrincNameW$address() {
        return RpcMgmtInqServerPrincNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtInqServerPrincNameW(RPC_BINDING_HANDLE Binding, unsigned long AuthnSvc, RPC_WSTR *ServerPrincName)
     * }
     */
    public static int RpcMgmtInqServerPrincNameW(MemorySegment Binding, int AuthnSvc, MemorySegment ServerPrincName) {
        var mh$ = RpcMgmtInqServerPrincNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtInqServerPrincNameW", Binding, AuthnSvc, ServerPrincName);
            }
            return (int)mh$.invokeExact(Binding, AuthnSvc, ServerPrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqDefaultPrincNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInqDefaultPrincNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static FunctionDescriptor RpcServerInqDefaultPrincNameA$descriptor() {
        return RpcServerInqDefaultPrincNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static MethodHandle RpcServerInqDefaultPrincNameA$handle() {
        return RpcServerInqDefaultPrincNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static MemorySegment RpcServerInqDefaultPrincNameA$address() {
        return RpcServerInqDefaultPrincNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameA(unsigned long AuthnSvc, RPC_CSTR *PrincName)
     * }
     */
    public static int RpcServerInqDefaultPrincNameA(int AuthnSvc, MemorySegment PrincName) {
        var mh$ = RpcServerInqDefaultPrincNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqDefaultPrincNameA", AuthnSvc, PrincName);
            }
            return (int)mh$.invokeExact(AuthnSvc, PrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqDefaultPrincNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInqDefaultPrincNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static FunctionDescriptor RpcServerInqDefaultPrincNameW$descriptor() {
        return RpcServerInqDefaultPrincNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static MethodHandle RpcServerInqDefaultPrincNameW$handle() {
        return RpcServerInqDefaultPrincNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static MemorySegment RpcServerInqDefaultPrincNameW$address() {
        return RpcServerInqDefaultPrincNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqDefaultPrincNameW(unsigned long AuthnSvc, RPC_WSTR *PrincName)
     * }
     */
    public static int RpcServerInqDefaultPrincNameW(int AuthnSvc, MemorySegment PrincName) {
        var mh$ = RpcServerInqDefaultPrincNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqDefaultPrincNameW", AuthnSvc, PrincName);
            }
            return (int)mh$.invokeExact(AuthnSvc, PrincName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpResolveBinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcEpResolveBinding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static FunctionDescriptor RpcEpResolveBinding$descriptor() {
        return RpcEpResolveBinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MethodHandle RpcEpResolveBinding$handle() {
        return RpcEpResolveBinding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MemorySegment RpcEpResolveBinding$address() {
        return RpcEpResolveBinding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpResolveBinding(RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static int RpcEpResolveBinding(MemorySegment Binding, MemorySegment IfSpec) {
        var mh$ = RpcEpResolveBinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpResolveBinding", Binding, IfSpec);
            }
            return (int)mh$.invokeExact(Binding, IfSpec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingInqEntryNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingInqEntryNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsBindingInqEntryNameA$descriptor() {
        return RpcNsBindingInqEntryNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static MethodHandle RpcNsBindingInqEntryNameA$handle() {
        return RpcNsBindingInqEntryNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static MemorySegment RpcNsBindingInqEntryNameA$address() {
        return RpcNsBindingInqEntryNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR *EntryName)
     * }
     */
    public static int RpcNsBindingInqEntryNameA(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsBindingInqEntryNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingInqEntryNameA", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingInqEntryNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingInqEntryNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsBindingInqEntryNameW$descriptor() {
        return RpcNsBindingInqEntryNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static MethodHandle RpcNsBindingInqEntryNameW$handle() {
        return RpcNsBindingInqEntryNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static MemorySegment RpcNsBindingInqEntryNameW$address() {
        return RpcNsBindingInqEntryNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingInqEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR *EntryName)
     * }
     */
    public static int RpcNsBindingInqEntryNameW(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsBindingInqEntryNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingInqEntryNameW", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_AUTH_IDENTITY_HANDLE
     * }
     */
    public static final AddressLayout RPC_AUTH_IDENTITY_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void *RPC_AUTHZ_HANDLE
     * }
     */
    public static final AddressLayout RPC_AUTHZ_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     * } *PRPC_SECURITY_QOS
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
     *     unsigned short *User;
     *     unsigned long UserLength;
     *     unsigned short *Domain;
     *     unsigned long DomainLength;
     *     unsigned short *Password;
     *     unsigned long PasswordLength;
     *     unsigned long Flags;
     * } *PSEC_WINNT_AUTH_IDENTITY_W
     * }
     */
    public static final AddressLayout PSEC_WINNT_AUTH_IDENTITY_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
     *     unsigned char *User;
     *     unsigned long UserLength;
     *     unsigned char *Domain;
     *     unsigned long DomainLength;
     *     unsigned char *Password;
     *     unsigned long PasswordLength;
     *     unsigned long Flags;
     * } *PSEC_WINNT_AUTH_IDENTITY_A
     * }
     */
    public static final AddressLayout PSEC_WINNT_AUTH_IDENTITY_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
     *     SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
     *     SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W {
     *     SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     *     SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A {
     *     SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     *     SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W {
     *     RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned short *ServerCertificateSubject;
     *     RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
     *     RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
     *     unsigned long Flags;
     *     unsigned long AuthenticationTarget;
     *     unsigned long NumberOfAuthnSchemes;
     *     unsigned long *AuthnSchemes;
     *     unsigned char *ServerCertificateSubject;
     *     RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
     *     unsigned long NumberOfProxyAuthnSchemes;
     *     unsigned long *ProxyAuthnSchemes;
     * } *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
     * }
     */
    public static final AddressLayout PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V2_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     * } *PRPC_SECURITY_QOS_V2_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V2_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V2_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     * } *PRPC_SECURITY_QOS_V2_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V2_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V3_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     * } *PRPC_SECURITY_QOS_V3_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V3_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V3_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     * } *PRPC_SECURITY_QOS_V3_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V3_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V4_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     * } *PRPC_SECURITY_QOS_V4_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V4_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V4_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     * } *PRPC_SECURITY_QOS_V4_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V4_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V5_W {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     *     void *ServerSecurityDescriptor;
     * } *PRPC_SECURITY_QOS_V5_W
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V5_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SECURITY_QOS_V5_A {
     *     unsigned long Version;
     *     unsigned long Capabilities;
     *     unsigned long IdentityTracking;
     *     unsigned long ImpersonationType;
     *     unsigned long AdditionalSecurityInfoType;
     *     union {
     *         RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
     *     } u;
     *     void *Sid;
     *     unsigned int EffectiveOnly;
     *     void *ServerSecurityDescriptor;
     * } *PRPC_SECURITY_QOS_V5_A
     * }
     */
    public static final AddressLayout PRPC_SECURITY_QOS_V5_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ProtocolSequence;
     *     unsigned short *NetworkAddress;
     *     unsigned short *StringEndpoint;
     *     union {
     *         unsigned short *Reserved;
     *     } u1;
     *     UUID ObjectUuid;
     * } *PRPC_BINDING_HANDLE_TEMPLATE_V1_W
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_TEMPLATE_V1_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ProtocolSequence;
     *     unsigned char *NetworkAddress;
     *     unsigned char *StringEndpoint;
     *     union {
     *         unsigned char *Reserved;
     *     } u1;
     *     UUID ObjectUuid;
     * } *PRPC_BINDING_HANDLE_TEMPLATE_V1_A
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_TEMPLATE_V1_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
     *     unsigned long Version;
     *     unsigned short *ServerPrincName;
     *     unsigned long AuthnLevel;
     *     unsigned long AuthnSvc;
     *     SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
     *     RPC_SECURITY_QOS *SecurityQos;
     * } *PRPC_BINDING_HANDLE_SECURITY_V1_W
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_SECURITY_V1_W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
     *     unsigned long Version;
     *     unsigned char *ServerPrincName;
     *     unsigned long AuthnLevel;
     *     unsigned long AuthnSvc;
     *     SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
     *     RPC_SECURITY_QOS *SecurityQos;
     * } *PRPC_BINDING_HANDLE_SECURITY_V1_A
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_SECURITY_V1_A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
     *     unsigned long Version;
     *     unsigned long Flags;
     *     unsigned long ComTimeout;
     *     unsigned long CallTimeout;
     * } *PRPC_BINDING_HANDLE_OPTIONS_V1
     * }
     */
    public static final AddressLayout PRPC_BINDING_HANDLE_OPTIONS_V1 = winapi.C_POINTER;

    private static class RpcBindingCreateA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingCreateA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingCreateA$descriptor() {
        return RpcBindingCreateA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingCreateA$handle() {
        return RpcBindingCreateA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingCreateA$address() {
        return RpcBindingCreateA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateA(RPC_BINDING_HANDLE_TEMPLATE_V1_A *Template, RPC_BINDING_HANDLE_SECURITY_V1_A *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingCreateA(MemorySegment Template, MemorySegment Security, MemorySegment Options, MemorySegment Binding) {
        var mh$ = RpcBindingCreateA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCreateA", Template, Security, Options, Binding);
            }
            return (int)mh$.invokeExact(Template, Security, Options, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingCreateW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingCreateW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingCreateW$descriptor() {
        return RpcBindingCreateW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcBindingCreateW$handle() {
        return RpcBindingCreateW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcBindingCreateW$address() {
        return RpcBindingCreateW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingCreateW(RPC_BINDING_HANDLE_TEMPLATE_V1_W *Template, RPC_BINDING_HANDLE_SECURITY_V1_W *Security, RPC_BINDING_HANDLE_OPTIONS_V1 *Options, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcBindingCreateW(MemorySegment Template, MemorySegment Security, MemorySegment Options, MemorySegment Binding) {
        var mh$ = RpcBindingCreateW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingCreateW", Template, Security, Options, Binding);
            }
            return (int)mh$.invokeExact(Template, Security, Options, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingGetTrainingContextHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingGetTrainingContextHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static FunctionDescriptor RpcBindingGetTrainingContextHandle$descriptor() {
        return RpcBindingGetTrainingContextHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static MethodHandle RpcBindingGetTrainingContextHandle$handle() {
        return RpcBindingGetTrainingContextHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static MemorySegment RpcBindingGetTrainingContextHandle$address() {
        return RpcBindingGetTrainingContextHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingGetTrainingContextHandle(RPC_BINDING_HANDLE Binding, void **ContextHandle)
     * }
     */
    public static int RpcBindingGetTrainingContextHandle(MemorySegment Binding, MemorySegment ContextHandle) {
        var mh$ = RpcBindingGetTrainingContextHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingGetTrainingContextHandle", Binding, ContextHandle);
            }
            return (int)mh$.invokeExact(Binding, ContextHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqBindingHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInqBindingHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcServerInqBindingHandle$descriptor() {
        return RpcServerInqBindingHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcServerInqBindingHandle$handle() {
        return RpcServerInqBindingHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcServerInqBindingHandle$address() {
        return RpcServerInqBindingHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqBindingHandle(RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcServerInqBindingHandle(MemorySegment Binding) {
        var mh$ = RpcServerInqBindingHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqBindingHandle", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RPCHTTP_RS_REDIRECT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_REDIRECT = 1
     * }
     */
    public static int RPCHTTP_RS_REDIRECT() {
        return RPCHTTP_RS_REDIRECT;
    }
    private static final int RPCHTTP_RS_ACCESS_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_ACCESS_1 = 2
     * }
     */
    public static int RPCHTTP_RS_ACCESS_1() {
        return RPCHTTP_RS_ACCESS_1;
    }
    private static final int RPCHTTP_RS_SESSION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_SESSION = 3
     * }
     */
    public static int RPCHTTP_RS_SESSION() {
        return RPCHTTP_RS_SESSION;
    }
    private static final int RPCHTTP_RS_ACCESS_2 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_ACCESS_2 = 4
     * }
     */
    public static int RPCHTTP_RS_ACCESS_2() {
        return RPCHTTP_RS_ACCESS_2;
    }
    private static final int RPCHTTP_RS_INTERFACE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _RPC_HTTP_REDIRECTOR_STAGE.RPCHTTP_RS_INTERFACE = 5
     * }
     */
    public static int RPCHTTP_RS_INTERFACE() {
        return RPCHTTP_RS_INTERFACE;
    }

    private static class RpcImpersonateClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcImpersonateClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClient$descriptor() {
        return RpcImpersonateClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClient$handle() {
        return RpcImpersonateClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcImpersonateClient$address() {
        return RpcImpersonateClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClient(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClient", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcImpersonateClient2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcImpersonateClient2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClient2$descriptor() {
        return RpcImpersonateClient2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClient2$handle() {
        return RpcImpersonateClient2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcImpersonateClient2$address() {
        return RpcImpersonateClient2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClient2(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClient2(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClient2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClient2", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertToSelfEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcRevertToSelfEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcRevertToSelfEx$descriptor() {
        return RpcRevertToSelfEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcRevertToSelfEx$handle() {
        return RpcRevertToSelfEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcRevertToSelfEx$address() {
        return RpcRevertToSelfEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelfEx(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcRevertToSelfEx(MemorySegment BindingHandle) {
        var mh$ = RpcRevertToSelfEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertToSelfEx", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertToSelf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcRevertToSelf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static FunctionDescriptor RpcRevertToSelf$descriptor() {
        return RpcRevertToSelf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static MethodHandle RpcRevertToSelf$handle() {
        return RpcRevertToSelf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static MemorySegment RpcRevertToSelf$address() {
        return RpcRevertToSelf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertToSelf()
     * }
     */
    public static int RpcRevertToSelf() {
        var mh$ = RpcRevertToSelf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertToSelf");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcImpersonateClientContainer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcImpersonateClientContainer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcImpersonateClientContainer$descriptor() {
        return RpcImpersonateClientContainer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcImpersonateClientContainer$handle() {
        return RpcImpersonateClientContainer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcImpersonateClientContainer$address() {
        return RpcImpersonateClientContainer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcImpersonateClientContainer(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcImpersonateClientContainer(MemorySegment BindingHandle) {
        var mh$ = RpcImpersonateClientContainer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcImpersonateClientContainer", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRevertContainerImpersonation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcRevertContainerImpersonation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static FunctionDescriptor RpcRevertContainerImpersonation$descriptor() {
        return RpcRevertContainerImpersonation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static MethodHandle RpcRevertContainerImpersonation$handle() {
        return RpcRevertContainerImpersonation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static MemorySegment RpcRevertContainerImpersonation$address() {
        return RpcRevertContainerImpersonation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcRevertContainerImpersonation()
     * }
     */
    public static int RpcRevertContainerImpersonation() {
        var mh$ = RpcRevertContainerImpersonation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRevertContainerImpersonation");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqAuthClientA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientA$descriptor() {
        return RpcBindingInqAuthClientA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientA$handle() {
        return RpcBindingInqAuthClientA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingInqAuthClientA$address() {
        return RpcBindingInqAuthClientA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthClientA(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthClientA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientA", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqAuthClientW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientW$descriptor() {
        return RpcBindingInqAuthClientW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientW$handle() {
        return RpcBindingInqAuthClientW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingInqAuthClientW$address() {
        return RpcBindingInqAuthClientW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthClientW(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthClientW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientW", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqAuthClientExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientExA$descriptor() {
        return RpcBindingInqAuthClientExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientExA$handle() {
        return RpcBindingInqAuthClientExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MemorySegment RpcBindingInqAuthClientExA$address() {
        return RpcBindingInqAuthClientExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExA(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static int RpcBindingInqAuthClientExA(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc, int Flags) {
        var mh$ = RpcBindingInqAuthClientExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientExA", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthClientExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqAuthClientExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthClientExW$descriptor() {
        return RpcBindingInqAuthClientExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MethodHandle RpcBindingInqAuthClientExW$handle() {
        return RpcBindingInqAuthClientExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static MemorySegment RpcBindingInqAuthClientExW$address() {
        return RpcBindingInqAuthClientExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthClientExW(RPC_BINDING_HANDLE ClientBinding, RPC_AUTHZ_HANDLE *Privs, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, unsigned long *AuthzSvc, unsigned long Flags)
     * }
     */
    public static int RpcBindingInqAuthClientExW(MemorySegment ClientBinding, MemorySegment Privs, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthzSvc, int Flags) {
        var mh$ = RpcBindingInqAuthClientExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthClientExW", ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
            }
            return (int)mh$.invokeExact(ClientBinding, Privs, ServerPrincName, AuthnLevel, AuthnSvc, AuthzSvc, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqAuthInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoA$descriptor() {
        return RpcBindingInqAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoA$handle() {
        return RpcBindingInqAuthInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingInqAuthInfoA$address() {
        return RpcBindingInqAuthInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthInfoA(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqAuthInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoW$descriptor() {
        return RpcBindingInqAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoW$handle() {
        return RpcBindingInqAuthInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingInqAuthInfoW$address() {
        return RpcBindingInqAuthInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc)
     * }
     */
    public static int RpcBindingInqAuthInfoW(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc) {
        var mh$ = RpcBindingInqAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingSetAuthInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoA$descriptor() {
        return RpcBindingSetAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoA$handle() {
        return RpcBindingSetAuthInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingSetAuthInfoA$address() {
        return RpcBindingSetAuthInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static int RpcBindingSetAuthInfoA(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc) {
        var mh$ = RpcBindingSetAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingSetAuthInfoExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoExA$descriptor() {
        return RpcBindingSetAuthInfoExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoExA$handle() {
        return RpcBindingSetAuthInfoExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static MemorySegment RpcBindingSetAuthInfoExA$address() {
        return RpcBindingSetAuthInfoExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQos)
     * }
     */
    public static int RpcBindingSetAuthInfoExA(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc, MemorySegment SecurityQos) {
        var mh$ = RpcBindingSetAuthInfoExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoExA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQos);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingSetAuthInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoW$descriptor() {
        return RpcBindingSetAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoW$handle() {
        return RpcBindingSetAuthInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static MemorySegment RpcBindingSetAuthInfoW$address() {
        return RpcBindingSetAuthInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc)
     * }
     */
    public static int RpcBindingSetAuthInfoW(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc) {
        var mh$ = RpcBindingSetAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingSetAuthInfoExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingSetAuthInfoExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingSetAuthInfoExW$descriptor() {
        return RpcBindingSetAuthInfoExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingSetAuthInfoExW$handle() {
        return RpcBindingSetAuthInfoExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MemorySegment RpcBindingSetAuthInfoExW$address() {
        return RpcBindingSetAuthInfoExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingSetAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR ServerPrincName, unsigned long AuthnLevel, unsigned long AuthnSvc, RPC_AUTH_IDENTITY_HANDLE AuthIdentity, unsigned long AuthzSvc, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingSetAuthInfoExW(MemorySegment Binding, MemorySegment ServerPrincName, int AuthnLevel, int AuthnSvc, MemorySegment AuthIdentity, int AuthzSvc, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingSetAuthInfoExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingSetAuthInfoExW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqAuthInfoExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoExA$descriptor() {
        return RpcBindingInqAuthInfoExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoExA$handle() {
        return RpcBindingInqAuthInfoExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MemorySegment RpcBindingInqAuthInfoExA$address() {
        return RpcBindingInqAuthInfoExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExA(RPC_BINDING_HANDLE Binding, RPC_CSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingInqAuthInfoExA(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc, int RpcQosVersion, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingInqAuthInfoExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoExA", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingInqAuthInfoExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingInqAuthInfoExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static FunctionDescriptor RpcBindingInqAuthInfoExW$descriptor() {
        return RpcBindingInqAuthInfoExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MethodHandle RpcBindingInqAuthInfoExW$handle() {
        return RpcBindingInqAuthInfoExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static MemorySegment RpcBindingInqAuthInfoExW$address() {
        return RpcBindingInqAuthInfoExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingInqAuthInfoExW(RPC_BINDING_HANDLE Binding, RPC_WSTR *ServerPrincName, unsigned long *AuthnLevel, unsigned long *AuthnSvc, RPC_AUTH_IDENTITY_HANDLE *AuthIdentity, unsigned long *AuthzSvc, unsigned long RpcQosVersion, RPC_SECURITY_QOS *SecurityQOS)
     * }
     */
    public static int RpcBindingInqAuthInfoExW(MemorySegment Binding, MemorySegment ServerPrincName, MemorySegment AuthnLevel, MemorySegment AuthnSvc, MemorySegment AuthIdentity, MemorySegment AuthzSvc, int RpcQosVersion, MemorySegment SecurityQOS) {
        var mh$ = RpcBindingInqAuthInfoExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingInqAuthInfoExW", Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
            }
            return (int)mh$.invokeExact(Binding, ServerPrincName, AuthnLevel, AuthnSvc, AuthIdentity, AuthzSvc, RpcQosVersion, SecurityQOS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerCompleteSecurityCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerCompleteSecurityCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static FunctionDescriptor RpcServerCompleteSecurityCallback$descriptor() {
        return RpcServerCompleteSecurityCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static MethodHandle RpcServerCompleteSecurityCallback$handle() {
        return RpcServerCompleteSecurityCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static MemorySegment RpcServerCompleteSecurityCallback$address() {
        return RpcServerCompleteSecurityCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerCompleteSecurityCallback(RPC_BINDING_HANDLE BindingHandle, RPC_STATUS Status)
     * }
     */
    public static int RpcServerCompleteSecurityCallback(MemorySegment BindingHandle, int Status) {
        var mh$ = RpcServerCompleteSecurityCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerCompleteSecurityCallback", BindingHandle, Status);
            }
            return (int)mh$.invokeExact(BindingHandle, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterAuthInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerRegisterAuthInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterAuthInfoA$descriptor() {
        return RpcServerRegisterAuthInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MethodHandle RpcServerRegisterAuthInfoA$handle() {
        return RpcServerRegisterAuthInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MemorySegment RpcServerRegisterAuthInfoA$address() {
        return RpcServerRegisterAuthInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoA(RPC_CSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static int RpcServerRegisterAuthInfoA(MemorySegment ServerPrincName, int AuthnSvc, MemorySegment GetKeyFn, MemorySegment Arg) {
        var mh$ = RpcServerRegisterAuthInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterAuthInfoA", ServerPrincName, AuthnSvc, GetKeyFn, Arg);
            }
            return (int)mh$.invokeExact(ServerPrincName, AuthnSvc, GetKeyFn, Arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerRegisterAuthInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerRegisterAuthInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static FunctionDescriptor RpcServerRegisterAuthInfoW$descriptor() {
        return RpcServerRegisterAuthInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MethodHandle RpcServerRegisterAuthInfoW$handle() {
        return RpcServerRegisterAuthInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static MemorySegment RpcServerRegisterAuthInfoW$address() {
        return RpcServerRegisterAuthInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerRegisterAuthInfoW(RPC_WSTR ServerPrincName, unsigned long AuthnSvc, RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn, void *Arg)
     * }
     */
    public static int RpcServerRegisterAuthInfoW(MemorySegment ServerPrincName, int AuthnSvc, MemorySegment GetKeyFn, MemorySegment Arg) {
        var mh$ = RpcServerRegisterAuthInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerRegisterAuthInfoW", ServerPrincName, AuthnSvc, GetKeyFn, Arg);
            }
            return (int)mh$.invokeExact(ServerPrincName, AuthnSvc, GetKeyFn, Arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned char *UserName;
     *     unsigned char *ComputerName;
     *     unsigned short Privilege;
     *     unsigned long AuthFlags;
     * } *PRPC_CLIENT_INFORMATION1
     * }
     */
    public static final AddressLayout PRPC_CLIENT_INFORMATION1 = winapi.C_POINTER;

    private static class RpcBindingServerFromClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingServerFromClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static FunctionDescriptor RpcBindingServerFromClient$descriptor() {
        return RpcBindingServerFromClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static MethodHandle RpcBindingServerFromClient$handle() {
        return RpcBindingServerFromClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static MemorySegment RpcBindingServerFromClient$address() {
        return RpcBindingServerFromClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingServerFromClient(RPC_BINDING_HANDLE ClientBinding, RPC_BINDING_HANDLE *ServerBinding)
     * }
     */
    public static int RpcBindingServerFromClient(MemorySegment ClientBinding, MemorySegment ServerBinding) {
        var mh$ = RpcBindingServerFromClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingServerFromClient", ClientBinding, ServerBinding);
            }
            return (int)mh$.invokeExact(ClientBinding, ServerBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcRaiseException {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcRaiseException");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static FunctionDescriptor RpcRaiseException$descriptor() {
        return RpcRaiseException.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static MethodHandle RpcRaiseException$handle() {
        return RpcRaiseException.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static MemorySegment RpcRaiseException$address() {
        return RpcRaiseException.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcRaiseException(RPC_STATUS exception)
     * }
     */
    public static void RpcRaiseException(int exception) {
        var mh$ = RpcRaiseException.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcRaiseException", exception);
            }
            mh$.invokeExact(exception);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcTestCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static FunctionDescriptor RpcTestCancel$descriptor() {
        return RpcTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static MethodHandle RpcTestCancel$handle() {
        return RpcTestCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static MemorySegment RpcTestCancel$address() {
        return RpcTestCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcTestCancel()
     * }
     */
    public static int RpcTestCancel() {
        var mh$ = RpcTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcTestCancel");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerTestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerTestCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor RpcServerTestCancel$descriptor() {
        return RpcServerTestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle RpcServerTestCancel$handle() {
        return RpcServerTestCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment RpcServerTestCancel$address() {
        return RpcServerTestCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerTestCancel(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static int RpcServerTestCancel(MemorySegment BindingHandle) {
        var mh$ = RpcServerTestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerTestCancel", BindingHandle);
            }
            return (int)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcCancelThread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcCancelThread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static FunctionDescriptor RpcCancelThread$descriptor() {
        return RpcCancelThread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static MethodHandle RpcCancelThread$handle() {
        return RpcCancelThread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static MemorySegment RpcCancelThread$address() {
        return RpcCancelThread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThread(void *Thread)
     * }
     */
    public static int RpcCancelThread(MemorySegment Thread_) {
        var mh$ = RpcCancelThread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcCancelThread", Thread_);
            }
            return (int)mh$.invokeExact(Thread_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcCancelThreadEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcCancelThreadEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static FunctionDescriptor RpcCancelThreadEx$descriptor() {
        return RpcCancelThreadEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static MethodHandle RpcCancelThreadEx$handle() {
        return RpcCancelThreadEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static MemorySegment RpcCancelThreadEx$address() {
        return RpcCancelThreadEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcCancelThreadEx(void *Thread, long Timeout)
     * }
     */
    public static int RpcCancelThreadEx(MemorySegment Thread_, int Timeout) {
        var mh$ = RpcCancelThreadEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcCancelThreadEx", Thread_, Timeout);
            }
            return (int)mh$.invokeExact(Thread_, Timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidCreate$descriptor() {
        return UuidCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static MethodHandle UuidCreate$handle() {
        return UuidCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static MemorySegment UuidCreate$address() {
        return UuidCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreate(UUID *Uuid)
     * }
     */
    public static int UuidCreate(MemorySegment Uuid) {
        var mh$ = UuidCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreate", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreateSequential {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidCreateSequential");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidCreateSequential$descriptor() {
        return UuidCreateSequential.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static MethodHandle UuidCreateSequential$handle() {
        return UuidCreateSequential.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static MemorySegment UuidCreateSequential$address() {
        return UuidCreateSequential.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateSequential(UUID *Uuid)
     * }
     */
    public static int UuidCreateSequential(MemorySegment Uuid) {
        var mh$ = UuidCreateSequential.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreateSequential", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidToStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidToStringA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static FunctionDescriptor UuidToStringA$descriptor() {
        return UuidToStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static MethodHandle UuidToStringA$handle() {
        return UuidToStringA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static MemorySegment UuidToStringA$address() {
        return UuidToStringA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringA(const UUID *Uuid, RPC_CSTR *StringUuid)
     * }
     */
    public static int UuidToStringA(MemorySegment Uuid, MemorySegment StringUuid) {
        var mh$ = UuidToStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidToStringA", Uuid, StringUuid);
            }
            return (int)mh$.invokeExact(Uuid, StringUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidFromStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidFromStringA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidFromStringA$descriptor() {
        return UuidFromStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MethodHandle UuidFromStringA$handle() {
        return UuidFromStringA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MemorySegment UuidFromStringA$address() {
        return UuidFromStringA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringA(RPC_CSTR StringUuid, UUID *Uuid)
     * }
     */
    public static int UuidFromStringA(MemorySegment StringUuid, MemorySegment Uuid) {
        var mh$ = UuidFromStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidFromStringA", StringUuid, Uuid);
            }
            return (int)mh$.invokeExact(StringUuid, Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidToStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidToStringW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static FunctionDescriptor UuidToStringW$descriptor() {
        return UuidToStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static MethodHandle UuidToStringW$handle() {
        return UuidToStringW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static MemorySegment UuidToStringW$address() {
        return UuidToStringW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidToStringW(const UUID *Uuid, RPC_WSTR *StringUuid)
     * }
     */
    public static int UuidToStringW(MemorySegment Uuid, MemorySegment StringUuid) {
        var mh$ = UuidToStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidToStringW", Uuid, StringUuid);
            }
            return (int)mh$.invokeExact(Uuid, StringUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidFromStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidFromStringW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static FunctionDescriptor UuidFromStringW$descriptor() {
        return UuidFromStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MethodHandle UuidFromStringW$handle() {
        return UuidFromStringW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static MemorySegment UuidFromStringW$address() {
        return UuidFromStringW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidFromStringW(RPC_WSTR StringUuid, UUID *Uuid)
     * }
     */
    public static int UuidFromStringW(MemorySegment StringUuid, MemorySegment Uuid) {
        var mh$ = UuidFromStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidFromStringW", StringUuid, Uuid);
            }
            return (int)mh$.invokeExact(StringUuid, Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCompare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidCompare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidCompare$descriptor() {
        return UuidCompare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidCompare$handle() {
        return UuidCompare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MemorySegment UuidCompare$address() {
        return UuidCompare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int UuidCompare(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static int UuidCompare(MemorySegment Uuid1, MemorySegment Uuid2, MemorySegment Status) {
        var mh$ = UuidCompare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCompare", Uuid1, Uuid2, Status);
            }
            return (int)mh$.invokeExact(Uuid1, Uuid2, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidCreateNil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidCreateNil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static FunctionDescriptor UuidCreateNil$descriptor() {
        return UuidCreateNil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static MethodHandle UuidCreateNil$handle() {
        return UuidCreateNil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static MemorySegment UuidCreateNil$address() {
        return UuidCreateNil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS UuidCreateNil(UUID *NilUuid)
     * }
     */
    public static int UuidCreateNil(MemorySegment NilUuid) {
        var mh$ = UuidCreateNil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidCreateNil", NilUuid);
            }
            return (int)mh$.invokeExact(NilUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidEqual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidEqual");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidEqual$descriptor() {
        return UuidEqual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidEqual$handle() {
        return UuidEqual.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static MemorySegment UuidEqual$address() {
        return UuidEqual.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int UuidEqual(UUID *Uuid1, UUID *Uuid2, RPC_STATUS *Status)
     * }
     */
    public static int UuidEqual(MemorySegment Uuid1, MemorySegment Uuid2, MemorySegment Status) {
        var mh$ = UuidEqual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidEqual", Uuid1, Uuid2, Status);
            }
            return (int)mh$.invokeExact(Uuid1, Uuid2, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_SHORT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidHash$descriptor() {
        return UuidHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidHash$handle() {
        return UuidHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MemorySegment UuidHash$address() {
        return UuidHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned short UuidHash(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static short UuidHash(MemorySegment Uuid, MemorySegment Status) {
        var mh$ = UuidHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidHash", Uuid, Status);
            }
            return (short)mh$.invokeExact(Uuid, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UuidIsNil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UuidIsNil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static FunctionDescriptor UuidIsNil$descriptor() {
        return UuidIsNil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MethodHandle UuidIsNil$handle() {
        return UuidIsNil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static MemorySegment UuidIsNil$address() {
        return UuidIsNil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int UuidIsNil(UUID *Uuid, RPC_STATUS *Status)
     * }
     */
    public static int UuidIsNil(MemorySegment Uuid, MemorySegment Status) {
        var mh$ = UuidIsNil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UuidIsNil", Uuid, Status);
            }
            return (int)mh$.invokeExact(Uuid, Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterNoReplaceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcEpRegisterNoReplaceA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterNoReplaceA$descriptor() {
        return RpcEpRegisterNoReplaceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterNoReplaceA$handle() {
        return RpcEpRegisterNoReplaceA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MemorySegment RpcEpRegisterNoReplaceA$address() {
        return RpcEpRegisterNoReplaceA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static int RpcEpRegisterNoReplaceA(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterNoReplaceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterNoReplaceA", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterNoReplaceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcEpRegisterNoReplaceW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterNoReplaceW$descriptor() {
        return RpcEpRegisterNoReplaceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterNoReplaceW$handle() {
        return RpcEpRegisterNoReplaceW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MemorySegment RpcEpRegisterNoReplaceW$address() {
        return RpcEpRegisterNoReplaceW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterNoReplaceW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static int RpcEpRegisterNoReplaceW(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterNoReplaceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterNoReplaceW", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcEpRegisterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterA$descriptor() {
        return RpcEpRegisterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterA$handle() {
        return RpcEpRegisterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static MemorySegment RpcEpRegisterA$address() {
        return RpcEpRegisterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterA(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_CSTR Annotation)
     * }
     */
    public static int RpcEpRegisterA(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterA", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpRegisterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcEpRegisterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcEpRegisterW$descriptor() {
        return RpcEpRegisterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcEpRegisterW$handle() {
        return RpcEpRegisterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static MemorySegment RpcEpRegisterW$address() {
        return RpcEpRegisterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpRegisterW(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector, RPC_WSTR Annotation)
     * }
     */
    public static int RpcEpRegisterW(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector, MemorySegment Annotation) {
        var mh$ = RpcEpRegisterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpRegisterW", IfSpec, BindingVector, UuidVector, Annotation);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcEpUnregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcEpUnregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static FunctionDescriptor RpcEpUnregister$descriptor() {
        return RpcEpUnregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static MethodHandle RpcEpUnregister$handle() {
        return RpcEpUnregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static MemorySegment RpcEpUnregister$address() {
        return RpcEpUnregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcEpUnregister(RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVector, UUID_VECTOR *UuidVector)
     * }
     */
    public static int RpcEpUnregister(MemorySegment IfSpec, MemorySegment BindingVector, MemorySegment UuidVector) {
        var mh$ = RpcEpUnregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcEpUnregister", IfSpec, BindingVector, UuidVector);
            }
            return (int)mh$.invokeExact(IfSpec, BindingVector, UuidVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DceErrorInqTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DceErrorInqTextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static FunctionDescriptor DceErrorInqTextA$descriptor() {
        return DceErrorInqTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static MethodHandle DceErrorInqTextA$handle() {
        return DceErrorInqTextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static MemorySegment DceErrorInqTextA$address() {
        return DceErrorInqTextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextA(RPC_STATUS RpcStatus, RPC_CSTR ErrorText)
     * }
     */
    public static int DceErrorInqTextA(int RpcStatus, MemorySegment ErrorText) {
        var mh$ = DceErrorInqTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DceErrorInqTextA", RpcStatus, ErrorText);
            }
            return (int)mh$.invokeExact(RpcStatus, ErrorText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DceErrorInqTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DceErrorInqTextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static FunctionDescriptor DceErrorInqTextW$descriptor() {
        return DceErrorInqTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static MethodHandle DceErrorInqTextW$handle() {
        return DceErrorInqTextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static MemorySegment DceErrorInqTextW$address() {
        return DceErrorInqTextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS DceErrorInqTextW(RPC_STATUS RpcStatus, RPC_WSTR ErrorText)
     * }
     */
    public static int DceErrorInqTextW(int RpcStatus, MemorySegment ErrorText) {
        var mh$ = DceErrorInqTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DceErrorInqTextW", RpcStatus, ErrorText);
            }
            return (int)mh$.invokeExact(RpcStatus, ErrorText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE
     * }
     */
    public static final AddressLayout RPC_EP_INQ_HANDLE = winapi.C_POINTER;

    private static class RpcMgmtEpEltInqBegin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtEpEltInqBegin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqBegin$descriptor() {
        return RpcMgmtEpEltInqBegin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqBegin$handle() {
        return RpcMgmtEpEltInqBegin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcMgmtEpEltInqBegin$address() {
        return RpcMgmtEpEltInqBegin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqBegin(RPC_BINDING_HANDLE EpBinding, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, UUID *ObjectUuid, RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static int RpcMgmtEpEltInqBegin(MemorySegment EpBinding, int InquiryType, MemorySegment IfId, int VersOption, MemorySegment ObjectUuid, MemorySegment InquiryContext) {
        var mh$ = RpcMgmtEpEltInqBegin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqBegin", EpBinding, InquiryType, IfId, VersOption, ObjectUuid, InquiryContext);
            }
            return (int)mh$.invokeExact(EpBinding, InquiryType, IfId, VersOption, ObjectUuid, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtEpEltInqDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqDone$descriptor() {
        return RpcMgmtEpEltInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqDone$handle() {
        return RpcMgmtEpEltInqDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcMgmtEpEltInqDone$address() {
        return RpcMgmtEpEltInqDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqDone(RPC_EP_INQ_HANDLE *InquiryContext)
     * }
     */
    public static int RpcMgmtEpEltInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcMgmtEpEltInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtEpEltInqNextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqNextA$descriptor() {
        return RpcMgmtEpEltInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqNextA$handle() {
        return RpcMgmtEpEltInqNextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static MemorySegment RpcMgmtEpEltInqNextA$address() {
        return RpcMgmtEpEltInqNextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextA(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_CSTR *Annotation)
     * }
     */
    public static int RpcMgmtEpEltInqNextA(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid, MemorySegment Annotation) {
        var mh$ = RpcMgmtEpEltInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqNextA", InquiryContext, IfId, Binding, ObjectUuid, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, Binding, ObjectUuid, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpEltInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtEpEltInqNextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpEltInqNextW$descriptor() {
        return RpcMgmtEpEltInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static MethodHandle RpcMgmtEpEltInqNextW$handle() {
        return RpcMgmtEpEltInqNextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static MemorySegment RpcMgmtEpEltInqNextW$address() {
        return RpcMgmtEpEltInqNextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpEltInqNextW(RPC_EP_INQ_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_BINDING_HANDLE *Binding, UUID *ObjectUuid, RPC_WSTR *Annotation)
     * }
     */
    public static int RpcMgmtEpEltInqNextW(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid, MemorySegment Annotation) {
        var mh$ = RpcMgmtEpEltInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpEltInqNextW", InquiryContext, IfId, Binding, ObjectUuid, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, Binding, ObjectUuid, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtEpUnregister {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtEpUnregister");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor RpcMgmtEpUnregister$descriptor() {
        return RpcMgmtEpUnregister.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle RpcMgmtEpUnregister$handle() {
        return RpcMgmtEpUnregister.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static MemorySegment RpcMgmtEpUnregister$address() {
        return RpcMgmtEpUnregister.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtEpUnregister(RPC_BINDING_HANDLE EpBinding, RPC_IF_ID *IfId, RPC_BINDING_HANDLE Binding, UUID *ObjectUuid)
     * }
     */
    public static int RpcMgmtEpUnregister(MemorySegment EpBinding, MemorySegment IfId, MemorySegment Binding, MemorySegment ObjectUuid) {
        var mh$ = RpcMgmtEpUnregister.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtEpUnregister", EpBinding, IfId, Binding, ObjectUuid);
            }
            return (int)mh$.invokeExact(EpBinding, IfId, Binding, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcMgmtSetAuthorizationFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcMgmtSetAuthorizationFn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static FunctionDescriptor RpcMgmtSetAuthorizationFn$descriptor() {
        return RpcMgmtSetAuthorizationFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static MethodHandle RpcMgmtSetAuthorizationFn$handle() {
        return RpcMgmtSetAuthorizationFn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static MemorySegment RpcMgmtSetAuthorizationFn$address() {
        return RpcMgmtSetAuthorizationFn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcMgmtSetAuthorizationFn(RPC_MGMT_AUTHORIZATION_FN AuthorizationFn)
     * }
     */
    public static int RpcMgmtSetAuthorizationFn(MemorySegment AuthorizationFn) {
        var mh$ = RpcMgmtSetAuthorizationFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcMgmtSetAuthorizationFn", AuthorizationFn);
            }
            return (int)mh$.invokeExact(AuthorizationFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcExceptionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcExceptionFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor RpcExceptionFilter$descriptor() {
        return RpcExceptionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle RpcExceptionFilter$handle() {
        return RpcExceptionFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MemorySegment RpcExceptionFilter$address() {
        return RpcExceptionFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static int RpcExceptionFilter(int ExceptionCode) {
        var mh$ = RpcExceptionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcExceptionFilter", ExceptionCode);
            }
            return (int)mh$.invokeExact(ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_INTERFACE_GROUP
     * }
     */
    public static final AddressLayout RPC_INTERFACE_GROUP = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef void **PRPC_INTERFACE_GROUP
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_GROUP = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_WSTR ProtSeq;
     *     RPC_WSTR Endpoint;
     *     void *SecurityDescriptor;
     *     unsigned long Backlog;
     * } *PRPC_ENDPOINT_TEMPLATEW
     * }
     */
    public static final AddressLayout PRPC_ENDPOINT_TEMPLATEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_CSTR ProtSeq;
     *     RPC_CSTR Endpoint;
     *     void *SecurityDescriptor;
     *     unsigned long Backlog;
     * } *PRPC_ENDPOINT_TEMPLATEA
     * }
     */
    public static final AddressLayout PRPC_ENDPOINT_TEMPLATEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_IF_HANDLE IfSpec;
     *     UUID *MgrTypeUuid;
     *     void *MgrEpv;
     *     unsigned int Flags;
     *     unsigned int MaxCalls;
     *     unsigned int MaxRpcSize;
     *     RPC_IF_CALLBACK_FN *IfCallback;
     *     UUID_VECTOR *UuidVector;
     *     RPC_CSTR Annotation;
     *     void *SecurityDescriptor;
     * } *PRPC_INTERFACE_TEMPLATEA
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_TEMPLATEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned long Version;
     *     RPC_IF_HANDLE IfSpec;
     *     UUID *MgrTypeUuid;
     *     void *MgrEpv;
     *     unsigned int Flags;
     *     unsigned int MaxCalls;
     *     unsigned int MaxRpcSize;
     *     RPC_IF_CALLBACK_FN *IfCallback;
     *     UUID_VECTOR *UuidVector;
     *     RPC_WSTR Annotation;
     *     void *SecurityDescriptor;
     * } *PRPC_INTERFACE_TEMPLATEW
     * }
     */
    public static final AddressLayout PRPC_INTERFACE_TEMPLATEW = winapi.C_POINTER;

    private static class RpcServerInterfaceGroupCreateW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInterfaceGroupCreateW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupCreateW$descriptor() {
        return RpcServerInterfaceGroupCreateW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupCreateW$handle() {
        return RpcServerInterfaceGroupCreateW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupCreateW$address() {
        return RpcServerInterfaceGroupCreateW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEW *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupCreateW(MemorySegment Interfaces, int NumIfs, MemorySegment Endpoints, int NumEndpoints, int IdlePeriod, MemorySegment IdleCallbackFn, MemorySegment IdleCallbackContext, MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupCreateW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupCreateW", Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
            }
            return (int)mh$.invokeExact(Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupCreateA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInterfaceGroupCreateA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupCreateA$descriptor() {
        return RpcServerInterfaceGroupCreateA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupCreateA$handle() {
        return RpcServerInterfaceGroupCreateA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupCreateA$address() {
        return RpcServerInterfaceGroupCreateA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA *Interfaces, unsigned long NumIfs, RPC_ENDPOINT_TEMPLATEA *Endpoints, unsigned long NumEndpoints, unsigned long IdlePeriod, RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn, void *IdleCallbackContext, PRPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupCreateA(MemorySegment Interfaces, int NumIfs, MemorySegment Endpoints, int NumEndpoints, int IdlePeriod, MemorySegment IdleCallbackFn, MemorySegment IdleCallbackContext, MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupCreateA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupCreateA", Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
            }
            return (int)mh$.invokeExact(Interfaces, NumIfs, Endpoints, NumEndpoints, IdlePeriod, IdleCallbackFn, IdleCallbackContext, IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInterfaceGroupClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupClose$descriptor() {
        return RpcServerInterfaceGroupClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupClose$handle() {
        return RpcServerInterfaceGroupClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupClose$address() {
        return RpcServerInterfaceGroupClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupClose(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupClose(MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupClose", IfGroup);
            }
            return (int)mh$.invokeExact(IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupActivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInterfaceGroupActivate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupActivate$descriptor() {
        return RpcServerInterfaceGroupActivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupActivate$handle() {
        return RpcServerInterfaceGroupActivate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupActivate$address() {
        return RpcServerInterfaceGroupActivate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupActivate(RPC_INTERFACE_GROUP IfGroup)
     * }
     */
    public static int RpcServerInterfaceGroupActivate(MemorySegment IfGroup) {
        var mh$ = RpcServerInterfaceGroupActivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupActivate", IfGroup);
            }
            return (int)mh$.invokeExact(IfGroup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupDeactivate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInterfaceGroupDeactivate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupDeactivate$descriptor() {
        return RpcServerInterfaceGroupDeactivate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupDeactivate$handle() {
        return RpcServerInterfaceGroupDeactivate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupDeactivate$address() {
        return RpcServerInterfaceGroupDeactivate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupDeactivate(RPC_INTERFACE_GROUP IfGroup, unsigned long ForceDeactivation)
     * }
     */
    public static int RpcServerInterfaceGroupDeactivate(MemorySegment IfGroup, int ForceDeactivation) {
        var mh$ = RpcServerInterfaceGroupDeactivate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupDeactivate", IfGroup, ForceDeactivation);
            }
            return (int)mh$.invokeExact(IfGroup, ForceDeactivation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInterfaceGroupInqBindings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInterfaceGroupInqBindings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static FunctionDescriptor RpcServerInterfaceGroupInqBindings$descriptor() {
        return RpcServerInterfaceGroupInqBindings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MethodHandle RpcServerInterfaceGroupInqBindings$handle() {
        return RpcServerInterfaceGroupInqBindings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static MemorySegment RpcServerInterfaceGroupInqBindings$address() {
        return RpcServerInterfaceGroupInqBindings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInterfaceGroupInqBindings(RPC_INTERFACE_GROUP IfGroup, RPC_BINDING_VECTOR **BindingVector)
     * }
     */
    public static int RpcServerInterfaceGroupInqBindings(MemorySegment IfGroup, MemorySegment BindingVector) {
        var mh$ = RpcServerInterfaceGroupInqBindings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInterfaceGroupInqBindings", IfGroup, BindingVector);
            }
            return (int)mh$.invokeExact(IfGroup, BindingVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SYNTAX_IDENTIFIER {
     *     GUID SyntaxGUID;
     *     RPC_VERSION SyntaxVersion;
     * } *PRPC_SYNTAX_IDENTIFIER
     * }
     */
    public static final AddressLayout PRPC_SYNTAX_IDENTIFIER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_MESSAGE {
     *     RPC_BINDING_HANDLE Handle;
     *     unsigned long DataRepresentation;
     *     void *Buffer;
     *     unsigned int BufferLength;
     *     unsigned int ProcNum;
     *     PRPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     void *RpcInterfaceInformation;
     *     void *ReservedForRuntime;
     *     void *ManagerEpv;
     *     void *ImportContext;
     *     unsigned long RpcFlags;
     * } *PRPC_MESSAGE
     * }
     */
    public static final AddressLayout PRPC_MESSAGE = winapi.C_POINTER;
    private static final int PROTOCOL_NOT_LOADED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_NOT_LOADED = 1
     * }
     */
    public static int PROTOCOL_NOT_LOADED() {
        return PROTOCOL_NOT_LOADED;
    }
    private static final int PROTOCOL_LOADED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_LOADED = 2
     * }
     */
    public static int PROTOCOL_LOADED() {
        return PROTOCOL_LOADED;
    }
    private static final int PROTOCOL_ADDRESS_CHANGE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RPC_ADDRESS_CHANGE_TYPE.PROTOCOL_ADDRESS_CHANGE = 3
     * }
     */
    public static int PROTOCOL_ADDRESS_CHANGE() {
        return PROTOCOL_ADDRESS_CHANGE;
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     unsigned int DispatchTableCount;
     *     RPC_DISPATCH_FUNCTION *DispatchTable;
     *     LONG_PTR Reserved;
     * } *PRPC_DISPATCH_TABLE
     * }
     */
    public static final AddressLayout PRPC_DISPATCH_TABLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_PROTSEQ_ENDPOINT {
     *     unsigned char *RpcProtocolSequence;
     *     unsigned char *Endpoint;
     * } *PRPC_PROTSEQ_ENDPOINT
     * }
     */
    public static final AddressLayout PRPC_PROTSEQ_ENDPOINT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SERVER_INTERFACE {
     *     unsigned int Length;
     *     RPC_SYNTAX_IDENTIFIER InterfaceId;
     *     RPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     PRPC_DISPATCH_TABLE DispatchTable;
     *     unsigned int RpcProtseqEndpointCount;
     *     PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
     *     void *DefaultManagerEpv;
     *     const void *InterpreterInfo;
     *     unsigned int Flags;
     * } *PRPC_SERVER_INTERFACE
     * }
     */
    public static final AddressLayout PRPC_SERVER_INTERFACE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_CLIENT_INTERFACE {
     *     unsigned int Length;
     *     RPC_SYNTAX_IDENTIFIER InterfaceId;
     *     RPC_SYNTAX_IDENTIFIER TransferSyntax;
     *     PRPC_DISPATCH_TABLE DispatchTable;
     *     unsigned int RpcProtseqEndpointCount;
     *     PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
     *     ULONG_PTR Reserved;
     *     const void *InterpreterInfo;
     *     unsigned int Flags;
     * } *PRPC_CLIENT_INTERFACE
     * }
     */
    public static final AddressLayout PRPC_CLIENT_INTERFACE = winapi.C_POINTER;

    private static class I_RpcNegotiateTransferSyntax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcNegotiateTransferSyntax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcNegotiateTransferSyntax$descriptor() {
        return I_RpcNegotiateTransferSyntax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcNegotiateTransferSyntax$handle() {
        return I_RpcNegotiateTransferSyntax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcNegotiateTransferSyntax$address() {
        return I_RpcNegotiateTransferSyntax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNegotiateTransferSyntax(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcNegotiateTransferSyntax(MemorySegment Message) {
        var mh$ = I_RpcNegotiateTransferSyntax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNegotiateTransferSyntax", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcGetBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcGetBuffer$descriptor() {
        return I_RpcGetBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcGetBuffer$handle() {
        return I_RpcGetBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcGetBuffer$address() {
        return I_RpcGetBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcGetBuffer(MemorySegment Message) {
        var mh$ = I_RpcGetBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetBufferWithObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcGetBufferWithObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static FunctionDescriptor I_RpcGetBufferWithObject$descriptor() {
        return I_RpcGetBufferWithObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static MethodHandle I_RpcGetBufferWithObject$handle() {
        return I_RpcGetBufferWithObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static MemorySegment I_RpcGetBufferWithObject$address() {
        return I_RpcGetBufferWithObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetBufferWithObject(RPC_MESSAGE *Message, UUID *ObjectUuid)
     * }
     */
    public static int I_RpcGetBufferWithObject(MemorySegment Message, MemorySegment ObjectUuid) {
        var mh$ = I_RpcGetBufferWithObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetBufferWithObject", Message, ObjectUuid);
            }
            return (int)mh$.invokeExact(Message, ObjectUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSendReceive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcSendReceive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcSendReceive$descriptor() {
        return I_RpcSendReceive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcSendReceive$handle() {
        return I_RpcSendReceive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcSendReceive$address() {
        return I_RpcSendReceive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSendReceive(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcSendReceive(MemorySegment Message) {
        var mh$ = I_RpcSendReceive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSendReceive", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcFreeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcFreeBuffer$descriptor() {
        return I_RpcFreeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcFreeBuffer$handle() {
        return I_RpcFreeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcFreeBuffer$address() {
        return I_RpcFreeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcFreeBuffer(MemorySegment Message) {
        var mh$ = I_RpcFreeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcSend");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static FunctionDescriptor I_RpcSend$descriptor() {
        return I_RpcSend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static MethodHandle I_RpcSend$handle() {
        return I_RpcSend.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static MemorySegment I_RpcSend$address() {
        return I_RpcSend.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSend(PRPC_MESSAGE Message)
     * }
     */
    public static int I_RpcSend(MemorySegment Message) {
        var mh$ = I_RpcSend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSend", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReceive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcReceive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static FunctionDescriptor I_RpcReceive$descriptor() {
        return I_RpcReceive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static MethodHandle I_RpcReceive$handle() {
        return I_RpcReceive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static MemorySegment I_RpcReceive$address() {
        return I_RpcReceive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReceive(PRPC_MESSAGE Message, unsigned int Size)
     * }
     */
    public static int I_RpcReceive(MemorySegment Message, int Size) {
        var mh$ = I_RpcReceive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReceive", Message, Size);
            }
            return (int)mh$.invokeExact(Message, Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreePipeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcFreePipeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static FunctionDescriptor I_RpcFreePipeBuffer$descriptor() {
        return I_RpcFreePipeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MethodHandle I_RpcFreePipeBuffer$handle() {
        return I_RpcFreePipeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static MemorySegment I_RpcFreePipeBuffer$address() {
        return I_RpcFreePipeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcFreePipeBuffer(RPC_MESSAGE *Message)
     * }
     */
    public static int I_RpcFreePipeBuffer(MemorySegment Message) {
        var mh$ = I_RpcFreePipeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreePipeBuffer", Message);
            }
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReallocPipeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcReallocPipeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static FunctionDescriptor I_RpcReallocPipeBuffer$descriptor() {
        return I_RpcReallocPipeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static MethodHandle I_RpcReallocPipeBuffer$handle() {
        return I_RpcReallocPipeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static MemorySegment I_RpcReallocPipeBuffer$address() {
        return I_RpcReallocPipeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReallocPipeBuffer(PRPC_MESSAGE Message, unsigned int NewSize)
     * }
     */
    public static int I_RpcReallocPipeBuffer(MemorySegment Message, int NewSize) {
        var mh$ = I_RpcReallocPipeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReallocPipeBuffer", Message, NewSize);
            }
            return (int)mh$.invokeExact(Message, NewSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *I_RPC_MUTEX
     * }
     */
    public static final AddressLayout I_RPC_MUTEX = winapi.C_POINTER;

    private static class I_RpcRequestMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcRequestMutex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcRequestMutex$descriptor() {
        return I_RpcRequestMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static MethodHandle I_RpcRequestMutex$handle() {
        return I_RpcRequestMutex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static MemorySegment I_RpcRequestMutex$address() {
        return I_RpcRequestMutex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcRequestMutex(I_RPC_MUTEX *Mutex)
     * }
     */
    public static void I_RpcRequestMutex(MemorySegment Mutex) {
        var mh$ = I_RpcRequestMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcRequestMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcClearMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcClearMutex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcClearMutex$descriptor() {
        return I_RpcClearMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MethodHandle I_RpcClearMutex$handle() {
        return I_RpcClearMutex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MemorySegment I_RpcClearMutex$address() {
        return I_RpcClearMutex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcClearMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static void I_RpcClearMutex(MemorySegment Mutex) {
        var mh$ = I_RpcClearMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcClearMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcDeleteMutex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcDeleteMutex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static FunctionDescriptor I_RpcDeleteMutex$descriptor() {
        return I_RpcDeleteMutex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MethodHandle I_RpcDeleteMutex$handle() {
        return I_RpcDeleteMutex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static MemorySegment I_RpcDeleteMutex$address() {
        return I_RpcDeleteMutex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcDeleteMutex(I_RPC_MUTEX Mutex)
     * }
     */
    public static void I_RpcDeleteMutex(MemorySegment Mutex) {
        var mh$ = I_RpcDeleteMutex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcDeleteMutex", Mutex);
            }
            mh$.invokeExact(Mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcAllocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcAllocate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static FunctionDescriptor I_RpcAllocate$descriptor() {
        return I_RpcAllocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static MethodHandle I_RpcAllocate$handle() {
        return I_RpcAllocate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static MemorySegment I_RpcAllocate$address() {
        return I_RpcAllocate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *I_RpcAllocate(unsigned int Size)
     * }
     */
    public static MemorySegment I_RpcAllocate(int Size) {
        var mh$ = I_RpcAllocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcAllocate", Size);
            }
            return (MemorySegment)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static FunctionDescriptor I_RpcFree$descriptor() {
        return I_RpcFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static MethodHandle I_RpcFree$handle() {
        return I_RpcFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static MemorySegment I_RpcFree$address() {
        return I_RpcFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcFree(void *Object)
     * }
     */
    public static void I_RpcFree(MemorySegment Object_) {
        var mh$ = I_RpcFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFree", Object_);
            }
            mh$.invokeExact(Object_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeSystemHandleCollection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcFreeSystemHandleCollection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static FunctionDescriptor I_RpcFreeSystemHandleCollection$descriptor() {
        return I_RpcFreeSystemHandleCollection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static MethodHandle I_RpcFreeSystemHandleCollection$handle() {
        return I_RpcFreeSystemHandleCollection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static MemorySegment I_RpcFreeSystemHandleCollection$address() {
        return I_RpcFreeSystemHandleCollection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long I_RpcFreeSystemHandleCollection(void *CallObj, unsigned long FreeFlags)
     * }
     */
    public static int I_RpcFreeSystemHandleCollection(MemorySegment CallObj, int FreeFlags) {
        var mh$ = I_RpcFreeSystemHandleCollection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeSystemHandleCollection", CallObj, FreeFlags);
            }
            return (int)mh$.invokeExact(CallObj, FreeFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_CHAR,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcSetSystemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static FunctionDescriptor I_RpcSetSystemHandle$descriptor() {
        return I_RpcSetSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static MethodHandle I_RpcSetSystemHandle$handle() {
        return I_RpcSetSystemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static MemorySegment I_RpcSetSystemHandle$address() {
        return I_RpcSetSystemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetSystemHandle(void *Handle, unsigned char Type, unsigned long AccessMask, void *CallObj, unsigned long *HandleIndex)
     * }
     */
    public static int I_RpcSetSystemHandle(MemorySegment Handle, byte Type, int AccessMask, MemorySegment CallObj, MemorySegment HandleIndex) {
        var mh$ = I_RpcSetSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetSystemHandle", Handle, Type, AccessMask, CallObj, HandleIndex);
            }
            return (int)mh$.invokeExact(Handle, Type, AccessMask, CallObj, HandleIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_CHAR,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcGetSystemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static FunctionDescriptor I_RpcGetSystemHandle$descriptor() {
        return I_RpcGetSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static MethodHandle I_RpcGetSystemHandle$handle() {
        return I_RpcGetSystemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static MemorySegment I_RpcGetSystemHandle$address() {
        return I_RpcGetSystemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetSystemHandle(unsigned char *pMemory, unsigned char Type, unsigned long AccessMask, unsigned long HandleIndex, void *CallObj)
     * }
     */
    public static int I_RpcGetSystemHandle(MemorySegment pMemory, byte Type, int AccessMask, int HandleIndex, MemorySegment CallObj) {
        var mh$ = I_RpcGetSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetSystemHandle", pMemory, Type, AccessMask, HandleIndex, CallObj);
            }
            return (int)mh$.invokeExact(pMemory, Type, AccessMask, HandleIndex, CallObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcFreeSystemHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcFreeSystemHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static FunctionDescriptor I_RpcFreeSystemHandle$descriptor() {
        return I_RpcFreeSystemHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static MethodHandle I_RpcFreeSystemHandle$handle() {
        return I_RpcFreeSystemHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static MemorySegment I_RpcFreeSystemHandle$address() {
        return I_RpcFreeSystemHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcFreeSystemHandle(unsigned char Type, void *Handle)
     * }
     */
    public static void I_RpcFreeSystemHandle(byte Type, MemorySegment Handle) {
        var mh$ = I_RpcFreeSystemHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcFreeSystemHandle", Type, Handle);
            }
            mh$.invokeExact(Type, Handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcPauseExecution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcPauseExecution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static FunctionDescriptor I_RpcPauseExecution$descriptor() {
        return I_RpcPauseExecution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static MethodHandle I_RpcPauseExecution$handle() {
        return I_RpcPauseExecution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static MemorySegment I_RpcPauseExecution$address() {
        return I_RpcPauseExecution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcPauseExecution(unsigned long Milliseconds)
     * }
     */
    public static void I_RpcPauseExecution(int Milliseconds) {
        var mh$ = I_RpcPauseExecution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcPauseExecution", Milliseconds);
            }
            mh$.invokeExact(Milliseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetExtendedError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcGetExtendedError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static FunctionDescriptor I_RpcGetExtendedError$descriptor() {
        return I_RpcGetExtendedError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static MethodHandle I_RpcGetExtendedError$handle() {
        return I_RpcGetExtendedError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static MemorySegment I_RpcGetExtendedError$address() {
        return I_RpcGetExtendedError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetExtendedError()
     * }
     */
    public static int I_RpcGetExtendedError() {
        var mh$ = I_RpcGetExtendedError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetExtendedError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int MarshalDirectionMarshal = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION.MarshalDirectionMarshal = 0
     * }
     */
    public static int MarshalDirectionMarshal() {
        return MarshalDirectionMarshal;
    }
    private static final int MarshalDirectionUnmarshal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION.MarshalDirectionUnmarshal = 1
     * }
     */
    public static int MarshalDirectionUnmarshal() {
        return MarshalDirectionUnmarshal;
    }

    private static class I_RpcSystemHandleTypeSpecificWork {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_CHAR,
            winapi.C_CHAR,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcSystemHandleTypeSpecificWork");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static FunctionDescriptor I_RpcSystemHandleTypeSpecificWork$descriptor() {
        return I_RpcSystemHandleTypeSpecificWork.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static MethodHandle I_RpcSystemHandleTypeSpecificWork$handle() {
        return I_RpcSystemHandleTypeSpecificWork.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static MemorySegment I_RpcSystemHandleTypeSpecificWork$address() {
        return I_RpcSystemHandleTypeSpecificWork.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSystemHandleTypeSpecificWork(void *Handle, unsigned char ActualType, unsigned char IdlType, LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection)
     * }
     */
    public static int I_RpcSystemHandleTypeSpecificWork(MemorySegment Handle, byte ActualType, byte IdlType, int MarshalDirection) {
        var mh$ = I_RpcSystemHandleTypeSpecificWork.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSystemHandleTypeSpecificWork", Handle, ActualType, IdlType, MarshalDirection);
            }
            return (int)mh$.invokeExact(Handle, ActualType, IdlType, MarshalDirection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMonitorAssociation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcMonitorAssociation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static FunctionDescriptor I_RpcMonitorAssociation$descriptor() {
        return I_RpcMonitorAssociation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static MethodHandle I_RpcMonitorAssociation$handle() {
        return I_RpcMonitorAssociation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static MemorySegment I_RpcMonitorAssociation$address() {
        return I_RpcMonitorAssociation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMonitorAssociation(RPC_BINDING_HANDLE Handle, PRPC_RUNDOWN RundownRoutine, void *Context)
     * }
     */
    public static int I_RpcMonitorAssociation(MemorySegment Handle, MemorySegment RundownRoutine, MemorySegment Context) {
        var mh$ = I_RpcMonitorAssociation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMonitorAssociation", Handle, RundownRoutine, Context);
            }
            return (int)mh$.invokeExact(Handle, RundownRoutine, Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcStopMonitorAssociation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcStopMonitorAssociation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static FunctionDescriptor I_RpcStopMonitorAssociation$descriptor() {
        return I_RpcStopMonitorAssociation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MethodHandle I_RpcStopMonitorAssociation$handle() {
        return I_RpcStopMonitorAssociation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static MemorySegment I_RpcStopMonitorAssociation$address() {
        return I_RpcStopMonitorAssociation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcStopMonitorAssociation(RPC_BINDING_HANDLE Handle)
     * }
     */
    public static int I_RpcStopMonitorAssociation(MemorySegment Handle) {
        var mh$ = I_RpcStopMonitorAssociation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcStopMonitorAssociation", Handle);
            }
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetCurrentCallHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcGetCurrentCallHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static FunctionDescriptor I_RpcGetCurrentCallHandle$descriptor() {
        return I_RpcGetCurrentCallHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static MethodHandle I_RpcGetCurrentCallHandle$handle() {
        return I_RpcGetCurrentCallHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static MemorySegment I_RpcGetCurrentCallHandle$address() {
        return I_RpcGetCurrentCallHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_BINDING_HANDLE I_RpcGetCurrentCallHandle()
     * }
     */
    public static MemorySegment I_RpcGetCurrentCallHandle() {
        var mh$ = I_RpcGetCurrentCallHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetCurrentCallHandle");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetAssociationContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcGetAssociationContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static FunctionDescriptor I_RpcGetAssociationContext$descriptor() {
        return I_RpcGetAssociationContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static MethodHandle I_RpcGetAssociationContext$handle() {
        return I_RpcGetAssociationContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static MemorySegment I_RpcGetAssociationContext$address() {
        return I_RpcGetAssociationContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetAssociationContext(RPC_BINDING_HANDLE BindingHandle, void **AssociationContext)
     * }
     */
    public static int I_RpcGetAssociationContext(MemorySegment BindingHandle, MemorySegment AssociationContext) {
        var mh$ = I_RpcGetAssociationContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetAssociationContext", BindingHandle, AssociationContext);
            }
            return (int)mh$.invokeExact(BindingHandle, AssociationContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetServerContextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcGetServerContextList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static FunctionDescriptor I_RpcGetServerContextList$descriptor() {
        return I_RpcGetServerContextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MethodHandle I_RpcGetServerContextList$handle() {
        return I_RpcGetServerContextList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment I_RpcGetServerContextList$address() {
        return I_RpcGetServerContextList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *I_RpcGetServerContextList(RPC_BINDING_HANDLE BindingHandle)
     * }
     */
    public static MemorySegment I_RpcGetServerContextList(MemorySegment BindingHandle) {
        var mh$ = I_RpcGetServerContextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetServerContextList", BindingHandle);
            }
            return (MemorySegment)mh$.invokeExact(BindingHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetServerContextList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcSetServerContextList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static FunctionDescriptor I_RpcSetServerContextList$descriptor() {
        return I_RpcSetServerContextList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static MethodHandle I_RpcSetServerContextList$handle() {
        return I_RpcSetServerContextList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static MemorySegment I_RpcSetServerContextList$address() {
        return I_RpcSetServerContextList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcSetServerContextList(RPC_BINDING_HANDLE BindingHandle, void *ServerContextList)
     * }
     */
    public static void I_RpcSetServerContextList(MemorySegment BindingHandle, MemorySegment ServerContextList) {
        var mh$ = I_RpcSetServerContextList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetServerContextList", BindingHandle, ServerContextList);
            }
            mh$.invokeExact(BindingHandle, ServerContextList);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsInterfaceExported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcNsInterfaceExported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static FunctionDescriptor I_RpcNsInterfaceExported$descriptor() {
        return I_RpcNsInterfaceExported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MethodHandle I_RpcNsInterfaceExported$handle() {
        return I_RpcNsInterfaceExported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MemorySegment I_RpcNsInterfaceExported$address() {
        return I_RpcNsInterfaceExported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceExported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static int I_RpcNsInterfaceExported(int EntryNameSyntax, MemorySegment EntryName, MemorySegment RpcInterfaceInformation) {
        var mh$ = I_RpcNsInterfaceExported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsInterfaceExported", EntryNameSyntax, EntryName, RpcInterfaceInformation);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, RpcInterfaceInformation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsInterfaceUnexported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcNsInterfaceUnexported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static FunctionDescriptor I_RpcNsInterfaceUnexported$descriptor() {
        return I_RpcNsInterfaceUnexported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MethodHandle I_RpcNsInterfaceUnexported$handle() {
        return I_RpcNsInterfaceUnexported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static MemorySegment I_RpcNsInterfaceUnexported$address() {
        return I_RpcNsInterfaceUnexported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsInterfaceUnexported(unsigned long EntryNameSyntax, unsigned short *EntryName, RPC_SERVER_INTERFACE *RpcInterfaceInformation)
     * }
     */
    public static int I_RpcNsInterfaceUnexported(int EntryNameSyntax, MemorySegment EntryName, MemorySegment RpcInterfaceInformation) {
        var mh$ = I_RpcNsInterfaceUnexported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsInterfaceUnexported", EntryNameSyntax, EntryName, RpcInterfaceInformation);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, RpcInterfaceInformation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingToStaticStringBindingW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingToStaticStringBindingW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingToStaticStringBindingW$descriptor() {
        return I_RpcBindingToStaticStringBindingW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static MethodHandle I_RpcBindingToStaticStringBindingW$handle() {
        return I_RpcBindingToStaticStringBindingW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static MemorySegment I_RpcBindingToStaticStringBindingW$address() {
        return I_RpcBindingToStaticStringBindingW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingToStaticStringBindingW(RPC_BINDING_HANDLE Binding, unsigned short **StringBinding)
     * }
     */
    public static int I_RpcBindingToStaticStringBindingW(MemorySegment Binding, MemorySegment StringBinding) {
        var mh$ = I_RpcBindingToStaticStringBindingW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingToStaticStringBindingW", Binding, StringBinding);
            }
            return (int)mh$.invokeExact(Binding, StringBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqSecurityContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqSecurityContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqSecurityContext$descriptor() {
        return I_RpcBindingInqSecurityContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static MethodHandle I_RpcBindingInqSecurityContext$handle() {
        return I_RpcBindingInqSecurityContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static MemorySegment I_RpcBindingInqSecurityContext$address() {
        return I_RpcBindingInqSecurityContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContext(RPC_BINDING_HANDLE Binding, void **SecurityContextHandle)
     * }
     */
    public static int I_RpcBindingInqSecurityContext(MemorySegment Binding, MemorySegment SecurityContextHandle) {
        var mh$ = I_RpcBindingInqSecurityContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqSecurityContext", Binding, SecurityContextHandle);
            }
            return (int)mh$.invokeExact(Binding, SecurityContextHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_SEC_CONTEXT_KEY_INFO {
     *     unsigned long EncryptAlgorithm;
     *     unsigned long KeySize;
     *     unsigned long SignatureAlgorithm;
     * } *PRPC_SEC_CONTEXT_KEY_INFO
     * }
     */
    public static final AddressLayout PRPC_SEC_CONTEXT_KEY_INFO = winapi.C_POINTER;

    private static class I_RpcBindingInqSecurityContextKeyInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqSecurityContextKeyInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqSecurityContextKeyInfo$descriptor() {
        return I_RpcBindingInqSecurityContextKeyInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static MethodHandle I_RpcBindingInqSecurityContextKeyInfo$handle() {
        return I_RpcBindingInqSecurityContextKeyInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static MemorySegment I_RpcBindingInqSecurityContextKeyInfo$address() {
        return I_RpcBindingInqSecurityContextKeyInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqSecurityContextKeyInfo(RPC_BINDING_HANDLE Binding, void *KeyInfo)
     * }
     */
    public static int I_RpcBindingInqSecurityContextKeyInfo(MemorySegment Binding, MemorySegment KeyInfo) {
        var mh$ = I_RpcBindingInqSecurityContextKeyInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqSecurityContextKeyInfo", Binding, KeyInfo);
            }
            return (int)mh$.invokeExact(Binding, KeyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqWireIdForSnego {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqWireIdForSnego");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqWireIdForSnego$descriptor() {
        return I_RpcBindingInqWireIdForSnego.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static MethodHandle I_RpcBindingInqWireIdForSnego$handle() {
        return I_RpcBindingInqWireIdForSnego.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static MemorySegment I_RpcBindingInqWireIdForSnego$address() {
        return I_RpcBindingInqWireIdForSnego.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqWireIdForSnego(RPC_BINDING_HANDLE Binding, unsigned char *WireId)
     * }
     */
    public static int I_RpcBindingInqWireIdForSnego(MemorySegment Binding, MemorySegment WireId) {
        var mh$ = I_RpcBindingInqWireIdForSnego.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqWireIdForSnego", Binding, WireId);
            }
            return (int)mh$.invokeExact(Binding, WireId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqMarshalledTargetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqMarshalledTargetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqMarshalledTargetInfo$descriptor() {
        return I_RpcBindingInqMarshalledTargetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static MethodHandle I_RpcBindingInqMarshalledTargetInfo$handle() {
        return I_RpcBindingInqMarshalledTargetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static MemorySegment I_RpcBindingInqMarshalledTargetInfo$address() {
        return I_RpcBindingInqMarshalledTargetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqMarshalledTargetInfo(RPC_BINDING_HANDLE Binding, unsigned long *MarshalledTargetInfoSize, RPC_CSTR *MarshalledTargetInfo)
     * }
     */
    public static int I_RpcBindingInqMarshalledTargetInfo(MemorySegment Binding, MemorySegment MarshalledTargetInfoSize, MemorySegment MarshalledTargetInfo) {
        var mh$ = I_RpcBindingInqMarshalledTargetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqMarshalledTargetInfo", Binding, MarshalledTargetInfoSize, MarshalledTargetInfo);
            }
            return (int)mh$.invokeExact(Binding, MarshalledTargetInfoSize, MarshalledTargetInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqLocalClientPID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqLocalClientPID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqLocalClientPID$descriptor() {
        return I_RpcBindingInqLocalClientPID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static MethodHandle I_RpcBindingInqLocalClientPID$handle() {
        return I_RpcBindingInqLocalClientPID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static MemorySegment I_RpcBindingInqLocalClientPID$address() {
        return I_RpcBindingInqLocalClientPID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqLocalClientPID(RPC_BINDING_HANDLE Binding, unsigned long *Pid)
     * }
     */
    public static int I_RpcBindingInqLocalClientPID(MemorySegment Binding, MemorySegment Pid) {
        var mh$ = I_RpcBindingInqLocalClientPID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqLocalClientPID", Binding, Pid);
            }
            return (int)mh$.invokeExact(Binding, Pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingHandleToAsyncHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingHandleToAsyncHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static FunctionDescriptor I_RpcBindingHandleToAsyncHandle$descriptor() {
        return I_RpcBindingHandleToAsyncHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static MethodHandle I_RpcBindingHandleToAsyncHandle$handle() {
        return I_RpcBindingHandleToAsyncHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static MemorySegment I_RpcBindingHandleToAsyncHandle$address() {
        return I_RpcBindingHandleToAsyncHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingHandleToAsyncHandle(RPC_BINDING_HANDLE Binding, void **AsyncHandle)
     * }
     */
    public static int I_RpcBindingHandleToAsyncHandle(MemorySegment Binding, MemorySegment AsyncHandle) {
        var mh$ = I_RpcBindingHandleToAsyncHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingHandleToAsyncHandle", Binding, AsyncHandle);
            }
            return (int)mh$.invokeExact(Binding, AsyncHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsBindingSetEntryNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcNsBindingSetEntryNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static FunctionDescriptor I_RpcNsBindingSetEntryNameW$descriptor() {
        return I_RpcNsBindingSetEntryNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MethodHandle I_RpcNsBindingSetEntryNameW$handle() {
        return I_RpcNsBindingSetEntryNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MemorySegment I_RpcNsBindingSetEntryNameW$address() {
        return I_RpcNsBindingSetEntryNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameW(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static int I_RpcNsBindingSetEntryNameW(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = I_RpcNsBindingSetEntryNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsBindingSetEntryNameW", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcNsBindingSetEntryNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcNsBindingSetEntryNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static FunctionDescriptor I_RpcNsBindingSetEntryNameA$descriptor() {
        return I_RpcNsBindingSetEntryNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MethodHandle I_RpcNsBindingSetEntryNameA$handle() {
        return I_RpcNsBindingSetEntryNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MemorySegment I_RpcNsBindingSetEntryNameA$address() {
        return I_RpcNsBindingSetEntryNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcNsBindingSetEntryNameA(RPC_BINDING_HANDLE Binding, unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static int I_RpcNsBindingSetEntryNameA(MemorySegment Binding, int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = I_RpcNsBindingSetEntryNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcNsBindingSetEntryNameA", Binding, EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(Binding, EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseqEp2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerUseProtseqEp2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseqEp2A$descriptor() {
        return I_RpcServerUseProtseqEp2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseqEp2A$handle() {
        return I_RpcServerUseProtseqEp2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MemorySegment I_RpcServerUseProtseqEp2A$address() {
        return I_RpcServerUseProtseqEp2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, RPC_CSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseqEp2A(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseqEp2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseqEp2A", NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseqEp2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerUseProtseqEp2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseqEp2W$descriptor() {
        return I_RpcServerUseProtseqEp2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseqEp2W$handle() {
        return I_RpcServerUseProtseqEp2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MemorySegment I_RpcServerUseProtseqEp2W$address() {
        return I_RpcServerUseProtseqEp2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseqEp2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, RPC_WSTR Endpoint, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseqEp2W(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment Endpoint, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseqEp2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseqEp2W", NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, Endpoint, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseq2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerUseProtseq2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseq2W$descriptor() {
        return I_RpcServerUseProtseq2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseq2W$handle() {
        return I_RpcServerUseProtseq2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MemorySegment I_RpcServerUseProtseq2W$address() {
        return I_RpcServerUseProtseq2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2W(RPC_WSTR NetworkAddress, RPC_WSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseq2W(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseq2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseq2W", NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUseProtseq2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerUseProtseq2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static FunctionDescriptor I_RpcServerUseProtseq2A$descriptor() {
        return I_RpcServerUseProtseq2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MethodHandle I_RpcServerUseProtseq2A$handle() {
        return I_RpcServerUseProtseq2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static MemorySegment I_RpcServerUseProtseq2A$address() {
        return I_RpcServerUseProtseq2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUseProtseq2A(RPC_CSTR NetworkAddress, RPC_CSTR Protseq, unsigned int MaxCalls, void *SecurityDescriptor, void *Policy)
     * }
     */
    public static int I_RpcServerUseProtseq2A(MemorySegment NetworkAddress, MemorySegment Protseq, int MaxCalls, MemorySegment SecurityDescriptor, MemorySegment Policy) {
        var mh$ = I_RpcServerUseProtseq2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUseProtseq2A", NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
            }
            return (int)mh$.invokeExact(NetworkAddress, Protseq, MaxCalls, SecurityDescriptor, Policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStartService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerStartService");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static FunctionDescriptor I_RpcServerStartService$descriptor() {
        return I_RpcServerStartService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MethodHandle I_RpcServerStartService$handle() {
        return I_RpcServerStartService.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MemorySegment I_RpcServerStartService$address() {
        return I_RpcServerStartService.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartService(RPC_WSTR Protseq, RPC_WSTR Endpoint, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static int I_RpcServerStartService(MemorySegment Protseq, MemorySegment Endpoint, MemorySegment IfSpec) {
        var mh$ = I_RpcServerStartService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStartService", Protseq, Endpoint, IfSpec);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint, IfSpec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqDynamicEndpointW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqDynamicEndpointW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqDynamicEndpointW$descriptor() {
        return I_RpcBindingInqDynamicEndpointW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static MethodHandle I_RpcBindingInqDynamicEndpointW$handle() {
        return I_RpcBindingInqDynamicEndpointW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static MemorySegment I_RpcBindingInqDynamicEndpointW$address() {
        return I_RpcBindingInqDynamicEndpointW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointW(RPC_BINDING_HANDLE Binding, RPC_WSTR *DynamicEndpoint)
     * }
     */
    public static int I_RpcBindingInqDynamicEndpointW(MemorySegment Binding, MemorySegment DynamicEndpoint) {
        var mh$ = I_RpcBindingInqDynamicEndpointW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqDynamicEndpointW", Binding, DynamicEndpoint);
            }
            return (int)mh$.invokeExact(Binding, DynamicEndpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqDynamicEndpointA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqDynamicEndpointA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqDynamicEndpointA$descriptor() {
        return I_RpcBindingInqDynamicEndpointA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static MethodHandle I_RpcBindingInqDynamicEndpointA$handle() {
        return I_RpcBindingInqDynamicEndpointA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static MemorySegment I_RpcBindingInqDynamicEndpointA$address() {
        return I_RpcBindingInqDynamicEndpointA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqDynamicEndpointA(RPC_BINDING_HANDLE Binding, RPC_CSTR *DynamicEndpoint)
     * }
     */
    public static int I_RpcBindingInqDynamicEndpointA(MemorySegment Binding, MemorySegment DynamicEndpoint) {
        var mh$ = I_RpcBindingInqDynamicEndpointA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqDynamicEndpointA", Binding, DynamicEndpoint);
            }
            return (int)mh$.invokeExact(Binding, DynamicEndpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerCheckClientRestriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerCheckClientRestriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static FunctionDescriptor I_RpcServerCheckClientRestriction$descriptor() {
        return I_RpcServerCheckClientRestriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static MethodHandle I_RpcServerCheckClientRestriction$handle() {
        return I_RpcServerCheckClientRestriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static MemorySegment I_RpcServerCheckClientRestriction$address() {
        return I_RpcServerCheckClientRestriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerCheckClientRestriction(RPC_BINDING_HANDLE Context)
     * }
     */
    public static int I_RpcServerCheckClientRestriction(MemorySegment Context) {
        var mh$ = I_RpcServerCheckClientRestriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerCheckClientRestriction", Context);
            }
            return (int)mh$.invokeExact(Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqTransportType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqTransportType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqTransportType$descriptor() {
        return I_RpcBindingInqTransportType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static MethodHandle I_RpcBindingInqTransportType$handle() {
        return I_RpcBindingInqTransportType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static MemorySegment I_RpcBindingInqTransportType$address() {
        return I_RpcBindingInqTransportType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqTransportType(RPC_BINDING_HANDLE Binding, unsigned int *Type)
     * }
     */
    public static int I_RpcBindingInqTransportType(MemorySegment Binding, MemorySegment Type) {
        var mh$ = I_RpcBindingInqTransportType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqTransportType", Binding, Type);
            }
            return (int)mh$.invokeExact(Binding, Type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcIfInqTransferSyntaxes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcIfInqTransferSyntaxes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static FunctionDescriptor I_RpcIfInqTransferSyntaxes$descriptor() {
        return I_RpcIfInqTransferSyntaxes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static MethodHandle I_RpcIfInqTransferSyntaxes$handle() {
        return I_RpcIfInqTransferSyntaxes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static MemorySegment I_RpcIfInqTransferSyntaxes$address() {
        return I_RpcIfInqTransferSyntaxes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcIfInqTransferSyntaxes(RPC_IF_HANDLE RpcIfHandle, RPC_TRANSFER_SYNTAX *TransferSyntaxes, unsigned int TransferSyntaxSize, unsigned int *TransferSyntaxCount)
     * }
     */
    public static int I_RpcIfInqTransferSyntaxes(MemorySegment RpcIfHandle, MemorySegment TransferSyntaxes, int TransferSyntaxSize, MemorySegment TransferSyntaxCount) {
        var mh$ = I_RpcIfInqTransferSyntaxes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcIfInqTransferSyntaxes", RpcIfHandle, TransferSyntaxes, TransferSyntaxSize, TransferSyntaxCount);
            }
            return (int)mh$.invokeExact(RpcIfHandle, TransferSyntaxes, TransferSyntaxSize, TransferSyntaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_UuidCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_UuidCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static FunctionDescriptor I_UuidCreate$descriptor() {
        return I_UuidCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static MethodHandle I_UuidCreate$handle() {
        return I_UuidCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static MemorySegment I_UuidCreate$address() {
        return I_UuidCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_UuidCreate(UUID *Uuid)
     * }
     */
    public static int I_UuidCreate(MemorySegment Uuid) {
        var mh$ = I_UuidCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_UuidCreate", Uuid);
            }
            return (int)mh$.invokeExact(Uuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcUninitializeNdrOle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcUninitializeNdrOle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static FunctionDescriptor I_RpcUninitializeNdrOle$descriptor() {
        return I_RpcUninitializeNdrOle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static MethodHandle I_RpcUninitializeNdrOle$handle() {
        return I_RpcUninitializeNdrOle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static MemorySegment I_RpcUninitializeNdrOle$address() {
        return I_RpcUninitializeNdrOle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcUninitializeNdrOle()
     * }
     */
    public static void I_RpcUninitializeNdrOle() {
        var mh$ = I_RpcUninitializeNdrOle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcUninitializeNdrOle");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingCopy$descriptor() {
        return I_RpcBindingCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MethodHandle I_RpcBindingCopy$handle() {
        return I_RpcBindingCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static MemorySegment I_RpcBindingCopy$address() {
        return I_RpcBindingCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCopy(RPC_BINDING_HANDLE SourceBinding, RPC_BINDING_HANDLE *DestinationBinding)
     * }
     */
    public static int I_RpcBindingCopy(MemorySegment SourceBinding, MemorySegment DestinationBinding) {
        var mh$ = I_RpcBindingCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingCopy", SourceBinding, DestinationBinding);
            }
            return (int)mh$.invokeExact(SourceBinding, DestinationBinding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingIsClientLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingIsClientLocal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static FunctionDescriptor I_RpcBindingIsClientLocal$descriptor() {
        return I_RpcBindingIsClientLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static MethodHandle I_RpcBindingIsClientLocal$handle() {
        return I_RpcBindingIsClientLocal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static MemorySegment I_RpcBindingIsClientLocal$address() {
        return I_RpcBindingIsClientLocal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsClientLocal(RPC_BINDING_HANDLE BindingHandle, unsigned int *ClientLocalFlag)
     * }
     */
    public static int I_RpcBindingIsClientLocal(MemorySegment BindingHandle, MemorySegment ClientLocalFlag) {
        var mh$ = I_RpcBindingIsClientLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingIsClientLocal", BindingHandle, ClientLocalFlag);
            }
            return (int)mh$.invokeExact(BindingHandle, ClientLocalFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqConnId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqConnId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqConnId$descriptor() {
        return I_RpcBindingInqConnId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static MethodHandle I_RpcBindingInqConnId$handle() {
        return I_RpcBindingInqConnId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static MemorySegment I_RpcBindingInqConnId$address() {
        return I_RpcBindingInqConnId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqConnId(RPC_BINDING_HANDLE Binding, void **ConnId, int *pfFirstCall)
     * }
     */
    public static int I_RpcBindingInqConnId(MemorySegment Binding, MemorySegment ConnId, MemorySegment pfFirstCall) {
        var mh$ = I_RpcBindingInqConnId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqConnId", Binding, ConnId, pfFirstCall);
            }
            return (int)mh$.invokeExact(Binding, ConnId, pfFirstCall);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingCreateNP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingCreateNP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor I_RpcBindingCreateNP$descriptor() {
        return I_RpcBindingCreateNP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle I_RpcBindingCreateNP$handle() {
        return I_RpcBindingCreateNP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment I_RpcBindingCreateNP$address() {
        return I_RpcBindingCreateNP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingCreateNP(RPC_WSTR ServerName, RPC_WSTR ServiceName, RPC_WSTR NetworkOptions, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int I_RpcBindingCreateNP(MemorySegment ServerName, MemorySegment ServiceName, MemorySegment NetworkOptions, MemorySegment Binding) {
        var mh$ = I_RpcBindingCreateNP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingCreateNP", ServerName, ServiceName, NetworkOptions, Binding);
            }
            return (int)mh$.invokeExact(ServerName, ServiceName, NetworkOptions, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSsDontSerializeContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcSsDontSerializeContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static FunctionDescriptor I_RpcSsDontSerializeContext$descriptor() {
        return I_RpcSsDontSerializeContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static MethodHandle I_RpcSsDontSerializeContext$handle() {
        return I_RpcSsDontSerializeContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static MemorySegment I_RpcSsDontSerializeContext$address() {
        return I_RpcSsDontSerializeContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcSsDontSerializeContext()
     * }
     */
    public static void I_RpcSsDontSerializeContext() {
        var mh$ = I_RpcSsDontSerializeContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSsDontSerializeContext");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcLaunchDatagramReceiveThread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcLaunchDatagramReceiveThread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static FunctionDescriptor I_RpcLaunchDatagramReceiveThread$descriptor() {
        return I_RpcLaunchDatagramReceiveThread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static MethodHandle I_RpcLaunchDatagramReceiveThread$handle() {
        return I_RpcLaunchDatagramReceiveThread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static MemorySegment I_RpcLaunchDatagramReceiveThread$address() {
        return I_RpcLaunchDatagramReceiveThread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcLaunchDatagramReceiveThread(void *pAddress)
     * }
     */
    public static int I_RpcLaunchDatagramReceiveThread(MemorySegment pAddress) {
        var mh$ = I_RpcLaunchDatagramReceiveThread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcLaunchDatagramReceiveThread", pAddress);
            }
            return (int)mh$.invokeExact(pAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerRegisterForwardFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerRegisterForwardFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static FunctionDescriptor I_RpcServerRegisterForwardFunction$descriptor() {
        return I_RpcServerRegisterForwardFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static MethodHandle I_RpcServerRegisterForwardFunction$handle() {
        return I_RpcServerRegisterForwardFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static MemorySegment I_RpcServerRegisterForwardFunction$address() {
        return I_RpcServerRegisterForwardFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerRegisterForwardFunction(RPC_FORWARD_FUNCTION *pForwardFunction)
     * }
     */
    public static int I_RpcServerRegisterForwardFunction(MemorySegment pForwardFunction) {
        var mh$ = I_RpcServerRegisterForwardFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerRegisterForwardFunction", pForwardFunction);
            }
            return (int)mh$.invokeExact(pForwardFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqAddressChangeFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerInqAddressChangeFn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static FunctionDescriptor I_RpcServerInqAddressChangeFn$descriptor() {
        return I_RpcServerInqAddressChangeFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static MethodHandle I_RpcServerInqAddressChangeFn$handle() {
        return I_RpcServerInqAddressChangeFn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static MemorySegment I_RpcServerInqAddressChangeFn$address() {
        return I_RpcServerInqAddressChangeFn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_ADDRESS_CHANGE_FN *I_RpcServerInqAddressChangeFn() __attribute__((stdcall))
     * }
     */
    public static MemorySegment I_RpcServerInqAddressChangeFn() {
        var mh$ = I_RpcServerInqAddressChangeFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqAddressChangeFn");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSetAddressChangeFn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerSetAddressChangeFn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static FunctionDescriptor I_RpcServerSetAddressChangeFn$descriptor() {
        return I_RpcServerSetAddressChangeFn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static MethodHandle I_RpcServerSetAddressChangeFn$handle() {
        return I_RpcServerSetAddressChangeFn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static MemorySegment I_RpcServerSetAddressChangeFn$address() {
        return I_RpcServerSetAddressChangeFn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSetAddressChangeFn(RPC_ADDRESS_CHANGE_FN *pAddressChangeFn)
     * }
     */
    public static int I_RpcServerSetAddressChangeFn(MemorySegment pAddressChangeFn) {
        var mh$ = I_RpcServerSetAddressChangeFn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSetAddressChangeFn", pAddressChangeFn);
            }
            return (int)mh$.invokeExact(pAddressChangeFn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqLocalConnAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerInqLocalConnAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqLocalConnAddress$descriptor() {
        return I_RpcServerInqLocalConnAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MethodHandle I_RpcServerInqLocalConnAddress$handle() {
        return I_RpcServerInqLocalConnAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MemorySegment I_RpcServerInqLocalConnAddress$address() {
        return I_RpcServerInqLocalConnAddress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqLocalConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static int I_RpcServerInqLocalConnAddress(MemorySegment Binding, MemorySegment Buffer, MemorySegment BufferSize, MemorySegment AddressFormat) {
        var mh$ = I_RpcServerInqLocalConnAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqLocalConnAddress", Binding, Buffer, BufferSize, AddressFormat);
            }
            return (int)mh$.invokeExact(Binding, Buffer, BufferSize, AddressFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqRemoteConnAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerInqRemoteConnAddress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqRemoteConnAddress$descriptor() {
        return I_RpcServerInqRemoteConnAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MethodHandle I_RpcServerInqRemoteConnAddress$handle() {
        return I_RpcServerInqRemoteConnAddress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static MemorySegment I_RpcServerInqRemoteConnAddress$address() {
        return I_RpcServerInqRemoteConnAddress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqRemoteConnAddress(RPC_BINDING_HANDLE Binding, void *Buffer, unsigned long *BufferSize, unsigned long *AddressFormat)
     * }
     */
    public static int I_RpcServerInqRemoteConnAddress(MemorySegment Binding, MemorySegment Buffer, MemorySegment BufferSize, MemorySegment AddressFormat) {
        var mh$ = I_RpcServerInqRemoteConnAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqRemoteConnAddress", Binding, Buffer, BufferSize, AddressFormat);
            }
            return (int)mh$.invokeExact(Binding, Buffer, BufferSize, AddressFormat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSessionStrictContextHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcSessionStrictContextHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static FunctionDescriptor I_RpcSessionStrictContextHandle$descriptor() {
        return I_RpcSessionStrictContextHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static MethodHandle I_RpcSessionStrictContextHandle$handle() {
        return I_RpcSessionStrictContextHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static MemorySegment I_RpcSessionStrictContextHandle$address() {
        return I_RpcSessionStrictContextHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcSessionStrictContextHandle()
     * }
     */
    public static void I_RpcSessionStrictContextHandle() {
        var mh$ = I_RpcSessionStrictContextHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSessionStrictContextHandle");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcTurnOnEEInfoPropagation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcTurnOnEEInfoPropagation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static FunctionDescriptor I_RpcTurnOnEEInfoPropagation$descriptor() {
        return I_RpcTurnOnEEInfoPropagation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static MethodHandle I_RpcTurnOnEEInfoPropagation$handle() {
        return I_RpcTurnOnEEInfoPropagation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static MemorySegment I_RpcTurnOnEEInfoPropagation$address() {
        return I_RpcTurnOnEEInfoPropagation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcTurnOnEEInfoPropagation()
     * }
     */
    public static int I_RpcTurnOnEEInfoPropagation() {
        var mh$ = I_RpcTurnOnEEInfoPropagation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcTurnOnEEInfoPropagation");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcConnectionInqSockBuffSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcConnectionInqSockBuffSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static FunctionDescriptor I_RpcConnectionInqSockBuffSize$descriptor() {
        return I_RpcConnectionInqSockBuffSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static MethodHandle I_RpcConnectionInqSockBuffSize$handle() {
        return I_RpcConnectionInqSockBuffSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static MemorySegment I_RpcConnectionInqSockBuffSize$address() {
        return I_RpcConnectionInqSockBuffSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionInqSockBuffSize(unsigned long *RecvBuffSize, unsigned long *SendBuffSize)
     * }
     */
    public static int I_RpcConnectionInqSockBuffSize(MemorySegment RecvBuffSize, MemorySegment SendBuffSize) {
        var mh$ = I_RpcConnectionInqSockBuffSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcConnectionInqSockBuffSize", RecvBuffSize, SendBuffSize);
            }
            return (int)mh$.invokeExact(RecvBuffSize, SendBuffSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcConnectionSetSockBuffSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcConnectionSetSockBuffSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static FunctionDescriptor I_RpcConnectionSetSockBuffSize$descriptor() {
        return I_RpcConnectionSetSockBuffSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static MethodHandle I_RpcConnectionSetSockBuffSize$handle() {
        return I_RpcConnectionSetSockBuffSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static MemorySegment I_RpcConnectionSetSockBuffSize$address() {
        return I_RpcConnectionSetSockBuffSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcConnectionSetSockBuffSize(unsigned long RecvBuffSize, unsigned long SendBuffSize)
     * }
     */
    public static int I_RpcConnectionSetSockBuffSize(int RecvBuffSize, int SendBuffSize) {
        var mh$ = I_RpcConnectionSetSockBuffSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcConnectionSetSockBuffSize", RecvBuffSize, SendBuffSize);
            }
            return (int)mh$.invokeExact(RecvBuffSize, SendBuffSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStartListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerStartListening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static FunctionDescriptor I_RpcServerStartListening$descriptor() {
        return I_RpcServerStartListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static MethodHandle I_RpcServerStartListening$handle() {
        return I_RpcServerStartListening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static MemorySegment I_RpcServerStartListening$address() {
        return I_RpcServerStartListening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStartListening(void *hWnd)
     * }
     */
    public static int I_RpcServerStartListening(MemorySegment hWnd) {
        var mh$ = I_RpcServerStartListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStartListening", hWnd);
            }
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerStopListening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerStopListening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static FunctionDescriptor I_RpcServerStopListening$descriptor() {
        return I_RpcServerStopListening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static MethodHandle I_RpcServerStopListening$handle() {
        return I_RpcServerStopListening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static MemorySegment I_RpcServerStopListening$address() {
        return I_RpcServerStopListening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerStopListening()
     * }
     */
    public static int I_RpcServerStopListening() {
        var mh$ = I_RpcServerStopListening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerStopListening");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingSetAsync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingSetAsync");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static FunctionDescriptor I_RpcBindingSetAsync$descriptor() {
        return I_RpcBindingSetAsync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static MethodHandle I_RpcBindingSetAsync$handle() {
        return I_RpcBindingSetAsync.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static MemorySegment I_RpcBindingSetAsync$address() {
        return I_RpcBindingSetAsync.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetAsync(RPC_BINDING_HANDLE Binding, RPC_BLOCKING_FN BlockingFn, unsigned long ServerTid)
     * }
     */
    public static int I_RpcBindingSetAsync(MemorySegment Binding, MemorySegment BlockingFn, int ServerTid) {
        var mh$ = I_RpcBindingSetAsync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingSetAsync", Binding, BlockingFn, ServerTid);
            }
            return (int)mh$.invokeExact(Binding, BlockingFn, ServerTid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcSetThreadParams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcSetThreadParams");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static FunctionDescriptor I_RpcSetThreadParams$descriptor() {
        return I_RpcSetThreadParams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static MethodHandle I_RpcSetThreadParams$handle() {
        return I_RpcSetThreadParams.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static MemorySegment I_RpcSetThreadParams$address() {
        return I_RpcSetThreadParams.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcSetThreadParams(int fClientFree, void *Context, void *hWndClient)
     * }
     */
    public static int I_RpcSetThreadParams(int fClientFree, MemorySegment Context, MemorySegment hWndClient) {
        var mh$ = I_RpcSetThreadParams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcSetThreadParams", fClientFree, Context, hWndClient);
            }
            return (int)mh$.invokeExact(fClientFree, Context, hWndClient);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcWindowProc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcWindowProc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static FunctionDescriptor I_RpcWindowProc$descriptor() {
        return I_RpcWindowProc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static MethodHandle I_RpcWindowProc$handle() {
        return I_RpcWindowProc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static MemorySegment I_RpcWindowProc$address() {
        return I_RpcWindowProc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int I_RpcWindowProc(void *hWnd, unsigned int Message, unsigned int wParam, unsigned long lParam)
     * }
     */
    public static int I_RpcWindowProc(MemorySegment hWnd, int Message, int wParam, int lParam) {
        var mh$ = I_RpcWindowProc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcWindowProc", hWnd, Message, wParam, lParam);
            }
            return (int)mh$.invokeExact(hWnd, Message, wParam, lParam);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnregisterEndpointA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerUnregisterEndpointA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnregisterEndpointA$descriptor() {
        return I_RpcServerUnregisterEndpointA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static MethodHandle I_RpcServerUnregisterEndpointA$handle() {
        return I_RpcServerUnregisterEndpointA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static MemorySegment I_RpcServerUnregisterEndpointA$address() {
        return I_RpcServerUnregisterEndpointA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointA(RPC_CSTR Protseq, RPC_CSTR Endpoint)
     * }
     */
    public static int I_RpcServerUnregisterEndpointA(MemorySegment Protseq, MemorySegment Endpoint) {
        var mh$ = I_RpcServerUnregisterEndpointA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnregisterEndpointA", Protseq, Endpoint);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnregisterEndpointW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerUnregisterEndpointW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnregisterEndpointW$descriptor() {
        return I_RpcServerUnregisterEndpointW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static MethodHandle I_RpcServerUnregisterEndpointW$handle() {
        return I_RpcServerUnregisterEndpointW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static MemorySegment I_RpcServerUnregisterEndpointW$address() {
        return I_RpcServerUnregisterEndpointW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnregisterEndpointW(RPC_WSTR Protseq, RPC_WSTR Endpoint)
     * }
     */
    public static int I_RpcServerUnregisterEndpointW(MemorySegment Protseq, MemorySegment Endpoint) {
        var mh$ = I_RpcServerUnregisterEndpointW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnregisterEndpointW", Protseq, Endpoint);
            }
            return (int)mh$.invokeExact(Protseq, Endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerInqTransportType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerInqTransportType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static FunctionDescriptor I_RpcServerInqTransportType$descriptor() {
        return I_RpcServerInqTransportType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static MethodHandle I_RpcServerInqTransportType$handle() {
        return I_RpcServerInqTransportType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static MemorySegment I_RpcServerInqTransportType$address() {
        return I_RpcServerInqTransportType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerInqTransportType(unsigned int *Type)
     * }
     */
    public static int I_RpcServerInqTransportType(MemorySegment Type) {
        var mh$ = I_RpcServerInqTransportType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerInqTransportType", Type);
            }
            return (int)mh$.invokeExact(Type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMapWin32Status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcMapWin32Status");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static FunctionDescriptor I_RpcMapWin32Status$descriptor() {
        return I_RpcMapWin32Status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static MethodHandle I_RpcMapWin32Status$handle() {
        return I_RpcMapWin32Status.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static MemorySegment I_RpcMapWin32Status$address() {
        return I_RpcMapWin32Status.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long I_RpcMapWin32Status(RPC_STATUS Status)
     * }
     */
    public static int I_RpcMapWin32Status(int Status) {
        var mh$ = I_RpcMapWin32Status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMapWin32Status", Status);
            }
            return (int)mh$.invokeExact(Status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RpcCurrentUniqueUser = (int)1L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcCurrentUniqueUser = 1
     * }
     */
    public static int RpcCurrentUniqueUser() {
        return RpcCurrentUniqueUser;
    }
    private static final int RpcBackEndConnectionAttempts = (int)2L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcBackEndConnectionAttempts = 2
     * }
     */
    public static int RpcBackEndConnectionAttempts() {
        return RpcBackEndConnectionAttempts;
    }
    private static final int RpcBackEndConnectionFailed = (int)3L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcBackEndConnectionFailed = 3
     * }
     */
    public static int RpcBackEndConnectionFailed() {
        return RpcBackEndConnectionFailed;
    }
    private static final int RpcRequestsPerSecond = (int)4L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcRequestsPerSecond = 4
     * }
     */
    public static int RpcRequestsPerSecond() {
        return RpcRequestsPerSecond;
    }
    private static final int RpcIncomingConnections = (int)5L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcIncomingConnections = 5
     * }
     */
    public static int RpcIncomingConnections() {
        return RpcIncomingConnections;
    }
    private static final int RpcIncomingBandwidth = (int)6L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcIncomingBandwidth = 6
     * }
     */
    public static int RpcIncomingBandwidth() {
        return RpcIncomingBandwidth;
    }
    private static final int RpcOutgoingBandwidth = (int)7L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcOutgoingBandwidth = 7
     * }
     */
    public static int RpcOutgoingBandwidth() {
        return RpcOutgoingBandwidth;
    }
    private static final int RpcAttemptedLbsDecisions = (int)8L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcAttemptedLbsDecisions = 8
     * }
     */
    public static int RpcAttemptedLbsDecisions() {
        return RpcAttemptedLbsDecisions;
    }
    private static final int RpcFailedLbsDecisions = (int)9L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcFailedLbsDecisions = 9
     * }
     */
    public static int RpcFailedLbsDecisions() {
        return RpcFailedLbsDecisions;
    }
    private static final int RpcAttemptedLbsMessages = (int)10L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcAttemptedLbsMessages = 10
     * }
     */
    public static int RpcAttemptedLbsMessages() {
        return RpcAttemptedLbsMessages;
    }
    private static final int RpcFailedLbsMessages = (int)11L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcFailedLbsMessages = 11
     * }
     */
    public static int RpcFailedLbsMessages() {
        return RpcFailedLbsMessages;
    }
    private static final int RpcLastCounter = (int)12L;
    /**
     * {@snippet lang=c :
     * enum RpcProxyPerfCounters.RpcLastCounter = 12
     * }
     */
    public static int RpcLastCounter() {
        return RpcLastCounter;
    }

    private static class I_RpcProxyNewConnection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcProxyNewConnection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static FunctionDescriptor I_RpcProxyNewConnection$descriptor() {
        return I_RpcProxyNewConnection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static MethodHandle I_RpcProxyNewConnection$handle() {
        return I_RpcProxyNewConnection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static MemorySegment I_RpcProxyNewConnection$address() {
        return I_RpcProxyNewConnection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcProxyNewConnection(unsigned long ConnectionType, unsigned short *ServerAddress, unsigned short *ServerPort, unsigned short *MinConnTimeout, void *ConnectionParameter, RDR_CALLOUT_STATE *CallOutState, I_RpcProxyCallbackInterface *ProxyCallbackInterface)
     * }
     */
    public static int I_RpcProxyNewConnection(int ConnectionType, MemorySegment ServerAddress, MemorySegment ServerPort, MemorySegment MinConnTimeout, MemorySegment ConnectionParameter, MemorySegment CallOutState, MemorySegment ProxyCallbackInterface) {
        var mh$ = I_RpcProxyNewConnection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcProxyNewConnection", ConnectionType, ServerAddress, ServerPort, MinConnTimeout, ConnectionParameter, CallOutState, ProxyCallbackInterface);
            }
            return (int)mh$.invokeExact(ConnectionType, ServerAddress, ServerPort, MinConnTimeout, ConnectionParameter, CallOutState, ProxyCallbackInterface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcReplyToClientWithStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcReplyToClientWithStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static FunctionDescriptor I_RpcReplyToClientWithStatus$descriptor() {
        return I_RpcReplyToClientWithStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static MethodHandle I_RpcReplyToClientWithStatus$handle() {
        return I_RpcReplyToClientWithStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static MemorySegment I_RpcReplyToClientWithStatus$address() {
        return I_RpcReplyToClientWithStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcReplyToClientWithStatus(void *ConnectionParameter, RPC_STATUS RpcStatus)
     * }
     */
    public static int I_RpcReplyToClientWithStatus(MemorySegment ConnectionParameter, int RpcStatus) {
        var mh$ = I_RpcReplyToClientWithStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcReplyToClientWithStatus", ConnectionParameter, RpcStatus);
            }
            return (int)mh$.invokeExact(ConnectionParameter, RpcStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcRecordCalloutFailure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcRecordCalloutFailure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static FunctionDescriptor I_RpcRecordCalloutFailure$descriptor() {
        return I_RpcRecordCalloutFailure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static MethodHandle I_RpcRecordCalloutFailure$handle() {
        return I_RpcRecordCalloutFailure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static MemorySegment I_RpcRecordCalloutFailure$address() {
        return I_RpcRecordCalloutFailure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void I_RpcRecordCalloutFailure(RPC_STATUS RpcStatus, RDR_CALLOUT_STATE *CallOutState, unsigned short *DllName)
     * }
     */
    public static void I_RpcRecordCalloutFailure(int RpcStatus, MemorySegment CallOutState, MemorySegment DllName) {
        var mh$ = I_RpcRecordCalloutFailure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcRecordCalloutFailure", RpcStatus, CallOutState, DllName);
            }
            mh$.invokeExact(RpcStatus, CallOutState, DllName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcMgmtEnableDedicatedThreadPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcMgmtEnableDedicatedThreadPool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static FunctionDescriptor I_RpcMgmtEnableDedicatedThreadPool$descriptor() {
        return I_RpcMgmtEnableDedicatedThreadPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static MethodHandle I_RpcMgmtEnableDedicatedThreadPool$handle() {
        return I_RpcMgmtEnableDedicatedThreadPool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static MemorySegment I_RpcMgmtEnableDedicatedThreadPool$address() {
        return I_RpcMgmtEnableDedicatedThreadPool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcMgmtEnableDedicatedThreadPool()
     * }
     */
    public static int I_RpcMgmtEnableDedicatedThreadPool() {
        var mh$ = I_RpcMgmtEnableDedicatedThreadPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcMgmtEnableDedicatedThreadPool");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcGetDefaultSD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcGetDefaultSD");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static FunctionDescriptor I_RpcGetDefaultSD$descriptor() {
        return I_RpcGetDefaultSD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static MethodHandle I_RpcGetDefaultSD$handle() {
        return I_RpcGetDefaultSD.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static MemorySegment I_RpcGetDefaultSD$address() {
        return I_RpcGetDefaultSD.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcGetDefaultSD(void **ppSecurityDescriptor)
     * }
     */
    public static int I_RpcGetDefaultSD(MemorySegment ppSecurityDescriptor) {
        var mh$ = I_RpcGetDefaultSD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcGetDefaultSD", ppSecurityDescriptor);
            }
            return (int)mh$.invokeExact(ppSecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcOpenClientProcess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcOpenClientProcess");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static FunctionDescriptor I_RpcOpenClientProcess$descriptor() {
        return I_RpcOpenClientProcess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static MethodHandle I_RpcOpenClientProcess$handle() {
        return I_RpcOpenClientProcess.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static MemorySegment I_RpcOpenClientProcess$address() {
        return I_RpcOpenClientProcess.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcOpenClientProcess(RPC_BINDING_HANDLE Binding, unsigned long DesiredAccess, void **ClientProcess)
     * }
     */
    public static int I_RpcOpenClientProcess(MemorySegment Binding, int DesiredAccess, MemorySegment ClientProcess) {
        var mh$ = I_RpcOpenClientProcess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcOpenClientProcess", Binding, DesiredAccess, ClientProcess);
            }
            return (int)mh$.invokeExact(Binding, DesiredAccess, ClientProcess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingIsServerLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingIsServerLocal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static FunctionDescriptor I_RpcBindingIsServerLocal$descriptor() {
        return I_RpcBindingIsServerLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static MethodHandle I_RpcBindingIsServerLocal$handle() {
        return I_RpcBindingIsServerLocal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static MemorySegment I_RpcBindingIsServerLocal$address() {
        return I_RpcBindingIsServerLocal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingIsServerLocal(RPC_BINDING_HANDLE Binding, unsigned int *ServerLocalFlag)
     * }
     */
    public static int I_RpcBindingIsServerLocal(MemorySegment Binding, MemorySegment ServerLocalFlag) {
        var mh$ = I_RpcBindingIsServerLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingIsServerLocal", Binding, ServerLocalFlag);
            }
            return (int)mh$.invokeExact(Binding, ServerLocalFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingSetPrivateOption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingSetPrivateOption");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static FunctionDescriptor I_RpcBindingSetPrivateOption$descriptor() {
        return I_RpcBindingSetPrivateOption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MethodHandle I_RpcBindingSetPrivateOption$handle() {
        return I_RpcBindingSetPrivateOption.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static MemorySegment I_RpcBindingSetPrivateOption$address() {
        return I_RpcBindingSetPrivateOption.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingSetPrivateOption(RPC_BINDING_HANDLE hBinding, unsigned long option, ULONG_PTR optionValue)
     * }
     */
    public static int I_RpcBindingSetPrivateOption(MemorySegment hBinding, int option, long optionValue) {
        var mh$ = I_RpcBindingSetPrivateOption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingSetPrivateOption", hBinding, option, optionValue);
            }
            return (int)mh$.invokeExact(hBinding, option, optionValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSubscribeForDisconnectNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerSubscribeForDisconnectNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static FunctionDescriptor I_RpcServerSubscribeForDisconnectNotification$descriptor() {
        return I_RpcServerSubscribeForDisconnectNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static MethodHandle I_RpcServerSubscribeForDisconnectNotification$handle() {
        return I_RpcServerSubscribeForDisconnectNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static MemorySegment I_RpcServerSubscribeForDisconnectNotification$address() {
        return I_RpcServerSubscribeForDisconnectNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, void *hEvent)
     * }
     */
    public static int I_RpcServerSubscribeForDisconnectNotification(MemorySegment Binding, MemorySegment hEvent) {
        var mh$ = I_RpcServerSubscribeForDisconnectNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSubscribeForDisconnectNotification", Binding, hEvent);
            }
            return (int)mh$.invokeExact(Binding, hEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerGetAssociationID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerGetAssociationID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static FunctionDescriptor I_RpcServerGetAssociationID$descriptor() {
        return I_RpcServerGetAssociationID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static MethodHandle I_RpcServerGetAssociationID$handle() {
        return I_RpcServerGetAssociationID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static MemorySegment I_RpcServerGetAssociationID$address() {
        return I_RpcServerGetAssociationID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerGetAssociationID(RPC_BINDING_HANDLE Binding, unsigned long *AssociationID)
     * }
     */
    public static int I_RpcServerGetAssociationID(MemorySegment Binding, MemorySegment AssociationID) {
        var mh$ = I_RpcServerGetAssociationID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerGetAssociationID", Binding, AssociationID);
            }
            return (int)mh$.invokeExact(Binding, AssociationID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerDisableExceptionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerDisableExceptionFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static FunctionDescriptor I_RpcServerDisableExceptionFilter$descriptor() {
        return I_RpcServerDisableExceptionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static MethodHandle I_RpcServerDisableExceptionFilter$handle() {
        return I_RpcServerDisableExceptionFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static MemorySegment I_RpcServerDisableExceptionFilter$address() {
        return I_RpcServerDisableExceptionFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long I_RpcServerDisableExceptionFilter()
     * }
     */
    public static int I_RpcServerDisableExceptionFilter() {
        var mh$ = I_RpcServerDisableExceptionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerDisableExceptionFilter");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerSubscribeForDisconnectNotification2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerSubscribeForDisconnectNotification2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static FunctionDescriptor I_RpcServerSubscribeForDisconnectNotification2$descriptor() {
        return I_RpcServerSubscribeForDisconnectNotification2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static MethodHandle I_RpcServerSubscribeForDisconnectNotification2$handle() {
        return I_RpcServerSubscribeForDisconnectNotification2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static MemorySegment I_RpcServerSubscribeForDisconnectNotification2$address() {
        return I_RpcServerSubscribeForDisconnectNotification2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerSubscribeForDisconnectNotification2(RPC_BINDING_HANDLE Binding, void *hEvent, UUID *SubscriptionId)
     * }
     */
    public static int I_RpcServerSubscribeForDisconnectNotification2(MemorySegment Binding, MemorySegment hEvent, MemorySegment SubscriptionId) {
        var mh$ = I_RpcServerSubscribeForDisconnectNotification2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerSubscribeForDisconnectNotification2", Binding, hEvent, SubscriptionId);
            }
            return (int)mh$.invokeExact(Binding, hEvent, SubscriptionId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcServerUnsubscribeForDisconnectNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            _GUID.layout()
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcServerUnsubscribeForDisconnectNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static FunctionDescriptor I_RpcServerUnsubscribeForDisconnectNotification$descriptor() {
        return I_RpcServerUnsubscribeForDisconnectNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static MethodHandle I_RpcServerUnsubscribeForDisconnectNotification$handle() {
        return I_RpcServerUnsubscribeForDisconnectNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static MemorySegment I_RpcServerUnsubscribeForDisconnectNotification$address() {
        return I_RpcServerUnsubscribeForDisconnectNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcServerUnsubscribeForDisconnectNotification(RPC_BINDING_HANDLE Binding, UUID SubscriptionId)
     * }
     */
    public static int I_RpcServerUnsubscribeForDisconnectNotification(MemorySegment Binding, MemorySegment SubscriptionId) {
        var mh$ = I_RpcServerUnsubscribeForDisconnectNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcServerUnsubscribeForDisconnectNotification", Binding, SubscriptionId);
            }
            return (int)mh$.invokeExact(Binding, SubscriptionId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *RPC_NS_HANDLE
     * }
     */
    public static final AddressLayout RPC_NS_HANDLE = winapi.C_POINTER;

    private static class RpcNsBindingExportA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingExportA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportA$descriptor() {
        return RpcNsBindingExportA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingExportA$handle() {
        return RpcNsBindingExportA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsBindingExportA$address() {
        return RpcNsBindingExportA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingExportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment BindingVec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingExportA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportA", EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingUnexportA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportA$descriptor() {
        return RpcNsBindingUnexportA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportA$handle() {
        return RpcNsBindingUnexportA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsBindingUnexportA$address() {
        return RpcNsBindingUnexportA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingUnexportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingUnexportA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportA", EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingExportW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportW$descriptor() {
        return RpcNsBindingExportW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingExportW$handle() {
        return RpcNsBindingExportW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsBindingExportW$address() {
        return RpcNsBindingExportW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, RPC_BINDING_VECTOR *BindingVec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingExportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment BindingVec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingExportW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportW", EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, BindingVec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingUnexportW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportW$descriptor() {
        return RpcNsBindingUnexportW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportW$handle() {
        return RpcNsBindingUnexportW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsBindingUnexportW$address() {
        return RpcNsBindingUnexportW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsBindingUnexportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsBindingUnexportW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportW", EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportPnPA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingExportPnPA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportPnPA$descriptor() {
        return RpcNsBindingExportPnPA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingExportPnPA$handle() {
        return RpcNsBindingExportPnPA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MemorySegment RpcNsBindingExportPnPA$address() {
        return RpcNsBindingExportPnPA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingExportPnPA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingExportPnPA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportPnPA", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportPnPA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingUnexportPnPA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportPnPA$descriptor() {
        return RpcNsBindingUnexportPnPA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportPnPA$handle() {
        return RpcNsBindingUnexportPnPA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MemorySegment RpcNsBindingUnexportPnPA$address() {
        return RpcNsBindingUnexportPnPA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingUnexportPnPA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingUnexportPnPA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportPnPA", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingExportPnPW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingExportPnPW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingExportPnPW$descriptor() {
        return RpcNsBindingExportPnPW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingExportPnPW$handle() {
        return RpcNsBindingExportPnPW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MemorySegment RpcNsBindingExportPnPW$address() {
        return RpcNsBindingExportPnPW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingExportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingExportPnPW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingExportPnPW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingExportPnPW", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingUnexportPnPW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingUnexportPnPW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static FunctionDescriptor RpcNsBindingUnexportPnPW$descriptor() {
        return RpcNsBindingUnexportPnPW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MethodHandle RpcNsBindingUnexportPnPW$handle() {
        return RpcNsBindingUnexportPnPW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static MemorySegment RpcNsBindingUnexportPnPW$address() {
        return RpcNsBindingUnexportPnPW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingUnexportPnPW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID_VECTOR *ObjectVector)
     * }
     */
    public static int RpcNsBindingUnexportPnPW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjectVector) {
        var mh$ = RpcNsBindingUnexportPnPW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingUnexportPnPW", EntryNameSyntax, EntryName, IfSpec, ObjectVector);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjectVector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingLookupBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupBeginA$descriptor() {
        return RpcNsBindingLookupBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupBeginA$handle() {
        return RpcNsBindingLookupBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MemorySegment RpcNsBindingLookupBeginA$address() {
        return RpcNsBindingLookupBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, int BindingMaxCount, MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupBeginA", EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingLookupBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupBeginW$descriptor() {
        return RpcNsBindingLookupBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupBeginW$handle() {
        return RpcNsBindingLookupBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MemorySegment RpcNsBindingLookupBeginW$address() {
        return RpcNsBindingLookupBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, unsigned long BindingMaxCount, RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, int BindingMaxCount, MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupBeginW", EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, BindingMaxCount, LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingLookupNext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupNext$descriptor() {
        return RpcNsBindingLookupNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static MethodHandle RpcNsBindingLookupNext$handle() {
        return RpcNsBindingLookupNext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static MemorySegment RpcNsBindingLookupNext$address() {
        return RpcNsBindingLookupNext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupNext(RPC_NS_HANDLE LookupContext, RPC_BINDING_VECTOR **BindingVec)
     * }
     */
    public static int RpcNsBindingLookupNext(MemorySegment LookupContext, MemorySegment BindingVec) {
        var mh$ = RpcNsBindingLookupNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupNext", LookupContext, BindingVec);
            }
            return (int)mh$.invokeExact(LookupContext, BindingVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingLookupDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingLookupDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingLookupDone$descriptor() {
        return RpcNsBindingLookupDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MethodHandle RpcNsBindingLookupDone$handle() {
        return RpcNsBindingLookupDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static MemorySegment RpcNsBindingLookupDone$address() {
        return RpcNsBindingLookupDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingLookupDone(RPC_NS_HANDLE *LookupContext)
     * }
     */
    public static int RpcNsBindingLookupDone(MemorySegment LookupContext) {
        var mh$ = RpcNsBindingLookupDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingLookupDone", LookupContext);
            }
            return (int)mh$.invokeExact(LookupContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupDeleteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupDeleteA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupDeleteA$descriptor() {
        return RpcNsGroupDeleteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static MethodHandle RpcNsGroupDeleteA$handle() {
        return RpcNsGroupDeleteA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static MemorySegment RpcNsGroupDeleteA$address() {
        return RpcNsGroupDeleteA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteA(unsigned long GroupNameSyntax, RPC_CSTR GroupName)
     * }
     */
    public static int RpcNsGroupDeleteA(int GroupNameSyntax, MemorySegment GroupName) {
        var mh$ = RpcNsGroupDeleteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupDeleteA", GroupNameSyntax, GroupName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrAddA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrAddA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrAddA$descriptor() {
        return RpcNsGroupMbrAddA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrAddA$handle() {
        return RpcNsGroupMbrAddA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrAddA$address() {
        return RpcNsGroupMbrAddA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrAddA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrAddA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrAddA", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrRemoveA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrRemoveA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrRemoveA$descriptor() {
        return RpcNsGroupMbrRemoveA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrRemoveA$handle() {
        return RpcNsGroupMbrRemoveA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrRemoveA$address() {
        return RpcNsGroupMbrRemoveA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrRemoveA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrRemoveA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrRemoveA", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrInqBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqBeginA$descriptor() {
        return RpcNsGroupMbrInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqBeginA$handle() {
        return RpcNsGroupMbrInqBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqBeginA$address() {
        return RpcNsGroupMbrInqBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginA(unsigned long GroupNameSyntax, RPC_CSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqBeginA(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqBeginA", GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrInqNextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqNextA$descriptor() {
        return RpcNsGroupMbrInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqNextA$handle() {
        return RpcNsGroupMbrInqNextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqNextA$address() {
        return RpcNsGroupMbrInqNextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextA(RPC_NS_HANDLE InquiryContext, RPC_CSTR *MemberName)
     * }
     */
    public static int RpcNsGroupMbrInqNextA(MemorySegment InquiryContext, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqNextA", InquiryContext, MemberName);
            }
            return (int)mh$.invokeExact(InquiryContext, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupDeleteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupDeleteW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupDeleteW$descriptor() {
        return RpcNsGroupDeleteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static MethodHandle RpcNsGroupDeleteW$handle() {
        return RpcNsGroupDeleteW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static MemorySegment RpcNsGroupDeleteW$address() {
        return RpcNsGroupDeleteW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupDeleteW(unsigned long GroupNameSyntax, RPC_WSTR GroupName)
     * }
     */
    public static int RpcNsGroupDeleteW(int GroupNameSyntax, MemorySegment GroupName) {
        var mh$ = RpcNsGroupDeleteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupDeleteW", GroupNameSyntax, GroupName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrAddW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrAddW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrAddW$descriptor() {
        return RpcNsGroupMbrAddW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrAddW$handle() {
        return RpcNsGroupMbrAddW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrAddW$address() {
        return RpcNsGroupMbrAddW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrAddW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrAddW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrAddW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrAddW", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrRemoveW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrRemoveW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrRemoveW$descriptor() {
        return RpcNsGroupMbrRemoveW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrRemoveW$handle() {
        return RpcNsGroupMbrRemoveW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrRemoveW$address() {
        return RpcNsGroupMbrRemoveW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrRemoveW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsGroupMbrRemoveW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrRemoveW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrRemoveW", GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrInqBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqBeginW$descriptor() {
        return RpcNsGroupMbrInqBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqBeginW$handle() {
        return RpcNsGroupMbrInqBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqBeginW$address() {
        return RpcNsGroupMbrInqBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqBeginW(unsigned long GroupNameSyntax, RPC_WSTR GroupName, unsigned long MemberNameSyntax, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqBeginW(int GroupNameSyntax, MemorySegment GroupName, int MemberNameSyntax, MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqBeginW", GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
            }
            return (int)mh$.invokeExact(GroupNameSyntax, GroupName, MemberNameSyntax, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrInqNextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqNextW$descriptor() {
        return RpcNsGroupMbrInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqNextW$handle() {
        return RpcNsGroupMbrInqNextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqNextW$address() {
        return RpcNsGroupMbrInqNextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqNextW(RPC_NS_HANDLE InquiryContext, RPC_WSTR *MemberName)
     * }
     */
    public static int RpcNsGroupMbrInqNextW(MemorySegment InquiryContext, MemorySegment MemberName) {
        var mh$ = RpcNsGroupMbrInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqNextW", InquiryContext, MemberName);
            }
            return (int)mh$.invokeExact(InquiryContext, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsGroupMbrInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsGroupMbrInqDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsGroupMbrInqDone$descriptor() {
        return RpcNsGroupMbrInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsGroupMbrInqDone$handle() {
        return RpcNsGroupMbrInqDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsGroupMbrInqDone$address() {
        return RpcNsGroupMbrInqDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsGroupMbrInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsGroupMbrInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsGroupMbrInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsGroupMbrInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileDeleteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileDeleteA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileDeleteA$descriptor() {
        return RpcNsProfileDeleteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static MethodHandle RpcNsProfileDeleteA$handle() {
        return RpcNsProfileDeleteA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static MemorySegment RpcNsProfileDeleteA$address() {
        return RpcNsProfileDeleteA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName)
     * }
     */
    public static int RpcNsProfileDeleteA(int ProfileNameSyntax, MemorySegment ProfileName) {
        var mh$ = RpcNsProfileDeleteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileDeleteA", ProfileNameSyntax, ProfileName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltAddA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltAddA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltAddA$descriptor() {
        return RpcNsProfileEltAddA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltAddA$handle() {
        return RpcNsProfileEltAddA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static MemorySegment RpcNsProfileEltAddA$address() {
        return RpcNsProfileEltAddA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName, unsigned long Priority, RPC_CSTR Annotation)
     * }
     */
    public static int RpcNsProfileEltAddA(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName, int Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltAddA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltAddA", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltRemoveA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltRemoveA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltRemoveA$descriptor() {
        return RpcNsProfileEltRemoveA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsProfileEltRemoveA$handle() {
        return RpcNsProfileEltRemoveA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsProfileEltRemoveA$address() {
        return RpcNsProfileEltRemoveA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_CSTR MemberName)
     * }
     */
    public static int RpcNsProfileEltRemoveA(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsProfileEltRemoveA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltRemoveA", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltInqBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqBeginA$descriptor() {
        return RpcNsProfileEltInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqBeginA$handle() {
        return RpcNsProfileEltInqBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqBeginA$address() {
        return RpcNsProfileEltInqBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginA(unsigned long ProfileNameSyntax, RPC_CSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_CSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqBeginA(int ProfileNameSyntax, MemorySegment ProfileName, int InquiryType, MemorySegment IfId, int VersOption, int MemberNameSyntax, MemorySegment MemberName, MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqBeginA", ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqNextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltInqNextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqNextA$descriptor() {
        return RpcNsProfileEltInqNextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqNextA$handle() {
        return RpcNsProfileEltInqNextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqNextA$address() {
        return RpcNsProfileEltInqNextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextA(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_CSTR *MemberName, unsigned long *Priority, RPC_CSTR *Annotation)
     * }
     */
    public static int RpcNsProfileEltInqNextA(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment MemberName, MemorySegment Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltInqNextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqNextA", InquiryContext, IfId, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileDeleteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileDeleteW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileDeleteW$descriptor() {
        return RpcNsProfileDeleteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static MethodHandle RpcNsProfileDeleteW$handle() {
        return RpcNsProfileDeleteW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static MemorySegment RpcNsProfileDeleteW$address() {
        return RpcNsProfileDeleteW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileDeleteW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName)
     * }
     */
    public static int RpcNsProfileDeleteW(int ProfileNameSyntax, MemorySegment ProfileName) {
        var mh$ = RpcNsProfileDeleteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileDeleteW", ProfileNameSyntax, ProfileName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltAddW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltAddW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltAddW$descriptor() {
        return RpcNsProfileEltAddW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltAddW$handle() {
        return RpcNsProfileEltAddW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static MemorySegment RpcNsProfileEltAddW$address() {
        return RpcNsProfileEltAddW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltAddW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName, unsigned long Priority, RPC_WSTR Annotation)
     * }
     */
    public static int RpcNsProfileEltAddW(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName, int Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltAddW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltAddW", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltRemoveW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltRemoveW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltRemoveW$descriptor() {
        return RpcNsProfileEltRemoveW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MethodHandle RpcNsProfileEltRemoveW$handle() {
        return RpcNsProfileEltRemoveW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static MemorySegment RpcNsProfileEltRemoveW$address() {
        return RpcNsProfileEltRemoveW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltRemoveW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, RPC_IF_ID *IfId, unsigned long MemberNameSyntax, RPC_WSTR MemberName)
     * }
     */
    public static int RpcNsProfileEltRemoveW(int ProfileNameSyntax, MemorySegment ProfileName, MemorySegment IfId, int MemberNameSyntax, MemorySegment MemberName) {
        var mh$ = RpcNsProfileEltRemoveW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltRemoveW", ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, IfId, MemberNameSyntax, MemberName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltInqBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqBeginW$descriptor() {
        return RpcNsProfileEltInqBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqBeginW$handle() {
        return RpcNsProfileEltInqBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqBeginW$address() {
        return RpcNsProfileEltInqBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqBeginW(unsigned long ProfileNameSyntax, RPC_WSTR ProfileName, unsigned long InquiryType, RPC_IF_ID *IfId, unsigned long VersOption, unsigned long MemberNameSyntax, RPC_WSTR MemberName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqBeginW(int ProfileNameSyntax, MemorySegment ProfileName, int InquiryType, MemorySegment IfId, int VersOption, int MemberNameSyntax, MemorySegment MemberName, MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqBeginW", ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
            }
            return (int)mh$.invokeExact(ProfileNameSyntax, ProfileName, InquiryType, IfId, VersOption, MemberNameSyntax, MemberName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqNextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltInqNextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqNextW$descriptor() {
        return RpcNsProfileEltInqNextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqNextW$handle() {
        return RpcNsProfileEltInqNextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqNextW$address() {
        return RpcNsProfileEltInqNextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqNextW(RPC_NS_HANDLE InquiryContext, RPC_IF_ID *IfId, RPC_WSTR *MemberName, unsigned long *Priority, RPC_WSTR *Annotation)
     * }
     */
    public static int RpcNsProfileEltInqNextW(MemorySegment InquiryContext, MemorySegment IfId, MemorySegment MemberName, MemorySegment Priority, MemorySegment Annotation) {
        var mh$ = RpcNsProfileEltInqNextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqNextW", InquiryContext, IfId, MemberName, Priority, Annotation);
            }
            return (int)mh$.invokeExact(InquiryContext, IfId, MemberName, Priority, Annotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsProfileEltInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsProfileEltInqDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsProfileEltInqDone$descriptor() {
        return RpcNsProfileEltInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsProfileEltInqDone$handle() {
        return RpcNsProfileEltInqDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsProfileEltInqDone$address() {
        return RpcNsProfileEltInqDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsProfileEltInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsProfileEltInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsProfileEltInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsProfileEltInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsEntryObjectInqBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqBeginA$descriptor() {
        return RpcNsEntryObjectInqBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqBeginA$handle() {
        return RpcNsEntryObjectInqBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsEntryObjectInqBeginA$address() {
        return RpcNsEntryObjectInqBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsEntryObjectInqBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqBeginA", EntryNameSyntax, EntryName, InquiryContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsEntryObjectInqBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqBeginW$descriptor() {
        return RpcNsEntryObjectInqBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqBeginW$handle() {
        return RpcNsEntryObjectInqBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsEntryObjectInqBeginW$address() {
        return RpcNsEntryObjectInqBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsEntryObjectInqBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqBeginW", EntryNameSyntax, EntryName, InquiryContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsEntryObjectInqNext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqNext$descriptor() {
        return RpcNsEntryObjectInqNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqNext$handle() {
        return RpcNsEntryObjectInqNext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid)
     * }
     */
    public static MemorySegment RpcNsEntryObjectInqNext$address() {
        return RpcNsEntryObjectInqNext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqNext(RPC_NS_HANDLE InquiryContext, UUID *ObjUuid)
     * }
     */
    public static int RpcNsEntryObjectInqNext(MemorySegment InquiryContext, MemorySegment ObjUuid) {
        var mh$ = RpcNsEntryObjectInqNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqNext", InquiryContext, ObjUuid);
            }
            return (int)mh$.invokeExact(InquiryContext, ObjUuid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryObjectInqDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsEntryObjectInqDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static FunctionDescriptor RpcNsEntryObjectInqDone$descriptor() {
        return RpcNsEntryObjectInqDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MethodHandle RpcNsEntryObjectInqDone$handle() {
        return RpcNsEntryObjectInqDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static MemorySegment RpcNsEntryObjectInqDone$address() {
        return RpcNsEntryObjectInqDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryObjectInqDone(RPC_NS_HANDLE *InquiryContext)
     * }
     */
    public static int RpcNsEntryObjectInqDone(MemorySegment InquiryContext) {
        var mh$ = RpcNsEntryObjectInqDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryObjectInqDone", InquiryContext);
            }
            return (int)mh$.invokeExact(InquiryContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryExpandNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsEntryExpandNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName)
     * }
     */
    public static FunctionDescriptor RpcNsEntryExpandNameA$descriptor() {
        return RpcNsEntryExpandNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName)
     * }
     */
    public static MethodHandle RpcNsEntryExpandNameA$handle() {
        return RpcNsEntryExpandNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName)
     * }
     */
    public static MemorySegment RpcNsEntryExpandNameA$address() {
        return RpcNsEntryExpandNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_CSTR *ExpandedName)
     * }
     */
    public static int RpcNsEntryExpandNameA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment ExpandedName) {
        var mh$ = RpcNsEntryExpandNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryExpandNameA", EntryNameSyntax, EntryName, ExpandedName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, ExpandedName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtBindingUnexportA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtBindingUnexportA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtBindingUnexportA$descriptor() {
        return RpcNsMgmtBindingUnexportA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsMgmtBindingUnexportA$handle() {
        return RpcNsMgmtBindingUnexportA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsMgmtBindingUnexportA$address() {
        return RpcNsMgmtBindingUnexportA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsMgmtBindingUnexportA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfId, int VersOption, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsMgmtBindingUnexportA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtBindingUnexportA", EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryCreateA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtEntryCreateA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryCreateA$descriptor() {
        return RpcNsMgmtEntryCreateA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryCreateA$handle() {
        return RpcNsMgmtEntryCreateA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryCreateA$address() {
        return RpcNsMgmtEntryCreateA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static int RpcNsMgmtEntryCreateA(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryCreateA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryCreateA", EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryDeleteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtEntryDeleteA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryDeleteA$descriptor() {
        return RpcNsMgmtEntryDeleteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryDeleteA$handle() {
        return RpcNsMgmtEntryDeleteA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryDeleteA$address() {
        return RpcNsMgmtEntryDeleteA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteA(unsigned long EntryNameSyntax, RPC_CSTR EntryName)
     * }
     */
    public static int RpcNsMgmtEntryDeleteA(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryDeleteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryDeleteA", EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryInqIfIdsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtEntryInqIfIdsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryInqIfIdsA$descriptor() {
        return RpcNsMgmtEntryInqIfIdsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryInqIfIdsA$handle() {
        return RpcNsMgmtEntryInqIfIdsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryInqIfIdsA$address() {
        return RpcNsMgmtEntryInqIfIdsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static int RpcNsMgmtEntryInqIfIdsA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfIdVec) {
        var mh$ = RpcNsMgmtEntryInqIfIdsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryInqIfIdsA", EntryNameSyntax, EntryName, IfIdVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfIdVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtHandleSetExpAge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtHandleSetExpAge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtHandleSetExpAge$descriptor() {
        return RpcNsMgmtHandleSetExpAge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge)
     * }
     */
    public static MethodHandle RpcNsMgmtHandleSetExpAge$handle() {
        return RpcNsMgmtHandleSetExpAge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge)
     * }
     */
    public static MemorySegment RpcNsMgmtHandleSetExpAge$address() {
        return RpcNsMgmtHandleSetExpAge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtHandleSetExpAge(RPC_NS_HANDLE NsHandle, unsigned long ExpirationAge)
     * }
     */
    public static int RpcNsMgmtHandleSetExpAge(MemorySegment NsHandle, int ExpirationAge) {
        var mh$ = RpcNsMgmtHandleSetExpAge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtHandleSetExpAge", NsHandle, ExpirationAge);
            }
            return (int)mh$.invokeExact(NsHandle, ExpirationAge);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtInqExpAge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtInqExpAge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtInqExpAge$descriptor() {
        return RpcNsMgmtInqExpAge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge)
     * }
     */
    public static MethodHandle RpcNsMgmtInqExpAge$handle() {
        return RpcNsMgmtInqExpAge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge)
     * }
     */
    public static MemorySegment RpcNsMgmtInqExpAge$address() {
        return RpcNsMgmtInqExpAge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtInqExpAge(unsigned long *ExpirationAge)
     * }
     */
    public static int RpcNsMgmtInqExpAge(MemorySegment ExpirationAge) {
        var mh$ = RpcNsMgmtInqExpAge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtInqExpAge", ExpirationAge);
            }
            return (int)mh$.invokeExact(ExpirationAge);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtSetExpAge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtSetExpAge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtSetExpAge$descriptor() {
        return RpcNsMgmtSetExpAge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge)
     * }
     */
    public static MethodHandle RpcNsMgmtSetExpAge$handle() {
        return RpcNsMgmtSetExpAge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge)
     * }
     */
    public static MemorySegment RpcNsMgmtSetExpAge$address() {
        return RpcNsMgmtSetExpAge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtSetExpAge(unsigned long ExpirationAge)
     * }
     */
    public static int RpcNsMgmtSetExpAge(int ExpirationAge) {
        var mh$ = RpcNsMgmtSetExpAge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtSetExpAge", ExpirationAge);
            }
            return (int)mh$.invokeExact(ExpirationAge);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsEntryExpandNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsEntryExpandNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName)
     * }
     */
    public static FunctionDescriptor RpcNsEntryExpandNameW$descriptor() {
        return RpcNsEntryExpandNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName)
     * }
     */
    public static MethodHandle RpcNsEntryExpandNameW$handle() {
        return RpcNsEntryExpandNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName)
     * }
     */
    public static MemorySegment RpcNsEntryExpandNameW$address() {
        return RpcNsEntryExpandNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsEntryExpandNameW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_WSTR *ExpandedName)
     * }
     */
    public static int RpcNsEntryExpandNameW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment ExpandedName) {
        var mh$ = RpcNsEntryExpandNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsEntryExpandNameW", EntryNameSyntax, EntryName, ExpandedName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, ExpandedName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtBindingUnexportW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtBindingUnexportW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtBindingUnexportW$descriptor() {
        return RpcNsMgmtBindingUnexportW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MethodHandle RpcNsMgmtBindingUnexportW$handle() {
        return RpcNsMgmtBindingUnexportW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static MemorySegment RpcNsMgmtBindingUnexportW$address() {
        return RpcNsMgmtBindingUnexportW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtBindingUnexportW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID *IfId, unsigned long VersOption, UUID_VECTOR *ObjectUuidVec)
     * }
     */
    public static int RpcNsMgmtBindingUnexportW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfId, int VersOption, MemorySegment ObjectUuidVec) {
        var mh$ = RpcNsMgmtBindingUnexportW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtBindingUnexportW", EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfId, VersOption, ObjectUuidVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryCreateW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtEntryCreateW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryCreateW$descriptor() {
        return RpcNsMgmtEntryCreateW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryCreateW$handle() {
        return RpcNsMgmtEntryCreateW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryCreateW$address() {
        return RpcNsMgmtEntryCreateW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryCreateW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static int RpcNsMgmtEntryCreateW(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryCreateW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryCreateW", EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryDeleteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtEntryDeleteW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryDeleteW$descriptor() {
        return RpcNsMgmtEntryDeleteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryDeleteW$handle() {
        return RpcNsMgmtEntryDeleteW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryDeleteW$address() {
        return RpcNsMgmtEntryDeleteW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryDeleteW(unsigned long EntryNameSyntax, RPC_WSTR EntryName)
     * }
     */
    public static int RpcNsMgmtEntryDeleteW(int EntryNameSyntax, MemorySegment EntryName) {
        var mh$ = RpcNsMgmtEntryDeleteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryDeleteW", EntryNameSyntax, EntryName);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsMgmtEntryInqIfIdsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsMgmtEntryInqIfIdsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static FunctionDescriptor RpcNsMgmtEntryInqIfIdsW$descriptor() {
        return RpcNsMgmtEntryInqIfIdsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static MethodHandle RpcNsMgmtEntryInqIfIdsW$handle() {
        return RpcNsMgmtEntryInqIfIdsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static MemorySegment RpcNsMgmtEntryInqIfIdsW$address() {
        return RpcNsMgmtEntryInqIfIdsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsMgmtEntryInqIfIdsW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_ID_VECTOR **IfIdVec)
     * }
     */
    public static int RpcNsMgmtEntryInqIfIdsW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfIdVec) {
        var mh$ = RpcNsMgmtEntryInqIfIdsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsMgmtEntryInqIfIdsW", EntryNameSyntax, EntryName, IfIdVec);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfIdVec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingImportBeginA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingImportBeginA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingImportBeginA$descriptor() {
        return RpcNsBindingImportBeginA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MethodHandle RpcNsBindingImportBeginA$handle() {
        return RpcNsBindingImportBeginA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MemorySegment RpcNsBindingImportBeginA$address() {
        return RpcNsBindingImportBeginA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginA(unsigned long EntryNameSyntax, RPC_CSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static int RpcNsBindingImportBeginA(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportBeginA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingImportBeginA", EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingImportBeginW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingImportBeginW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingImportBeginW$descriptor() {
        return RpcNsBindingImportBeginW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MethodHandle RpcNsBindingImportBeginW$handle() {
        return RpcNsBindingImportBeginW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MemorySegment RpcNsBindingImportBeginW$address() {
        return RpcNsBindingImportBeginW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportBeginW(unsigned long EntryNameSyntax, RPC_WSTR EntryName, RPC_IF_HANDLE IfSpec, UUID *ObjUuid, RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static int RpcNsBindingImportBeginW(int EntryNameSyntax, MemorySegment EntryName, MemorySegment IfSpec, MemorySegment ObjUuid, MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportBeginW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingImportBeginW", EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
            }
            return (int)mh$.invokeExact(EntryNameSyntax, EntryName, IfSpec, ObjUuid, ImportContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingImportNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingImportNext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcNsBindingImportNext$descriptor() {
        return RpcNsBindingImportNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcNsBindingImportNext$handle() {
        return RpcNsBindingImportNext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcNsBindingImportNext$address() {
        return RpcNsBindingImportNext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportNext(RPC_NS_HANDLE ImportContext, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcNsBindingImportNext(MemorySegment ImportContext, MemorySegment Binding) {
        var mh$ = RpcNsBindingImportNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingImportNext", ImportContext, Binding);
            }
            return (int)mh$.invokeExact(ImportContext, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingImportDone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingImportDone");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static FunctionDescriptor RpcNsBindingImportDone$descriptor() {
        return RpcNsBindingImportDone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MethodHandle RpcNsBindingImportDone$handle() {
        return RpcNsBindingImportDone.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static MemorySegment RpcNsBindingImportDone$address() {
        return RpcNsBindingImportDone.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingImportDone(RPC_NS_HANDLE *ImportContext)
     * }
     */
    public static int RpcNsBindingImportDone(MemorySegment ImportContext) {
        var mh$ = RpcNsBindingImportDone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingImportDone", ImportContext);
            }
            return (int)mh$.invokeExact(ImportContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcNsBindingSelect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcNsBindingSelect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static FunctionDescriptor RpcNsBindingSelect$descriptor() {
        return RpcNsBindingSelect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MethodHandle RpcNsBindingSelect$handle() {
        return RpcNsBindingSelect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static MemorySegment RpcNsBindingSelect$address() {
        return RpcNsBindingSelect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcNsBindingSelect(RPC_BINDING_VECTOR *BindingVec, RPC_BINDING_HANDLE *Binding)
     * }
     */
    public static int RpcNsBindingSelect(MemorySegment BindingVec, MemorySegment Binding) {
        var mh$ = RpcNsBindingSelect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcNsBindingSelect", BindingVec, Binding);
            }
            return (int)mh$.invokeExact(BindingVec, Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RpcNotificationTypeNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeNone = 0
     * }
     */
    public static int RpcNotificationTypeNone() {
        return RpcNotificationTypeNone;
    }
    private static final int RpcNotificationTypeEvent = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeEvent = 1
     * }
     */
    public static int RpcNotificationTypeEvent() {
        return RpcNotificationTypeEvent;
    }
    private static final int RpcNotificationTypeApc = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeApc = 2
     * }
     */
    public static int RpcNotificationTypeApc() {
        return RpcNotificationTypeApc;
    }
    private static final int RpcNotificationTypeIoc = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeIoc = 3
     * }
     */
    public static int RpcNotificationTypeIoc() {
        return RpcNotificationTypeIoc;
    }
    private static final int RpcNotificationTypeHwnd = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeHwnd = 4
     * }
     */
    public static int RpcNotificationTypeHwnd() {
        return RpcNotificationTypeHwnd;
    }
    private static final int RpcNotificationTypeCallback = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATION_TYPES.RpcNotificationTypeCallback = 5
     * }
     */
    public static int RpcNotificationTypeCallback() {
        return RpcNotificationTypeCallback;
    }
    private static final int RpcCallComplete = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcCallComplete = 0
     * }
     */
    public static int RpcCallComplete() {
        return RpcCallComplete;
    }
    private static final int RpcSendComplete = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcSendComplete = 1
     * }
     */
    public static int RpcSendComplete() {
        return RpcSendComplete;
    }
    private static final int RpcReceiveComplete = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcReceiveComplete = 2
     * }
     */
    public static int RpcReceiveComplete() {
        return RpcReceiveComplete;
    }
    private static final int RpcClientDisconnect = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcClientDisconnect = 3
     * }
     */
    public static int RpcClientDisconnect() {
        return RpcClientDisconnect;
    }
    private static final int RpcClientCancel = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _RPC_ASYNC_EVENT.RpcClientCancel = 4
     * }
     */
    public static int RpcClientCancel() {
        return RpcClientCancel;
    }
    /**
     * {@snippet lang=c :
     * typedef union _RPC_ASYNC_NOTIFICATION_INFO {
     *     struct {
     *         PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     *         HANDLE hThread;
     *     } APC;
     *     struct {
     *         HANDLE hIOPort;
     *         DWORD dwNumberOfBytesTransferred;
     *         DWORD_PTR dwCompletionKey;
     *         LPOVERLAPPED lpOverlapped;
     *     } IOC;
     *     struct {
     *         HWND hWnd;
     *         UINT Msg;
     *     } HWND;
     *     HANDLE hEvent;
     *     PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
     * } *PRPC_ASYNC_NOTIFICATION_INFO
     * }
     */
    public static final AddressLayout PRPC_ASYNC_NOTIFICATION_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_ASYNC_STATE {
     *     unsigned int Size;
     *     unsigned long Signature;
     *     long Lock;
     *     unsigned long Flags;
     *     void *StubInfo;
     *     void *UserInfo;
     *     void *RuntimeInfo;
     *     RPC_ASYNC_EVENT Event;
     *     RPC_NOTIFICATION_TYPES NotificationType;
     *     RPC_ASYNC_NOTIFICATION_INFO u;
     *     LONG_PTR Reserved[4];
     * } *PRPC_ASYNC_STATE
     * }
     */
    public static final AddressLayout PRPC_ASYNC_STATE = winapi.C_POINTER;

    private static class RpcAsyncRegisterInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcAsyncRegisterInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static FunctionDescriptor RpcAsyncRegisterInfo$descriptor() {
        return RpcAsyncRegisterInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MethodHandle RpcAsyncRegisterInfo$handle() {
        return RpcAsyncRegisterInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MemorySegment RpcAsyncRegisterInfo$address() {
        return RpcAsyncRegisterInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncRegisterInfo(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static int RpcAsyncRegisterInfo(MemorySegment pAsync) {
        var mh$ = RpcAsyncRegisterInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncRegisterInfo", pAsync);
            }
            return (int)mh$.invokeExact(pAsync);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncInitializeHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcAsyncInitializeHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size)
     * }
     */
    public static FunctionDescriptor RpcAsyncInitializeHandle$descriptor() {
        return RpcAsyncInitializeHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size)
     * }
     */
    public static MethodHandle RpcAsyncInitializeHandle$handle() {
        return RpcAsyncInitializeHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size)
     * }
     */
    public static MemorySegment RpcAsyncInitializeHandle$address() {
        return RpcAsyncInitializeHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncInitializeHandle(PRPC_ASYNC_STATE pAsync, unsigned int Size)
     * }
     */
    public static int RpcAsyncInitializeHandle(MemorySegment pAsync, int Size) {
        var mh$ = RpcAsyncInitializeHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncInitializeHandle", pAsync, Size);
            }
            return (int)mh$.invokeExact(pAsync, Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncGetCallStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcAsyncGetCallStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static FunctionDescriptor RpcAsyncGetCallStatus$descriptor() {
        return RpcAsyncGetCallStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MethodHandle RpcAsyncGetCallStatus$handle() {
        return RpcAsyncGetCallStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MemorySegment RpcAsyncGetCallStatus$address() {
        return RpcAsyncGetCallStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncGetCallStatus(PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static int RpcAsyncGetCallStatus(MemorySegment pAsync) {
        var mh$ = RpcAsyncGetCallStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncGetCallStatus", pAsync);
            }
            return (int)mh$.invokeExact(pAsync);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncCompleteCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcAsyncCompleteCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply)
     * }
     */
    public static FunctionDescriptor RpcAsyncCompleteCall$descriptor() {
        return RpcAsyncCompleteCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply)
     * }
     */
    public static MethodHandle RpcAsyncCompleteCall$handle() {
        return RpcAsyncCompleteCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply)
     * }
     */
    public static MemorySegment RpcAsyncCompleteCall$address() {
        return RpcAsyncCompleteCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCompleteCall(PRPC_ASYNC_STATE pAsync, void *Reply)
     * }
     */
    public static int RpcAsyncCompleteCall(MemorySegment pAsync, MemorySegment Reply) {
        var mh$ = RpcAsyncCompleteCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncCompleteCall", pAsync, Reply);
            }
            return (int)mh$.invokeExact(pAsync, Reply);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncAbortCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcAsyncAbortCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor RpcAsyncAbortCall$descriptor() {
        return RpcAsyncAbortCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle RpcAsyncAbortCall$handle() {
        return RpcAsyncAbortCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static MemorySegment RpcAsyncAbortCall$address() {
        return RpcAsyncAbortCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static int RpcAsyncAbortCall(MemorySegment pAsync, int ExceptionCode) {
        var mh$ = RpcAsyncAbortCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncAbortCall", pAsync, ExceptionCode);
            }
            return (int)mh$.invokeExact(pAsync, ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncCancelCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcAsyncCancelCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort)
     * }
     */
    public static FunctionDescriptor RpcAsyncCancelCall$descriptor() {
        return RpcAsyncCancelCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort)
     * }
     */
    public static MethodHandle RpcAsyncCancelCall$handle() {
        return RpcAsyncCancelCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort)
     * }
     */
    public static MemorySegment RpcAsyncCancelCall$address() {
        return RpcAsyncCancelCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCancelCall(PRPC_ASYNC_STATE pAsync, BOOL fAbort)
     * }
     */
    public static int RpcAsyncCancelCall(MemorySegment pAsync, int fAbort) {
        var mh$ = RpcAsyncCancelCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncCancelCall", pAsync, fAbort);
            }
            return (int)mh$.invokeExact(pAsync, fAbort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int eeptAnsiString = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptAnsiString = 1
     * }
     */
    public static int eeptAnsiString() {
        return eeptAnsiString;
    }
    private static final int eeptUnicodeString = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptUnicodeString = 2
     * }
     */
    public static int eeptUnicodeString() {
        return eeptUnicodeString;
    }
    private static final int eeptLongVal = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptLongVal = 3
     * }
     */
    public static int eeptLongVal() {
        return eeptLongVal;
    }
    private static final int eeptShortVal = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptShortVal = 4
     * }
     */
    public static int eeptShortVal() {
        return eeptShortVal;
    }
    private static final int eeptPointerVal = (int)5L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptPointerVal = 5
     * }
     */
    public static int eeptPointerVal() {
        return eeptPointerVal;
    }
    private static final int eeptNone = (int)6L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptNone = 6
     * }
     */
    public static int eeptNone() {
        return eeptNone;
    }
    private static final int eeptBinary = (int)7L;
    /**
     * {@snippet lang=c :
     * enum tagExtendedErrorParamTypes.eeptBinary = 7
     * }
     */
    public static int eeptBinary() {
        return eeptBinary;
    }

    private static class RpcErrorStartEnumeration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorStartEnumeration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static FunctionDescriptor RpcErrorStartEnumeration$descriptor() {
        return RpcErrorStartEnumeration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MethodHandle RpcErrorStartEnumeration$handle() {
        return RpcErrorStartEnumeration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MemorySegment RpcErrorStartEnumeration$address() {
        return RpcErrorStartEnumeration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorStartEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static int RpcErrorStartEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorStartEnumeration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorStartEnumeration", EnumHandle);
            }
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorGetNextRecord {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorGetNextRecord");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static FunctionDescriptor RpcErrorGetNextRecord$descriptor() {
        return RpcErrorGetNextRecord.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static MethodHandle RpcErrorGetNextRecord$handle() {
        return RpcErrorGetNextRecord.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static MemorySegment RpcErrorGetNextRecord$address() {
        return RpcErrorGetNextRecord.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNextRecord(RPC_ERROR_ENUM_HANDLE *EnumHandle, BOOL CopyStrings, RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static int RpcErrorGetNextRecord(MemorySegment EnumHandle, int CopyStrings, MemorySegment ErrorInfo) {
        var mh$ = RpcErrorGetNextRecord.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorGetNextRecord", EnumHandle, CopyStrings, ErrorInfo);
            }
            return (int)mh$.invokeExact(EnumHandle, CopyStrings, ErrorInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorEndEnumeration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorEndEnumeration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static FunctionDescriptor RpcErrorEndEnumeration$descriptor() {
        return RpcErrorEndEnumeration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MethodHandle RpcErrorEndEnumeration$handle() {
        return RpcErrorEndEnumeration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MemorySegment RpcErrorEndEnumeration$address() {
        return RpcErrorEndEnumeration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorEndEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static int RpcErrorEndEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorEndEnumeration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorEndEnumeration", EnumHandle);
            }
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorResetEnumeration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorResetEnumeration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static FunctionDescriptor RpcErrorResetEnumeration$descriptor() {
        return RpcErrorResetEnumeration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MethodHandle RpcErrorResetEnumeration$handle() {
        return RpcErrorResetEnumeration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MemorySegment RpcErrorResetEnumeration$address() {
        return RpcErrorResetEnumeration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorResetEnumeration(RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static int RpcErrorResetEnumeration(MemorySegment EnumHandle) {
        var mh$ = RpcErrorResetEnumeration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorResetEnumeration", EnumHandle);
            }
            return (int)mh$.invokeExact(EnumHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorGetNumberOfRecords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorGetNumberOfRecords");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records)
     * }
     */
    public static FunctionDescriptor RpcErrorGetNumberOfRecords$descriptor() {
        return RpcErrorGetNumberOfRecords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records)
     * }
     */
    public static MethodHandle RpcErrorGetNumberOfRecords$handle() {
        return RpcErrorGetNumberOfRecords.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records)
     * }
     */
    public static MemorySegment RpcErrorGetNumberOfRecords$address() {
        return RpcErrorGetNumberOfRecords.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorGetNumberOfRecords(RPC_ERROR_ENUM_HANDLE *EnumHandle, int *Records)
     * }
     */
    public static int RpcErrorGetNumberOfRecords(MemorySegment EnumHandle, MemorySegment Records) {
        var mh$ = RpcErrorGetNumberOfRecords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorGetNumberOfRecords", EnumHandle, Records);
            }
            return (int)mh$.invokeExact(EnumHandle, Records);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorSaveErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorSaveErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize)
     * }
     */
    public static FunctionDescriptor RpcErrorSaveErrorInfo$descriptor() {
        return RpcErrorSaveErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize)
     * }
     */
    public static MethodHandle RpcErrorSaveErrorInfo$handle() {
        return RpcErrorSaveErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize)
     * }
     */
    public static MemorySegment RpcErrorSaveErrorInfo$address() {
        return RpcErrorSaveErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorSaveErrorInfo(RPC_ERROR_ENUM_HANDLE *EnumHandle, PVOID *ErrorBlob, size_t *BlobSize)
     * }
     */
    public static int RpcErrorSaveErrorInfo(MemorySegment EnumHandle, MemorySegment ErrorBlob, MemorySegment BlobSize) {
        var mh$ = RpcErrorSaveErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorSaveErrorInfo", EnumHandle, ErrorBlob, BlobSize);
            }
            return (int)mh$.invokeExact(EnumHandle, ErrorBlob, BlobSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorLoadErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorLoadErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static FunctionDescriptor RpcErrorLoadErrorInfo$descriptor() {
        return RpcErrorLoadErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MethodHandle RpcErrorLoadErrorInfo$handle() {
        return RpcErrorLoadErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static MemorySegment RpcErrorLoadErrorInfo$address() {
        return RpcErrorLoadErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorLoadErrorInfo(PVOID ErrorBlob, size_t BlobSize, RPC_ERROR_ENUM_HANDLE *EnumHandle)
     * }
     */
    public static int RpcErrorLoadErrorInfo(MemorySegment ErrorBlob, long BlobSize, MemorySegment EnumHandle) {
        var mh$ = RpcErrorLoadErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorLoadErrorInfo", ErrorBlob, BlobSize, EnumHandle);
            }
            return (int)mh$.invokeExact(ErrorBlob, BlobSize, EnumHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorAddRecord {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorAddRecord");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static FunctionDescriptor RpcErrorAddRecord$descriptor() {
        return RpcErrorAddRecord.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static MethodHandle RpcErrorAddRecord$handle() {
        return RpcErrorAddRecord.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static MemorySegment RpcErrorAddRecord$address() {
        return RpcErrorAddRecord.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcErrorAddRecord(RPC_EXTENDED_ERROR_INFO *ErrorInfo)
     * }
     */
    public static int RpcErrorAddRecord(MemorySegment ErrorInfo) {
        var mh$ = RpcErrorAddRecord.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorAddRecord", ErrorInfo);
            }
            return (int)mh$.invokeExact(ErrorInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcErrorClearInformation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcErrorClearInformation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void RpcErrorClearInformation()
     * }
     */
    public static FunctionDescriptor RpcErrorClearInformation$descriptor() {
        return RpcErrorClearInformation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void RpcErrorClearInformation()
     * }
     */
    public static MethodHandle RpcErrorClearInformation$handle() {
        return RpcErrorClearInformation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void RpcErrorClearInformation()
     * }
     */
    public static MemorySegment RpcErrorClearInformation$address() {
        return RpcErrorClearInformation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void RpcErrorClearInformation()
     * }
     */
    public static void RpcErrorClearInformation() {
        var mh$ = RpcErrorClearInformation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcErrorClearInformation");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcAsyncCleanupThread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcAsyncCleanupThread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout)
     * }
     */
    public static FunctionDescriptor RpcAsyncCleanupThread$descriptor() {
        return RpcAsyncCleanupThread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout)
     * }
     */
    public static MethodHandle RpcAsyncCleanupThread$handle() {
        return RpcAsyncCleanupThread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout)
     * }
     */
    public static MemorySegment RpcAsyncCleanupThread$address() {
        return RpcAsyncCleanupThread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcAsyncCleanupThread(DWORD dwTimeout)
     * }
     */
    public static int RpcAsyncCleanupThread(int dwTimeout) {
        var mh$ = RpcAsyncCleanupThread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcAsyncCleanupThread", dwTimeout);
            }
            return (int)mh$.invokeExact(dwTimeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcGetAuthorizationContextForClient {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            _LUID.layout(),
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcGetAuthorizationContextForClient");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext)
     * }
     */
    public static FunctionDescriptor RpcGetAuthorizationContextForClient$descriptor() {
        return RpcGetAuthorizationContextForClient.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext)
     * }
     */
    public static MethodHandle RpcGetAuthorizationContextForClient$handle() {
        return RpcGetAuthorizationContextForClient.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext)
     * }
     */
    public static MemorySegment RpcGetAuthorizationContextForClient$address() {
        return RpcGetAuthorizationContextForClient.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcGetAuthorizationContextForClient(RPC_BINDING_HANDLE ClientBinding, BOOL ImpersonateOnReturn, PVOID Reserved1, PLARGE_INTEGER pExpirationTime, LUID Reserved2, DWORD Reserved3, PVOID Reserved4, PVOID *pAuthzClientContext)
     * }
     */
    public static int RpcGetAuthorizationContextForClient(MemorySegment ClientBinding, int ImpersonateOnReturn, MemorySegment Reserved1, MemorySegment pExpirationTime, MemorySegment Reserved2, int Reserved3, MemorySegment Reserved4, MemorySegment pAuthzClientContext) {
        var mh$ = RpcGetAuthorizationContextForClient.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcGetAuthorizationContextForClient", ClientBinding, ImpersonateOnReturn, Reserved1, pExpirationTime, Reserved2, Reserved3, Reserved4, pAuthzClientContext);
            }
            return (int)mh$.invokeExact(ClientBinding, ImpersonateOnReturn, Reserved1, pExpirationTime, Reserved2, Reserved3, Reserved4, pAuthzClientContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcFreeAuthorizationContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcFreeAuthorizationContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext)
     * }
     */
    public static FunctionDescriptor RpcFreeAuthorizationContext$descriptor() {
        return RpcFreeAuthorizationContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext)
     * }
     */
    public static MethodHandle RpcFreeAuthorizationContext$handle() {
        return RpcFreeAuthorizationContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext)
     * }
     */
    public static MemorySegment RpcFreeAuthorizationContext$address() {
        return RpcFreeAuthorizationContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcFreeAuthorizationContext(PVOID *pAuthzClientContext)
     * }
     */
    public static int RpcFreeAuthorizationContext(MemorySegment pAuthzClientContext) {
        var mh$ = RpcFreeAuthorizationContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcFreeAuthorizationContext", pAuthzClientContext);
            }
            return (int)mh$.invokeExact(pAuthzClientContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsContextLockExclusive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcSsContextLockExclusive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static FunctionDescriptor RpcSsContextLockExclusive$descriptor() {
        return RpcSsContextLockExclusive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static MethodHandle RpcSsContextLockExclusive$handle() {
        return RpcSsContextLockExclusive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static MemorySegment RpcSsContextLockExclusive$address() {
        return RpcSsContextLockExclusive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockExclusive(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static int RpcSsContextLockExclusive(MemorySegment ServerBindingHandle, MemorySegment UserContext) {
        var mh$ = RpcSsContextLockExclusive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsContextLockExclusive", ServerBindingHandle, UserContext);
            }
            return (int)mh$.invokeExact(ServerBindingHandle, UserContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcSsContextLockShared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcSsContextLockShared");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static FunctionDescriptor RpcSsContextLockShared$descriptor() {
        return RpcSsContextLockShared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static MethodHandle RpcSsContextLockShared$handle() {
        return RpcSsContextLockShared.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static MemorySegment RpcSsContextLockShared$address() {
        return RpcSsContextLockShared.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcSsContextLockShared(RPC_BINDING_HANDLE ServerBindingHandle, PVOID UserContext)
     * }
     */
    public static int RpcSsContextLockShared(MemorySegment ServerBindingHandle, MemorySegment UserContext) {
        var mh$ = RpcSsContextLockShared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcSsContextLockShared", ServerBindingHandle, UserContext);
            }
            return (int)mh$.invokeExact(ServerBindingHandle, UserContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int rlafInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagRpcLocalAddressFormat.rlafInvalid = 0
     * }
     */
    public static int rlafInvalid() {
        return rlafInvalid;
    }
    private static final int rlafIPv4 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRpcLocalAddressFormat.rlafIPv4 = 1
     * }
     */
    public static int rlafIPv4() {
        return rlafIPv4;
    }
    private static final int rlafIPv6 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRpcLocalAddressFormat.rlafIPv6 = 2
     * }
     */
    public static int rlafIPv6() {
        return rlafIPv6;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _RPC_CALL_LOCAL_ADDRESS_V1 {
     *     unsigned int Version;
     *     void *Buffer;
     *     unsigned long BufferSize;
     *     RpcLocalAddressFormat AddressFormat;
     * } *PRPC_CALL_LOCAL_ADDRESS_V1
     * }
     */
    public static final AddressLayout PRPC_CALL_LOCAL_ADDRESS_V1 = winapi.C_POINTER;
    private static final int rctInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallType.rctInvalid = 0
     * }
     */
    public static int rctInvalid() {
        return rctInvalid;
    }
    private static final int rctNormal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallType.rctNormal = 1
     * }
     */
    public static int rctNormal() {
        return rctNormal;
    }
    private static final int rctTraining = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallType.rctTraining = 2
     * }
     */
    public static int rctTraining() {
        return rctTraining;
    }
    private static final int rctGuaranteed = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallType.rctGuaranteed = 3
     * }
     */
    public static int rctGuaranteed() {
        return rctGuaranteed;
    }
    private static final int rcclInvalid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallClientLocality.rcclInvalid = 0
     * }
     */
    public static int rcclInvalid() {
        return rcclInvalid;
    }
    private static final int rcclLocal = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallClientLocality.rcclLocal = 1
     * }
     */
    public static int rcclLocal() {
        return rcclLocal;
    }
    private static final int rcclRemote = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallClientLocality.rcclRemote = 2
     * }
     */
    public static int rcclRemote() {
        return rcclRemote;
    }
    private static final int rcclClientUnknownLocality = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagRpcCallClientLocality.rcclClientUnknownLocality = 3
     * }
     */
    public static int rcclClientUnknownLocality() {
        return rcclClientUnknownLocality;
    }

    private static class RpcServerInqCallAttributesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInqCallAttributesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static FunctionDescriptor RpcServerInqCallAttributesW$descriptor() {
        return RpcServerInqCallAttributesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static MethodHandle RpcServerInqCallAttributesW$handle() {
        return RpcServerInqCallAttributesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static MemorySegment RpcServerInqCallAttributesW$address() {
        return RpcServerInqCallAttributesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesW(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static int RpcServerInqCallAttributesW(MemorySegment ClientBinding, MemorySegment RpcCallAttributes) {
        var mh$ = RpcServerInqCallAttributesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqCallAttributesW", ClientBinding, RpcCallAttributes);
            }
            return (int)mh$.invokeExact(ClientBinding, RpcCallAttributes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerInqCallAttributesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerInqCallAttributesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static FunctionDescriptor RpcServerInqCallAttributesA$descriptor() {
        return RpcServerInqCallAttributesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static MethodHandle RpcServerInqCallAttributesA$handle() {
        return RpcServerInqCallAttributesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static MemorySegment RpcServerInqCallAttributesA$address() {
        return RpcServerInqCallAttributesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerInqCallAttributesA(RPC_BINDING_HANDLE ClientBinding, void *RpcCallAttributes)
     * }
     */
    public static int RpcServerInqCallAttributesA(MemorySegment ClientBinding, MemorySegment RpcCallAttributes) {
        var mh$ = RpcServerInqCallAttributesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerInqCallAttributesA", ClientBinding, RpcCallAttributes);
            }
            return (int)mh$.invokeExact(ClientBinding, RpcCallAttributes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int RpcNotificationCallNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATIONS.RpcNotificationCallNone = 0
     * }
     */
    public static int RpcNotificationCallNone() {
        return RpcNotificationCallNone;
    }
    private static final int RpcNotificationClientDisconnect = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATIONS.RpcNotificationClientDisconnect = 1
     * }
     */
    public static int RpcNotificationClientDisconnect() {
        return RpcNotificationClientDisconnect;
    }
    private static final int RpcNotificationCallCancel = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _RPC_NOTIFICATIONS.RpcNotificationCallCancel = 2
     * }
     */
    public static int RpcNotificationCallCancel() {
        return RpcNotificationCallCancel;
    }

    private static class RpcServerSubscribeForNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerSubscribeForNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo)
     * }
     */
    public static FunctionDescriptor RpcServerSubscribeForNotification$descriptor() {
        return RpcServerSubscribeForNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo)
     * }
     */
    public static MethodHandle RpcServerSubscribeForNotification$handle() {
        return RpcServerSubscribeForNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo)
     * }
     */
    public static MemorySegment RpcServerSubscribeForNotification$address() {
        return RpcServerSubscribeForNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerSubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, RPC_NOTIFICATION_TYPES NotificationType, RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo)
     * }
     */
    public static int RpcServerSubscribeForNotification(MemorySegment Binding, int Notification, int NotificationType, MemorySegment NotificationInfo) {
        var mh$ = RpcServerSubscribeForNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerSubscribeForNotification", Binding, Notification, NotificationType, NotificationInfo);
            }
            return (int)mh$.invokeExact(Binding, Notification, NotificationType, NotificationInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcServerUnsubscribeForNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcServerUnsubscribeForNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued)
     * }
     */
    public static FunctionDescriptor RpcServerUnsubscribeForNotification$descriptor() {
        return RpcServerUnsubscribeForNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued)
     * }
     */
    public static MethodHandle RpcServerUnsubscribeForNotification$handle() {
        return RpcServerUnsubscribeForNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued)
     * }
     */
    public static MemorySegment RpcServerUnsubscribeForNotification$address() {
        return RpcServerUnsubscribeForNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcServerUnsubscribeForNotification(RPC_BINDING_HANDLE Binding, RPC_NOTIFICATIONS Notification, unsigned long *NotificationsQueued)
     * }
     */
    public static int RpcServerUnsubscribeForNotification(MemorySegment Binding, int Notification, MemorySegment NotificationsQueued) {
        var mh$ = RpcServerUnsubscribeForNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcServerUnsubscribeForNotification", Binding, Notification, NotificationsQueued);
            }
            return (int)mh$.invokeExact(Binding, Notification, NotificationsQueued);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingBind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingBind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static FunctionDescriptor RpcBindingBind$descriptor() {
        return RpcBindingBind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MethodHandle RpcBindingBind$handle() {
        return RpcBindingBind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static MemorySegment RpcBindingBind$address() {
        return RpcBindingBind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingBind(PRPC_ASYNC_STATE pAsync, RPC_BINDING_HANDLE Binding, RPC_IF_HANDLE IfSpec)
     * }
     */
    public static int RpcBindingBind(MemorySegment pAsync, MemorySegment Binding, MemorySegment IfSpec) {
        var mh$ = RpcBindingBind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingBind", pAsync, Binding, IfSpec);
            }
            return (int)mh$.invokeExact(pAsync, Binding, IfSpec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RpcBindingUnbind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RpcBindingUnbind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static FunctionDescriptor RpcBindingUnbind$descriptor() {
        return RpcBindingUnbind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MethodHandle RpcBindingUnbind$handle() {
        return RpcBindingUnbind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static MemorySegment RpcBindingUnbind$address() {
        return RpcBindingUnbind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS RpcBindingUnbind(RPC_BINDING_HANDLE Binding)
     * }
     */
    public static int RpcBindingUnbind(MemorySegment Binding) {
        var mh$ = RpcBindingUnbind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RpcBindingUnbind", Binding);
            }
            return (int)mh$.invokeExact(Binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcAsyncSetHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcAsyncSetHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static FunctionDescriptor I_RpcAsyncSetHandle$descriptor() {
        return I_RpcAsyncSetHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MethodHandle I_RpcAsyncSetHandle$handle() {
        return I_RpcAsyncSetHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static MemorySegment I_RpcAsyncSetHandle$address() {
        return I_RpcAsyncSetHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncSetHandle(PRPC_MESSAGE Message, PRPC_ASYNC_STATE pAsync)
     * }
     */
    public static int I_RpcAsyncSetHandle(MemorySegment Message, MemorySegment pAsync) {
        var mh$ = I_RpcAsyncSetHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcAsyncSetHandle", Message, pAsync);
            }
            return (int)mh$.invokeExact(Message, pAsync);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcAsyncAbortCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcAsyncAbortCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor I_RpcAsyncAbortCall$descriptor() {
        return I_RpcAsyncAbortCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle I_RpcAsyncAbortCall$handle() {
        return I_RpcAsyncAbortCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static MemorySegment I_RpcAsyncAbortCall$address() {
        return I_RpcAsyncAbortCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcAsyncAbortCall(PRPC_ASYNC_STATE pAsync, unsigned long ExceptionCode)
     * }
     */
    public static int I_RpcAsyncAbortCall(MemorySegment pAsync, int ExceptionCode) {
        var mh$ = I_RpcAsyncAbortCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcAsyncAbortCall", pAsync, ExceptionCode);
            }
            return (int)mh$.invokeExact(pAsync, ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcExceptionFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcExceptionFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static FunctionDescriptor I_RpcExceptionFilter$descriptor() {
        return I_RpcExceptionFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MethodHandle I_RpcExceptionFilter$handle() {
        return I_RpcExceptionFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static MemorySegment I_RpcExceptionFilter$address() {
        return I_RpcExceptionFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int I_RpcExceptionFilter(unsigned long ExceptionCode)
     * }
     */
    public static int I_RpcExceptionFilter(int ExceptionCode) {
        var mh$ = I_RpcExceptionFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcExceptionFilter", ExceptionCode);
            }
            return (int)mh$.invokeExact(ExceptionCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class I_RpcBindingInqClientTokenAttributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("I_RpcBindingInqClientTokenAttributes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId)
     * }
     */
    public static FunctionDescriptor I_RpcBindingInqClientTokenAttributes$descriptor() {
        return I_RpcBindingInqClientTokenAttributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId)
     * }
     */
    public static MethodHandle I_RpcBindingInqClientTokenAttributes$handle() {
        return I_RpcBindingInqClientTokenAttributes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId)
     * }
     */
    public static MemorySegment I_RpcBindingInqClientTokenAttributes$address() {
        return I_RpcBindingInqClientTokenAttributes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * RPC_STATUS I_RpcBindingInqClientTokenAttributes(RPC_BINDING_HANDLE Binding, LUID *TokenId, LUID *AuthenticationId, LUID *ModifiedId)
     * }
     */
    public static int I_RpcBindingInqClientTokenAttributes(MemorySegment Binding, MemorySegment TokenId, MemorySegment AuthenticationId, MemorySegment ModifiedId) {
        var mh$ = I_RpcBindingInqClientTokenAttributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("I_RpcBindingInqClientTokenAttributes", Binding, TokenId, AuthenticationId, ModifiedId);
            }
            return (int)mh$.invokeExact(Binding, TokenId, AuthenticationId, ModifiedId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CommandLineToArgvW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CommandLineToArgvW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LPWSTR *CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs)
     * }
     */
    public static FunctionDescriptor CommandLineToArgvW$descriptor() {
        return CommandLineToArgvW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LPWSTR *CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs)
     * }
     */
    public static MethodHandle CommandLineToArgvW$handle() {
        return CommandLineToArgvW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LPWSTR *CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs)
     * }
     */
    public static MemorySegment CommandLineToArgvW$address() {
        return CommandLineToArgvW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LPWSTR *CommandLineToArgvW(LPCWSTR lpCmdLine, int *pNumArgs)
     * }
     */
    public static MemorySegment CommandLineToArgvW(MemorySegment lpCmdLine, MemorySegment pNumArgs) {
        var mh$ = CommandLineToArgvW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CommandLineToArgvW", lpCmdLine, pNumArgs);
            }
            return (MemorySegment)mh$.invokeExact(lpCmdLine, pNumArgs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct HDROP__ {
     *     int unused;
     * } *HDROP
     * }
     */
    public static final AddressLayout HDROP = winapi.C_POINTER;

    private static class DragQueryFileA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DragQueryFileA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch)
     * }
     */
    public static FunctionDescriptor DragQueryFileA$descriptor() {
        return DragQueryFileA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch)
     * }
     */
    public static MethodHandle DragQueryFileA$handle() {
        return DragQueryFileA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch)
     * }
     */
    public static MemorySegment DragQueryFileA$address() {
        return DragQueryFileA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT DragQueryFileA(HDROP hDrop, UINT iFile, LPSTR lpszFile, UINT cch)
     * }
     */
    public static int DragQueryFileA(MemorySegment hDrop, int iFile, MemorySegment lpszFile, int cch) {
        var mh$ = DragQueryFileA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragQueryFileA", hDrop, iFile, lpszFile, cch);
            }
            return (int)mh$.invokeExact(hDrop, iFile, lpszFile, cch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DragQueryFileW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DragQueryFileW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch)
     * }
     */
    public static FunctionDescriptor DragQueryFileW$descriptor() {
        return DragQueryFileW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch)
     * }
     */
    public static MethodHandle DragQueryFileW$handle() {
        return DragQueryFileW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch)
     * }
     */
    public static MemorySegment DragQueryFileW$address() {
        return DragQueryFileW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT DragQueryFileW(HDROP hDrop, UINT iFile, LPWSTR lpszFile, UINT cch)
     * }
     */
    public static int DragQueryFileW(MemorySegment hDrop, int iFile, MemorySegment lpszFile, int cch) {
        var mh$ = DragQueryFileW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragQueryFileW", hDrop, iFile, lpszFile, cch);
            }
            return (int)mh$.invokeExact(hDrop, iFile, lpszFile, cch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DragQueryPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DragQueryPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL DragQueryPoint(HDROP hDrop, POINT *ppt)
     * }
     */
    public static FunctionDescriptor DragQueryPoint$descriptor() {
        return DragQueryPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL DragQueryPoint(HDROP hDrop, POINT *ppt)
     * }
     */
    public static MethodHandle DragQueryPoint$handle() {
        return DragQueryPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL DragQueryPoint(HDROP hDrop, POINT *ppt)
     * }
     */
    public static MemorySegment DragQueryPoint$address() {
        return DragQueryPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL DragQueryPoint(HDROP hDrop, POINT *ppt)
     * }
     */
    public static int DragQueryPoint(MemorySegment hDrop, MemorySegment ppt) {
        var mh$ = DragQueryPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragQueryPoint", hDrop, ppt);
            }
            return (int)mh$.invokeExact(hDrop, ppt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DragFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DragFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void DragFinish(HDROP hDrop)
     * }
     */
    public static FunctionDescriptor DragFinish$descriptor() {
        return DragFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void DragFinish(HDROP hDrop)
     * }
     */
    public static MethodHandle DragFinish$handle() {
        return DragFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void DragFinish(HDROP hDrop)
     * }
     */
    public static MemorySegment DragFinish$address() {
        return DragFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void DragFinish(HDROP hDrop)
     * }
     */
    public static void DragFinish(MemorySegment hDrop) {
        var mh$ = DragFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragFinish", hDrop);
            }
            mh$.invokeExact(hDrop);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DragAcceptFiles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DragAcceptFiles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void DragAcceptFiles(HWND hWnd, BOOL fAccept)
     * }
     */
    public static FunctionDescriptor DragAcceptFiles$descriptor() {
        return DragAcceptFiles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void DragAcceptFiles(HWND hWnd, BOOL fAccept)
     * }
     */
    public static MethodHandle DragAcceptFiles$handle() {
        return DragAcceptFiles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void DragAcceptFiles(HWND hWnd, BOOL fAccept)
     * }
     */
    public static MemorySegment DragAcceptFiles$address() {
        return DragAcceptFiles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void DragAcceptFiles(HWND hWnd, BOOL fAccept)
     * }
     */
    public static void DragAcceptFiles(MemorySegment hWnd, int fAccept) {
        var mh$ = DragAcceptFiles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DragAcceptFiles", hWnd, fAccept);
            }
            mh$.invokeExact(hWnd, fAccept);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellExecuteA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ShellExecuteA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static FunctionDescriptor ShellExecuteA$descriptor() {
        return ShellExecuteA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MethodHandle ShellExecuteA$handle() {
        return ShellExecuteA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MemorySegment ShellExecuteA$address() {
        return ShellExecuteA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MemorySegment ShellExecuteA(MemorySegment hwnd, MemorySegment lpOperation, MemorySegment lpFile, MemorySegment lpParameters, MemorySegment lpDirectory, int nShowCmd) {
        var mh$ = ShellExecuteA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellExecuteA", hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
            }
            return (MemorySegment)mh$.invokeExact(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellExecuteW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ShellExecuteW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static FunctionDescriptor ShellExecuteW$descriptor() {
        return ShellExecuteW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MethodHandle ShellExecuteW$handle() {
        return ShellExecuteW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MemorySegment ShellExecuteW$address() {
        return ShellExecuteW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd)
     * }
     */
    public static MemorySegment ShellExecuteW(MemorySegment hwnd, MemorySegment lpOperation, MemorySegment lpFile, MemorySegment lpParameters, MemorySegment lpDirectory, int nShowCmd) {
        var mh$ = ShellExecuteW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellExecuteW", hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
            }
            return (MemorySegment)mh$.invokeExact(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindExecutableA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FindExecutableA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult)
     * }
     */
    public static FunctionDescriptor FindExecutableA$descriptor() {
        return FindExecutableA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult)
     * }
     */
    public static MethodHandle FindExecutableA$handle() {
        return FindExecutableA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult)
     * }
     */
    public static MemorySegment FindExecutableA$address() {
        return FindExecutableA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult)
     * }
     */
    public static MemorySegment FindExecutableA(MemorySegment lpFile, MemorySegment lpDirectory, MemorySegment lpResult) {
        var mh$ = FindExecutableA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindExecutableA", lpFile, lpDirectory, lpResult);
            }
            return (MemorySegment)mh$.invokeExact(lpFile, lpDirectory, lpResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindExecutableW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FindExecutableW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult)
     * }
     */
    public static FunctionDescriptor FindExecutableW$descriptor() {
        return FindExecutableW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult)
     * }
     */
    public static MethodHandle FindExecutableW$handle() {
        return FindExecutableW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult)
     * }
     */
    public static MemorySegment FindExecutableW$address() {
        return FindExecutableW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HINSTANCE FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult)
     * }
     */
    public static MemorySegment FindExecutableW(MemorySegment lpFile, MemorySegment lpDirectory, MemorySegment lpResult) {
        var mh$ = FindExecutableW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindExecutableW", lpFile, lpDirectory, lpResult);
            }
            return (MemorySegment)mh$.invokeExact(lpFile, lpDirectory, lpResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellAboutA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ShellAboutA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static FunctionDescriptor ShellAboutA$descriptor() {
        return ShellAboutA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static MethodHandle ShellAboutA$handle() {
        return ShellAboutA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static MemorySegment ShellAboutA$address() {
        return ShellAboutA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static int ShellAboutA(MemorySegment hWnd, MemorySegment szApp, MemorySegment szOtherStuff, MemorySegment hIcon) {
        var mh$ = ShellAboutA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellAboutA", hWnd, szApp, szOtherStuff, hIcon);
            }
            return (int)mh$.invokeExact(hWnd, szApp, szOtherStuff, hIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellAboutW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ShellAboutW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static FunctionDescriptor ShellAboutW$descriptor() {
        return ShellAboutW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static MethodHandle ShellAboutW$handle() {
        return ShellAboutW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static MemorySegment ShellAboutW$address() {
        return ShellAboutW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon)
     * }
     */
    public static int ShellAboutW(MemorySegment hWnd, MemorySegment szApp, MemorySegment szOtherStuff, MemorySegment hIcon) {
        var mh$ = ShellAboutW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellAboutW", hWnd, szApp, szOtherStuff, hIcon);
            }
            return (int)mh$.invokeExact(hWnd, szApp, szOtherStuff, hIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DuplicateIcon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DuplicateIcon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon)
     * }
     */
    public static FunctionDescriptor DuplicateIcon$descriptor() {
        return DuplicateIcon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon)
     * }
     */
    public static MethodHandle DuplicateIcon$handle() {
        return DuplicateIcon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon)
     * }
     */
    public static MemorySegment DuplicateIcon$address() {
        return DuplicateIcon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon)
     * }
     */
    public static MemorySegment DuplicateIcon(MemorySegment hInst, MemorySegment hIcon) {
        var mh$ = DuplicateIcon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DuplicateIcon", hInst, hIcon);
            }
            return (MemorySegment)mh$.invokeExact(hInst, hIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractAssociatedIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtractAssociatedIconA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static FunctionDescriptor ExtractAssociatedIconA$descriptor() {
        return ExtractAssociatedIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MethodHandle ExtractAssociatedIconA$handle() {
        return ExtractAssociatedIconA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MemorySegment ExtractAssociatedIconA$address() {
        return ExtractAssociatedIconA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MemorySegment ExtractAssociatedIconA(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIcon) {
        var mh$ = ExtractAssociatedIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractAssociatedIconA", hInst, pszIconPath, piIcon);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractAssociatedIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtractAssociatedIconW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static FunctionDescriptor ExtractAssociatedIconW$descriptor() {
        return ExtractAssociatedIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MethodHandle ExtractAssociatedIconW$handle() {
        return ExtractAssociatedIconW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MemorySegment ExtractAssociatedIconW$address() {
        return ExtractAssociatedIconW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIcon)
     * }
     */
    public static MemorySegment ExtractAssociatedIconW(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIcon) {
        var mh$ = ExtractAssociatedIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractAssociatedIconW", hInst, pszIconPath, piIcon);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractAssociatedIconExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtractAssociatedIconExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static FunctionDescriptor ExtractAssociatedIconExA$descriptor() {
        return ExtractAssociatedIconExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MethodHandle ExtractAssociatedIconExA$handle() {
        return ExtractAssociatedIconExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MemorySegment ExtractAssociatedIconExA$address() {
        return ExtractAssociatedIconExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExA(HINSTANCE hInst, LPSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MemorySegment ExtractAssociatedIconExA(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIconIndex, MemorySegment piIconId) {
        var mh$ = ExtractAssociatedIconExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractAssociatedIconExA", hInst, pszIconPath, piIconIndex, piIconId);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIconIndex, piIconId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractAssociatedIconExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtractAssociatedIconExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static FunctionDescriptor ExtractAssociatedIconExW$descriptor() {
        return ExtractAssociatedIconExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MethodHandle ExtractAssociatedIconExW$handle() {
        return ExtractAssociatedIconExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MemorySegment ExtractAssociatedIconExW$address() {
        return ExtractAssociatedIconExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractAssociatedIconExW(HINSTANCE hInst, LPWSTR pszIconPath, WORD *piIconIndex, WORD *piIconId)
     * }
     */
    public static MemorySegment ExtractAssociatedIconExW(MemorySegment hInst, MemorySegment pszIconPath, MemorySegment piIconIndex, MemorySegment piIconId) {
        var mh$ = ExtractAssociatedIconExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractAssociatedIconExW", hInst, pszIconPath, piIconIndex, piIconId);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszIconPath, piIconIndex, piIconId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtractIconA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static FunctionDescriptor ExtractIconA$descriptor() {
        return ExtractIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MethodHandle ExtractIconA$handle() {
        return ExtractIconA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MemorySegment ExtractIconA$address() {
        return ExtractIconA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractIconA(HINSTANCE hInst, LPCSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MemorySegment ExtractIconA(MemorySegment hInst, MemorySegment pszExeFileName, int nIconIndex) {
        var mh$ = ExtractIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractIconA", hInst, pszExeFileName, nIconIndex);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszExeFileName, nIconIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtractIconW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static FunctionDescriptor ExtractIconW$descriptor() {
        return ExtractIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MethodHandle ExtractIconW$handle() {
        return ExtractIconW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MemorySegment ExtractIconW$address() {
        return ExtractIconW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HICON ExtractIconW(HINSTANCE hInst, LPCWSTR pszExeFileName, UINT nIconIndex)
     * }
     */
    public static MemorySegment ExtractIconW(MemorySegment hInst, MemorySegment pszExeFileName, int nIconIndex) {
        var mh$ = ExtractIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractIconW", hInst, pszExeFileName, nIconIndex);
            }
            return (MemorySegment)mh$.invokeExact(hInst, pszExeFileName, nIconIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _DRAGINFOA {
     *     UINT uSize;
     *     POINT pt;
     *     BOOL fNC;
     *     PZZSTR lpFileList;
     *     DWORD grfKeyState;
     * } *LPDRAGINFOA
     * }
     */
    public static final AddressLayout LPDRAGINFOA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRAGINFOW {
     *     UINT uSize;
     *     POINT pt;
     *     BOOL fNC;
     *     PZZWSTR lpFileList;
     *     DWORD grfKeyState;
     * } *LPDRAGINFOW
     * }
     */
    public static final AddressLayout LPDRAGINFOW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRAGINFOA LPDRAGINFO
     * }
     */
    public static final AddressLayout LPDRAGINFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _AppBarData {
     *     DWORD cbSize;
     *     HWND hWnd;
     *     UINT uCallbackMessage;
     *     UINT uEdge;
     *     RECT rc;
     *     LPARAM lParam;
     * } *PAPPBARDATA
     * }
     */
    public static final AddressLayout PAPPBARDATA = winapi.C_POINTER;

    private static class SHAppBarMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHAppBarMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData)
     * }
     */
    public static FunctionDescriptor SHAppBarMessage$descriptor() {
        return SHAppBarMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData)
     * }
     */
    public static MethodHandle SHAppBarMessage$handle() {
        return SHAppBarMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData)
     * }
     */
    public static MemorySegment SHAppBarMessage$address() {
        return SHAppBarMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT_PTR SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData)
     * }
     */
    public static long SHAppBarMessage(int dwMessage, MemorySegment pData) {
        var mh$ = SHAppBarMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHAppBarMessage", dwMessage, pData);
            }
            return (long)mh$.invokeExact(dwMessage, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DoEnvironmentSubstA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DoEnvironmentSubstA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc)
     * }
     */
    public static FunctionDescriptor DoEnvironmentSubstA$descriptor() {
        return DoEnvironmentSubstA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc)
     * }
     */
    public static MethodHandle DoEnvironmentSubstA$handle() {
        return DoEnvironmentSubstA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc)
     * }
     */
    public static MemorySegment DoEnvironmentSubstA$address() {
        return DoEnvironmentSubstA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstA(LPSTR pszSrc, UINT cchSrc)
     * }
     */
    public static int DoEnvironmentSubstA(MemorySegment pszSrc, int cchSrc) {
        var mh$ = DoEnvironmentSubstA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DoEnvironmentSubstA", pszSrc, cchSrc);
            }
            return (int)mh$.invokeExact(pszSrc, cchSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DoEnvironmentSubstW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DoEnvironmentSubstW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc)
     * }
     */
    public static FunctionDescriptor DoEnvironmentSubstW$descriptor() {
        return DoEnvironmentSubstW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc)
     * }
     */
    public static MethodHandle DoEnvironmentSubstW$handle() {
        return DoEnvironmentSubstW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc)
     * }
     */
    public static MemorySegment DoEnvironmentSubstW$address() {
        return DoEnvironmentSubstW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD DoEnvironmentSubstW(LPWSTR pszSrc, UINT cchSrc)
     * }
     */
    public static int DoEnvironmentSubstW(MemorySegment pszSrc, int cchSrc) {
        var mh$ = DoEnvironmentSubstW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DoEnvironmentSubstW", pszSrc, cchSrc);
            }
            return (int)mh$.invokeExact(pszSrc, cchSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractIconExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtractIconExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static FunctionDescriptor ExtractIconExA$descriptor() {
        return ExtractIconExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static MethodHandle ExtractIconExA$handle() {
        return ExtractIconExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static MemorySegment ExtractIconExA$address() {
        return ExtractIconExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static int ExtractIconExA(MemorySegment lpszFile, int nIconIndex, MemorySegment phiconLarge, MemorySegment phiconSmall, int nIcons) {
        var mh$ = ExtractIconExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractIconExA", lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
            }
            return (int)mh$.invokeExact(lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtractIconExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtractIconExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static FunctionDescriptor ExtractIconExW$descriptor() {
        return ExtractIconExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static MethodHandle ExtractIconExW$handle() {
        return ExtractIconExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static MemorySegment ExtractIconExW$address() {
        return ExtractIconExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons)
     * }
     */
    public static int ExtractIconExW(MemorySegment lpszFile, int nIconIndex, MemorySegment phiconLarge, MemorySegment phiconSmall, int nIcons) {
        var mh$ = ExtractIconExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtractIconExW", lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
            }
            return (int)mh$.invokeExact(lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef WORD FILEOP_FLAGS
     * }
     */
    public static final OfShort FILEOP_FLAGS = winapi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef WORD PRINTEROP_FLAGS
     * }
     */
    public static final OfShort PRINTEROP_FLAGS = winapi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef struct _SHFILEOPSTRUCTA {
     *     HWND hwnd;
     *     UINT wFunc;
     *     PCZZSTR pFrom;
     *     PCZZSTR pTo;
     *     FILEOP_FLAGS fFlags;
     *     BOOL fAnyOperationsAborted;
     *     LPVOID hNameMappings;
     *     PCSTR lpszProgressTitle;
     * } *LPSHFILEOPSTRUCTA
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCTA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHFILEOPSTRUCTW {
     *     HWND hwnd;
     *     UINT wFunc;
     *     PCZZWSTR pFrom;
     *     PCZZWSTR pTo;
     *     FILEOP_FLAGS fFlags;
     *     BOOL fAnyOperationsAborted;
     *     LPVOID hNameMappings;
     *     PCWSTR lpszProgressTitle;
     * } *LPSHFILEOPSTRUCTW
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCTW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT
     * }
     */
    public static final AddressLayout LPSHFILEOPSTRUCT = winapi.C_POINTER;

    private static class SHFileOperationA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHFileOperationA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
     * }
     */
    public static FunctionDescriptor SHFileOperationA$descriptor() {
        return SHFileOperationA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
     * }
     */
    public static MethodHandle SHFileOperationA$handle() {
        return SHFileOperationA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
     * }
     */
    public static MemorySegment SHFileOperationA$address() {
        return SHFileOperationA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp)
     * }
     */
    public static int SHFileOperationA(MemorySegment lpFileOp) {
        var mh$ = SHFileOperationA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHFileOperationA", lpFileOp);
            }
            return (int)mh$.invokeExact(lpFileOp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHFileOperationW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHFileOperationW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     * }
     */
    public static FunctionDescriptor SHFileOperationW$descriptor() {
        return SHFileOperationW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     * }
     */
    public static MethodHandle SHFileOperationW$handle() {
        return SHFileOperationW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     * }
     */
    public static MemorySegment SHFileOperationW$address() {
        return SHFileOperationW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp)
     * }
     */
    public static int SHFileOperationW(MemorySegment lpFileOp) {
        var mh$ = SHFileOperationW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHFileOperationW", lpFileOp);
            }
            return (int)mh$.invokeExact(lpFileOp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHFreeNameMappings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHFreeNameMappings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SHFreeNameMappings(HANDLE hNameMappings)
     * }
     */
    public static FunctionDescriptor SHFreeNameMappings$descriptor() {
        return SHFreeNameMappings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SHFreeNameMappings(HANDLE hNameMappings)
     * }
     */
    public static MethodHandle SHFreeNameMappings$handle() {
        return SHFreeNameMappings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SHFreeNameMappings(HANDLE hNameMappings)
     * }
     */
    public static MemorySegment SHFreeNameMappings$address() {
        return SHFreeNameMappings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SHFreeNameMappings(HANDLE hNameMappings)
     * }
     */
    public static void SHFreeNameMappings(MemorySegment hNameMappings) {
        var mh$ = SHFreeNameMappings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHFreeNameMappings", hNameMappings);
            }
            mh$.invokeExact(hNameMappings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SHNAMEMAPPINGA {
     *     LPSTR pszOldPath;
     *     LPSTR pszNewPath;
     *     int cchOldPath;
     *     int cchNewPath;
     * } *LPSHNAMEMAPPINGA
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPINGA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHNAMEMAPPINGW {
     *     LPWSTR pszOldPath;
     *     LPWSTR pszNewPath;
     *     int cchOldPath;
     *     int cchNewPath;
     * } *LPSHNAMEMAPPINGW
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPINGW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING
     * }
     */
    public static final AddressLayout LPSHNAMEMAPPING = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHELLEXECUTEINFOA {
     *     DWORD cbSize;
     *     ULONG fMask;
     *     HWND hwnd;
     *     LPCSTR lpVerb;
     *     LPCSTR lpFile;
     *     LPCSTR lpParameters;
     *     LPCSTR lpDirectory;
     *     int nShow;
     *     HINSTANCE hInstApp;
     *     void *lpIDList;
     *     LPCSTR lpClass;
     *     HKEY hkeyClass;
     *     DWORD dwHotKey;
     *     union {
     *         HANDLE hIcon;
     *         HANDLE hMonitor;
     *     };
     *     HANDLE hProcess;
     * } *LPSHELLEXECUTEINFOA
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFOA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SHELLEXECUTEINFOW {
     *     DWORD cbSize;
     *     ULONG fMask;
     *     HWND hwnd;
     *     LPCWSTR lpVerb;
     *     LPCWSTR lpFile;
     *     LPCWSTR lpParameters;
     *     LPCWSTR lpDirectory;
     *     int nShow;
     *     HINSTANCE hInstApp;
     *     void *lpIDList;
     *     LPCWSTR lpClass;
     *     HKEY hkeyClass;
     *     DWORD dwHotKey;
     *     union {
     *         HANDLE hIcon;
     *         HANDLE hMonitor;
     *     };
     *     HANDLE hProcess;
     * } *LPSHELLEXECUTEINFOW
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFOW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO
     * }
     */
    public static final AddressLayout LPSHELLEXECUTEINFO = winapi.C_POINTER;

    private static class ShellExecuteExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ShellExecuteExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExA(SHELLEXECUTEINFOA *pExecInfo)
     * }
     */
    public static FunctionDescriptor ShellExecuteExA$descriptor() {
        return ShellExecuteExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExA(SHELLEXECUTEINFOA *pExecInfo)
     * }
     */
    public static MethodHandle ShellExecuteExA$handle() {
        return ShellExecuteExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExA(SHELLEXECUTEINFOA *pExecInfo)
     * }
     */
    public static MemorySegment ShellExecuteExA$address() {
        return ShellExecuteExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExA(SHELLEXECUTEINFOA *pExecInfo)
     * }
     */
    public static int ShellExecuteExA(MemorySegment pExecInfo) {
        var mh$ = ShellExecuteExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellExecuteExA", pExecInfo);
            }
            return (int)mh$.invokeExact(pExecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ShellExecuteExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ShellExecuteExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo)
     * }
     */
    public static FunctionDescriptor ShellExecuteExW$descriptor() {
        return ShellExecuteExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo)
     * }
     */
    public static MethodHandle ShellExecuteExW$handle() {
        return ShellExecuteExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo)
     * }
     */
    public static MemorySegment ShellExecuteExW$address() {
        return ShellExecuteExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL ShellExecuteExW(SHELLEXECUTEINFOW *pExecInfo)
     * }
     */
    public static int ShellExecuteExW(MemorySegment pExecInfo) {
        var mh$ = ShellExecuteExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ShellExecuteExW", pExecInfo);
            }
            return (int)mh$.invokeExact(pExecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SHCREATEPROCESSINFOW {
     *     DWORD cbSize;
     *     ULONG fMask;
     *     HWND hwnd;
     *     LPCWSTR pszFile;
     *     LPCWSTR pszParameters;
     *     LPCWSTR pszCurrentDirectory;
     *     HANDLE hUserToken;
     *     LPSECURITY_ATTRIBUTES lpProcessAttributes;
     *     LPSECURITY_ATTRIBUTES lpThreadAttributes;
     *     BOOL bInheritHandles;
     *     DWORD dwCreationFlags;
     *     LPSTARTUPINFOW lpStartupInfo;
     *     LPPROCESS_INFORMATION lpProcessInformation;
     * } *PSHCREATEPROCESSINFOW
     * }
     */
    public static final AddressLayout PSHCREATEPROCESSINFOW = winapi.C_POINTER;

    private static class SHCreateProcessAsUserW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHCreateProcessAsUserW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi)
     * }
     */
    public static FunctionDescriptor SHCreateProcessAsUserW$descriptor() {
        return SHCreateProcessAsUserW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi)
     * }
     */
    public static MethodHandle SHCreateProcessAsUserW$handle() {
        return SHCreateProcessAsUserW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi)
     * }
     */
    public static MemorySegment SHCreateProcessAsUserW$address() {
        return SHCreateProcessAsUserW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi)
     * }
     */
    public static int SHCreateProcessAsUserW(MemorySegment pscpi) {
        var mh$ = SHCreateProcessAsUserW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHCreateProcessAsUserW", pscpi);
            }
            return (int)mh$.invokeExact(pscpi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHEvaluateSystemCommandTemplate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHEvaluateSystemCommandTemplate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
     * }
     */
    public static FunctionDescriptor SHEvaluateSystemCommandTemplate$descriptor() {
        return SHEvaluateSystemCommandTemplate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
     * }
     */
    public static MethodHandle SHEvaluateSystemCommandTemplate$handle() {
        return SHEvaluateSystemCommandTemplate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
     * }
     */
    public static MemorySegment SHEvaluateSystemCommandTemplate$address() {
        return SHEvaluateSystemCommandTemplate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHEvaluateSystemCommandTemplate(PCWSTR pszCmdTemplate, PWSTR *ppszApplication, PWSTR *ppszCommandLine, PWSTR *ppszParameters)
     * }
     */
    public static int SHEvaluateSystemCommandTemplate(MemorySegment pszCmdTemplate, MemorySegment ppszApplication, MemorySegment ppszCommandLine, MemorySegment ppszParameters) {
        var mh$ = SHEvaluateSystemCommandTemplate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHEvaluateSystemCommandTemplate", pszCmdTemplate, ppszApplication, ppszCommandLine, ppszParameters);
            }
            return (int)mh$.invokeExact(pszCmdTemplate, ppszApplication, ppszCommandLine, ppszParameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ASSOCCLASS_SHELL_KEY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_SHELL_KEY = 0
     * }
     */
    public static int ASSOCCLASS_SHELL_KEY() {
        return ASSOCCLASS_SHELL_KEY;
    }
    private static final int ASSOCCLASS_PROGID_KEY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_PROGID_KEY = 1
     * }
     */
    public static int ASSOCCLASS_PROGID_KEY() {
        return ASSOCCLASS_PROGID_KEY;
    }
    private static final int ASSOCCLASS_PROGID_STR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_PROGID_STR = 2
     * }
     */
    public static int ASSOCCLASS_PROGID_STR() {
        return ASSOCCLASS_PROGID_STR;
    }
    private static final int ASSOCCLASS_CLSID_KEY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_CLSID_KEY = 3
     * }
     */
    public static int ASSOCCLASS_CLSID_KEY() {
        return ASSOCCLASS_CLSID_KEY;
    }
    private static final int ASSOCCLASS_CLSID_STR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_CLSID_STR = 4
     * }
     */
    public static int ASSOCCLASS_CLSID_STR() {
        return ASSOCCLASS_CLSID_STR;
    }
    private static final int ASSOCCLASS_APP_KEY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_APP_KEY = 5
     * }
     */
    public static int ASSOCCLASS_APP_KEY() {
        return ASSOCCLASS_APP_KEY;
    }
    private static final int ASSOCCLASS_APP_STR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_APP_STR = 6
     * }
     */
    public static int ASSOCCLASS_APP_STR() {
        return ASSOCCLASS_APP_STR;
    }
    private static final int ASSOCCLASS_SYSTEM_STR = (int)7L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_SYSTEM_STR = 7
     * }
     */
    public static int ASSOCCLASS_SYSTEM_STR() {
        return ASSOCCLASS_SYSTEM_STR;
    }
    private static final int ASSOCCLASS_FOLDER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_FOLDER = 8
     * }
     */
    public static int ASSOCCLASS_FOLDER() {
        return ASSOCCLASS_FOLDER;
    }
    private static final int ASSOCCLASS_STAR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_STAR = 9
     * }
     */
    public static int ASSOCCLASS_STAR() {
        return ASSOCCLASS_STAR;
    }
    private static final int ASSOCCLASS_FIXED_PROGID_STR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_FIXED_PROGID_STR = 10
     * }
     */
    public static int ASSOCCLASS_FIXED_PROGID_STR() {
        return ASSOCCLASS_FIXED_PROGID_STR;
    }
    private static final int ASSOCCLASS_PROTOCOL_STR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum ASSOCCLASS.ASSOCCLASS_PROTOCOL_STR = 11
     * }
     */
    public static int ASSOCCLASS_PROTOCOL_STR() {
        return ASSOCCLASS_PROTOCOL_STR;
    }

    private static class AssocCreateForClasses {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AssocCreateForClasses");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID *const riid, void **ppv)
     * }
     */
    public static FunctionDescriptor AssocCreateForClasses$descriptor() {
        return AssocCreateForClasses.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID *const riid, void **ppv)
     * }
     */
    public static MethodHandle AssocCreateForClasses$handle() {
        return AssocCreateForClasses.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID *const riid, void **ppv)
     * }
     */
    public static MemorySegment AssocCreateForClasses$address() {
        return AssocCreateForClasses.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT AssocCreateForClasses(const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses, const IID *const riid, void **ppv)
     * }
     */
    public static int AssocCreateForClasses(MemorySegment rgClasses, int cClasses, MemorySegment riid, MemorySegment ppv) {
        var mh$ = AssocCreateForClasses.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AssocCreateForClasses", rgClasses, cClasses, riid, ppv);
            }
            return (int)mh$.invokeExact(rgClasses, cClasses, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SHQUERYRBINFO {
     *     DWORD cbSize;
     *     long long i64Size;
     *     long long i64NumItems;
     * } *LPSHQUERYRBINFO
     * }
     */
    public static final AddressLayout LPSHQUERYRBINFO = winapi.C_POINTER;

    private static class SHQueryRecycleBinA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHQueryRecycleBinA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static FunctionDescriptor SHQueryRecycleBinA$descriptor() {
        return SHQueryRecycleBinA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static MethodHandle SHQueryRecycleBinA$handle() {
        return SHQueryRecycleBinA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static MemorySegment SHQueryRecycleBinA$address() {
        return SHQueryRecycleBinA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static int SHQueryRecycleBinA(MemorySegment pszRootPath, MemorySegment pSHQueryRBInfo) {
        var mh$ = SHQueryRecycleBinA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHQueryRecycleBinA", pszRootPath, pSHQueryRBInfo);
            }
            return (int)mh$.invokeExact(pszRootPath, pSHQueryRBInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHQueryRecycleBinW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHQueryRecycleBinW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static FunctionDescriptor SHQueryRecycleBinW$descriptor() {
        return SHQueryRecycleBinW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static MethodHandle SHQueryRecycleBinW$handle() {
        return SHQueryRecycleBinW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static MemorySegment SHQueryRecycleBinW$address() {
        return SHQueryRecycleBinW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo)
     * }
     */
    public static int SHQueryRecycleBinW(MemorySegment pszRootPath, MemorySegment pSHQueryRBInfo) {
        var mh$ = SHQueryRecycleBinW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHQueryRecycleBinW", pszRootPath, pSHQueryRBInfo);
            }
            return (int)mh$.invokeExact(pszRootPath, pSHQueryRBInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHEmptyRecycleBinA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHEmptyRecycleBinA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor SHEmptyRecycleBinA$descriptor() {
        return SHEmptyRecycleBinA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static MethodHandle SHEmptyRecycleBinA$handle() {
        return SHEmptyRecycleBinA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static MemorySegment SHEmptyRecycleBinA$address() {
        return SHEmptyRecycleBinA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static int SHEmptyRecycleBinA(MemorySegment hwnd, MemorySegment pszRootPath, int dwFlags) {
        var mh$ = SHEmptyRecycleBinA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHEmptyRecycleBinA", hwnd, pszRootPath, dwFlags);
            }
            return (int)mh$.invokeExact(hwnd, pszRootPath, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHEmptyRecycleBinW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHEmptyRecycleBinW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor SHEmptyRecycleBinW$descriptor() {
        return SHEmptyRecycleBinW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static MethodHandle SHEmptyRecycleBinW$handle() {
        return SHEmptyRecycleBinW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static MemorySegment SHEmptyRecycleBinW$address() {
        return SHEmptyRecycleBinW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags)
     * }
     */
    public static int SHEmptyRecycleBinW(MemorySegment hwnd, MemorySegment pszRootPath, int dwFlags) {
        var mh$ = SHEmptyRecycleBinW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHEmptyRecycleBinW", hwnd, pszRootPath, dwFlags);
            }
            return (int)mh$.invokeExact(hwnd, pszRootPath, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int QUNS_NOT_PRESENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_NOT_PRESENT = 1
     * }
     */
    public static int QUNS_NOT_PRESENT() {
        return QUNS_NOT_PRESENT;
    }
    private static final int QUNS_BUSY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_BUSY = 2
     * }
     */
    public static int QUNS_BUSY() {
        return QUNS_BUSY;
    }
    private static final int QUNS_RUNNING_D3D_FULL_SCREEN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_RUNNING_D3D_FULL_SCREEN = 3
     * }
     */
    public static int QUNS_RUNNING_D3D_FULL_SCREEN() {
        return QUNS_RUNNING_D3D_FULL_SCREEN;
    }
    private static final int QUNS_PRESENTATION_MODE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_PRESENTATION_MODE = 4
     * }
     */
    public static int QUNS_PRESENTATION_MODE() {
        return QUNS_PRESENTATION_MODE;
    }
    private static final int QUNS_ACCEPTS_NOTIFICATIONS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_ACCEPTS_NOTIFICATIONS = 5
     * }
     */
    public static int QUNS_ACCEPTS_NOTIFICATIONS() {
        return QUNS_ACCEPTS_NOTIFICATIONS;
    }
    private static final int QUNS_QUIET_TIME = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_QUIET_TIME = 6
     * }
     */
    public static int QUNS_QUIET_TIME() {
        return QUNS_QUIET_TIME;
    }
    private static final int QUNS_APP = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.QUNS_APP = 7
     * }
     */
    public static int QUNS_APP() {
        return QUNS_APP;
    }

    private static class SHQueryUserNotificationState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHQueryUserNotificationState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *pquns)
     * }
     */
    public static FunctionDescriptor SHQueryUserNotificationState$descriptor() {
        return SHQueryUserNotificationState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *pquns)
     * }
     */
    public static MethodHandle SHQueryUserNotificationState$handle() {
        return SHQueryUserNotificationState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *pquns)
     * }
     */
    public static MemorySegment SHQueryUserNotificationState$address() {
        return SHQueryUserNotificationState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE *pquns)
     * }
     */
    public static int SHQueryUserNotificationState(MemorySegment pquns) {
        var mh$ = SHQueryUserNotificationState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHQueryUserNotificationState", pquns);
            }
            return (int)mh$.invokeExact(pquns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetPropertyStoreForWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetPropertyStoreForWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID *const riid, void **ppv)
     * }
     */
    public static FunctionDescriptor SHGetPropertyStoreForWindow$descriptor() {
        return SHGetPropertyStoreForWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID *const riid, void **ppv)
     * }
     */
    public static MethodHandle SHGetPropertyStoreForWindow$handle() {
        return SHGetPropertyStoreForWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID *const riid, void **ppv)
     * }
     */
    public static MemorySegment SHGetPropertyStoreForWindow$address() {
        return SHGetPropertyStoreForWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHGetPropertyStoreForWindow(HWND hwnd, const IID *const riid, void **ppv)
     * }
     */
    public static int SHGetPropertyStoreForWindow(MemorySegment hwnd, MemorySegment riid, MemorySegment ppv) {
        var mh$ = SHGetPropertyStoreForWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetPropertyStoreForWindow", hwnd, riid, ppv);
            }
            return (int)mh$.invokeExact(hwnd, riid, ppv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NOTIFYICONDATAA {
     *     DWORD cbSize;
     *     HWND hWnd;
     *     UINT uID;
     *     UINT uFlags;
     *     UINT uCallbackMessage;
     *     HICON hIcon;
     *     CHAR szTip[128];
     *     DWORD dwState;
     *     DWORD dwStateMask;
     *     CHAR szInfo[256];
     *     union {
     *         UINT uTimeout;
     *         UINT uVersion;
     *     };
     *     CHAR szInfoTitle[64];
     *     DWORD dwInfoFlags;
     *     GUID guidItem;
     *     HICON hBalloonIcon;
     * } *PNOTIFYICONDATAA
     * }
     */
    public static final AddressLayout PNOTIFYICONDATAA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NOTIFYICONDATAW {
     *     DWORD cbSize;
     *     HWND hWnd;
     *     UINT uID;
     *     UINT uFlags;
     *     UINT uCallbackMessage;
     *     HICON hIcon;
     *     WCHAR szTip[128];
     *     DWORD dwState;
     *     DWORD dwStateMask;
     *     WCHAR szInfo[256];
     *     union {
     *         UINT uTimeout;
     *         UINT uVersion;
     *     };
     *     WCHAR szInfoTitle[64];
     *     DWORD dwInfoFlags;
     *     GUID guidItem;
     *     HICON hBalloonIcon;
     * } *PNOTIFYICONDATAW
     * }
     */
    public static final AddressLayout PNOTIFYICONDATAW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PNOTIFYICONDATAA PNOTIFYICONDATA
     * }
     */
    public static final AddressLayout PNOTIFYICONDATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NOTIFYICONIDENTIFIER {
     *     DWORD cbSize;
     *     HWND hWnd;
     *     UINT uID;
     *     GUID guidItem;
     * } *PNOTIFYICONIDENTIFIER
     * }
     */
    public static final AddressLayout PNOTIFYICONIDENTIFIER = winapi.C_POINTER;

    private static class Shell_NotifyIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("Shell_NotifyIconA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData)
     * }
     */
    public static FunctionDescriptor Shell_NotifyIconA$descriptor() {
        return Shell_NotifyIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData)
     * }
     */
    public static MethodHandle Shell_NotifyIconA$handle() {
        return Shell_NotifyIconA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData)
     * }
     */
    public static MemorySegment Shell_NotifyIconA$address() {
        return Shell_NotifyIconA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData)
     * }
     */
    public static int Shell_NotifyIconA(int dwMessage, MemorySegment lpData) {
        var mh$ = Shell_NotifyIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Shell_NotifyIconA", dwMessage, lpData);
            }
            return (int)mh$.invokeExact(dwMessage, lpData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Shell_NotifyIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("Shell_NotifyIconW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
     * }
     */
    public static FunctionDescriptor Shell_NotifyIconW$descriptor() {
        return Shell_NotifyIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
     * }
     */
    public static MethodHandle Shell_NotifyIconW$handle() {
        return Shell_NotifyIconW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
     * }
     */
    public static MemorySegment Shell_NotifyIconW$address() {
        return Shell_NotifyIconW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
     * }
     */
    public static int Shell_NotifyIconW(int dwMessage, MemorySegment lpData) {
        var mh$ = Shell_NotifyIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Shell_NotifyIconW", dwMessage, lpData);
            }
            return (int)mh$.invokeExact(dwMessage, lpData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class Shell_NotifyIconGetRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("Shell_NotifyIconGetRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation)
     * }
     */
    public static FunctionDescriptor Shell_NotifyIconGetRect$descriptor() {
        return Shell_NotifyIconGetRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation)
     * }
     */
    public static MethodHandle Shell_NotifyIconGetRect$handle() {
        return Shell_NotifyIconGetRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation)
     * }
     */
    public static MemorySegment Shell_NotifyIconGetRect$address() {
        return Shell_NotifyIconGetRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT Shell_NotifyIconGetRect(const NOTIFYICONIDENTIFIER *identifier, RECT *iconLocation)
     * }
     */
    public static int Shell_NotifyIconGetRect(MemorySegment identifier, MemorySegment iconLocation) {
        var mh$ = Shell_NotifyIconGetRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("Shell_NotifyIconGetRect", identifier, iconLocation);
            }
            return (int)mh$.invokeExact(identifier, iconLocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetFileInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetFileInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static FunctionDescriptor SHGetFileInfoA$descriptor() {
        return SHGetFileInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static MethodHandle SHGetFileInfoA$handle() {
        return SHGetFileInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static MemorySegment SHGetFileInfoA$address() {
        return SHGetFileInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static long SHGetFileInfoA(MemorySegment pszPath, int dwFileAttributes, MemorySegment psfi, int cbFileInfo, int uFlags) {
        var mh$ = SHGetFileInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetFileInfoA", pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
            }
            return (long)mh$.invokeExact(pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetFileInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetFileInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static FunctionDescriptor SHGetFileInfoW$descriptor() {
        return SHGetFileInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static MethodHandle SHGetFileInfoW$handle() {
        return SHGetFileInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static MemorySegment SHGetFileInfoW$address() {
        return SHGetFileInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD_PTR SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags)
     * }
     */
    public static long SHGetFileInfoW(MemorySegment pszPath, int dwFileAttributes, MemorySegment psfi, int cbFileInfo, int uFlags) {
        var mh$ = SHGetFileInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetFileInfoW", pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
            }
            return (long)mh$.invokeExact(pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SIID_DOCNOASSOC = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DOCNOASSOC = 0
     * }
     */
    public static int SIID_DOCNOASSOC() {
        return SIID_DOCNOASSOC;
    }
    private static final int SIID_DOCASSOC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DOCASSOC = 1
     * }
     */
    public static int SIID_DOCASSOC() {
        return SIID_DOCASSOC;
    }
    private static final int SIID_APPLICATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_APPLICATION = 2
     * }
     */
    public static int SIID_APPLICATION() {
        return SIID_APPLICATION;
    }
    private static final int SIID_FOLDER = (int)3L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_FOLDER = 3
     * }
     */
    public static int SIID_FOLDER() {
        return SIID_FOLDER;
    }
    private static final int SIID_FOLDEROPEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_FOLDEROPEN = 4
     * }
     */
    public static int SIID_FOLDEROPEN() {
        return SIID_FOLDEROPEN;
    }
    private static final int SIID_DRIVE525 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVE525 = 5
     * }
     */
    public static int SIID_DRIVE525() {
        return SIID_DRIVE525;
    }
    private static final int SIID_DRIVE35 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVE35 = 6
     * }
     */
    public static int SIID_DRIVE35() {
        return SIID_DRIVE35;
    }
    private static final int SIID_DRIVEREMOVE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVEREMOVE = 7
     * }
     */
    public static int SIID_DRIVEREMOVE() {
        return SIID_DRIVEREMOVE;
    }
    private static final int SIID_DRIVEFIXED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVEFIXED = 8
     * }
     */
    public static int SIID_DRIVEFIXED() {
        return SIID_DRIVEFIXED;
    }
    private static final int SIID_DRIVENET = (int)9L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVENET = 9
     * }
     */
    public static int SIID_DRIVENET() {
        return SIID_DRIVENET;
    }
    private static final int SIID_DRIVENETDISABLED = (int)10L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVENETDISABLED = 10
     * }
     */
    public static int SIID_DRIVENETDISABLED() {
        return SIID_DRIVENETDISABLED;
    }
    private static final int SIID_DRIVECD = (int)11L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVECD = 11
     * }
     */
    public static int SIID_DRIVECD() {
        return SIID_DRIVECD;
    }
    private static final int SIID_DRIVERAM = (int)12L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVERAM = 12
     * }
     */
    public static int SIID_DRIVERAM() {
        return SIID_DRIVERAM;
    }
    private static final int SIID_WORLD = (int)13L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_WORLD = 13
     * }
     */
    public static int SIID_WORLD() {
        return SIID_WORLD;
    }
    private static final int SIID_SERVER = (int)15L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_SERVER = 15
     * }
     */
    public static int SIID_SERVER() {
        return SIID_SERVER;
    }
    private static final int SIID_PRINTER = (int)16L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_PRINTER = 16
     * }
     */
    public static int SIID_PRINTER() {
        return SIID_PRINTER;
    }
    private static final int SIID_MYNETWORK = (int)17L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MYNETWORK = 17
     * }
     */
    public static int SIID_MYNETWORK() {
        return SIID_MYNETWORK;
    }
    private static final int SIID_FIND = (int)22L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_FIND = 22
     * }
     */
    public static int SIID_FIND() {
        return SIID_FIND;
    }
    private static final int SIID_HELP = (int)23L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_HELP = 23
     * }
     */
    public static int SIID_HELP() {
        return SIID_HELP;
    }
    private static final int SIID_SHARE = (int)28L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_SHARE = 28
     * }
     */
    public static int SIID_SHARE() {
        return SIID_SHARE;
    }
    private static final int SIID_LINK = (int)29L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_LINK = 29
     * }
     */
    public static int SIID_LINK() {
        return SIID_LINK;
    }
    private static final int SIID_SLOWFILE = (int)30L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_SLOWFILE = 30
     * }
     */
    public static int SIID_SLOWFILE() {
        return SIID_SLOWFILE;
    }
    private static final int SIID_RECYCLER = (int)31L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_RECYCLER = 31
     * }
     */
    public static int SIID_RECYCLER() {
        return SIID_RECYCLER;
    }
    private static final int SIID_RECYCLERFULL = (int)32L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_RECYCLERFULL = 32
     * }
     */
    public static int SIID_RECYCLERFULL() {
        return SIID_RECYCLERFULL;
    }
    private static final int SIID_MEDIACDAUDIO = (int)40L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIACDAUDIO = 40
     * }
     */
    public static int SIID_MEDIACDAUDIO() {
        return SIID_MEDIACDAUDIO;
    }
    private static final int SIID_LOCK = (int)47L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_LOCK = 47
     * }
     */
    public static int SIID_LOCK() {
        return SIID_LOCK;
    }
    private static final int SIID_AUTOLIST = (int)49L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_AUTOLIST = 49
     * }
     */
    public static int SIID_AUTOLIST() {
        return SIID_AUTOLIST;
    }
    private static final int SIID_PRINTERNET = (int)50L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_PRINTERNET = 50
     * }
     */
    public static int SIID_PRINTERNET() {
        return SIID_PRINTERNET;
    }
    private static final int SIID_SERVERSHARE = (int)51L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_SERVERSHARE = 51
     * }
     */
    public static int SIID_SERVERSHARE() {
        return SIID_SERVERSHARE;
    }
    private static final int SIID_PRINTERFAX = (int)52L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_PRINTERFAX = 52
     * }
     */
    public static int SIID_PRINTERFAX() {
        return SIID_PRINTERFAX;
    }
    private static final int SIID_PRINTERFAXNET = (int)53L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_PRINTERFAXNET = 53
     * }
     */
    public static int SIID_PRINTERFAXNET() {
        return SIID_PRINTERFAXNET;
    }
    private static final int SIID_PRINTERFILE = (int)54L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_PRINTERFILE = 54
     * }
     */
    public static int SIID_PRINTERFILE() {
        return SIID_PRINTERFILE;
    }
    private static final int SIID_STACK = (int)55L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_STACK = 55
     * }
     */
    public static int SIID_STACK() {
        return SIID_STACK;
    }
    private static final int SIID_MEDIASVCD = (int)56L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIASVCD = 56
     * }
     */
    public static int SIID_MEDIASVCD() {
        return SIID_MEDIASVCD;
    }
    private static final int SIID_STUFFEDFOLDER = (int)57L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_STUFFEDFOLDER = 57
     * }
     */
    public static int SIID_STUFFEDFOLDER() {
        return SIID_STUFFEDFOLDER;
    }
    private static final int SIID_DRIVEUNKNOWN = (int)58L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVEUNKNOWN = 58
     * }
     */
    public static int SIID_DRIVEUNKNOWN() {
        return SIID_DRIVEUNKNOWN;
    }
    private static final int SIID_DRIVEDVD = (int)59L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVEDVD = 59
     * }
     */
    public static int SIID_DRIVEDVD() {
        return SIID_DRIVEDVD;
    }
    private static final int SIID_MEDIADVD = (int)60L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIADVD = 60
     * }
     */
    public static int SIID_MEDIADVD() {
        return SIID_MEDIADVD;
    }
    private static final int SIID_MEDIADVDRAM = (int)61L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIADVDRAM = 61
     * }
     */
    public static int SIID_MEDIADVDRAM() {
        return SIID_MEDIADVDRAM;
    }
    private static final int SIID_MEDIADVDRW = (int)62L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIADVDRW = 62
     * }
     */
    public static int SIID_MEDIADVDRW() {
        return SIID_MEDIADVDRW;
    }
    private static final int SIID_MEDIADVDR = (int)63L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIADVDR = 63
     * }
     */
    public static int SIID_MEDIADVDR() {
        return SIID_MEDIADVDR;
    }
    private static final int SIID_MEDIADVDROM = (int)64L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIADVDROM = 64
     * }
     */
    public static int SIID_MEDIADVDROM() {
        return SIID_MEDIADVDROM;
    }
    private static final int SIID_MEDIACDAUDIOPLUS = (int)65L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIACDAUDIOPLUS = 65
     * }
     */
    public static int SIID_MEDIACDAUDIOPLUS() {
        return SIID_MEDIACDAUDIOPLUS;
    }
    private static final int SIID_MEDIACDRW = (int)66L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIACDRW = 66
     * }
     */
    public static int SIID_MEDIACDRW() {
        return SIID_MEDIACDRW;
    }
    private static final int SIID_MEDIACDR = (int)67L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIACDR = 67
     * }
     */
    public static int SIID_MEDIACDR() {
        return SIID_MEDIACDR;
    }
    private static final int SIID_MEDIACDBURN = (int)68L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIACDBURN = 68
     * }
     */
    public static int SIID_MEDIACDBURN() {
        return SIID_MEDIACDBURN;
    }
    private static final int SIID_MEDIABLANKCD = (int)69L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIABLANKCD = 69
     * }
     */
    public static int SIID_MEDIABLANKCD() {
        return SIID_MEDIABLANKCD;
    }
    private static final int SIID_MEDIACDROM = (int)70L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIACDROM = 70
     * }
     */
    public static int SIID_MEDIACDROM() {
        return SIID_MEDIACDROM;
    }
    private static final int SIID_AUDIOFILES = (int)71L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_AUDIOFILES = 71
     * }
     */
    public static int SIID_AUDIOFILES() {
        return SIID_AUDIOFILES;
    }
    private static final int SIID_IMAGEFILES = (int)72L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_IMAGEFILES = 72
     * }
     */
    public static int SIID_IMAGEFILES() {
        return SIID_IMAGEFILES;
    }
    private static final int SIID_VIDEOFILES = (int)73L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_VIDEOFILES = 73
     * }
     */
    public static int SIID_VIDEOFILES() {
        return SIID_VIDEOFILES;
    }
    private static final int SIID_MIXEDFILES = (int)74L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MIXEDFILES = 74
     * }
     */
    public static int SIID_MIXEDFILES() {
        return SIID_MIXEDFILES;
    }
    private static final int SIID_FOLDERBACK = (int)75L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_FOLDERBACK = 75
     * }
     */
    public static int SIID_FOLDERBACK() {
        return SIID_FOLDERBACK;
    }
    private static final int SIID_FOLDERFRONT = (int)76L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_FOLDERFRONT = 76
     * }
     */
    public static int SIID_FOLDERFRONT() {
        return SIID_FOLDERFRONT;
    }
    private static final int SIID_SHIELD = (int)77L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_SHIELD = 77
     * }
     */
    public static int SIID_SHIELD() {
        return SIID_SHIELD;
    }
    private static final int SIID_WARNING = (int)78L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_WARNING = 78
     * }
     */
    public static int SIID_WARNING() {
        return SIID_WARNING;
    }
    private static final int SIID_INFO = (int)79L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_INFO = 79
     * }
     */
    public static int SIID_INFO() {
        return SIID_INFO;
    }
    private static final int SIID_ERROR = (int)80L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_ERROR = 80
     * }
     */
    public static int SIID_ERROR() {
        return SIID_ERROR;
    }
    private static final int SIID_KEY = (int)81L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_KEY = 81
     * }
     */
    public static int SIID_KEY() {
        return SIID_KEY;
    }
    private static final int SIID_SOFTWARE = (int)82L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_SOFTWARE = 82
     * }
     */
    public static int SIID_SOFTWARE() {
        return SIID_SOFTWARE;
    }
    private static final int SIID_RENAME = (int)83L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_RENAME = 83
     * }
     */
    public static int SIID_RENAME() {
        return SIID_RENAME;
    }
    private static final int SIID_DELETE = (int)84L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DELETE = 84
     * }
     */
    public static int SIID_DELETE() {
        return SIID_DELETE;
    }
    private static final int SIID_MEDIAAUDIODVD = (int)85L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAAUDIODVD = 85
     * }
     */
    public static int SIID_MEDIAAUDIODVD() {
        return SIID_MEDIAAUDIODVD;
    }
    private static final int SIID_MEDIAMOVIEDVD = (int)86L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAMOVIEDVD = 86
     * }
     */
    public static int SIID_MEDIAMOVIEDVD() {
        return SIID_MEDIAMOVIEDVD;
    }
    private static final int SIID_MEDIAENHANCEDCD = (int)87L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAENHANCEDCD = 87
     * }
     */
    public static int SIID_MEDIAENHANCEDCD() {
        return SIID_MEDIAENHANCEDCD;
    }
    private static final int SIID_MEDIAENHANCEDDVD = (int)88L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAENHANCEDDVD = 88
     * }
     */
    public static int SIID_MEDIAENHANCEDDVD() {
        return SIID_MEDIAENHANCEDDVD;
    }
    private static final int SIID_MEDIAHDDVD = (int)89L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAHDDVD = 89
     * }
     */
    public static int SIID_MEDIAHDDVD() {
        return SIID_MEDIAHDDVD;
    }
    private static final int SIID_MEDIABLURAY = (int)90L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIABLURAY = 90
     * }
     */
    public static int SIID_MEDIABLURAY() {
        return SIID_MEDIABLURAY;
    }
    private static final int SIID_MEDIAVCD = (int)91L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAVCD = 91
     * }
     */
    public static int SIID_MEDIAVCD() {
        return SIID_MEDIAVCD;
    }
    private static final int SIID_MEDIADVDPLUSR = (int)92L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIADVDPLUSR = 92
     * }
     */
    public static int SIID_MEDIADVDPLUSR() {
        return SIID_MEDIADVDPLUSR;
    }
    private static final int SIID_MEDIADVDPLUSRW = (int)93L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIADVDPLUSRW = 93
     * }
     */
    public static int SIID_MEDIADVDPLUSRW() {
        return SIID_MEDIADVDPLUSRW;
    }
    private static final int SIID_DESKTOPPC = (int)94L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DESKTOPPC = 94
     * }
     */
    public static int SIID_DESKTOPPC() {
        return SIID_DESKTOPPC;
    }
    private static final int SIID_MOBILEPC = (int)95L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MOBILEPC = 95
     * }
     */
    public static int SIID_MOBILEPC() {
        return SIID_MOBILEPC;
    }
    private static final int SIID_USERS = (int)96L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_USERS = 96
     * }
     */
    public static int SIID_USERS() {
        return SIID_USERS;
    }
    private static final int SIID_MEDIASMARTMEDIA = (int)97L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIASMARTMEDIA = 97
     * }
     */
    public static int SIID_MEDIASMARTMEDIA() {
        return SIID_MEDIASMARTMEDIA;
    }
    private static final int SIID_MEDIACOMPACTFLASH = (int)98L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIACOMPACTFLASH = 98
     * }
     */
    public static int SIID_MEDIACOMPACTFLASH() {
        return SIID_MEDIACOMPACTFLASH;
    }
    private static final int SIID_DEVICECELLPHONE = (int)99L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DEVICECELLPHONE = 99
     * }
     */
    public static int SIID_DEVICECELLPHONE() {
        return SIID_DEVICECELLPHONE;
    }
    private static final int SIID_DEVICECAMERA = (int)100L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DEVICECAMERA = 100
     * }
     */
    public static int SIID_DEVICECAMERA() {
        return SIID_DEVICECAMERA;
    }
    private static final int SIID_DEVICEVIDEOCAMERA = (int)101L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DEVICEVIDEOCAMERA = 101
     * }
     */
    public static int SIID_DEVICEVIDEOCAMERA() {
        return SIID_DEVICEVIDEOCAMERA;
    }
    private static final int SIID_DEVICEAUDIOPLAYER = (int)102L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DEVICEAUDIOPLAYER = 102
     * }
     */
    public static int SIID_DEVICEAUDIOPLAYER() {
        return SIID_DEVICEAUDIOPLAYER;
    }
    private static final int SIID_NETWORKCONNECT = (int)103L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_NETWORKCONNECT = 103
     * }
     */
    public static int SIID_NETWORKCONNECT() {
        return SIID_NETWORKCONNECT;
    }
    private static final int SIID_INTERNET = (int)104L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_INTERNET = 104
     * }
     */
    public static int SIID_INTERNET() {
        return SIID_INTERNET;
    }
    private static final int SIID_ZIPFILE = (int)105L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_ZIPFILE = 105
     * }
     */
    public static int SIID_ZIPFILE() {
        return SIID_ZIPFILE;
    }
    private static final int SIID_SETTINGS = (int)106L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_SETTINGS = 106
     * }
     */
    public static int SIID_SETTINGS() {
        return SIID_SETTINGS;
    }
    private static final int SIID_DRIVEHDDVD = (int)132L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVEHDDVD = 132
     * }
     */
    public static int SIID_DRIVEHDDVD() {
        return SIID_DRIVEHDDVD;
    }
    private static final int SIID_DRIVEBD = (int)133L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_DRIVEBD = 133
     * }
     */
    public static int SIID_DRIVEBD() {
        return SIID_DRIVEBD;
    }
    private static final int SIID_MEDIAHDDVDROM = (int)134L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAHDDVDROM = 134
     * }
     */
    public static int SIID_MEDIAHDDVDROM() {
        return SIID_MEDIAHDDVDROM;
    }
    private static final int SIID_MEDIAHDDVDR = (int)135L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAHDDVDR = 135
     * }
     */
    public static int SIID_MEDIAHDDVDR() {
        return SIID_MEDIAHDDVDR;
    }
    private static final int SIID_MEDIAHDDVDRAM = (int)136L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIAHDDVDRAM = 136
     * }
     */
    public static int SIID_MEDIAHDDVDRAM() {
        return SIID_MEDIAHDDVDRAM;
    }
    private static final int SIID_MEDIABDROM = (int)137L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIABDROM = 137
     * }
     */
    public static int SIID_MEDIABDROM() {
        return SIID_MEDIABDROM;
    }
    private static final int SIID_MEDIABDR = (int)138L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIABDR = 138
     * }
     */
    public static int SIID_MEDIABDR() {
        return SIID_MEDIABDR;
    }
    private static final int SIID_MEDIABDRE = (int)139L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MEDIABDRE = 139
     * }
     */
    public static int SIID_MEDIABDRE() {
        return SIID_MEDIABDRE;
    }
    private static final int SIID_CLUSTEREDDRIVE = (int)140L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_CLUSTEREDDRIVE = 140
     * }
     */
    public static int SIID_CLUSTEREDDRIVE() {
        return SIID_CLUSTEREDDRIVE;
    }
    private static final int SIID_MAX_ICONS = (int)181L;
    /**
     * {@snippet lang=c :
     * enum SHSTOCKICONID.SIID_MAX_ICONS = 181
     * }
     */
    public static int SIID_MAX_ICONS() {
        return SIID_MAX_ICONS;
    }

    private static class SHGetStockIconInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetStockIconInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii)
     * }
     */
    public static FunctionDescriptor SHGetStockIconInfo$descriptor() {
        return SHGetStockIconInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii)
     * }
     */
    public static MethodHandle SHGetStockIconInfo$handle() {
        return SHGetStockIconInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii)
     * }
     */
    public static MemorySegment SHGetStockIconInfo$address() {
        return SHGetStockIconInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO *psii)
     * }
     */
    public static int SHGetStockIconInfo(int siid, int uFlags, MemorySegment psii) {
        var mh$ = SHGetStockIconInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetStockIconInfo", siid, uFlags, psii);
            }
            return (int)mh$.invokeExact(siid, uFlags, psii);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetDiskFreeSpaceExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetDiskFreeSpaceExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes)
     * }
     */
    public static FunctionDescriptor SHGetDiskFreeSpaceExA$descriptor() {
        return SHGetDiskFreeSpaceExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes)
     * }
     */
    public static MethodHandle SHGetDiskFreeSpaceExA$handle() {
        return SHGetDiskFreeSpaceExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes)
     * }
     */
    public static MemorySegment SHGetDiskFreeSpaceExA$address() {
        return SHGetDiskFreeSpaceExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes)
     * }
     */
    public static int SHGetDiskFreeSpaceExA(MemorySegment pszDirectoryName, MemorySegment pulFreeBytesAvailableToCaller, MemorySegment pulTotalNumberOfBytes, MemorySegment pulTotalNumberOfFreeBytes) {
        var mh$ = SHGetDiskFreeSpaceExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetDiskFreeSpaceExA", pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes);
            }
            return (int)mh$.invokeExact(pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetDiskFreeSpaceExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetDiskFreeSpaceExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes)
     * }
     */
    public static FunctionDescriptor SHGetDiskFreeSpaceExW$descriptor() {
        return SHGetDiskFreeSpaceExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes)
     * }
     */
    public static MethodHandle SHGetDiskFreeSpaceExW$handle() {
        return SHGetDiskFreeSpaceExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes)
     * }
     */
    public static MemorySegment SHGetDiskFreeSpaceExW$address() {
        return SHGetDiskFreeSpaceExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER *pulFreeBytesAvailableToCaller, ULARGE_INTEGER *pulTotalNumberOfBytes, ULARGE_INTEGER *pulTotalNumberOfFreeBytes)
     * }
     */
    public static int SHGetDiskFreeSpaceExW(MemorySegment pszDirectoryName, MemorySegment pulFreeBytesAvailableToCaller, MemorySegment pulTotalNumberOfBytes, MemorySegment pulTotalNumberOfFreeBytes) {
        var mh$ = SHGetDiskFreeSpaceExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetDiskFreeSpaceExW", pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes);
            }
            return (int)mh$.invokeExact(pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetNewLinkInfoA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetNewLinkInfoA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags)
     * }
     */
    public static FunctionDescriptor SHGetNewLinkInfoA$descriptor() {
        return SHGetNewLinkInfoA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags)
     * }
     */
    public static MethodHandle SHGetNewLinkInfoA$handle() {
        return SHGetNewLinkInfoA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags)
     * }
     */
    public static MemorySegment SHGetNewLinkInfoA$address() {
        return SHGetNewLinkInfoA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags)
     * }
     */
    public static int SHGetNewLinkInfoA(MemorySegment pszLinkTo, MemorySegment pszDir, MemorySegment pszName, MemorySegment pfMustCopy, int uFlags) {
        var mh$ = SHGetNewLinkInfoA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetNewLinkInfoA", pszLinkTo, pszDir, pszName, pfMustCopy, uFlags);
            }
            return (int)mh$.invokeExact(pszLinkTo, pszDir, pszName, pfMustCopy, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetNewLinkInfoW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetNewLinkInfoW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags)
     * }
     */
    public static FunctionDescriptor SHGetNewLinkInfoW$descriptor() {
        return SHGetNewLinkInfoW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags)
     * }
     */
    public static MethodHandle SHGetNewLinkInfoW$handle() {
        return SHGetNewLinkInfoW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags)
     * }
     */
    public static MemorySegment SHGetNewLinkInfoW$address() {
        return SHGetNewLinkInfoW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags)
     * }
     */
    public static int SHGetNewLinkInfoW(MemorySegment pszLinkTo, MemorySegment pszDir, MemorySegment pszName, MemorySegment pfMustCopy, int uFlags) {
        var mh$ = SHGetNewLinkInfoW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetNewLinkInfoW", pszLinkTo, pszDir, pszName, pfMustCopy, uFlags);
            }
            return (int)mh$.invokeExact(pszLinkTo, pszDir, pszName, pfMustCopy, uFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHInvokePrinterCommandA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHInvokePrinterCommandA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal)
     * }
     */
    public static FunctionDescriptor SHInvokePrinterCommandA$descriptor() {
        return SHInvokePrinterCommandA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal)
     * }
     */
    public static MethodHandle SHInvokePrinterCommandA$handle() {
        return SHInvokePrinterCommandA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal)
     * }
     */
    public static MemorySegment SHInvokePrinterCommandA$address() {
        return SHInvokePrinterCommandA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal)
     * }
     */
    public static int SHInvokePrinterCommandA(MemorySegment hwnd, int uAction, MemorySegment lpBuf1, MemorySegment lpBuf2, int fModal) {
        var mh$ = SHInvokePrinterCommandA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHInvokePrinterCommandA", hwnd, uAction, lpBuf1, lpBuf2, fModal);
            }
            return (int)mh$.invokeExact(hwnd, uAction, lpBuf1, lpBuf2, fModal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHInvokePrinterCommandW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHInvokePrinterCommandW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal)
     * }
     */
    public static FunctionDescriptor SHInvokePrinterCommandW$descriptor() {
        return SHInvokePrinterCommandW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal)
     * }
     */
    public static MethodHandle SHInvokePrinterCommandW$handle() {
        return SHInvokePrinterCommandW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal)
     * }
     */
    public static MemorySegment SHInvokePrinterCommandW$address() {
        return SHInvokePrinterCommandW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal)
     * }
     */
    public static int SHInvokePrinterCommandW(MemorySegment hwnd, int uAction, MemorySegment lpBuf1, MemorySegment lpBuf2, int fModal) {
        var mh$ = SHInvokePrinterCommandW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHInvokePrinterCommandW", hwnd, uAction, lpBuf1, lpBuf2, fModal);
            }
            return (int)mh$.invokeExact(hwnd, uAction, lpBuf1, lpBuf2, fModal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _OPEN_PRINTER_PROPS_INFOA {
     *     DWORD dwSize;
     *     LPSTR pszSheetName;
     *     UINT uSheetIndex;
     *     DWORD dwFlags;
     *     BOOL bModal;
     * } *POPEN_PRINTER_PROPS_INFOA
     * }
     */
    public static final AddressLayout POPEN_PRINTER_PROPS_INFOA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OPEN_PRINTER_PROPS_INFOW {
     *     DWORD dwSize;
     *     LPWSTR pszSheetName;
     *     UINT uSheetIndex;
     *     DWORD dwFlags;
     *     BOOL bModal;
     * } *POPEN_PRINTER_PROPS_INFOW
     * }
     */
    public static final AddressLayout POPEN_PRINTER_PROPS_INFOW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPEN_PRINTER_PROPS_INFOA POPEN_PRINTER_PROPS_INFO
     * }
     */
    public static final AddressLayout POPEN_PRINTER_PROPS_INFO = winapi.C_POINTER;

    private static class SHLoadNonloadedIconOverlayIdentifiers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHLoadNonloadedIconOverlayIdentifiers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHLoadNonloadedIconOverlayIdentifiers()
     * }
     */
    public static FunctionDescriptor SHLoadNonloadedIconOverlayIdentifiers$descriptor() {
        return SHLoadNonloadedIconOverlayIdentifiers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHLoadNonloadedIconOverlayIdentifiers()
     * }
     */
    public static MethodHandle SHLoadNonloadedIconOverlayIdentifiers$handle() {
        return SHLoadNonloadedIconOverlayIdentifiers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHLoadNonloadedIconOverlayIdentifiers()
     * }
     */
    public static MemorySegment SHLoadNonloadedIconOverlayIdentifiers$address() {
        return SHLoadNonloadedIconOverlayIdentifiers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHLoadNonloadedIconOverlayIdentifiers()
     * }
     */
    public static int SHLoadNonloadedIconOverlayIdentifiers() {
        var mh$ = SHLoadNonloadedIconOverlayIdentifiers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHLoadNonloadedIconOverlayIdentifiers");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHIsFileAvailableOffline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHIsFileAvailableOffline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHIsFileAvailableOffline(PCWSTR pwszPath, DWORD *pdwStatus)
     * }
     */
    public static FunctionDescriptor SHIsFileAvailableOffline$descriptor() {
        return SHIsFileAvailableOffline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHIsFileAvailableOffline(PCWSTR pwszPath, DWORD *pdwStatus)
     * }
     */
    public static MethodHandle SHIsFileAvailableOffline$handle() {
        return SHIsFileAvailableOffline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHIsFileAvailableOffline(PCWSTR pwszPath, DWORD *pdwStatus)
     * }
     */
    public static MemorySegment SHIsFileAvailableOffline$address() {
        return SHIsFileAvailableOffline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHIsFileAvailableOffline(PCWSTR pwszPath, DWORD *pdwStatus)
     * }
     */
    public static int SHIsFileAvailableOffline(MemorySegment pwszPath, MemorySegment pdwStatus) {
        var mh$ = SHIsFileAvailableOffline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHIsFileAvailableOffline", pwszPath, pdwStatus);
            }
            return (int)mh$.invokeExact(pwszPath, pdwStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHSetLocalizedName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHSetLocalizedName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHSetLocalizedName(PCWSTR pszPath, PCWSTR pszResModule, int idsRes)
     * }
     */
    public static FunctionDescriptor SHSetLocalizedName$descriptor() {
        return SHSetLocalizedName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHSetLocalizedName(PCWSTR pszPath, PCWSTR pszResModule, int idsRes)
     * }
     */
    public static MethodHandle SHSetLocalizedName$handle() {
        return SHSetLocalizedName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHSetLocalizedName(PCWSTR pszPath, PCWSTR pszResModule, int idsRes)
     * }
     */
    public static MemorySegment SHSetLocalizedName$address() {
        return SHSetLocalizedName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHSetLocalizedName(PCWSTR pszPath, PCWSTR pszResModule, int idsRes)
     * }
     */
    public static int SHSetLocalizedName(MemorySegment pszPath, MemorySegment pszResModule, int idsRes) {
        var mh$ = SHSetLocalizedName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHSetLocalizedName", pszPath, pszResModule, idsRes);
            }
            return (int)mh$.invokeExact(pszPath, pszResModule, idsRes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHRemoveLocalizedName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHRemoveLocalizedName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHRemoveLocalizedName(PCWSTR pszPath)
     * }
     */
    public static FunctionDescriptor SHRemoveLocalizedName$descriptor() {
        return SHRemoveLocalizedName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHRemoveLocalizedName(PCWSTR pszPath)
     * }
     */
    public static MethodHandle SHRemoveLocalizedName$handle() {
        return SHRemoveLocalizedName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHRemoveLocalizedName(PCWSTR pszPath)
     * }
     */
    public static MemorySegment SHRemoveLocalizedName$address() {
        return SHRemoveLocalizedName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHRemoveLocalizedName(PCWSTR pszPath)
     * }
     */
    public static int SHRemoveLocalizedName(MemorySegment pszPath) {
        var mh$ = SHRemoveLocalizedName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHRemoveLocalizedName", pszPath);
            }
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetLocalizedName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetLocalizedName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHGetLocalizedName(PCWSTR pszPath, PWSTR pszResModule, UINT cch, int *pidsRes)
     * }
     */
    public static FunctionDescriptor SHGetLocalizedName$descriptor() {
        return SHGetLocalizedName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHGetLocalizedName(PCWSTR pszPath, PWSTR pszResModule, UINT cch, int *pidsRes)
     * }
     */
    public static MethodHandle SHGetLocalizedName$handle() {
        return SHGetLocalizedName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHGetLocalizedName(PCWSTR pszPath, PWSTR pszResModule, UINT cch, int *pidsRes)
     * }
     */
    public static MemorySegment SHGetLocalizedName$address() {
        return SHGetLocalizedName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHGetLocalizedName(PCWSTR pszPath, PWSTR pszResModule, UINT cch, int *pidsRes)
     * }
     */
    public static int SHGetLocalizedName(MemorySegment pszPath, MemorySegment pszResModule, int cch, MemorySegment pidsRes) {
        var mh$ = SHGetLocalizedName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetLocalizedName", pszPath, pszResModule, cch, pidsRes);
            }
            return (int)mh$.invokeExact(pszPath, pszResModule, cch, pidsRes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int ShellMessageBoxA(HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle, ...)
     * }
     */
    public static class ShellMessageBoxA {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                winapi.C_INT,
                winapi.C_POINTER,
                winapi.C_POINTER,
                winapi.C_POINTER,
                winapi.C_POINTER,
                winapi.C_INT
            );
        private static final MemorySegment ADDR = winapi.findOrThrow("ShellMessageBoxA");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private ShellMessageBoxA(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int ShellMessageBoxA(HINSTANCE hAppInst, HWND hWnd, LPCSTR lpcText, LPCSTR lpcTitle, UINT fuStyle, ...)
         * }
         */
        public static ShellMessageBoxA makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new ShellMessageBoxA(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment hAppInst, MemorySegment hWnd, MemorySegment lpcText, MemorySegment lpcTitle, int fuStyle, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("ShellMessageBoxA", hAppInst, hWnd, lpcText, lpcTitle, fuStyle, x5);
                }
                return (int) spreader.invokeExact(hAppInst, hWnd, lpcText, lpcTitle, fuStyle, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int ShellMessageBoxW(HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle, ...)
     * }
     */
    public static class ShellMessageBoxW {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                winapi.C_INT,
                winapi.C_POINTER,
                winapi.C_POINTER,
                winapi.C_POINTER,
                winapi.C_POINTER,
                winapi.C_INT
            );
        private static final MemorySegment ADDR = winapi.findOrThrow("ShellMessageBoxW");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private ShellMessageBoxW(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int ShellMessageBoxW(HINSTANCE hAppInst, HWND hWnd, LPCWSTR lpcText, LPCWSTR lpcTitle, UINT fuStyle, ...)
         * }
         */
        public static ShellMessageBoxW makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new ShellMessageBoxW(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment hAppInst, MemorySegment hWnd, MemorySegment lpcText, MemorySegment lpcTitle, int fuStyle, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("ShellMessageBoxW", hAppInst, hWnd, lpcText, lpcTitle, fuStyle, x5);
                }
                return (int) spreader.invokeExact(hAppInst, hWnd, lpcText, lpcTitle, fuStyle, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class IsLFNDriveA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IsLFNDriveA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL IsLFNDriveA(LPCSTR pszPath)
     * }
     */
    public static FunctionDescriptor IsLFNDriveA$descriptor() {
        return IsLFNDriveA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL IsLFNDriveA(LPCSTR pszPath)
     * }
     */
    public static MethodHandle IsLFNDriveA$handle() {
        return IsLFNDriveA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL IsLFNDriveA(LPCSTR pszPath)
     * }
     */
    public static MemorySegment IsLFNDriveA$address() {
        return IsLFNDriveA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL IsLFNDriveA(LPCSTR pszPath)
     * }
     */
    public static int IsLFNDriveA(MemorySegment pszPath) {
        var mh$ = IsLFNDriveA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsLFNDriveA", pszPath);
            }
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsLFNDriveW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IsLFNDriveW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL IsLFNDriveW(LPCWSTR pszPath)
     * }
     */
    public static FunctionDescriptor IsLFNDriveW$descriptor() {
        return IsLFNDriveW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL IsLFNDriveW(LPCWSTR pszPath)
     * }
     */
    public static MethodHandle IsLFNDriveW$handle() {
        return IsLFNDriveW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL IsLFNDriveW(LPCWSTR pszPath)
     * }
     */
    public static MemorySegment IsLFNDriveW$address() {
        return IsLFNDriveW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL IsLFNDriveW(LPCWSTR pszPath)
     * }
     */
    public static int IsLFNDriveW(MemorySegment pszPath) {
        var mh$ = IsLFNDriveW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsLFNDriveW", pszPath);
            }
            return (int)mh$.invokeExact(pszPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHEnumerateUnreadMailAccountsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHEnumerateUnreadMailAccountsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress)
     * }
     */
    public static FunctionDescriptor SHEnumerateUnreadMailAccountsA$descriptor() {
        return SHEnumerateUnreadMailAccountsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress)
     * }
     */
    public static MethodHandle SHEnumerateUnreadMailAccountsA$handle() {
        return SHEnumerateUnreadMailAccountsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress)
     * }
     */
    public static MemorySegment SHEnumerateUnreadMailAccountsA$address() {
        return SHEnumerateUnreadMailAccountsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHEnumerateUnreadMailAccountsA(HKEY hKeyUser, DWORD dwIndex, LPSTR pszMailAddress, int cchMailAddress)
     * }
     */
    public static int SHEnumerateUnreadMailAccountsA(MemorySegment hKeyUser, int dwIndex, MemorySegment pszMailAddress, int cchMailAddress) {
        var mh$ = SHEnumerateUnreadMailAccountsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHEnumerateUnreadMailAccountsA", hKeyUser, dwIndex, pszMailAddress, cchMailAddress);
            }
            return (int)mh$.invokeExact(hKeyUser, dwIndex, pszMailAddress, cchMailAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHEnumerateUnreadMailAccountsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHEnumerateUnreadMailAccountsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress)
     * }
     */
    public static FunctionDescriptor SHEnumerateUnreadMailAccountsW$descriptor() {
        return SHEnumerateUnreadMailAccountsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress)
     * }
     */
    public static MethodHandle SHEnumerateUnreadMailAccountsW$handle() {
        return SHEnumerateUnreadMailAccountsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress)
     * }
     */
    public static MemorySegment SHEnumerateUnreadMailAccountsW$address() {
        return SHEnumerateUnreadMailAccountsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress)
     * }
     */
    public static int SHEnumerateUnreadMailAccountsW(MemorySegment hKeyUser, int dwIndex, MemorySegment pszMailAddress, int cchMailAddress) {
        var mh$ = SHEnumerateUnreadMailAccountsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHEnumerateUnreadMailAccountsW", hKeyUser, dwIndex, pszMailAddress, cchMailAddress);
            }
            return (int)mh$.invokeExact(hKeyUser, dwIndex, pszMailAddress, cchMailAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetUnreadMailCountA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetUnreadMailCountA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand)
     * }
     */
    public static FunctionDescriptor SHGetUnreadMailCountA$descriptor() {
        return SHGetUnreadMailCountA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand)
     * }
     */
    public static MethodHandle SHGetUnreadMailCountA$handle() {
        return SHGetUnreadMailCountA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand)
     * }
     */
    public static MemorySegment SHGetUnreadMailCountA$address() {
        return SHGetUnreadMailCountA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHGetUnreadMailCountA(HKEY hKeyUser, LPCSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPSTR pszShellExecuteCommand, int cchShellExecuteCommand)
     * }
     */
    public static int SHGetUnreadMailCountA(MemorySegment hKeyUser, MemorySegment pszMailAddress, MemorySegment pdwCount, MemorySegment pFileTime, MemorySegment pszShellExecuteCommand, int cchShellExecuteCommand) {
        var mh$ = SHGetUnreadMailCountA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetUnreadMailCountA", hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand);
            }
            return (int)mh$.invokeExact(hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetUnreadMailCountW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetUnreadMailCountW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand)
     * }
     */
    public static FunctionDescriptor SHGetUnreadMailCountW$descriptor() {
        return SHGetUnreadMailCountW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand)
     * }
     */
    public static MethodHandle SHGetUnreadMailCountW$handle() {
        return SHGetUnreadMailCountW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand)
     * }
     */
    public static MemorySegment SHGetUnreadMailCountW$address() {
        return SHGetUnreadMailCountW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHGetUnreadMailCountW(HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD *pdwCount, FILETIME *pFileTime, LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand)
     * }
     */
    public static int SHGetUnreadMailCountW(MemorySegment hKeyUser, MemorySegment pszMailAddress, MemorySegment pdwCount, MemorySegment pFileTime, MemorySegment pszShellExecuteCommand, int cchShellExecuteCommand) {
        var mh$ = SHGetUnreadMailCountW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetUnreadMailCountW", hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand);
            }
            return (int)mh$.invokeExact(hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHSetUnreadMailCountA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHSetUnreadMailCountA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand)
     * }
     */
    public static FunctionDescriptor SHSetUnreadMailCountA$descriptor() {
        return SHSetUnreadMailCountA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand)
     * }
     */
    public static MethodHandle SHSetUnreadMailCountA$handle() {
        return SHSetUnreadMailCountA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand)
     * }
     */
    public static MemorySegment SHSetUnreadMailCountA$address() {
        return SHSetUnreadMailCountA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHSetUnreadMailCountA(LPCSTR pszMailAddress, DWORD dwCount, LPCSTR pszShellExecuteCommand)
     * }
     */
    public static int SHSetUnreadMailCountA(MemorySegment pszMailAddress, int dwCount, MemorySegment pszShellExecuteCommand) {
        var mh$ = SHSetUnreadMailCountA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHSetUnreadMailCountA", pszMailAddress, dwCount, pszShellExecuteCommand);
            }
            return (int)mh$.invokeExact(pszMailAddress, dwCount, pszShellExecuteCommand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHSetUnreadMailCountW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHSetUnreadMailCountW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand)
     * }
     */
    public static FunctionDescriptor SHSetUnreadMailCountW$descriptor() {
        return SHSetUnreadMailCountW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand)
     * }
     */
    public static MethodHandle SHSetUnreadMailCountW$handle() {
        return SHSetUnreadMailCountW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand)
     * }
     */
    public static MemorySegment SHSetUnreadMailCountW$address() {
        return SHSetUnreadMailCountW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHSetUnreadMailCountW(LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand)
     * }
     */
    public static int SHSetUnreadMailCountW(MemorySegment pszMailAddress, int dwCount, MemorySegment pszShellExecuteCommand) {
        var mh$ = SHSetUnreadMailCountW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHSetUnreadMailCountW", pszMailAddress, dwCount, pszShellExecuteCommand);
            }
            return (int)mh$.invokeExact(pszMailAddress, dwCount, pszShellExecuteCommand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHTestTokenMembership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHTestTokenMembership");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL SHTestTokenMembership(HANDLE hToken, ULONG ulRID)
     * }
     */
    public static FunctionDescriptor SHTestTokenMembership$descriptor() {
        return SHTestTokenMembership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL SHTestTokenMembership(HANDLE hToken, ULONG ulRID)
     * }
     */
    public static MethodHandle SHTestTokenMembership$handle() {
        return SHTestTokenMembership.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL SHTestTokenMembership(HANDLE hToken, ULONG ulRID)
     * }
     */
    public static MemorySegment SHTestTokenMembership$address() {
        return SHTestTokenMembership.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL SHTestTokenMembership(HANDLE hToken, ULONG ulRID)
     * }
     */
    public static int SHTestTokenMembership(MemorySegment hToken, int ulRID) {
        var mh$ = SHTestTokenMembership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHTestTokenMembership", hToken, ulRID);
            }
            return (int)mh$.invokeExact(hToken, ulRID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SHGetImageList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetImageList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHGetImageList(int iImageList, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor SHGetImageList$descriptor() {
        return SHGetImageList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHGetImageList(int iImageList, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle SHGetImageList$handle() {
        return SHGetImageList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHGetImageList(int iImageList, const IID *const riid, void **ppvObj)
     * }
     */
    public static MemorySegment SHGetImageList$address() {
        return SHGetImageList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHGetImageList(int iImageList, const IID *const riid, void **ppvObj)
     * }
     */
    public static int SHGetImageList(int iImageList, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = SHGetImageList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetImageList", iImageList, riid, ppvObj);
            }
            return (int)mh$.invokeExact(iImageList, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InitNetworkAddressControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("InitNetworkAddressControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL InitNetworkAddressControl()
     * }
     */
    public static FunctionDescriptor InitNetworkAddressControl$descriptor() {
        return InitNetworkAddressControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL InitNetworkAddressControl()
     * }
     */
    public static MethodHandle InitNetworkAddressControl$handle() {
        return InitNetworkAddressControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL InitNetworkAddressControl()
     * }
     */
    public static MemorySegment InitNetworkAddressControl$address() {
        return InitNetworkAddressControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL InitNetworkAddressControl()
     * }
     */
    public static int InitNetworkAddressControl() {
        var mh$ = InitNetworkAddressControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InitNetworkAddressControl");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagNC_ADDRESS {
     *     struct NET_ADDRESS_INFO_ *pAddrInfo;
     *     USHORT PortNumber;
     *     BYTE PrefixLength;
     * } *PNC_ADDRESS
     * }
     */
    public static final AddressLayout PNC_ADDRESS = winapi.C_POINTER;

    private static class SHGetDriveMedia {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SHGetDriveMedia");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SHGetDriveMedia(PCWSTR pszDrive, DWORD *pdwMediaContent)
     * }
     */
    public static FunctionDescriptor SHGetDriveMedia$descriptor() {
        return SHGetDriveMedia.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SHGetDriveMedia(PCWSTR pszDrive, DWORD *pdwMediaContent)
     * }
     */
    public static MethodHandle SHGetDriveMedia$handle() {
        return SHGetDriveMedia.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SHGetDriveMedia(PCWSTR pszDrive, DWORD *pdwMediaContent)
     * }
     */
    public static MemorySegment SHGetDriveMedia$address() {
        return SHGetDriveMedia.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SHGetDriveMedia(PCWSTR pszDrive, DWORD *pdwMediaContent)
     * }
     */
    public static int SHGetDriveMedia(MemorySegment pszDrive, MemorySegment pdwMediaContent) {
        var mh$ = SHGetDriveMedia.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SHGetDriveMedia", pszDrive, pdwMediaContent);
            }
            return (int)mh$.invokeExact(pszDrive, pdwMediaContent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PERF_DATA_BLOCK {
     *     WCHAR Signature[4];
     *     DWORD LittleEndian;
     *     DWORD Version;
     *     DWORD Revision;
     *     DWORD TotalByteLength;
     *     DWORD HeaderLength;
     *     DWORD NumObjectTypes;
     *     LONG DefaultObject;
     *     SYSTEMTIME SystemTime;
     *     LARGE_INTEGER PerfTime;
     *     LARGE_INTEGER PerfFreq;
     *     LARGE_INTEGER PerfTime100nSec;
     *     DWORD SystemNameLength;
     *     DWORD SystemNameOffset;
     * } *PPERF_DATA_BLOCK
     * }
     */
    public static final AddressLayout PPERF_DATA_BLOCK = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERF_OBJECT_TYPE {
     *     DWORD TotalByteLength;
     *     DWORD DefinitionLength;
     *     DWORD HeaderLength;
     *     DWORD ObjectNameTitleIndex;
     *     DWORD ObjectNameTitle;
     *     DWORD ObjectHelpTitleIndex;
     *     DWORD ObjectHelpTitle;
     *     DWORD DetailLevel;
     *     DWORD NumCounters;
     *     LONG DefaultCounter;
     *     LONG NumInstances;
     *     DWORD CodePage;
     *     LARGE_INTEGER PerfTime;
     *     LARGE_INTEGER PerfFreq;
     * } *PPERF_OBJECT_TYPE
     * }
     */
    public static final AddressLayout PPERF_OBJECT_TYPE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERF_COUNTER_DEFINITION {
     *     DWORD ByteLength;
     *     DWORD CounterNameTitleIndex;
     *     DWORD CounterNameTitle;
     *     DWORD CounterHelpTitleIndex;
     *     DWORD CounterHelpTitle;
     *     LONG DefaultScale;
     *     DWORD DetailLevel;
     *     DWORD CounterType;
     *     DWORD CounterSize;
     *     DWORD CounterOffset;
     * } *PPERF_COUNTER_DEFINITION
     * }
     */
    public static final AddressLayout PPERF_COUNTER_DEFINITION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERF_INSTANCE_DEFINITION {
     *     DWORD ByteLength;
     *     DWORD ParentObjectTitleIndex;
     *     DWORD ParentObjectInstance;
     *     LONG UniqueID;
     *     DWORD NameOffset;
     *     DWORD NameLength;
     * } *PPERF_INSTANCE_DEFINITION
     * }
     */
    public static final AddressLayout PPERF_INSTANCE_DEFINITION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PERF_COUNTER_BLOCK {
     *     DWORD ByteLength;
     * } *PPERF_COUNTER_BLOCK
     * }
     */
    public static final AddressLayout PPERF_COUNTER_BLOCK = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_char
     * }
     */
    public static final OfByte u_char = winapi.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_short
     * }
     */
    public static final OfShort u_short = winapi.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int
     * }
     */
    public static final OfInt u_int = winapi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long u_long
     * }
     */
    public static final OfInt u_long = winapi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef UINT_PTR SOCKET
     * }
     */
    public static final OfLong SOCKET = winapi.C_LONG_LONG;

    private static class __WSAFDIsSet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("__WSAFDIsSet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __WSAFDIsSet(SOCKET, fd_set *)
     * }
     */
    public static FunctionDescriptor __WSAFDIsSet$descriptor() {
        return __WSAFDIsSet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __WSAFDIsSet(SOCKET, fd_set *)
     * }
     */
    public static MethodHandle __WSAFDIsSet$handle() {
        return __WSAFDIsSet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __WSAFDIsSet(SOCKET, fd_set *)
     * }
     */
    public static MemorySegment __WSAFDIsSet$address() {
        return __WSAFDIsSet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __WSAFDIsSet(SOCKET, fd_set *)
     * }
     */
    public static int __WSAFDIsSet(long x0, MemorySegment x1) {
        var mh$ = __WSAFDIsSet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__WSAFDIsSet", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct in_addr {
     *     union {
     *         struct {
     *             UCHAR s_b1;
     *             UCHAR s_b2;
     *             UCHAR s_b3;
     *             UCHAR s_b4;
     *         } S_un_b;
     *         struct {
     *             USHORT s_w1;
     *             USHORT s_w2;
     *         } S_un_w;
     *         ULONG S_addr;
     *     } S_un;
     * } *PIN_ADDR
     * }
     */
    public static final AddressLayout PIN_ADDR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct in_addr {
     *     union {
     *         struct {
     *             UCHAR s_b1;
     *             UCHAR s_b2;
     *             UCHAR s_b3;
     *             UCHAR s_b4;
     *         } S_un_b;
     *         struct {
     *             USHORT s_w1;
     *             USHORT s_w2;
     *         } S_un_w;
     *         ULONG S_addr;
     *     } S_un;
     * } *LPIN_ADDR
     * }
     */
    public static final AddressLayout LPIN_ADDR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WSADATA *LPWSADATA
     * }
     */
    public static final AddressLayout LPWSADATA = winapi.C_POINTER;

    private static class accept {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("accept");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SOCKET accept(SOCKET s, struct sockaddr *addr, int *addrlen)
     * }
     */
    public static FunctionDescriptor accept$descriptor() {
        return accept.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SOCKET accept(SOCKET s, struct sockaddr *addr, int *addrlen)
     * }
     */
    public static MethodHandle accept$handle() {
        return accept.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SOCKET accept(SOCKET s, struct sockaddr *addr, int *addrlen)
     * }
     */
    public static MemorySegment accept$address() {
        return accept.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SOCKET accept(SOCKET s, struct sockaddr *addr, int *addrlen)
     * }
     */
    public static long accept(long s, MemorySegment addr, MemorySegment addrlen) {
        var mh$ = accept.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("accept", s, addr, addrlen);
            }
            return (long)mh$.invokeExact(s, addr, addrlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("bind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int bind(SOCKET s, const struct sockaddr *addr, int namelen)
     * }
     */
    public static FunctionDescriptor bind$descriptor() {
        return bind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int bind(SOCKET s, const struct sockaddr *addr, int namelen)
     * }
     */
    public static MethodHandle bind$handle() {
        return bind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int bind(SOCKET s, const struct sockaddr *addr, int namelen)
     * }
     */
    public static MemorySegment bind$address() {
        return bind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int bind(SOCKET s, const struct sockaddr *addr, int namelen)
     * }
     */
    public static int bind(long s, MemorySegment addr, int namelen) {
        var mh$ = bind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bind", s, addr, namelen);
            }
            return (int)mh$.invokeExact(s, addr, namelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class closesocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("closesocket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int closesocket(SOCKET s)
     * }
     */
    public static FunctionDescriptor closesocket$descriptor() {
        return closesocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int closesocket(SOCKET s)
     * }
     */
    public static MethodHandle closesocket$handle() {
        return closesocket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int closesocket(SOCKET s)
     * }
     */
    public static MemorySegment closesocket$address() {
        return closesocket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int closesocket(SOCKET s)
     * }
     */
    public static int closesocket(long s) {
        var mh$ = closesocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("closesocket", s);
            }
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("connect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int connect(SOCKET s, const struct sockaddr *name, int namelen)
     * }
     */
    public static FunctionDescriptor connect$descriptor() {
        return connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int connect(SOCKET s, const struct sockaddr *name, int namelen)
     * }
     */
    public static MethodHandle connect$handle() {
        return connect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int connect(SOCKET s, const struct sockaddr *name, int namelen)
     * }
     */
    public static MemorySegment connect$address() {
        return connect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int connect(SOCKET s, const struct sockaddr *name, int namelen)
     * }
     */
    public static int connect(long s, MemorySegment name, int namelen) {
        var mh$ = connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("connect", s, name, namelen);
            }
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ioctlsocket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ioctlsocket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ioctlsocket(SOCKET s, long cmd, u_long *argp)
     * }
     */
    public static FunctionDescriptor ioctlsocket$descriptor() {
        return ioctlsocket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ioctlsocket(SOCKET s, long cmd, u_long *argp)
     * }
     */
    public static MethodHandle ioctlsocket$handle() {
        return ioctlsocket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ioctlsocket(SOCKET s, long cmd, u_long *argp)
     * }
     */
    public static MemorySegment ioctlsocket$address() {
        return ioctlsocket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ioctlsocket(SOCKET s, long cmd, u_long *argp)
     * }
     */
    public static int ioctlsocket(long s, int cmd, MemorySegment argp) {
        var mh$ = ioctlsocket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ioctlsocket", s, cmd, argp);
            }
            return (int)mh$.invokeExact(s, cmd, argp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getpeername {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getpeername");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getpeername(SOCKET s, struct sockaddr *name, int *namelen)
     * }
     */
    public static FunctionDescriptor getpeername$descriptor() {
        return getpeername.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getpeername(SOCKET s, struct sockaddr *name, int *namelen)
     * }
     */
    public static MethodHandle getpeername$handle() {
        return getpeername.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getpeername(SOCKET s, struct sockaddr *name, int *namelen)
     * }
     */
    public static MemorySegment getpeername$address() {
        return getpeername.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getpeername(SOCKET s, struct sockaddr *name, int *namelen)
     * }
     */
    public static int getpeername(long s, MemorySegment name, MemorySegment namelen) {
        var mh$ = getpeername.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getpeername", s, name, namelen);
            }
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getsockname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getsockname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getsockname(SOCKET s, struct sockaddr *name, int *namelen)
     * }
     */
    public static FunctionDescriptor getsockname$descriptor() {
        return getsockname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getsockname(SOCKET s, struct sockaddr *name, int *namelen)
     * }
     */
    public static MethodHandle getsockname$handle() {
        return getsockname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getsockname(SOCKET s, struct sockaddr *name, int *namelen)
     * }
     */
    public static MemorySegment getsockname$address() {
        return getsockname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getsockname(SOCKET s, struct sockaddr *name, int *namelen)
     * }
     */
    public static int getsockname(long s, MemorySegment name, MemorySegment namelen) {
        var mh$ = getsockname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsockname", s, name, namelen);
            }
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getsockopt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getsockopt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getsockopt(SOCKET s, int level, int optname, char *optval, int *optlen)
     * }
     */
    public static FunctionDescriptor getsockopt$descriptor() {
        return getsockopt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getsockopt(SOCKET s, int level, int optname, char *optval, int *optlen)
     * }
     */
    public static MethodHandle getsockopt$handle() {
        return getsockopt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getsockopt(SOCKET s, int level, int optname, char *optval, int *optlen)
     * }
     */
    public static MemorySegment getsockopt$address() {
        return getsockopt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getsockopt(SOCKET s, int level, int optname, char *optval, int *optlen)
     * }
     */
    public static int getsockopt(long s, int level, int optname, MemorySegment optval, MemorySegment optlen) {
        var mh$ = getsockopt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsockopt", s, level, optname, optval, optlen);
            }
            return (int)mh$.invokeExact(s, level, optname, optval, optlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class htonl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("htonl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * u_long htonl(u_long hostlong)
     * }
     */
    public static FunctionDescriptor htonl$descriptor() {
        return htonl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * u_long htonl(u_long hostlong)
     * }
     */
    public static MethodHandle htonl$handle() {
        return htonl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * u_long htonl(u_long hostlong)
     * }
     */
    public static MemorySegment htonl$address() {
        return htonl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * u_long htonl(u_long hostlong)
     * }
     */
    public static int htonl(int hostlong) {
        var mh$ = htonl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("htonl", hostlong);
            }
            return (int)mh$.invokeExact(hostlong);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class htons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_SHORT,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("htons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * u_short htons(u_short hostshort)
     * }
     */
    public static FunctionDescriptor htons$descriptor() {
        return htons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * u_short htons(u_short hostshort)
     * }
     */
    public static MethodHandle htons$handle() {
        return htons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * u_short htons(u_short hostshort)
     * }
     */
    public static MemorySegment htons$address() {
        return htons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * u_short htons(u_short hostshort)
     * }
     */
    public static short htons(short hostshort) {
        var mh$ = htons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("htons", hostshort);
            }
            return (short)mh$.invokeExact(hostshort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class inet_addr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("inet_addr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long inet_addr(const char *cp)
     * }
     */
    public static FunctionDescriptor inet_addr$descriptor() {
        return inet_addr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long inet_addr(const char *cp)
     * }
     */
    public static MethodHandle inet_addr$handle() {
        return inet_addr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long inet_addr(const char *cp)
     * }
     */
    public static MemorySegment inet_addr$address() {
        return inet_addr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long inet_addr(const char *cp)
     * }
     */
    public static int inet_addr(MemorySegment cp) {
        var mh$ = inet_addr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("inet_addr", cp);
            }
            return (int)mh$.invokeExact(cp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class inet_ntoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            in_addr.layout()
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("inet_ntoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *inet_ntoa(struct in_addr in)
     * }
     */
    public static FunctionDescriptor inet_ntoa$descriptor() {
        return inet_ntoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *inet_ntoa(struct in_addr in)
     * }
     */
    public static MethodHandle inet_ntoa$handle() {
        return inet_ntoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *inet_ntoa(struct in_addr in)
     * }
     */
    public static MemorySegment inet_ntoa$address() {
        return inet_ntoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *inet_ntoa(struct in_addr in)
     * }
     */
    public static MemorySegment inet_ntoa(MemorySegment in) {
        var mh$ = inet_ntoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("inet_ntoa", in);
            }
            return (MemorySegment)mh$.invokeExact(in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class listen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("listen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int listen(SOCKET s, int backlog)
     * }
     */
    public static FunctionDescriptor listen$descriptor() {
        return listen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int listen(SOCKET s, int backlog)
     * }
     */
    public static MethodHandle listen$handle() {
        return listen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int listen(SOCKET s, int backlog)
     * }
     */
    public static MemorySegment listen$address() {
        return listen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int listen(SOCKET s, int backlog)
     * }
     */
    public static int listen(long s, int backlog) {
        var mh$ = listen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("listen", s, backlog);
            }
            return (int)mh$.invokeExact(s, backlog);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ntohl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ntohl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * u_long ntohl(u_long netlong)
     * }
     */
    public static FunctionDescriptor ntohl$descriptor() {
        return ntohl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * u_long ntohl(u_long netlong)
     * }
     */
    public static MethodHandle ntohl$handle() {
        return ntohl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * u_long ntohl(u_long netlong)
     * }
     */
    public static MemorySegment ntohl$address() {
        return ntohl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * u_long ntohl(u_long netlong)
     * }
     */
    public static int ntohl(int netlong) {
        var mh$ = ntohl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ntohl", netlong);
            }
            return (int)mh$.invokeExact(netlong);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ntohs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_SHORT,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ntohs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * u_short ntohs(u_short netshort)
     * }
     */
    public static FunctionDescriptor ntohs$descriptor() {
        return ntohs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * u_short ntohs(u_short netshort)
     * }
     */
    public static MethodHandle ntohs$handle() {
        return ntohs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * u_short ntohs(u_short netshort)
     * }
     */
    public static MemorySegment ntohs$address() {
        return ntohs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * u_short ntohs(u_short netshort)
     * }
     */
    public static short ntohs(short netshort) {
        var mh$ = ntohs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ntohs", netshort);
            }
            return (short)mh$.invokeExact(netshort);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class recv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("recv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int recv(SOCKET s, char *buf, int len, int flags)
     * }
     */
    public static FunctionDescriptor recv$descriptor() {
        return recv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int recv(SOCKET s, char *buf, int len, int flags)
     * }
     */
    public static MethodHandle recv$handle() {
        return recv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int recv(SOCKET s, char *buf, int len, int flags)
     * }
     */
    public static MemorySegment recv$address() {
        return recv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int recv(SOCKET s, char *buf, int len, int flags)
     * }
     */
    public static int recv(long s, MemorySegment buf, int len, int flags) {
        var mh$ = recv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("recv", s, buf, len, flags);
            }
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class recvfrom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("recvfrom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int recvfrom(SOCKET s, char *buf, int len, int flags, struct sockaddr *from, int *fromlen)
     * }
     */
    public static FunctionDescriptor recvfrom$descriptor() {
        return recvfrom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int recvfrom(SOCKET s, char *buf, int len, int flags, struct sockaddr *from, int *fromlen)
     * }
     */
    public static MethodHandle recvfrom$handle() {
        return recvfrom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int recvfrom(SOCKET s, char *buf, int len, int flags, struct sockaddr *from, int *fromlen)
     * }
     */
    public static MemorySegment recvfrom$address() {
        return recvfrom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int recvfrom(SOCKET s, char *buf, int len, int flags, struct sockaddr *from, int *fromlen)
     * }
     */
    public static int recvfrom(long s, MemorySegment buf, int len, int flags, MemorySegment from, MemorySegment fromlen) {
        var mh$ = recvfrom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("recvfrom", s, buf, len, flags, from, fromlen);
            }
            return (int)mh$.invokeExact(s, buf, len, flags, from, fromlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("select");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout)
     * }
     */
    public static MemorySegment select$address() {
        return select.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, const struct timeval *timeout)
     * }
     */
    public static int select(int nfds, MemorySegment readfds, MemorySegment writefds, MemorySegment exceptfds, MemorySegment timeout) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", nfds, readfds, writefds, exceptfds, timeout);
            }
            return (int)mh$.invokeExact(nfds, readfds, writefds, exceptfds, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class send {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("send");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int send(SOCKET s, const char *buf, int len, int flags)
     * }
     */
    public static FunctionDescriptor send$descriptor() {
        return send.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int send(SOCKET s, const char *buf, int len, int flags)
     * }
     */
    public static MethodHandle send$handle() {
        return send.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int send(SOCKET s, const char *buf, int len, int flags)
     * }
     */
    public static MemorySegment send$address() {
        return send.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int send(SOCKET s, const char *buf, int len, int flags)
     * }
     */
    public static int send(long s, MemorySegment buf, int len, int flags) {
        var mh$ = send.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("send", s, buf, len, flags);
            }
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sendto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("sendto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int sendto(SOCKET s, const char *buf, int len, int flags, const struct sockaddr *to, int tolen)
     * }
     */
    public static FunctionDescriptor sendto$descriptor() {
        return sendto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int sendto(SOCKET s, const char *buf, int len, int flags, const struct sockaddr *to, int tolen)
     * }
     */
    public static MethodHandle sendto$handle() {
        return sendto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int sendto(SOCKET s, const char *buf, int len, int flags, const struct sockaddr *to, int tolen)
     * }
     */
    public static MemorySegment sendto$address() {
        return sendto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int sendto(SOCKET s, const char *buf, int len, int flags, const struct sockaddr *to, int tolen)
     * }
     */
    public static int sendto(long s, MemorySegment buf, int len, int flags, MemorySegment to, int tolen) {
        var mh$ = sendto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sendto", s, buf, len, flags, to, tolen);
            }
            return (int)mh$.invokeExact(s, buf, len, flags, to, tolen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setsockopt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("setsockopt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setsockopt(SOCKET s, int level, int optname, const char *optval, int optlen)
     * }
     */
    public static FunctionDescriptor setsockopt$descriptor() {
        return setsockopt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setsockopt(SOCKET s, int level, int optname, const char *optval, int optlen)
     * }
     */
    public static MethodHandle setsockopt$handle() {
        return setsockopt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setsockopt(SOCKET s, int level, int optname, const char *optval, int optlen)
     * }
     */
    public static MemorySegment setsockopt$address() {
        return setsockopt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setsockopt(SOCKET s, int level, int optname, const char *optval, int optlen)
     * }
     */
    public static int setsockopt(long s, int level, int optname, MemorySegment optval, int optlen) {
        var mh$ = setsockopt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setsockopt", s, level, optname, optval, optlen);
            }
            return (int)mh$.invokeExact(s, level, optname, optval, optlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int shutdown(SOCKET s, int how)
     * }
     */
    public static FunctionDescriptor shutdown$descriptor() {
        return shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int shutdown(SOCKET s, int how)
     * }
     */
    public static MethodHandle shutdown$handle() {
        return shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int shutdown(SOCKET s, int how)
     * }
     */
    public static MemorySegment shutdown$address() {
        return shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int shutdown(SOCKET s, int how)
     * }
     */
    public static int shutdown(long s, int how) {
        var mh$ = shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("shutdown", s, how);
            }
            return (int)mh$.invokeExact(s, how);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class socket {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("socket");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SOCKET socket(int af, int type, int protocol)
     * }
     */
    public static FunctionDescriptor socket$descriptor() {
        return socket.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SOCKET socket(int af, int type, int protocol)
     * }
     */
    public static MethodHandle socket$handle() {
        return socket.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SOCKET socket(int af, int type, int protocol)
     * }
     */
    public static MemorySegment socket$address() {
        return socket.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SOCKET socket(int af, int type, int protocol)
     * }
     */
    public static long socket(int af, int type, int protocol) {
        var mh$ = socket.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("socket", af, type, protocol);
            }
            return (long)mh$.invokeExact(af, type, protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gethostbyaddr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("gethostbyaddr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct hostent *gethostbyaddr(const char *addr, int len, int type)
     * }
     */
    public static FunctionDescriptor gethostbyaddr$descriptor() {
        return gethostbyaddr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct hostent *gethostbyaddr(const char *addr, int len, int type)
     * }
     */
    public static MethodHandle gethostbyaddr$handle() {
        return gethostbyaddr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct hostent *gethostbyaddr(const char *addr, int len, int type)
     * }
     */
    public static MemorySegment gethostbyaddr$address() {
        return gethostbyaddr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct hostent *gethostbyaddr(const char *addr, int len, int type)
     * }
     */
    public static MemorySegment gethostbyaddr(MemorySegment addr, int len, int type) {
        var mh$ = gethostbyaddr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gethostbyaddr", addr, len, type);
            }
            return (MemorySegment)mh$.invokeExact(addr, len, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gethostbyname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("gethostbyname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct hostent *gethostbyname(const char *name)
     * }
     */
    public static FunctionDescriptor gethostbyname$descriptor() {
        return gethostbyname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct hostent *gethostbyname(const char *name)
     * }
     */
    public static MethodHandle gethostbyname$handle() {
        return gethostbyname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct hostent *gethostbyname(const char *name)
     * }
     */
    public static MemorySegment gethostbyname$address() {
        return gethostbyname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct hostent *gethostbyname(const char *name)
     * }
     */
    public static MemorySegment gethostbyname(MemorySegment name) {
        var mh$ = gethostbyname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gethostbyname", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gethostname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("gethostname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int gethostname(char *name, int namelen)
     * }
     */
    public static FunctionDescriptor gethostname$descriptor() {
        return gethostname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int gethostname(char *name, int namelen)
     * }
     */
    public static MethodHandle gethostname$handle() {
        return gethostname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int gethostname(char *name, int namelen)
     * }
     */
    public static MemorySegment gethostname$address() {
        return gethostname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int gethostname(char *name, int namelen)
     * }
     */
    public static int gethostname(MemorySegment name, int namelen) {
        var mh$ = gethostname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gethostname", name, namelen);
            }
            return (int)mh$.invokeExact(name, namelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getservbyport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getservbyport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct servent *getservbyport(int port, const char *proto)
     * }
     */
    public static FunctionDescriptor getservbyport$descriptor() {
        return getservbyport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct servent *getservbyport(int port, const char *proto)
     * }
     */
    public static MethodHandle getservbyport$handle() {
        return getservbyport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct servent *getservbyport(int port, const char *proto)
     * }
     */
    public static MemorySegment getservbyport$address() {
        return getservbyport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct servent *getservbyport(int port, const char *proto)
     * }
     */
    public static MemorySegment getservbyport(int port, MemorySegment proto) {
        var mh$ = getservbyport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getservbyport", port, proto);
            }
            return (MemorySegment)mh$.invokeExact(port, proto);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getservbyname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getservbyname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct servent *getservbyname(const char *name, const char *proto)
     * }
     */
    public static FunctionDescriptor getservbyname$descriptor() {
        return getservbyname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct servent *getservbyname(const char *name, const char *proto)
     * }
     */
    public static MethodHandle getservbyname$handle() {
        return getservbyname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct servent *getservbyname(const char *name, const char *proto)
     * }
     */
    public static MemorySegment getservbyname$address() {
        return getservbyname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct servent *getservbyname(const char *name, const char *proto)
     * }
     */
    public static MemorySegment getservbyname(MemorySegment name, MemorySegment proto) {
        var mh$ = getservbyname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getservbyname", name, proto);
            }
            return (MemorySegment)mh$.invokeExact(name, proto);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getprotobynumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getprotobynumber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct protoent *getprotobynumber(int proto)
     * }
     */
    public static FunctionDescriptor getprotobynumber$descriptor() {
        return getprotobynumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct protoent *getprotobynumber(int proto)
     * }
     */
    public static MethodHandle getprotobynumber$handle() {
        return getprotobynumber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct protoent *getprotobynumber(int proto)
     * }
     */
    public static MemorySegment getprotobynumber$address() {
        return getprotobynumber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct protoent *getprotobynumber(int proto)
     * }
     */
    public static MemorySegment getprotobynumber(int proto) {
        var mh$ = getprotobynumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getprotobynumber", proto);
            }
            return (MemorySegment)mh$.invokeExact(proto);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getprotobyname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getprotobyname");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct protoent *getprotobyname(const char *name)
     * }
     */
    public static FunctionDescriptor getprotobyname$descriptor() {
        return getprotobyname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct protoent *getprotobyname(const char *name)
     * }
     */
    public static MethodHandle getprotobyname$handle() {
        return getprotobyname.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct protoent *getprotobyname(const char *name)
     * }
     */
    public static MemorySegment getprotobyname$address() {
        return getprotobyname.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct protoent *getprotobyname(const char *name)
     * }
     */
    public static MemorySegment getprotobyname(MemorySegment name) {
        var mh$ = getprotobyname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getprotobyname", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAStartup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAStartup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WSAStartup(WORD wVersionRequired, LPWSADATA lpWSAData)
     * }
     */
    public static FunctionDescriptor WSAStartup$descriptor() {
        return WSAStartup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WSAStartup(WORD wVersionRequired, LPWSADATA lpWSAData)
     * }
     */
    public static MethodHandle WSAStartup$handle() {
        return WSAStartup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WSAStartup(WORD wVersionRequired, LPWSADATA lpWSAData)
     * }
     */
    public static MemorySegment WSAStartup$address() {
        return WSAStartup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WSAStartup(WORD wVersionRequired, LPWSADATA lpWSAData)
     * }
     */
    public static int WSAStartup(short wVersionRequired, MemorySegment lpWSAData) {
        var mh$ = WSAStartup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAStartup", wVersionRequired, lpWSAData);
            }
            return (int)mh$.invokeExact(wVersionRequired, lpWSAData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSACleanup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSACleanup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WSACleanup()
     * }
     */
    public static FunctionDescriptor WSACleanup$descriptor() {
        return WSACleanup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WSACleanup()
     * }
     */
    public static MethodHandle WSACleanup$handle() {
        return WSACleanup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WSACleanup()
     * }
     */
    public static MemorySegment WSACleanup$address() {
        return WSACleanup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WSACleanup()
     * }
     */
    public static int WSACleanup() {
        var mh$ = WSACleanup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSACleanup");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSASetLastError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSASetLastError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void WSASetLastError(int iError)
     * }
     */
    public static FunctionDescriptor WSASetLastError$descriptor() {
        return WSASetLastError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void WSASetLastError(int iError)
     * }
     */
    public static MethodHandle WSASetLastError$handle() {
        return WSASetLastError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void WSASetLastError(int iError)
     * }
     */
    public static MemorySegment WSASetLastError$address() {
        return WSASetLastError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void WSASetLastError(int iError)
     * }
     */
    public static void WSASetLastError(int iError) {
        var mh$ = WSASetLastError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSASetLastError", iError);
            }
            mh$.invokeExact(iError);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAGetLastError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAGetLastError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WSAGetLastError()
     * }
     */
    public static FunctionDescriptor WSAGetLastError$descriptor() {
        return WSAGetLastError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WSAGetLastError()
     * }
     */
    public static MethodHandle WSAGetLastError$handle() {
        return WSAGetLastError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WSAGetLastError()
     * }
     */
    public static MemorySegment WSAGetLastError$address() {
        return WSAGetLastError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WSAGetLastError()
     * }
     */
    public static int WSAGetLastError() {
        var mh$ = WSAGetLastError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAGetLastError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAIsBlocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAIsBlocking");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL WSAIsBlocking()
     * }
     */
    public static FunctionDescriptor WSAIsBlocking$descriptor() {
        return WSAIsBlocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL WSAIsBlocking()
     * }
     */
    public static MethodHandle WSAIsBlocking$handle() {
        return WSAIsBlocking.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL WSAIsBlocking()
     * }
     */
    public static MemorySegment WSAIsBlocking$address() {
        return WSAIsBlocking.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL WSAIsBlocking()
     * }
     */
    public static int WSAIsBlocking() {
        var mh$ = WSAIsBlocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAIsBlocking");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAUnhookBlockingHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAUnhookBlockingHook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WSAUnhookBlockingHook()
     * }
     */
    public static FunctionDescriptor WSAUnhookBlockingHook$descriptor() {
        return WSAUnhookBlockingHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WSAUnhookBlockingHook()
     * }
     */
    public static MethodHandle WSAUnhookBlockingHook$handle() {
        return WSAUnhookBlockingHook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WSAUnhookBlockingHook()
     * }
     */
    public static MemorySegment WSAUnhookBlockingHook$address() {
        return WSAUnhookBlockingHook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WSAUnhookBlockingHook()
     * }
     */
    public static int WSAUnhookBlockingHook() {
        var mh$ = WSAUnhookBlockingHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAUnhookBlockingHook");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSASetBlockingHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSASetBlockingHook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FARPROC WSASetBlockingHook(FARPROC lpBlockFunc)
     * }
     */
    public static FunctionDescriptor WSASetBlockingHook$descriptor() {
        return WSASetBlockingHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FARPROC WSASetBlockingHook(FARPROC lpBlockFunc)
     * }
     */
    public static MethodHandle WSASetBlockingHook$handle() {
        return WSASetBlockingHook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FARPROC WSASetBlockingHook(FARPROC lpBlockFunc)
     * }
     */
    public static MemorySegment WSASetBlockingHook$address() {
        return WSASetBlockingHook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FARPROC WSASetBlockingHook(FARPROC lpBlockFunc)
     * }
     */
    public static MemorySegment WSASetBlockingHook(MemorySegment lpBlockFunc) {
        var mh$ = WSASetBlockingHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSASetBlockingHook", lpBlockFunc);
            }
            return (MemorySegment)mh$.invokeExact(lpBlockFunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSACancelBlockingCall {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSACancelBlockingCall");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WSACancelBlockingCall()
     * }
     */
    public static FunctionDescriptor WSACancelBlockingCall$descriptor() {
        return WSACancelBlockingCall.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WSACancelBlockingCall()
     * }
     */
    public static MethodHandle WSACancelBlockingCall$handle() {
        return WSACancelBlockingCall.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WSACancelBlockingCall()
     * }
     */
    public static MemorySegment WSACancelBlockingCall$address() {
        return WSACancelBlockingCall.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WSACancelBlockingCall()
     * }
     */
    public static int WSACancelBlockingCall() {
        var mh$ = WSACancelBlockingCall.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSACancelBlockingCall");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAAsyncGetServByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAAsyncGetServByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetServByName(HWND hWnd, u_int wMsg, const char *name, const char *proto, char *buf, int buflen)
     * }
     */
    public static FunctionDescriptor WSAAsyncGetServByName$descriptor() {
        return WSAAsyncGetServByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetServByName(HWND hWnd, u_int wMsg, const char *name, const char *proto, char *buf, int buflen)
     * }
     */
    public static MethodHandle WSAAsyncGetServByName$handle() {
        return WSAAsyncGetServByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetServByName(HWND hWnd, u_int wMsg, const char *name, const char *proto, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetServByName$address() {
        return WSAAsyncGetServByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetServByName(HWND hWnd, u_int wMsg, const char *name, const char *proto, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetServByName(MemorySegment hWnd, int wMsg, MemorySegment name, MemorySegment proto, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetServByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAAsyncGetServByName", hWnd, wMsg, name, proto, buf, buflen);
            }
            return (MemorySegment)mh$.invokeExact(hWnd, wMsg, name, proto, buf, buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAAsyncGetServByPort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAAsyncGetServByPort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetServByPort(HWND hWnd, u_int wMsg, int port, const char *proto, char *buf, int buflen)
     * }
     */
    public static FunctionDescriptor WSAAsyncGetServByPort$descriptor() {
        return WSAAsyncGetServByPort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetServByPort(HWND hWnd, u_int wMsg, int port, const char *proto, char *buf, int buflen)
     * }
     */
    public static MethodHandle WSAAsyncGetServByPort$handle() {
        return WSAAsyncGetServByPort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetServByPort(HWND hWnd, u_int wMsg, int port, const char *proto, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetServByPort$address() {
        return WSAAsyncGetServByPort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetServByPort(HWND hWnd, u_int wMsg, int port, const char *proto, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetServByPort(MemorySegment hWnd, int wMsg, int port, MemorySegment proto, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetServByPort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAAsyncGetServByPort", hWnd, wMsg, port, proto, buf, buflen);
            }
            return (MemorySegment)mh$.invokeExact(hWnd, wMsg, port, proto, buf, buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAAsyncGetProtoByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAAsyncGetProtoByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetProtoByName(HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen)
     * }
     */
    public static FunctionDescriptor WSAAsyncGetProtoByName$descriptor() {
        return WSAAsyncGetProtoByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetProtoByName(HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen)
     * }
     */
    public static MethodHandle WSAAsyncGetProtoByName$handle() {
        return WSAAsyncGetProtoByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetProtoByName(HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetProtoByName$address() {
        return WSAAsyncGetProtoByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetProtoByName(HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetProtoByName(MemorySegment hWnd, int wMsg, MemorySegment name, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetProtoByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAAsyncGetProtoByName", hWnd, wMsg, name, buf, buflen);
            }
            return (MemorySegment)mh$.invokeExact(hWnd, wMsg, name, buf, buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAAsyncGetProtoByNumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAAsyncGetProtoByNumber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetProtoByNumber(HWND hWnd, u_int wMsg, int number, char *buf, int buflen)
     * }
     */
    public static FunctionDescriptor WSAAsyncGetProtoByNumber$descriptor() {
        return WSAAsyncGetProtoByNumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetProtoByNumber(HWND hWnd, u_int wMsg, int number, char *buf, int buflen)
     * }
     */
    public static MethodHandle WSAAsyncGetProtoByNumber$handle() {
        return WSAAsyncGetProtoByNumber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetProtoByNumber(HWND hWnd, u_int wMsg, int number, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetProtoByNumber$address() {
        return WSAAsyncGetProtoByNumber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetProtoByNumber(HWND hWnd, u_int wMsg, int number, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetProtoByNumber(MemorySegment hWnd, int wMsg, int number, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetProtoByNumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAAsyncGetProtoByNumber", hWnd, wMsg, number, buf, buflen);
            }
            return (MemorySegment)mh$.invokeExact(hWnd, wMsg, number, buf, buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAAsyncGetHostByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAAsyncGetHostByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetHostByName(HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen)
     * }
     */
    public static FunctionDescriptor WSAAsyncGetHostByName$descriptor() {
        return WSAAsyncGetHostByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetHostByName(HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen)
     * }
     */
    public static MethodHandle WSAAsyncGetHostByName$handle() {
        return WSAAsyncGetHostByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetHostByName(HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetHostByName$address() {
        return WSAAsyncGetHostByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetHostByName(HWND hWnd, u_int wMsg, const char *name, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetHostByName(MemorySegment hWnd, int wMsg, MemorySegment name, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetHostByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAAsyncGetHostByName", hWnd, wMsg, name, buf, buflen);
            }
            return (MemorySegment)mh$.invokeExact(hWnd, wMsg, name, buf, buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAAsyncGetHostByAddr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAAsyncGetHostByAddr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetHostByAddr(HWND hWnd, u_int wMsg, const char *addr, int len, int type, char *buf, int buflen)
     * }
     */
    public static FunctionDescriptor WSAAsyncGetHostByAddr$descriptor() {
        return WSAAsyncGetHostByAddr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetHostByAddr(HWND hWnd, u_int wMsg, const char *addr, int len, int type, char *buf, int buflen)
     * }
     */
    public static MethodHandle WSAAsyncGetHostByAddr$handle() {
        return WSAAsyncGetHostByAddr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetHostByAddr(HWND hWnd, u_int wMsg, const char *addr, int len, int type, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetHostByAddr$address() {
        return WSAAsyncGetHostByAddr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE WSAAsyncGetHostByAddr(HWND hWnd, u_int wMsg, const char *addr, int len, int type, char *buf, int buflen)
     * }
     */
    public static MemorySegment WSAAsyncGetHostByAddr(MemorySegment hWnd, int wMsg, MemorySegment addr, int len, int type, MemorySegment buf, int buflen) {
        var mh$ = WSAAsyncGetHostByAddr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAAsyncGetHostByAddr", hWnd, wMsg, addr, len, type, buf, buflen);
            }
            return (MemorySegment)mh$.invokeExact(hWnd, wMsg, addr, len, type, buf, buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSACancelAsyncRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSACancelAsyncRequest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WSACancelAsyncRequest(HANDLE hAsyncTaskHandle)
     * }
     */
    public static FunctionDescriptor WSACancelAsyncRequest$descriptor() {
        return WSACancelAsyncRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WSACancelAsyncRequest(HANDLE hAsyncTaskHandle)
     * }
     */
    public static MethodHandle WSACancelAsyncRequest$handle() {
        return WSACancelAsyncRequest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WSACancelAsyncRequest(HANDLE hAsyncTaskHandle)
     * }
     */
    public static MemorySegment WSACancelAsyncRequest$address() {
        return WSACancelAsyncRequest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WSACancelAsyncRequest(HANDLE hAsyncTaskHandle)
     * }
     */
    public static int WSACancelAsyncRequest(MemorySegment hAsyncTaskHandle) {
        var mh$ = WSACancelAsyncRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSACancelAsyncRequest", hAsyncTaskHandle);
            }
            return (int)mh$.invokeExact(hAsyncTaskHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSAAsyncSelect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSAAsyncSelect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WSAAsyncSelect(SOCKET s, HWND hWnd, u_int wMsg, long lEvent)
     * }
     */
    public static FunctionDescriptor WSAAsyncSelect$descriptor() {
        return WSAAsyncSelect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WSAAsyncSelect(SOCKET s, HWND hWnd, u_int wMsg, long lEvent)
     * }
     */
    public static MethodHandle WSAAsyncSelect$handle() {
        return WSAAsyncSelect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WSAAsyncSelect(SOCKET s, HWND hWnd, u_int wMsg, long lEvent)
     * }
     */
    public static MemorySegment WSAAsyncSelect$address() {
        return WSAAsyncSelect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WSAAsyncSelect(SOCKET s, HWND hWnd, u_int wMsg, long lEvent)
     * }
     */
    public static int WSAAsyncSelect(long s, MemorySegment hWnd, int wMsg, int lEvent) {
        var mh$ = WSAAsyncSelect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSAAsyncSelect", s, hWnd, wMsg, lEvent);
            }
            return (int)mh$.invokeExact(s, hWnd, wMsg, lEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WSARecvEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WSARecvEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int WSARecvEx(SOCKET s, char *buf, int len, int *flags)
     * }
     */
    public static FunctionDescriptor WSARecvEx$descriptor() {
        return WSARecvEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int WSARecvEx(SOCKET s, char *buf, int len, int *flags)
     * }
     */
    public static MethodHandle WSARecvEx$handle() {
        return WSARecvEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int WSARecvEx(SOCKET s, char *buf, int len, int *flags)
     * }
     */
    public static MemorySegment WSARecvEx$address() {
        return WSARecvEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int WSARecvEx(SOCKET s, char *buf, int len, int *flags)
     * }
     */
    public static int WSARecvEx(long s, MemorySegment buf, int len, MemorySegment flags) {
        var mh$ = WSARecvEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WSARecvEx", s, buf, len, flags);
            }
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSMIT_FILE_BUFFERS {
     *     PVOID Head;
     *     DWORD HeadLength;
     *     PVOID Tail;
     *     DWORD TailLength;
     * } *PTRANSMIT_FILE_BUFFERS
     * }
     */
    public static final AddressLayout PTRANSMIT_FILE_BUFFERS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _TRANSMIT_FILE_BUFFERS {
     *     PVOID Head;
     *     DWORD HeadLength;
     *     PVOID Tail;
     *     DWORD TailLength;
     * } *LPTRANSMIT_FILE_BUFFERS
     * }
     */
    public static final AddressLayout LPTRANSMIT_FILE_BUFFERS = winapi.C_POINTER;

    private static class TransmitFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("TransmitFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL TransmitFile(SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor TransmitFile$descriptor() {
        return TransmitFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL TransmitFile(SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved)
     * }
     */
    public static MethodHandle TransmitFile$handle() {
        return TransmitFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL TransmitFile(SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved)
     * }
     */
    public static MemorySegment TransmitFile$address() {
        return TransmitFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL TransmitFile(SOCKET hSocket, HANDLE hFile, DWORD nNumberOfBytesToWrite, DWORD nNumberOfBytesPerSend, LPOVERLAPPED lpOverlapped, LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers, DWORD dwReserved)
     * }
     */
    public static int TransmitFile(long hSocket, MemorySegment hFile, int nNumberOfBytesToWrite, int nNumberOfBytesPerSend, MemorySegment lpOverlapped, MemorySegment lpTransmitBuffers, int dwReserved) {
        var mh$ = TransmitFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("TransmitFile", hSocket, hFile, nNumberOfBytesToWrite, nNumberOfBytesPerSend, lpOverlapped, lpTransmitBuffers, dwReserved);
            }
            return (int)mh$.invokeExact(hSocket, hFile, nNumberOfBytesToWrite, nNumberOfBytesPerSend, lpOverlapped, lpTransmitBuffers, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AcceptEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AcceptEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AcceptEx(SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped)
     * }
     */
    public static FunctionDescriptor AcceptEx$descriptor() {
        return AcceptEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AcceptEx(SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped)
     * }
     */
    public static MethodHandle AcceptEx$handle() {
        return AcceptEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AcceptEx(SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped)
     * }
     */
    public static MemorySegment AcceptEx$address() {
        return AcceptEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AcceptEx(SOCKET sListenSocket, SOCKET sAcceptSocket, PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, LPDWORD lpdwBytesReceived, LPOVERLAPPED lpOverlapped)
     * }
     */
    public static int AcceptEx(long sListenSocket, long sAcceptSocket, MemorySegment lpOutputBuffer, int dwReceiveDataLength, int dwLocalAddressLength, int dwRemoteAddressLength, MemorySegment lpdwBytesReceived, MemorySegment lpOverlapped) {
        var mh$ = AcceptEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AcceptEx", sListenSocket, sAcceptSocket, lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, lpdwBytesReceived, lpOverlapped);
            }
            return (int)mh$.invokeExact(sListenSocket, sAcceptSocket, lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, lpdwBytesReceived, lpOverlapped);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetAcceptExSockaddrs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetAcceptExSockaddrs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void GetAcceptExSockaddrs(PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, struct sockaddr **LocalSockaddr, LPINT LocalSockaddrLength, struct sockaddr **RemoteSockaddr, LPINT RemoteSockaddrLength)
     * }
     */
    public static FunctionDescriptor GetAcceptExSockaddrs$descriptor() {
        return GetAcceptExSockaddrs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void GetAcceptExSockaddrs(PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, struct sockaddr **LocalSockaddr, LPINT LocalSockaddrLength, struct sockaddr **RemoteSockaddr, LPINT RemoteSockaddrLength)
     * }
     */
    public static MethodHandle GetAcceptExSockaddrs$handle() {
        return GetAcceptExSockaddrs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void GetAcceptExSockaddrs(PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, struct sockaddr **LocalSockaddr, LPINT LocalSockaddrLength, struct sockaddr **RemoteSockaddr, LPINT RemoteSockaddrLength)
     * }
     */
    public static MemorySegment GetAcceptExSockaddrs$address() {
        return GetAcceptExSockaddrs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void GetAcceptExSockaddrs(PVOID lpOutputBuffer, DWORD dwReceiveDataLength, DWORD dwLocalAddressLength, DWORD dwRemoteAddressLength, struct sockaddr **LocalSockaddr, LPINT LocalSockaddrLength, struct sockaddr **RemoteSockaddr, LPINT RemoteSockaddrLength)
     * }
     */
    public static void GetAcceptExSockaddrs(MemorySegment lpOutputBuffer, int dwReceiveDataLength, int dwLocalAddressLength, int dwRemoteAddressLength, MemorySegment LocalSockaddr, MemorySegment LocalSockaddrLength, MemorySegment RemoteSockaddr, MemorySegment RemoteSockaddrLength) {
        var mh$ = GetAcceptExSockaddrs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetAcceptExSockaddrs", lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, LocalSockaddr, LocalSockaddrLength, RemoteSockaddr, RemoteSockaddrLength);
            }
            mh$.invokeExact(lpOutputBuffer, dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, LocalSockaddr, LocalSockaddrLength, RemoteSockaddr, RemoteSockaddrLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct sockaddr {
     *     u_short sa_family;
     *     char sa_data[14];
     * } *PSOCKADDR
     * }
     */
    public static final AddressLayout PSOCKADDR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct sockaddr {
     *     u_short sa_family;
     *     char sa_data[14];
     * } *LPSOCKADDR
     * }
     */
    public static final AddressLayout LPSOCKADDR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct sockaddr_in {
     *     short sin_family;
     *     u_short sin_port;
     *     struct in_addr sin_addr;
     *     char sin_zero[8];
     * } *PSOCKADDR_IN
     * }
     */
    public static final AddressLayout PSOCKADDR_IN = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct sockaddr_in {
     *     short sin_family;
     *     u_short sin_port;
     *     struct in_addr sin_addr;
     *     char sin_zero[8];
     * } *LPSOCKADDR_IN
     * }
     */
    public static final AddressLayout LPSOCKADDR_IN = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct linger {
     *     u_short l_onoff;
     *     u_short l_linger;
     * } *PLINGER
     * }
     */
    public static final AddressLayout PLINGER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct linger {
     *     u_short l_onoff;
     *     u_short l_linger;
     * } *LPLINGER
     * }
     */
    public static final AddressLayout LPLINGER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct fd_set {
     *     u_int fd_count;
     *     SOCKET fd_array[64];
     * } *PFD_SET
     * }
     */
    public static final AddressLayout PFD_SET = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct fd_set {
     *     u_int fd_count;
     *     SOCKET fd_array[64];
     * } *LPFD_SET
     * }
     */
    public static final AddressLayout LPFD_SET = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct hostent {
     *     char *h_name;
     *     char **h_aliases;
     *     short h_addrtype;
     *     short h_length;
     *     char **h_addr_list;
     * } *PHOSTENT
     * }
     */
    public static final AddressLayout PHOSTENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct hostent {
     *     char *h_name;
     *     char **h_aliases;
     *     short h_addrtype;
     *     short h_length;
     *     char **h_addr_list;
     * } *LPHOSTENT
     * }
     */
    public static final AddressLayout LPHOSTENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct servent {
     *     char *s_name;
     *     char **s_aliases;
     *     char *s_proto;
     *     short s_port;
     * } *PSERVENT
     * }
     */
    public static final AddressLayout PSERVENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct servent {
     *     char *s_name;
     *     char **s_aliases;
     *     char *s_proto;
     *     short s_port;
     * } *LPSERVENT
     * }
     */
    public static final AddressLayout LPSERVENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct protoent {
     *     char *p_name;
     *     char **p_aliases;
     *     short p_proto;
     * } *PPROTOENT
     * }
     */
    public static final AddressLayout PPROTOENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct protoent {
     *     char *p_name;
     *     char **p_aliases;
     *     short p_proto;
     * } *LPPROTOENT
     * }
     */
    public static final AddressLayout LPPROTOENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct timeval {
     *     long tv_sec;
     *     long tv_usec;
     * } *PTIMEVAL
     * }
     */
    public static final AddressLayout PTIMEVAL = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct timeval {
     *     long tv_sec;
     *     long tv_usec;
     * } *LPTIMEVAL
     * }
     */
    public static final AddressLayout LPTIMEVAL = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned int ALG_ID
     * }
     */
    public static final OfInt ALG_ID = winapi.C_INT;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR HCRYPTPROV
     * }
     */
    public static final OfLong HCRYPTPROV = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR HCRYPTKEY
     * }
     */
    public static final OfLong HCRYPTKEY = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR HCRYPTHASH
     * }
     */
    public static final OfLong HCRYPTHASH = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _CMS_KEY_INFO {
     *     DWORD dwVersion;
     *     ALG_ID Algid;
     *     BYTE *pbOID;
     *     DWORD cbOID;
     * } *PCMS_KEY_INFO
     * }
     */
    public static final AddressLayout PCMS_KEY_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _HMAC_Info {
     *     ALG_ID HashAlgid;
     *     BYTE *pbInnerString;
     *     DWORD cbInnerString;
     *     BYTE *pbOuterString;
     *     DWORD cbOuterString;
     * } *PHMAC_INFO
     * }
     */
    public static final AddressLayout PHMAC_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCHANNEL_ALG {
     *     DWORD dwUse;
     *     ALG_ID Algid;
     *     DWORD cBits;
     *     DWORD dwFlags;
     *     DWORD dwReserved;
     * } *PSCHANNEL_ALG
     * }
     */
    public static final AddressLayout PSCHANNEL_ALG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _KEY_TYPE_SUBTYPE {
     *     DWORD dwKeySpec;
     *     GUID Type;
     *     GUID Subtype;
     * } *PKEY_TYPE_SUBTYPE
     * }
     */
    public static final AddressLayout PKEY_TYPE_SUBTYPE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_RC4_KEY_STATE {
     *     unsigned char Key[16];
     *     unsigned char SBox[256];
     *     unsigned char i;
     *     unsigned char j;
     * } *PCRYPT_RC4_KEY_STATE
     * }
     */
    public static final AddressLayout PCRYPT_RC4_KEY_STATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_DES_KEY_STATE {
     *     unsigned char Key[8];
     *     unsigned char IV[8];
     *     unsigned char Feedback[8];
     * } *PCRYPT_DES_KEY_STATE
     * }
     */
    public static final AddressLayout PCRYPT_DES_KEY_STATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_3DES_KEY_STATE {
     *     unsigned char Key[24];
     *     unsigned char IV[8];
     *     unsigned char Feedback[8];
     * } *PCRYPT_3DES_KEY_STATE
     * }
     */
    public static final AddressLayout PCRYPT_3DES_KEY_STATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_AES_128_KEY_STATE {
     *     unsigned char Key[16];
     *     unsigned char IV[16];
     *     unsigned char EncryptionState[11][16];
     *     unsigned char DecryptionState[11][16];
     *     unsigned char Feedback[16];
     * } *PCRYPT_AES_128_KEY_STATE
     * }
     */
    public static final AddressLayout PCRYPT_AES_128_KEY_STATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_AES_256_KEY_STATE {
     *     unsigned char Key[32];
     *     unsigned char IV[16];
     *     unsigned char EncryptionState[15][16];
     *     unsigned char DecryptionState[15][16];
     *     unsigned char Feedback[16];
     * } *PCRYPT_AES_256_KEY_STATE
     * }
     */
    public static final AddressLayout PCRYPT_AES_256_KEY_STATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRYPT_INTEGER_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_INTEGER_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRYPT_UINT_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_UINT_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRYPT_OBJID_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_OBJID_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCERT_NAME_BLOB
     * }
     */
    public static final AddressLayout PCERT_NAME_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCERT_RDN_VALUE_BLOB
     * }
     */
    public static final AddressLayout PCERT_RDN_VALUE_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCERT_BLOB
     * }
     */
    public static final AddressLayout PCERT_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRL_BLOB
     * }
     */
    public static final AddressLayout PCRL_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PDATA_BLOB
     * }
     */
    public static final AddressLayout PDATA_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRYPT_DATA_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_DATA_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRYPT_HASH_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_HASH_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRYPT_DIGEST_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_DIGEST_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRYPT_DER_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_DER_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPTOAPI_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     * } *PCRYPT_ATTR_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_ATTR_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CMS_DH_KEY_INFO {
     *     DWORD dwVersion;
     *     ALG_ID Algid;
     *     LPSTR pszContentEncObjId;
     *     CRYPT_DATA_BLOB PubInfo;
     *     void *pReserved;
     * } *PCMS_DH_KEY_INFO
     * }
     */
    public static final AddressLayout PCMS_DH_KEY_INFO = winapi.C_POINTER;

    private static class CryptAcquireContextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptAcquireContextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptAcquireContextA(HCRYPTPROV *phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptAcquireContextA$descriptor() {
        return CryptAcquireContextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptAcquireContextA(HCRYPTPROV *phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptAcquireContextA$handle() {
        return CryptAcquireContextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptAcquireContextA(HCRYPTPROV *phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptAcquireContextA$address() {
        return CryptAcquireContextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptAcquireContextA(HCRYPTPROV *phProv, LPCSTR szContainer, LPCSTR szProvider, DWORD dwProvType, DWORD dwFlags)
     * }
     */
    public static int CryptAcquireContextA(MemorySegment phProv, MemorySegment szContainer, MemorySegment szProvider, int dwProvType, int dwFlags) {
        var mh$ = CryptAcquireContextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptAcquireContextA", phProv, szContainer, szProvider, dwProvType, dwFlags);
            }
            return (int)mh$.invokeExact(phProv, szContainer, szProvider, dwProvType, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptAcquireContextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptAcquireContextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptAcquireContextW(HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptAcquireContextW$descriptor() {
        return CryptAcquireContextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptAcquireContextW(HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptAcquireContextW$handle() {
        return CryptAcquireContextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptAcquireContextW(HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptAcquireContextW$address() {
        return CryptAcquireContextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptAcquireContextW(HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags)
     * }
     */
    public static int CryptAcquireContextW(MemorySegment phProv, MemorySegment szContainer, MemorySegment szProvider, int dwProvType, int dwFlags) {
        var mh$ = CryptAcquireContextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptAcquireContextW", phProv, szContainer, szProvider, dwProvType, dwFlags);
            }
            return (int)mh$.invokeExact(phProv, szContainer, szProvider, dwProvType, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptReleaseContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptReleaseContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptReleaseContext(HCRYPTPROV hProv, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptReleaseContext$descriptor() {
        return CryptReleaseContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptReleaseContext(HCRYPTPROV hProv, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptReleaseContext$handle() {
        return CryptReleaseContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptReleaseContext(HCRYPTPROV hProv, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptReleaseContext$address() {
        return CryptReleaseContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptReleaseContext(HCRYPTPROV hProv, DWORD dwFlags)
     * }
     */
    public static int CryptReleaseContext(long hProv, int dwFlags) {
        var mh$ = CryptReleaseContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptReleaseContext", hProv, dwFlags);
            }
            return (int)mh$.invokeExact(hProv, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptGenKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptGenKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptGenKey(HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static FunctionDescriptor CryptGenKey$descriptor() {
        return CryptGenKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptGenKey(HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static MethodHandle CryptGenKey$handle() {
        return CryptGenKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptGenKey(HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static MemorySegment CryptGenKey$address() {
        return CryptGenKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptGenKey(HCRYPTPROV hProv, ALG_ID Algid, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static int CryptGenKey(long hProv, int Algid, int dwFlags, MemorySegment phKey) {
        var mh$ = CryptGenKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptGenKey", hProv, Algid, dwFlags, phKey);
            }
            return (int)mh$.invokeExact(hProv, Algid, dwFlags, phKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptDeriveKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptDeriveKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptDeriveKey(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static FunctionDescriptor CryptDeriveKey$descriptor() {
        return CryptDeriveKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptDeriveKey(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static MethodHandle CryptDeriveKey$handle() {
        return CryptDeriveKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptDeriveKey(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static MemorySegment CryptDeriveKey$address() {
        return CryptDeriveKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptDeriveKey(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTHASH hBaseData, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static int CryptDeriveKey(long hProv, int Algid, long hBaseData, int dwFlags, MemorySegment phKey) {
        var mh$ = CryptDeriveKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptDeriveKey", hProv, Algid, hBaseData, dwFlags, phKey);
            }
            return (int)mh$.invokeExact(hProv, Algid, hBaseData, dwFlags, phKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptDestroyKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptDestroyKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptDestroyKey(HCRYPTKEY hKey)
     * }
     */
    public static FunctionDescriptor CryptDestroyKey$descriptor() {
        return CryptDestroyKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptDestroyKey(HCRYPTKEY hKey)
     * }
     */
    public static MethodHandle CryptDestroyKey$handle() {
        return CryptDestroyKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptDestroyKey(HCRYPTKEY hKey)
     * }
     */
    public static MemorySegment CryptDestroyKey$address() {
        return CryptDestroyKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptDestroyKey(HCRYPTKEY hKey)
     * }
     */
    public static int CryptDestroyKey(long hKey) {
        var mh$ = CryptDestroyKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptDestroyKey", hKey);
            }
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSetKeyParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSetKeyParam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSetKeyParam(HCRYPTKEY hKey, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptSetKeyParam$descriptor() {
        return CryptSetKeyParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSetKeyParam(HCRYPTKEY hKey, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptSetKeyParam$handle() {
        return CryptSetKeyParam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSetKeyParam(HCRYPTKEY hKey, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptSetKeyParam$address() {
        return CryptSetKeyParam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSetKeyParam(HCRYPTKEY hKey, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static int CryptSetKeyParam(long hKey, int dwParam, MemorySegment pbData, int dwFlags) {
        var mh$ = CryptSetKeyParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSetKeyParam", hKey, dwParam, pbData, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptGetKeyParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptGetKeyParam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptGetKeyParam(HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptGetKeyParam$descriptor() {
        return CryptGetKeyParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptGetKeyParam(HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptGetKeyParam$handle() {
        return CryptGetKeyParam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptGetKeyParam(HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptGetKeyParam$address() {
        return CryptGetKeyParam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptGetKeyParam(HCRYPTKEY hKey, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static int CryptGetKeyParam(long hKey, int dwParam, MemorySegment pbData, MemorySegment pdwDataLen, int dwFlags) {
        var mh$ = CryptGetKeyParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptGetKeyParam", hKey, dwParam, pbData, pdwDataLen, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSetHashParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSetHashParam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSetHashParam(HCRYPTHASH hHash, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptSetHashParam$descriptor() {
        return CryptSetHashParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSetHashParam(HCRYPTHASH hHash, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptSetHashParam$handle() {
        return CryptSetHashParam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSetHashParam(HCRYPTHASH hHash, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptSetHashParam$address() {
        return CryptSetHashParam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSetHashParam(HCRYPTHASH hHash, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static int CryptSetHashParam(long hHash, int dwParam, MemorySegment pbData, int dwFlags) {
        var mh$ = CryptSetHashParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSetHashParam", hHash, dwParam, pbData, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptGetHashParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptGetHashParam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptGetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptGetHashParam$descriptor() {
        return CryptGetHashParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptGetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptGetHashParam$handle() {
        return CryptGetHashParam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptGetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptGetHashParam$address() {
        return CryptGetHashParam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptGetHashParam(HCRYPTHASH hHash, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static int CryptGetHashParam(long hHash, int dwParam, MemorySegment pbData, MemorySegment pdwDataLen, int dwFlags) {
        var mh$ = CryptGetHashParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptGetHashParam", hHash, dwParam, pbData, pdwDataLen, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSetProvParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSetProvParam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSetProvParam(HCRYPTPROV hProv, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptSetProvParam$descriptor() {
        return CryptSetProvParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSetProvParam(HCRYPTPROV hProv, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptSetProvParam$handle() {
        return CryptSetProvParam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSetProvParam(HCRYPTPROV hProv, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptSetProvParam$address() {
        return CryptSetProvParam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSetProvParam(HCRYPTPROV hProv, DWORD dwParam, const BYTE *pbData, DWORD dwFlags)
     * }
     */
    public static int CryptSetProvParam(long hProv, int dwParam, MemorySegment pbData, int dwFlags) {
        var mh$ = CryptSetProvParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSetProvParam", hProv, dwParam, pbData, dwFlags);
            }
            return (int)mh$.invokeExact(hProv, dwParam, pbData, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptGetProvParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptGetProvParam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptGetProvParam(HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptGetProvParam$descriptor() {
        return CryptGetProvParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptGetProvParam(HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptGetProvParam$handle() {
        return CryptGetProvParam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptGetProvParam(HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptGetProvParam$address() {
        return CryptGetProvParam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptGetProvParam(HCRYPTPROV hProv, DWORD dwParam, BYTE *pbData, DWORD *pdwDataLen, DWORD dwFlags)
     * }
     */
    public static int CryptGetProvParam(long hProv, int dwParam, MemorySegment pbData, MemorySegment pdwDataLen, int dwFlags) {
        var mh$ = CryptGetProvParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptGetProvParam", hProv, dwParam, pbData, pdwDataLen, dwFlags);
            }
            return (int)mh$.invokeExact(hProv, dwParam, pbData, pdwDataLen, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptGenRandom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptGenRandom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptGenRandom(HCRYPTPROV hProv, DWORD dwLen, BYTE *pbBuffer)
     * }
     */
    public static FunctionDescriptor CryptGenRandom$descriptor() {
        return CryptGenRandom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptGenRandom(HCRYPTPROV hProv, DWORD dwLen, BYTE *pbBuffer)
     * }
     */
    public static MethodHandle CryptGenRandom$handle() {
        return CryptGenRandom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptGenRandom(HCRYPTPROV hProv, DWORD dwLen, BYTE *pbBuffer)
     * }
     */
    public static MemorySegment CryptGenRandom$address() {
        return CryptGenRandom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptGenRandom(HCRYPTPROV hProv, DWORD dwLen, BYTE *pbBuffer)
     * }
     */
    public static int CryptGenRandom(long hProv, int dwLen, MemorySegment pbBuffer) {
        var mh$ = CryptGenRandom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptGenRandom", hProv, dwLen, pbBuffer);
            }
            return (int)mh$.invokeExact(hProv, dwLen, pbBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptGetUserKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptGetUserKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptGetUserKey(HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY *phUserKey)
     * }
     */
    public static FunctionDescriptor CryptGetUserKey$descriptor() {
        return CryptGetUserKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptGetUserKey(HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY *phUserKey)
     * }
     */
    public static MethodHandle CryptGetUserKey$handle() {
        return CryptGetUserKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptGetUserKey(HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY *phUserKey)
     * }
     */
    public static MemorySegment CryptGetUserKey$address() {
        return CryptGetUserKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptGetUserKey(HCRYPTPROV hProv, DWORD dwKeySpec, HCRYPTKEY *phUserKey)
     * }
     */
    public static int CryptGetUserKey(long hProv, int dwKeySpec, MemorySegment phUserKey) {
        var mh$ = CryptGetUserKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptGetUserKey", hProv, dwKeySpec, phUserKey);
            }
            return (int)mh$.invokeExact(hProv, dwKeySpec, phUserKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptExportKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptExportKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptExportKey(HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
     * }
     */
    public static FunctionDescriptor CryptExportKey$descriptor() {
        return CryptExportKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptExportKey(HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
     * }
     */
    public static MethodHandle CryptExportKey$handle() {
        return CryptExportKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptExportKey(HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
     * }
     */
    public static MemorySegment CryptExportKey$address() {
        return CryptExportKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptExportKey(HCRYPTKEY hKey, HCRYPTKEY hExpKey, DWORD dwBlobType, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
     * }
     */
    public static int CryptExportKey(long hKey, long hExpKey, int dwBlobType, int dwFlags, MemorySegment pbData, MemorySegment pdwDataLen) {
        var mh$ = CryptExportKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptExportKey", hKey, hExpKey, dwBlobType, dwFlags, pbData, pdwDataLen);
            }
            return (int)mh$.invokeExact(hKey, hExpKey, dwBlobType, dwFlags, pbData, pdwDataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptImportKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptImportKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptImportKey(HCRYPTPROV hProv, const BYTE *pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static FunctionDescriptor CryptImportKey$descriptor() {
        return CryptImportKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptImportKey(HCRYPTPROV hProv, const BYTE *pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static MethodHandle CryptImportKey$handle() {
        return CryptImportKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptImportKey(HCRYPTPROV hProv, const BYTE *pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static MemorySegment CryptImportKey$address() {
        return CryptImportKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptImportKey(HCRYPTPROV hProv, const BYTE *pbData, DWORD dwDataLen, HCRYPTKEY hPubKey, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static int CryptImportKey(long hProv, MemorySegment pbData, int dwDataLen, long hPubKey, int dwFlags, MemorySegment phKey) {
        var mh$ = CryptImportKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptImportKey", hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey);
            }
            return (int)mh$.invokeExact(hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptEncrypt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptEncrypt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptEncrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor CryptEncrypt$descriptor() {
        return CryptEncrypt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptEncrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen)
     * }
     */
    public static MethodHandle CryptEncrypt$handle() {
        return CryptEncrypt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptEncrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen)
     * }
     */
    public static MemorySegment CryptEncrypt$address() {
        return CryptEncrypt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptEncrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen, DWORD dwBufLen)
     * }
     */
    public static int CryptEncrypt(long hKey, long hHash, int Final, int dwFlags, MemorySegment pbData, MemorySegment pdwDataLen, int dwBufLen) {
        var mh$ = CryptEncrypt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptEncrypt", hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen);
            }
            return (int)mh$.invokeExact(hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptDecrypt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptDecrypt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptDecrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
     * }
     */
    public static FunctionDescriptor CryptDecrypt$descriptor() {
        return CryptDecrypt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptDecrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
     * }
     */
    public static MethodHandle CryptDecrypt$handle() {
        return CryptDecrypt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptDecrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
     * }
     */
    public static MemorySegment CryptDecrypt$address() {
        return CryptDecrypt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptDecrypt(HCRYPTKEY hKey, HCRYPTHASH hHash, BOOL Final, DWORD dwFlags, BYTE *pbData, DWORD *pdwDataLen)
     * }
     */
    public static int CryptDecrypt(long hKey, long hHash, int Final, int dwFlags, MemorySegment pbData, MemorySegment pdwDataLen) {
        var mh$ = CryptDecrypt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptDecrypt", hKey, hHash, Final, dwFlags, pbData, pdwDataLen);
            }
            return (int)mh$.invokeExact(hKey, hHash, Final, dwFlags, pbData, pdwDataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptCreateHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptCreateHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptCreateHash(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash)
     * }
     */
    public static FunctionDescriptor CryptCreateHash$descriptor() {
        return CryptCreateHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptCreateHash(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash)
     * }
     */
    public static MethodHandle CryptCreateHash$handle() {
        return CryptCreateHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptCreateHash(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash)
     * }
     */
    public static MemorySegment CryptCreateHash$address() {
        return CryptCreateHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptCreateHash(HCRYPTPROV hProv, ALG_ID Algid, HCRYPTKEY hKey, DWORD dwFlags, HCRYPTHASH *phHash)
     * }
     */
    public static int CryptCreateHash(long hProv, int Algid, long hKey, int dwFlags, MemorySegment phHash) {
        var mh$ = CryptCreateHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptCreateHash", hProv, Algid, hKey, dwFlags, phHash);
            }
            return (int)mh$.invokeExact(hProv, Algid, hKey, dwFlags, phHash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptHashData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptHashData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptHashData(HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptHashData$descriptor() {
        return CryptHashData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptHashData(HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptHashData$handle() {
        return CryptHashData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptHashData(HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptHashData$address() {
        return CryptHashData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptHashData(HCRYPTHASH hHash, const BYTE *pbData, DWORD dwDataLen, DWORD dwFlags)
     * }
     */
    public static int CryptHashData(long hHash, MemorySegment pbData, int dwDataLen, int dwFlags) {
        var mh$ = CryptHashData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptHashData", hHash, pbData, dwDataLen, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, pbData, dwDataLen, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptHashSessionKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptHashSessionKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptHashSessionKey(HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptHashSessionKey$descriptor() {
        return CryptHashSessionKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptHashSessionKey(HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptHashSessionKey$handle() {
        return CryptHashSessionKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptHashSessionKey(HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptHashSessionKey$address() {
        return CryptHashSessionKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptHashSessionKey(HCRYPTHASH hHash, HCRYPTKEY hKey, DWORD dwFlags)
     * }
     */
    public static int CryptHashSessionKey(long hHash, long hKey, int dwFlags) {
        var mh$ = CryptHashSessionKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptHashSessionKey", hHash, hKey, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, hKey, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptDestroyHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptDestroyHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptDestroyHash(HCRYPTHASH hHash)
     * }
     */
    public static FunctionDescriptor CryptDestroyHash$descriptor() {
        return CryptDestroyHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptDestroyHash(HCRYPTHASH hHash)
     * }
     */
    public static MethodHandle CryptDestroyHash$handle() {
        return CryptDestroyHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptDestroyHash(HCRYPTHASH hHash)
     * }
     */
    public static MemorySegment CryptDestroyHash$address() {
        return CryptDestroyHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptDestroyHash(HCRYPTHASH hHash)
     * }
     */
    public static int CryptDestroyHash(long hHash) {
        var mh$ = CryptDestroyHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptDestroyHash", hHash);
            }
            return (int)mh$.invokeExact(hHash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSignHashA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSignHashA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSignHashA(HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen)
     * }
     */
    public static FunctionDescriptor CryptSignHashA$descriptor() {
        return CryptSignHashA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSignHashA(HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen)
     * }
     */
    public static MethodHandle CryptSignHashA$handle() {
        return CryptSignHashA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSignHashA(HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen)
     * }
     */
    public static MemorySegment CryptSignHashA$address() {
        return CryptSignHashA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSignHashA(HCRYPTHASH hHash, DWORD dwKeySpec, LPCSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen)
     * }
     */
    public static int CryptSignHashA(long hHash, int dwKeySpec, MemorySegment szDescription, int dwFlags, MemorySegment pbSignature, MemorySegment pdwSigLen) {
        var mh$ = CryptSignHashA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSignHashA", hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
            }
            return (int)mh$.invokeExact(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSignHashW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSignHashW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSignHashW(HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen)
     * }
     */
    public static FunctionDescriptor CryptSignHashW$descriptor() {
        return CryptSignHashW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSignHashW(HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen)
     * }
     */
    public static MethodHandle CryptSignHashW$handle() {
        return CryptSignHashW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSignHashW(HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen)
     * }
     */
    public static MemorySegment CryptSignHashW$address() {
        return CryptSignHashW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSignHashW(HCRYPTHASH hHash, DWORD dwKeySpec, LPCWSTR szDescription, DWORD dwFlags, BYTE *pbSignature, DWORD *pdwSigLen)
     * }
     */
    public static int CryptSignHashW(long hHash, int dwKeySpec, MemorySegment szDescription, int dwFlags, MemorySegment pbSignature, MemorySegment pdwSigLen) {
        var mh$ = CryptSignHashW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSignHashW", hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
            }
            return (int)mh$.invokeExact(hHash, dwKeySpec, szDescription, dwFlags, pbSignature, pdwSigLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptVerifySignatureA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptVerifySignatureA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptVerifySignatureA(HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptVerifySignatureA$descriptor() {
        return CryptVerifySignatureA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptVerifySignatureA(HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptVerifySignatureA$handle() {
        return CryptVerifySignatureA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptVerifySignatureA(HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptVerifySignatureA$address() {
        return CryptVerifySignatureA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptVerifySignatureA(HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCSTR szDescription, DWORD dwFlags)
     * }
     */
    public static int CryptVerifySignatureA(long hHash, MemorySegment pbSignature, int dwSigLen, long hPubKey, MemorySegment szDescription, int dwFlags) {
        var mh$ = CryptVerifySignatureA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptVerifySignatureA", hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptVerifySignatureW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptVerifySignatureW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptVerifySignatureW(HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptVerifySignatureW$descriptor() {
        return CryptVerifySignatureW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptVerifySignatureW(HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptVerifySignatureW$handle() {
        return CryptVerifySignatureW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptVerifySignatureW(HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptVerifySignatureW$address() {
        return CryptVerifySignatureW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptVerifySignatureW(HCRYPTHASH hHash, const BYTE *pbSignature, DWORD dwSigLen, HCRYPTKEY hPubKey, LPCWSTR szDescription, DWORD dwFlags)
     * }
     */
    public static int CryptVerifySignatureW(long hHash, MemorySegment pbSignature, int dwSigLen, long hPubKey, MemorySegment szDescription, int dwFlags) {
        var mh$ = CryptVerifySignatureW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptVerifySignatureW", hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, pbSignature, dwSigLen, hPubKey, szDescription, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSetProviderA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSetProviderA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderA(LPCSTR pszProvName, DWORD dwProvType)
     * }
     */
    public static FunctionDescriptor CryptSetProviderA$descriptor() {
        return CryptSetProviderA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderA(LPCSTR pszProvName, DWORD dwProvType)
     * }
     */
    public static MethodHandle CryptSetProviderA$handle() {
        return CryptSetProviderA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderA(LPCSTR pszProvName, DWORD dwProvType)
     * }
     */
    public static MemorySegment CryptSetProviderA$address() {
        return CryptSetProviderA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSetProviderA(LPCSTR pszProvName, DWORD dwProvType)
     * }
     */
    public static int CryptSetProviderA(MemorySegment pszProvName, int dwProvType) {
        var mh$ = CryptSetProviderA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSetProviderA", pszProvName, dwProvType);
            }
            return (int)mh$.invokeExact(pszProvName, dwProvType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSetProviderW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSetProviderW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderW(LPCWSTR pszProvName, DWORD dwProvType)
     * }
     */
    public static FunctionDescriptor CryptSetProviderW$descriptor() {
        return CryptSetProviderW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderW(LPCWSTR pszProvName, DWORD dwProvType)
     * }
     */
    public static MethodHandle CryptSetProviderW$handle() {
        return CryptSetProviderW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderW(LPCWSTR pszProvName, DWORD dwProvType)
     * }
     */
    public static MemorySegment CryptSetProviderW$address() {
        return CryptSetProviderW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSetProviderW(LPCWSTR pszProvName, DWORD dwProvType)
     * }
     */
    public static int CryptSetProviderW(MemorySegment pszProvName, int dwProvType) {
        var mh$ = CryptSetProviderW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSetProviderW", pszProvName, dwProvType);
            }
            return (int)mh$.invokeExact(pszProvName, dwProvType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSetProviderExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSetProviderExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderExA(LPCSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptSetProviderExA$descriptor() {
        return CryptSetProviderExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderExA(LPCSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptSetProviderExA$handle() {
        return CryptSetProviderExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderExA(LPCSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptSetProviderExA$address() {
        return CryptSetProviderExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSetProviderExA(LPCSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static int CryptSetProviderExA(MemorySegment pszProvName, int dwProvType, MemorySegment pdwReserved, int dwFlags) {
        var mh$ = CryptSetProviderExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSetProviderExA", pszProvName, dwProvType, pdwReserved, dwFlags);
            }
            return (int)mh$.invokeExact(pszProvName, dwProvType, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptSetProviderExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptSetProviderExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderExW(LPCWSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptSetProviderExW$descriptor() {
        return CryptSetProviderExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderExW(LPCWSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptSetProviderExW$handle() {
        return CryptSetProviderExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptSetProviderExW(LPCWSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptSetProviderExW$address() {
        return CryptSetProviderExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptSetProviderExW(LPCWSTR pszProvName, DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static int CryptSetProviderExW(MemorySegment pszProvName, int dwProvType, MemorySegment pdwReserved, int dwFlags) {
        var mh$ = CryptSetProviderExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptSetProviderExW", pszProvName, dwProvType, pdwReserved, dwFlags);
            }
            return (int)mh$.invokeExact(pszProvName, dwProvType, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptGetDefaultProviderA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptGetDefaultProviderA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptGetDefaultProviderA(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD *pcbProvName)
     * }
     */
    public static FunctionDescriptor CryptGetDefaultProviderA$descriptor() {
        return CryptGetDefaultProviderA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptGetDefaultProviderA(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD *pcbProvName)
     * }
     */
    public static MethodHandle CryptGetDefaultProviderA$handle() {
        return CryptGetDefaultProviderA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptGetDefaultProviderA(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD *pcbProvName)
     * }
     */
    public static MemorySegment CryptGetDefaultProviderA$address() {
        return CryptGetDefaultProviderA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptGetDefaultProviderA(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPSTR pszProvName, DWORD *pcbProvName)
     * }
     */
    public static int CryptGetDefaultProviderA(int dwProvType, MemorySegment pdwReserved, int dwFlags, MemorySegment pszProvName, MemorySegment pcbProvName) {
        var mh$ = CryptGetDefaultProviderA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptGetDefaultProviderA", dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
            }
            return (int)mh$.invokeExact(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptGetDefaultProviderW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptGetDefaultProviderW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptGetDefaultProviderW(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD *pcbProvName)
     * }
     */
    public static FunctionDescriptor CryptGetDefaultProviderW$descriptor() {
        return CryptGetDefaultProviderW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptGetDefaultProviderW(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD *pcbProvName)
     * }
     */
    public static MethodHandle CryptGetDefaultProviderW$handle() {
        return CryptGetDefaultProviderW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptGetDefaultProviderW(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD *pcbProvName)
     * }
     */
    public static MemorySegment CryptGetDefaultProviderW$address() {
        return CryptGetDefaultProviderW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptGetDefaultProviderW(DWORD dwProvType, DWORD *pdwReserved, DWORD dwFlags, LPWSTR pszProvName, DWORD *pcbProvName)
     * }
     */
    public static int CryptGetDefaultProviderW(int dwProvType, MemorySegment pdwReserved, int dwFlags, MemorySegment pszProvName, MemorySegment pcbProvName) {
        var mh$ = CryptGetDefaultProviderW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptGetDefaultProviderW", dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
            }
            return (int)mh$.invokeExact(dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptEnumProviderTypesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptEnumProviderTypesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptEnumProviderTypesA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szTypeName, DWORD *pcbTypeName)
     * }
     */
    public static FunctionDescriptor CryptEnumProviderTypesA$descriptor() {
        return CryptEnumProviderTypesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptEnumProviderTypesA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szTypeName, DWORD *pcbTypeName)
     * }
     */
    public static MethodHandle CryptEnumProviderTypesA$handle() {
        return CryptEnumProviderTypesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptEnumProviderTypesA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szTypeName, DWORD *pcbTypeName)
     * }
     */
    public static MemorySegment CryptEnumProviderTypesA$address() {
        return CryptEnumProviderTypesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptEnumProviderTypesA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szTypeName, DWORD *pcbTypeName)
     * }
     */
    public static int CryptEnumProviderTypesA(int dwIndex, MemorySegment pdwReserved, int dwFlags, MemorySegment pdwProvType, MemorySegment szTypeName, MemorySegment pcbTypeName) {
        var mh$ = CryptEnumProviderTypesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptEnumProviderTypesA", dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
            }
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptEnumProviderTypesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptEnumProviderTypesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptEnumProviderTypesW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szTypeName, DWORD *pcbTypeName)
     * }
     */
    public static FunctionDescriptor CryptEnumProviderTypesW$descriptor() {
        return CryptEnumProviderTypesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptEnumProviderTypesW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szTypeName, DWORD *pcbTypeName)
     * }
     */
    public static MethodHandle CryptEnumProviderTypesW$handle() {
        return CryptEnumProviderTypesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptEnumProviderTypesW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szTypeName, DWORD *pcbTypeName)
     * }
     */
    public static MemorySegment CryptEnumProviderTypesW$address() {
        return CryptEnumProviderTypesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptEnumProviderTypesW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szTypeName, DWORD *pcbTypeName)
     * }
     */
    public static int CryptEnumProviderTypesW(int dwIndex, MemorySegment pdwReserved, int dwFlags, MemorySegment pdwProvType, MemorySegment szTypeName, MemorySegment pcbTypeName) {
        var mh$ = CryptEnumProviderTypesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptEnumProviderTypesW", dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
            }
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szTypeName, pcbTypeName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptEnumProvidersA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptEnumProvidersA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptEnumProvidersA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szProvName, DWORD *pcbProvName)
     * }
     */
    public static FunctionDescriptor CryptEnumProvidersA$descriptor() {
        return CryptEnumProvidersA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptEnumProvidersA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szProvName, DWORD *pcbProvName)
     * }
     */
    public static MethodHandle CryptEnumProvidersA$handle() {
        return CryptEnumProvidersA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptEnumProvidersA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szProvName, DWORD *pcbProvName)
     * }
     */
    public static MemorySegment CryptEnumProvidersA$address() {
        return CryptEnumProvidersA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptEnumProvidersA(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPSTR szProvName, DWORD *pcbProvName)
     * }
     */
    public static int CryptEnumProvidersA(int dwIndex, MemorySegment pdwReserved, int dwFlags, MemorySegment pdwProvType, MemorySegment szProvName, MemorySegment pcbProvName) {
        var mh$ = CryptEnumProvidersA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptEnumProvidersA", dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
            }
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptEnumProvidersW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptEnumProvidersW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptEnumProvidersW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szProvName, DWORD *pcbProvName)
     * }
     */
    public static FunctionDescriptor CryptEnumProvidersW$descriptor() {
        return CryptEnumProvidersW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptEnumProvidersW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szProvName, DWORD *pcbProvName)
     * }
     */
    public static MethodHandle CryptEnumProvidersW$handle() {
        return CryptEnumProvidersW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptEnumProvidersW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szProvName, DWORD *pcbProvName)
     * }
     */
    public static MemorySegment CryptEnumProvidersW$address() {
        return CryptEnumProvidersW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptEnumProvidersW(DWORD dwIndex, DWORD *pdwReserved, DWORD dwFlags, DWORD *pdwProvType, LPWSTR szProvName, DWORD *pcbProvName)
     * }
     */
    public static int CryptEnumProvidersW(int dwIndex, MemorySegment pdwReserved, int dwFlags, MemorySegment pdwProvType, MemorySegment szProvName, MemorySegment pcbProvName) {
        var mh$ = CryptEnumProvidersW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptEnumProvidersW", dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
            }
            return (int)mh$.invokeExact(dwIndex, pdwReserved, dwFlags, pdwProvType, szProvName, pcbProvName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptContextAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptContextAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptContextAddRef(HCRYPTPROV hProv, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CryptContextAddRef$descriptor() {
        return CryptContextAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptContextAddRef(HCRYPTPROV hProv, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static MethodHandle CryptContextAddRef$handle() {
        return CryptContextAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptContextAddRef(HCRYPTPROV hProv, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static MemorySegment CryptContextAddRef$address() {
        return CryptContextAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptContextAddRef(HCRYPTPROV hProv, DWORD *pdwReserved, DWORD dwFlags)
     * }
     */
    public static int CryptContextAddRef(long hProv, MemorySegment pdwReserved, int dwFlags) {
        var mh$ = CryptContextAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptContextAddRef", hProv, pdwReserved, dwFlags);
            }
            return (int)mh$.invokeExact(hProv, pdwReserved, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptDuplicateKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptDuplicateKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptDuplicateKey(HCRYPTKEY hKey, DWORD *pdwReserved, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static FunctionDescriptor CryptDuplicateKey$descriptor() {
        return CryptDuplicateKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptDuplicateKey(HCRYPTKEY hKey, DWORD *pdwReserved, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static MethodHandle CryptDuplicateKey$handle() {
        return CryptDuplicateKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptDuplicateKey(HCRYPTKEY hKey, DWORD *pdwReserved, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static MemorySegment CryptDuplicateKey$address() {
        return CryptDuplicateKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptDuplicateKey(HCRYPTKEY hKey, DWORD *pdwReserved, DWORD dwFlags, HCRYPTKEY *phKey)
     * }
     */
    public static int CryptDuplicateKey(long hKey, MemorySegment pdwReserved, int dwFlags, MemorySegment phKey) {
        var mh$ = CryptDuplicateKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptDuplicateKey", hKey, pdwReserved, dwFlags, phKey);
            }
            return (int)mh$.invokeExact(hKey, pdwReserved, dwFlags, phKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CryptDuplicateHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CryptDuplicateHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CryptDuplicateHash(HCRYPTHASH hHash, DWORD *pdwReserved, DWORD dwFlags, HCRYPTHASH *phHash)
     * }
     */
    public static FunctionDescriptor CryptDuplicateHash$descriptor() {
        return CryptDuplicateHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CryptDuplicateHash(HCRYPTHASH hHash, DWORD *pdwReserved, DWORD dwFlags, HCRYPTHASH *phHash)
     * }
     */
    public static MethodHandle CryptDuplicateHash$handle() {
        return CryptDuplicateHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CryptDuplicateHash(HCRYPTHASH hHash, DWORD *pdwReserved, DWORD dwFlags, HCRYPTHASH *phHash)
     * }
     */
    public static MemorySegment CryptDuplicateHash$address() {
        return CryptDuplicateHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CryptDuplicateHash(HCRYPTHASH hHash, DWORD *pdwReserved, DWORD dwFlags, HCRYPTHASH *phHash)
     * }
     */
    public static int CryptDuplicateHash(long hHash, MemorySegment pdwReserved, int dwFlags, MemorySegment phHash) {
        var mh$ = CryptDuplicateHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CryptDuplicateHash", hHash, pdwReserved, dwFlags, phHash);
            }
            return (int)mh$.invokeExact(hHash, pdwReserved, dwFlags, phHash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetEncSChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetEncSChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetEncSChannel(BYTE **pData, DWORD *dwDecSize)
     * }
     */
    public static FunctionDescriptor GetEncSChannel$descriptor() {
        return GetEncSChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetEncSChannel(BYTE **pData, DWORD *dwDecSize)
     * }
     */
    public static MethodHandle GetEncSChannel$handle() {
        return GetEncSChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetEncSChannel(BYTE **pData, DWORD *dwDecSize)
     * }
     */
    public static MemorySegment GetEncSChannel$address() {
        return GetEncSChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetEncSChannel(BYTE **pData, DWORD *dwDecSize)
     * }
     */
    public static int GetEncSChannel(MemorySegment pData, MemorySegment dwDecSize) {
        var mh$ = GetEncSChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetEncSChannel", pData, dwDecSize);
            }
            return (int)mh$.invokeExact(pData, dwDecSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef LONG NTSTATUS
     * }
     */
    public static final OfInt NTSTATUS = winapi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef NTSTATUS *PNTSTATUS
     * }
     */
    public static final AddressLayout PNTSTATUS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO {
     *     ULONG cbSize;
     *     ULONG dwInfoVersion;
     *     PUCHAR pbNonce;
     *     ULONG cbNonce;
     *     PUCHAR pbAuthData;
     *     ULONG cbAuthData;
     *     PUCHAR pbTag;
     *     ULONG cbTag;
     *     PUCHAR pbMacContext;
     *     ULONG cbMacContext;
     *     ULONG cbAAD;
     *     ULONGLONG cbData;
     *     ULONG dwFlags;
     * } *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
     * }
     */
    public static final AddressLayout PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_PKCS11_RSA_AES_WRAP_BLOB {
     *     ULONG dwMagic;
     *     ULONG cbKey;
     *     ULONG cbPaddingAlgId;
     *     ULONG cbPaddingLabel;
     * } *PBCRYPT_PKCS11_RSA_AES_WRAP_BLOB
     * }
     */
    public static final AddressLayout PBCRYPT_PKCS11_RSA_AES_WRAP_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BCryptBuffer {
     *     ULONG cbBuffer;
     *     ULONG BufferType;
     *     PVOID pvBuffer;
     * } *PBCryptBuffer
     * }
     */
    public static final AddressLayout PBCryptBuffer = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BCryptBufferDesc {
     *     ULONG ulVersion;
     *     ULONG cBuffers;
     *     PBCryptBuffer pBuffers;
     * } *PBCryptBufferDesc
     * }
     */
    public static final AddressLayout PBCryptBufferDesc = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PVOID BCRYPT_HANDLE
     * }
     */
    public static final AddressLayout BCRYPT_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PVOID BCRYPT_ALG_HANDLE
     * }
     */
    public static final AddressLayout BCRYPT_ALG_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PVOID BCRYPT_KEY_HANDLE
     * }
     */
    public static final AddressLayout BCRYPT_KEY_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PVOID BCRYPT_HASH_HANDLE
     * }
     */
    public static final AddressLayout BCRYPT_HASH_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PVOID BCRYPT_SECRET_HANDLE
     * }
     */
    public static final AddressLayout BCRYPT_SECRET_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_ECCKEY_BLOB {
     *     ULONG dwMagic;
     *     ULONG cbKey;
     * } *PBCRYPT_ECCKEY_BLOB
     * }
     */
    public static final AddressLayout PBCRYPT_ECCKEY_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SSL_ECCKEY_BLOB {
     *     ULONG dwCurveType;
     *     ULONG cbKey;
     * } *PSSL_ECCKEY_BLOB
     * }
     */
    public static final AddressLayout PSSL_ECCKEY_BLOB = winapi.C_POINTER;
    private static final int BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1
     * }
     */
    public static int BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE() {
        return BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE;
    }
    private static final int BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2
     * }
     */
    public static int BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE() {
        return BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE;
    }
    private static final int BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3
     * }
     */
    public static int BCRYPT_ECC_PRIME_MONTGOMERY_CURVE() {
        return BCRYPT_ECC_PRIME_MONTGOMERY_CURVE;
    }
    private static final int BCRYPT_NO_CURVE_GENERATION_ALG_ID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0
     * }
     */
    public static int BCRYPT_NO_CURVE_GENERATION_ALG_ID() {
        return BCRYPT_NO_CURVE_GENERATION_ALG_ID;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_ECCFULLKEY_BLOB {
     *     ULONG dwMagic;
     *     ULONG dwVersion;
     *     ECC_CURVE_TYPE_ENUM dwCurveType;
     *     ECC_CURVE_ALG_ID_ENUM dwCurveGenerationAlgId;
     *     ULONG cbFieldLength;
     *     ULONG cbSubgroupOrder;
     *     ULONG cbCofactor;
     *     ULONG cbSeed;
     * } *PBCRYPT_ECCFULLKEY_BLOB
     * }
     */
    public static final AddressLayout PBCRYPT_ECCFULLKEY_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_DH_KEY_BLOB {
     *     ULONG dwMagic;
     *     ULONG cbKey;
     * } *PBCRYPT_DH_KEY_BLOB
     * }
     */
    public static final AddressLayout PBCRYPT_DH_KEY_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_DSA_KEY_BLOB {
     *     ULONG dwMagic;
     *     ULONG cbKey;
     *     UCHAR Count[4];
     *     UCHAR Seed[20];
     *     UCHAR q[20];
     * } *PBCRYPT_DSA_KEY_BLOB
     * }
     */
    public static final AddressLayout PBCRYPT_DSA_KEY_BLOB = winapi.C_POINTER;
    private static final int DSA_HASH_ALGORITHM_SHA1 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DSA_HASH_ALGORITHM_SHA1 = 0
     * }
     */
    public static int DSA_HASH_ALGORITHM_SHA1() {
        return DSA_HASH_ALGORITHM_SHA1;
    }
    private static final int DSA_HASH_ALGORITHM_SHA256 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DSA_HASH_ALGORITHM_SHA256 = 1
     * }
     */
    public static int DSA_HASH_ALGORITHM_SHA256() {
        return DSA_HASH_ALGORITHM_SHA256;
    }
    private static final int DSA_HASH_ALGORITHM_SHA512 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DSA_HASH_ALGORITHM_SHA512 = 2
     * }
     */
    public static int DSA_HASH_ALGORITHM_SHA512() {
        return DSA_HASH_ALGORITHM_SHA512;
    }
    private static final int DSA_FIPS186_2 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DSA_FIPS186_2 = 0
     * }
     */
    public static int DSA_FIPS186_2() {
        return DSA_FIPS186_2;
    }
    private static final int DSA_FIPS186_3 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DSA_FIPS186_3 = 1
     * }
     */
    public static int DSA_FIPS186_3() {
        return DSA_FIPS186_3;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_DSA_KEY_BLOB_V2 {
     *     ULONG dwMagic;
     *     ULONG cbKey;
     *     HASHALGORITHM_ENUM hashAlgorithm;
     *     DSAFIPSVERSION_ENUM standardVersion;
     *     ULONG cbSeedLength;
     *     ULONG cbGroupSize;
     *     UCHAR Count[4];
     * } *PBCRYPT_DSA_KEY_BLOB_V2
     * }
     */
    public static final AddressLayout PBCRYPT_DSA_KEY_BLOB_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER {
     *     ULONG dwMagic;
     *     ULONG dwVersion;
     *     ULONG cbKeyData;
     * } *PBCRYPT_KEY_DATA_BLOB_HEADER
     * }
     */
    public static final AddressLayout PBCRYPT_KEY_DATA_BLOB_HEADER = winapi.C_POINTER;
    private static final int BCRYPT_HASH_OPERATION_HASH_DATA = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BCRYPT_HASH_OPERATION_HASH_DATA = 1
     * }
     */
    public static int BCRYPT_HASH_OPERATION_HASH_DATA() {
        return BCRYPT_HASH_OPERATION_HASH_DATA;
    }
    private static final int BCRYPT_HASH_OPERATION_FINISH_HASH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BCRYPT_HASH_OPERATION_FINISH_HASH = 2
     * }
     */
    public static int BCRYPT_HASH_OPERATION_FINISH_HASH() {
        return BCRYPT_HASH_OPERATION_FINISH_HASH;
    }
    private static final int BCRYPT_OPERATION_TYPE_HASH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BCRYPT_OPERATION_TYPE_HASH = 1
     * }
     */
    public static int BCRYPT_OPERATION_TYPE_HASH() {
        return BCRYPT_OPERATION_TYPE_HASH;
    }

    private static class BCryptOpenAlgorithmProvider {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptOpenAlgorithmProvider");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptOpenAlgorithmProvider$descriptor() {
        return BCryptOpenAlgorithmProvider.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptOpenAlgorithmProvider$handle() {
        return BCryptOpenAlgorithmProvider.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptOpenAlgorithmProvider$address() {
        return BCryptOpenAlgorithmProvider.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptOpenAlgorithmProvider(BCRYPT_ALG_HANDLE *phAlgorithm, LPCWSTR pszAlgId, LPCWSTR pszImplementation, ULONG dwFlags)
     * }
     */
    public static int BCryptOpenAlgorithmProvider(MemorySegment phAlgorithm, MemorySegment pszAlgId, MemorySegment pszImplementation, int dwFlags) {
        var mh$ = BCryptOpenAlgorithmProvider.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptOpenAlgorithmProvider", phAlgorithm, pszAlgId, pszImplementation, dwFlags);
            }
            return (int)mh$.invokeExact(phAlgorithm, pszAlgId, pszImplementation, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptEnumAlgorithms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptEnumAlgorithms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumAlgorithms(ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptEnumAlgorithms$descriptor() {
        return BCryptEnumAlgorithms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumAlgorithms(ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptEnumAlgorithms$handle() {
        return BCryptEnumAlgorithms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumAlgorithms(ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptEnumAlgorithms$address() {
        return BCryptEnumAlgorithms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumAlgorithms(ULONG dwAlgOperations, ULONG *pAlgCount, BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, ULONG dwFlags)
     * }
     */
    public static int BCryptEnumAlgorithms(int dwAlgOperations, MemorySegment pAlgCount, MemorySegment ppAlgList, int dwFlags) {
        var mh$ = BCryptEnumAlgorithms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptEnumAlgorithms", dwAlgOperations, pAlgCount, ppAlgList, dwFlags);
            }
            return (int)mh$.invokeExact(dwAlgOperations, pAlgCount, ppAlgList, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptEnumProviders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptEnumProviders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumProviders(LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptEnumProviders$descriptor() {
        return BCryptEnumProviders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumProviders(LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptEnumProviders$handle() {
        return BCryptEnumProviders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumProviders(LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptEnumProviders$address() {
        return BCryptEnumProviders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumProviders(LPCWSTR pszAlgId, ULONG *pImplCount, BCRYPT_PROVIDER_NAME **ppImplList, ULONG dwFlags)
     * }
     */
    public static int BCryptEnumProviders(MemorySegment pszAlgId, MemorySegment pImplCount, MemorySegment ppImplList, int dwFlags) {
        var mh$ = BCryptEnumProviders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptEnumProviders", pszAlgId, pImplCount, ppImplList, dwFlags);
            }
            return (int)mh$.invokeExact(pszAlgId, pImplCount, ppImplList, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptGetProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptGetProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptGetProperty$descriptor() {
        return BCryptGetProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptGetProperty$handle() {
        return BCryptGetProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptGetProperty$address() {
        return BCryptGetProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptGetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static int BCryptGetProperty(MemorySegment hObject, MemorySegment pszProperty, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptGetProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptGetProperty", hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptSetProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptSetProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptSetProperty$descriptor() {
        return BCryptSetProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptSetProperty$handle() {
        return BCryptSetProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptSetProperty$address() {
        return BCryptSetProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptSetProperty(BCRYPT_HANDLE hObject, LPCWSTR pszProperty, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static int BCryptSetProperty(MemorySegment hObject, MemorySegment pszProperty, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = BCryptSetProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptSetProperty", hObject, pszProperty, pbInput, cbInput, dwFlags);
            }
            return (int)mh$.invokeExact(hObject, pszProperty, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptCloseAlgorithmProvider {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptCloseAlgorithmProvider");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptCloseAlgorithmProvider$descriptor() {
        return BCryptCloseAlgorithmProvider.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptCloseAlgorithmProvider$handle() {
        return BCryptCloseAlgorithmProvider.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptCloseAlgorithmProvider$address() {
        return BCryptCloseAlgorithmProvider.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE hAlgorithm, ULONG dwFlags)
     * }
     */
    public static int BCryptCloseAlgorithmProvider(MemorySegment hAlgorithm, int dwFlags) {
        var mh$ = BCryptCloseAlgorithmProvider.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptCloseAlgorithmProvider", hAlgorithm, dwFlags);
            }
            return (int)mh$.invokeExact(hAlgorithm, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptFreeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptFreeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void BCryptFreeBuffer(PVOID pvBuffer)
     * }
     */
    public static FunctionDescriptor BCryptFreeBuffer$descriptor() {
        return BCryptFreeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void BCryptFreeBuffer(PVOID pvBuffer)
     * }
     */
    public static MethodHandle BCryptFreeBuffer$handle() {
        return BCryptFreeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void BCryptFreeBuffer(PVOID pvBuffer)
     * }
     */
    public static MemorySegment BCryptFreeBuffer$address() {
        return BCryptFreeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void BCryptFreeBuffer(PVOID pvBuffer)
     * }
     */
    public static void BCryptFreeBuffer(MemorySegment pvBuffer) {
        var mh$ = BCryptFreeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptFreeBuffer", pvBuffer);
            }
            mh$.invokeExact(pvBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptGenerateSymmetricKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptGenerateSymmetricKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptGenerateSymmetricKey$descriptor() {
        return BCryptGenerateSymmetricKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptGenerateSymmetricKey$handle() {
        return BCryptGenerateSymmetricKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptGenerateSymmetricKey$address() {
        return BCryptGenerateSymmetricKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptGenerateSymmetricKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static int BCryptGenerateSymmetricKey(MemorySegment hAlgorithm, MemorySegment phKey, MemorySegment pbKeyObject, int cbKeyObject, MemorySegment pbSecret, int cbSecret, int dwFlags) {
        var mh$ = BCryptGenerateSymmetricKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptGenerateSymmetricKey", hAlgorithm, phKey, pbKeyObject, cbKeyObject, pbSecret, cbSecret, dwFlags);
            }
            return (int)mh$.invokeExact(hAlgorithm, phKey, pbKeyObject, cbKeyObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptGenerateKeyPair {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptGenerateKeyPair");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenerateKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptGenerateKeyPair$descriptor() {
        return BCryptGenerateKeyPair.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenerateKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptGenerateKeyPair$handle() {
        return BCryptGenerateKeyPair.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenerateKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptGenerateKeyPair$address() {
        return BCryptGenerateKeyPair.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptGenerateKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE *phKey, ULONG dwLength, ULONG dwFlags)
     * }
     */
    public static int BCryptGenerateKeyPair(MemorySegment hAlgorithm, MemorySegment phKey, int dwLength, int dwFlags) {
        var mh$ = BCryptGenerateKeyPair.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptGenerateKeyPair", hAlgorithm, phKey, dwLength, dwFlags);
            }
            return (int)mh$.invokeExact(hAlgorithm, phKey, dwLength, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptEncrypt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptEncrypt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEncrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptEncrypt$descriptor() {
        return BCryptEncrypt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEncrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptEncrypt$handle() {
        return BCryptEncrypt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEncrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptEncrypt$address() {
        return BCryptEncrypt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptEncrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static int BCryptEncrypt(MemorySegment hKey, MemorySegment pbInput, int cbInput, MemorySegment pPaddingInfo, MemorySegment pbIV, int cbIV, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptEncrypt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptEncrypt", hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDecrypt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDecrypt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDecrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptDecrypt$descriptor() {
        return BCryptDecrypt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDecrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptDecrypt$handle() {
        return BCryptDecrypt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDecrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptDecrypt$address() {
        return BCryptDecrypt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDecrypt(BCRYPT_KEY_HANDLE hKey, PUCHAR pbInput, ULONG cbInput, void *pPaddingInfo, PUCHAR pbIV, ULONG cbIV, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static int BCryptDecrypt(MemorySegment hKey, MemorySegment pbInput, int cbInput, MemorySegment pPaddingInfo, MemorySegment pbIV, int cbIV, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptDecrypt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDecrypt", hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptExportKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptExportKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptExportKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptExportKey$descriptor() {
        return BCryptExportKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptExportKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptExportKey$handle() {
        return BCryptExportKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptExportKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptExportKey$address() {
        return BCryptExportKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptExportKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static int BCryptExportKey(MemorySegment hKey, MemorySegment hExportKey, MemorySegment pszBlobType, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptExportKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptExportKey", hKey, hExportKey, pszBlobType, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptImportKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptImportKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptImportKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptImportKey$descriptor() {
        return BCryptImportKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptImportKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptImportKey$handle() {
        return BCryptImportKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptImportKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptImportKey$address() {
        return BCryptImportKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptImportKey(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbKeyObject, ULONG cbKeyObject, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static int BCryptImportKey(MemorySegment hAlgorithm, MemorySegment hImportKey, MemorySegment pszBlobType, MemorySegment phKey, MemorySegment pbKeyObject, int cbKeyObject, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = BCryptImportKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptImportKey", hAlgorithm, hImportKey, pszBlobType, phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
            }
            return (int)mh$.invokeExact(hAlgorithm, hImportKey, pszBlobType, phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptImportKeyPair {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptImportKeyPair");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptImportKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptImportKeyPair$descriptor() {
        return BCryptImportKeyPair.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptImportKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptImportKeyPair$handle() {
        return BCryptImportKeyPair.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptImportKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptImportKeyPair$address() {
        return BCryptImportKeyPair.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptImportKeyPair(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, BCRYPT_KEY_HANDLE *phKey, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static int BCryptImportKeyPair(MemorySegment hAlgorithm, MemorySegment hImportKey, MemorySegment pszBlobType, MemorySegment phKey, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = BCryptImportKeyPair.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptImportKeyPair", hAlgorithm, hImportKey, pszBlobType, phKey, pbInput, cbInput, dwFlags);
            }
            return (int)mh$.invokeExact(hAlgorithm, hImportKey, pszBlobType, phKey, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDuplicateKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDuplicateKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDuplicateKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptDuplicateKey$descriptor() {
        return BCryptDuplicateKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDuplicateKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptDuplicateKey$handle() {
        return BCryptDuplicateKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDuplicateKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptDuplicateKey$address() {
        return BCryptDuplicateKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDuplicateKey(BCRYPT_KEY_HANDLE hKey, BCRYPT_KEY_HANDLE *phNewKey, PUCHAR pbKeyObject, ULONG cbKeyObject, ULONG dwFlags)
     * }
     */
    public static int BCryptDuplicateKey(MemorySegment hKey, MemorySegment phNewKey, MemorySegment pbKeyObject, int cbKeyObject, int dwFlags) {
        var mh$ = BCryptDuplicateKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDuplicateKey", hKey, phNewKey, pbKeyObject, cbKeyObject, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, phNewKey, pbKeyObject, cbKeyObject, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptFinalizeKeyPair {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptFinalizeKeyPair");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptFinalizeKeyPair(BCRYPT_KEY_HANDLE hKey, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptFinalizeKeyPair$descriptor() {
        return BCryptFinalizeKeyPair.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptFinalizeKeyPair(BCRYPT_KEY_HANDLE hKey, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptFinalizeKeyPair$handle() {
        return BCryptFinalizeKeyPair.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptFinalizeKeyPair(BCRYPT_KEY_HANDLE hKey, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptFinalizeKeyPair$address() {
        return BCryptFinalizeKeyPair.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptFinalizeKeyPair(BCRYPT_KEY_HANDLE hKey, ULONG dwFlags)
     * }
     */
    public static int BCryptFinalizeKeyPair(MemorySegment hKey, int dwFlags) {
        var mh$ = BCryptFinalizeKeyPair.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptFinalizeKeyPair", hKey, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDestroyKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDestroyKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroyKey(BCRYPT_KEY_HANDLE hKey)
     * }
     */
    public static FunctionDescriptor BCryptDestroyKey$descriptor() {
        return BCryptDestroyKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroyKey(BCRYPT_KEY_HANDLE hKey)
     * }
     */
    public static MethodHandle BCryptDestroyKey$handle() {
        return BCryptDestroyKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroyKey(BCRYPT_KEY_HANDLE hKey)
     * }
     */
    public static MemorySegment BCryptDestroyKey$address() {
        return BCryptDestroyKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroyKey(BCRYPT_KEY_HANDLE hKey)
     * }
     */
    public static int BCryptDestroyKey(MemorySegment hKey) {
        var mh$ = BCryptDestroyKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDestroyKey", hKey);
            }
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDestroySecret {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDestroySecret");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroySecret(BCRYPT_SECRET_HANDLE hSecret)
     * }
     */
    public static FunctionDescriptor BCryptDestroySecret$descriptor() {
        return BCryptDestroySecret.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroySecret(BCRYPT_SECRET_HANDLE hSecret)
     * }
     */
    public static MethodHandle BCryptDestroySecret$handle() {
        return BCryptDestroySecret.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroySecret(BCRYPT_SECRET_HANDLE hSecret)
     * }
     */
    public static MemorySegment BCryptDestroySecret$address() {
        return BCryptDestroySecret.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroySecret(BCRYPT_SECRET_HANDLE hSecret)
     * }
     */
    public static int BCryptDestroySecret(MemorySegment hSecret) {
        var mh$ = BCryptDestroySecret.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDestroySecret", hSecret);
            }
            return (int)mh$.invokeExact(hSecret);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptSignHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptSignHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSignHash(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptSignHash$descriptor() {
        return BCryptSignHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSignHash(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptSignHash$handle() {
        return BCryptSignHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSignHash(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptSignHash$address() {
        return BCryptSignHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptSignHash(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static int BCryptSignHash(MemorySegment hKey, MemorySegment pPaddingInfo, MemorySegment pbInput, int cbInput, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptSignHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptSignHash", hKey, pPaddingInfo, pbInput, cbInput, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbInput, cbInput, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptVerifySignature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptVerifySignature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptVerifySignature(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptVerifySignature$descriptor() {
        return BCryptVerifySignature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptVerifySignature(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptVerifySignature$handle() {
        return BCryptVerifySignature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptVerifySignature(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptVerifySignature$address() {
        return BCryptVerifySignature.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptVerifySignature(BCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PUCHAR pbHash, ULONG cbHash, PUCHAR pbSignature, ULONG cbSignature, ULONG dwFlags)
     * }
     */
    public static int BCryptVerifySignature(MemorySegment hKey, MemorySegment pPaddingInfo, MemorySegment pbHash, int cbHash, MemorySegment pbSignature, int cbSignature, int dwFlags) {
        var mh$ = BCryptVerifySignature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptVerifySignature", hKey, pPaddingInfo, pbHash, cbHash, pbSignature, cbSignature, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHash, cbHash, pbSignature, cbSignature, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptSecretAgreement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptSecretAgreement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSecretAgreement(BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptSecretAgreement$descriptor() {
        return BCryptSecretAgreement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSecretAgreement(BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptSecretAgreement$handle() {
        return BCryptSecretAgreement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSecretAgreement(BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptSecretAgreement$address() {
        return BCryptSecretAgreement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptSecretAgreement(BCRYPT_KEY_HANDLE hPrivKey, BCRYPT_KEY_HANDLE hPubKey, BCRYPT_SECRET_HANDLE *phAgreedSecret, ULONG dwFlags)
     * }
     */
    public static int BCryptSecretAgreement(MemorySegment hPrivKey, MemorySegment hPubKey, MemorySegment phAgreedSecret, int dwFlags) {
        var mh$ = BCryptSecretAgreement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptSecretAgreement", hPrivKey, hPubKey, phAgreedSecret, dwFlags);
            }
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDeriveKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDeriveKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKey(BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptDeriveKey$descriptor() {
        return BCryptDeriveKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKey(BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptDeriveKey$handle() {
        return BCryptDeriveKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKey(BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptDeriveKey$address() {
        return BCryptDeriveKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKey(BCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static int BCryptDeriveKey(MemorySegment hSharedSecret, MemorySegment pwszKDF, MemorySegment pParameterList, MemorySegment pbDerivedKey, int cbDerivedKey, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptDeriveKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDeriveKey", hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptKeyDerivation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptKeyDerivation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptKeyDerivation(BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptKeyDerivation$descriptor() {
        return BCryptKeyDerivation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptKeyDerivation(BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptKeyDerivation$handle() {
        return BCryptKeyDerivation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptKeyDerivation(BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptKeyDerivation$address() {
        return BCryptKeyDerivation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptKeyDerivation(BCRYPT_KEY_HANDLE hKey, BCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG *pcbResult, ULONG dwFlags)
     * }
     */
    public static int BCryptKeyDerivation(MemorySegment hKey, MemorySegment pParameterList, MemorySegment pbDerivedKey, int cbDerivedKey, MemorySegment pcbResult, int dwFlags) {
        var mh$ = BCryptKeyDerivation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptKeyDerivation", hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptCreateHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptCreateHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptCreateHash$descriptor() {
        return BCryptCreateHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptCreateHash$handle() {
        return BCryptCreateHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptCreateHash$address() {
        return BCryptCreateHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static int BCryptCreateHash(MemorySegment hAlgorithm, MemorySegment phHash, MemorySegment pbHashObject, int cbHashObject, MemorySegment pbSecret, int cbSecret, int dwFlags) {
        var mh$ = BCryptCreateHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptCreateHash", hAlgorithm, phHash, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
            }
            return (int)mh$.invokeExact(hAlgorithm, phHash, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptHashData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptHashData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptHashData(BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptHashData$descriptor() {
        return BCryptHashData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptHashData(BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptHashData$handle() {
        return BCryptHashData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptHashData(BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptHashData$address() {
        return BCryptHashData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptHashData(BCRYPT_HASH_HANDLE hHash, PUCHAR pbInput, ULONG cbInput, ULONG dwFlags)
     * }
     */
    public static int BCryptHashData(MemorySegment hHash, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = BCryptHashData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptHashData", hHash, pbInput, cbInput, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptFinishHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptFinishHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptFinishHash(BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptFinishHash$descriptor() {
        return BCryptFinishHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptFinishHash(BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptFinishHash$handle() {
        return BCryptFinishHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptFinishHash(BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptFinishHash$address() {
        return BCryptFinishHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptFinishHash(BCRYPT_HASH_HANDLE hHash, PUCHAR pbOutput, ULONG cbOutput, ULONG dwFlags)
     * }
     */
    public static int BCryptFinishHash(MemorySegment hHash, MemorySegment pbOutput, int cbOutput, int dwFlags) {
        var mh$ = BCryptFinishHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptFinishHash", hHash, pbOutput, cbOutput, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, pbOutput, cbOutput, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptCreateMultiHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptCreateMultiHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateMultiHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, ULONG nHashes, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptCreateMultiHash$descriptor() {
        return BCryptCreateMultiHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateMultiHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, ULONG nHashes, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptCreateMultiHash$handle() {
        return BCryptCreateMultiHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateMultiHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, ULONG nHashes, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptCreateMultiHash$address() {
        return BCryptCreateMultiHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateMultiHash(BCRYPT_ALG_HANDLE hAlgorithm, BCRYPT_HASH_HANDLE *phHash, ULONG nHashes, PUCHAR pbHashObject, ULONG cbHashObject, PUCHAR pbSecret, ULONG cbSecret, ULONG dwFlags)
     * }
     */
    public static int BCryptCreateMultiHash(MemorySegment hAlgorithm, MemorySegment phHash, int nHashes, MemorySegment pbHashObject, int cbHashObject, MemorySegment pbSecret, int cbSecret, int dwFlags) {
        var mh$ = BCryptCreateMultiHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptCreateMultiHash", hAlgorithm, phHash, nHashes, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
            }
            return (int)mh$.invokeExact(hAlgorithm, phHash, nHashes, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptProcessMultiOperations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptProcessMultiOperations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptProcessMultiOperations(BCRYPT_HANDLE hObject, BCRYPT_MULTI_OPERATION_TYPE operationType, PVOID pOperations, ULONG cbOperations, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptProcessMultiOperations$descriptor() {
        return BCryptProcessMultiOperations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptProcessMultiOperations(BCRYPT_HANDLE hObject, BCRYPT_MULTI_OPERATION_TYPE operationType, PVOID pOperations, ULONG cbOperations, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptProcessMultiOperations$handle() {
        return BCryptProcessMultiOperations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptProcessMultiOperations(BCRYPT_HANDLE hObject, BCRYPT_MULTI_OPERATION_TYPE operationType, PVOID pOperations, ULONG cbOperations, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptProcessMultiOperations$address() {
        return BCryptProcessMultiOperations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptProcessMultiOperations(BCRYPT_HANDLE hObject, BCRYPT_MULTI_OPERATION_TYPE operationType, PVOID pOperations, ULONG cbOperations, ULONG dwFlags)
     * }
     */
    public static int BCryptProcessMultiOperations(MemorySegment hObject, int operationType, MemorySegment pOperations, int cbOperations, int dwFlags) {
        var mh$ = BCryptProcessMultiOperations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptProcessMultiOperations", hObject, operationType, pOperations, cbOperations, dwFlags);
            }
            return (int)mh$.invokeExact(hObject, operationType, pOperations, cbOperations, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDuplicateHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDuplicateHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDuplicateHash(BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptDuplicateHash$descriptor() {
        return BCryptDuplicateHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDuplicateHash(BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptDuplicateHash$handle() {
        return BCryptDuplicateHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDuplicateHash(BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptDuplicateHash$address() {
        return BCryptDuplicateHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDuplicateHash(BCRYPT_HASH_HANDLE hHash, BCRYPT_HASH_HANDLE *phNewHash, PUCHAR pbHashObject, ULONG cbHashObject, ULONG dwFlags)
     * }
     */
    public static int BCryptDuplicateHash(MemorySegment hHash, MemorySegment phNewHash, MemorySegment pbHashObject, int cbHashObject, int dwFlags) {
        var mh$ = BCryptDuplicateHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDuplicateHash", hHash, phNewHash, pbHashObject, cbHashObject, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, phNewHash, pbHashObject, cbHashObject, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDestroyHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDestroyHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroyHash(BCRYPT_HASH_HANDLE hHash)
     * }
     */
    public static FunctionDescriptor BCryptDestroyHash$descriptor() {
        return BCryptDestroyHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroyHash(BCRYPT_HASH_HANDLE hHash)
     * }
     */
    public static MethodHandle BCryptDestroyHash$handle() {
        return BCryptDestroyHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroyHash(BCRYPT_HASH_HANDLE hHash)
     * }
     */
    public static MemorySegment BCryptDestroyHash$address() {
        return BCryptDestroyHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDestroyHash(BCRYPT_HASH_HANDLE hHash)
     * }
     */
    public static int BCryptDestroyHash(MemorySegment hHash) {
        var mh$ = BCryptDestroyHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDestroyHash", hHash);
            }
            return (int)mh$.invokeExact(hHash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptHash(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbSecret, ULONG cbSecret, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput)
     * }
     */
    public static FunctionDescriptor BCryptHash$descriptor() {
        return BCryptHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptHash(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbSecret, ULONG cbSecret, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput)
     * }
     */
    public static MethodHandle BCryptHash$handle() {
        return BCryptHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptHash(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbSecret, ULONG cbSecret, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput)
     * }
     */
    public static MemorySegment BCryptHash$address() {
        return BCryptHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptHash(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbSecret, ULONG cbSecret, PUCHAR pbInput, ULONG cbInput, PUCHAR pbOutput, ULONG cbOutput)
     * }
     */
    public static int BCryptHash(MemorySegment hAlgorithm, MemorySegment pbSecret, int cbSecret, MemorySegment pbInput, int cbInput, MemorySegment pbOutput, int cbOutput) {
        var mh$ = BCryptHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptHash", hAlgorithm, pbSecret, cbSecret, pbInput, cbInput, pbOutput, cbOutput);
            }
            return (int)mh$.invokeExact(hAlgorithm, pbSecret, cbSecret, pbInput, cbInput, pbOutput, cbOutput);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptGenRandom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptGenRandom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenRandom(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptGenRandom$descriptor() {
        return BCryptGenRandom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenRandom(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptGenRandom$handle() {
        return BCryptGenRandom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGenRandom(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptGenRandom$address() {
        return BCryptGenRandom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptGenRandom(BCRYPT_ALG_HANDLE hAlgorithm, PUCHAR pbBuffer, ULONG cbBuffer, ULONG dwFlags)
     * }
     */
    public static int BCryptGenRandom(MemorySegment hAlgorithm, MemorySegment pbBuffer, int cbBuffer, int dwFlags) {
        var mh$ = BCryptGenRandom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptGenRandom", hAlgorithm, pbBuffer, cbBuffer, dwFlags);
            }
            return (int)mh$.invokeExact(hAlgorithm, pbBuffer, cbBuffer, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDeriveKeyCapi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDeriveKeyCapi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKeyCapi(BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptDeriveKeyCapi$descriptor() {
        return BCryptDeriveKeyCapi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKeyCapi(BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptDeriveKeyCapi$handle() {
        return BCryptDeriveKeyCapi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKeyCapi(BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptDeriveKeyCapi$address() {
        return BCryptDeriveKeyCapi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKeyCapi(BCRYPT_HASH_HANDLE hHash, BCRYPT_ALG_HANDLE hTargetAlg, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags)
     * }
     */
    public static int BCryptDeriveKeyCapi(MemorySegment hHash, MemorySegment hTargetAlg, MemorySegment pbDerivedKey, int cbDerivedKey, int dwFlags) {
        var mh$ = BCryptDeriveKeyCapi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDeriveKeyCapi", hHash, hTargetAlg, pbDerivedKey, cbDerivedKey, dwFlags);
            }
            return (int)mh$.invokeExact(hHash, hTargetAlg, pbDerivedKey, cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDeriveKeyPBKDF2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDeriveKeyPBKDF2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKeyPBKDF2(BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor BCryptDeriveKeyPBKDF2$descriptor() {
        return BCryptDeriveKeyPBKDF2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKeyPBKDF2(BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags)
     * }
     */
    public static MethodHandle BCryptDeriveKeyPBKDF2$handle() {
        return BCryptDeriveKeyPBKDF2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKeyPBKDF2(BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags)
     * }
     */
    public static MemorySegment BCryptDeriveKeyPBKDF2$address() {
        return BCryptDeriveKeyPBKDF2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDeriveKeyPBKDF2(BCRYPT_ALG_HANDLE hPrf, PUCHAR pbPassword, ULONG cbPassword, PUCHAR pbSalt, ULONG cbSalt, ULONGLONG cIterations, PUCHAR pbDerivedKey, ULONG cbDerivedKey, ULONG dwFlags)
     * }
     */
    public static int BCryptDeriveKeyPBKDF2(MemorySegment hPrf, MemorySegment pbPassword, int cbPassword, MemorySegment pbSalt, int cbSalt, long cIterations, MemorySegment pbDerivedKey, int cbDerivedKey, int dwFlags) {
        var mh$ = BCryptDeriveKeyPBKDF2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDeriveKeyPBKDF2", hPrf, pbPassword, cbPassword, pbSalt, cbSalt, cIterations, pbDerivedKey, cbDerivedKey, dwFlags);
            }
            return (int)mh$.invokeExact(hPrf, pbPassword, cbPassword, pbSalt, cbSalt, cIterations, pbDerivedKey, cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _BCRYPT_INTERFACE_VERSION {
     *     USHORT MajorVersion;
     *     USHORT MinorVersion;
     * } *PBCRYPT_INTERFACE_VERSION
     * }
     */
    public static final AddressLayout PBCRYPT_INTERFACE_VERSION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_INTERFACE_REG {
     *     ULONG dwInterface;
     *     ULONG dwFlags;
     *     ULONG cFunctions;
     *     PWSTR *rgpszFunctions;
     * } *PCRYPT_INTERFACE_REG
     * }
     */
    public static final AddressLayout PCRYPT_INTERFACE_REG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_IMAGE_REG {
     *     PWSTR pszImage;
     *     ULONG cInterfaces;
     *     PCRYPT_INTERFACE_REG *rgpInterfaces;
     * } *PCRYPT_IMAGE_REG
     * }
     */
    public static final AddressLayout PCRYPT_IMAGE_REG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PROVIDER_REG {
     *     ULONG cAliases;
     *     PWSTR *rgpszAliases;
     *     PCRYPT_IMAGE_REG pUM;
     *     PCRYPT_IMAGE_REG pKM;
     * } *PCRYPT_PROVIDER_REG
     * }
     */
    public static final AddressLayout PCRYPT_PROVIDER_REG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PROVIDERS {
     *     ULONG cProviders;
     *     PWSTR *rgpszProviders;
     * } *PCRYPT_PROVIDERS
     * }
     */
    public static final AddressLayout PCRYPT_PROVIDERS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_CONTEXT_CONFIG {
     *     ULONG dwFlags;
     *     ULONG dwReserved;
     * } *PCRYPT_CONTEXT_CONFIG
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXT_CONFIG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG {
     *     ULONG dwFlags;
     *     ULONG dwReserved;
     * } *PCRYPT_CONTEXT_FUNCTION_CONFIG
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXT_FUNCTION_CONFIG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_CONTEXTS {
     *     ULONG cContexts;
     *     PWSTR *rgpszContexts;
     * } *PCRYPT_CONTEXTS
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXTS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_CONTEXT_FUNCTIONS {
     *     ULONG cFunctions;
     *     PWSTR *rgpszFunctions;
     * } *PCRYPT_CONTEXT_FUNCTIONS
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXT_FUNCTIONS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS {
     *     ULONG cProviders;
     *     PWSTR *rgpszProviders;
     * } *PCRYPT_CONTEXT_FUNCTION_PROVIDERS
     * }
     */
    public static final AddressLayout PCRYPT_CONTEXT_FUNCTION_PROVIDERS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PROPERTY_REF {
     *     PWSTR pszProperty;
     *     ULONG cbValue;
     *     PUCHAR pbValue;
     * } *PCRYPT_PROPERTY_REF
     * }
     */
    public static final AddressLayout PCRYPT_PROPERTY_REF = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_IMAGE_REF {
     *     PWSTR pszImage;
     *     ULONG dwFlags;
     * } *PCRYPT_IMAGE_REF
     * }
     */
    public static final AddressLayout PCRYPT_IMAGE_REF = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PROVIDER_REF {
     *     ULONG dwInterface;
     *     PWSTR pszFunction;
     *     PWSTR pszProvider;
     *     ULONG cProperties;
     *     PCRYPT_PROPERTY_REF *rgpProperties;
     *     PCRYPT_IMAGE_REF pUM;
     *     PCRYPT_IMAGE_REF pKM;
     * } *PCRYPT_PROVIDER_REF
     * }
     */
    public static final AddressLayout PCRYPT_PROVIDER_REF = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PROVIDER_REFS {
     *     ULONG cProviders;
     *     PCRYPT_PROVIDER_REF *rgpProviders;
     * } *PCRYPT_PROVIDER_REFS
     * }
     */
    public static final AddressLayout PCRYPT_PROVIDER_REFS = winapi.C_POINTER;

    private static class BCryptQueryProviderRegistration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptQueryProviderRegistration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryProviderRegistration(LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer)
     * }
     */
    public static FunctionDescriptor BCryptQueryProviderRegistration$descriptor() {
        return BCryptQueryProviderRegistration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryProviderRegistration(LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer)
     * }
     */
    public static MethodHandle BCryptQueryProviderRegistration$handle() {
        return BCryptQueryProviderRegistration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryProviderRegistration(LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer)
     * }
     */
    public static MemorySegment BCryptQueryProviderRegistration$address() {
        return BCryptQueryProviderRegistration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryProviderRegistration(LPCWSTR pszProvider, ULONG dwMode, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_PROVIDER_REG *ppBuffer)
     * }
     */
    public static int BCryptQueryProviderRegistration(MemorySegment pszProvider, int dwMode, int dwInterface, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptQueryProviderRegistration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptQueryProviderRegistration", pszProvider, dwMode, dwInterface, pcbBuffer, ppBuffer);
            }
            return (int)mh$.invokeExact(pszProvider, dwMode, dwInterface, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptEnumRegisteredProviders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptEnumRegisteredProviders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumRegisteredProviders(ULONG *pcbBuffer, PCRYPT_PROVIDERS *ppBuffer)
     * }
     */
    public static FunctionDescriptor BCryptEnumRegisteredProviders$descriptor() {
        return BCryptEnumRegisteredProviders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumRegisteredProviders(ULONG *pcbBuffer, PCRYPT_PROVIDERS *ppBuffer)
     * }
     */
    public static MethodHandle BCryptEnumRegisteredProviders$handle() {
        return BCryptEnumRegisteredProviders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumRegisteredProviders(ULONG *pcbBuffer, PCRYPT_PROVIDERS *ppBuffer)
     * }
     */
    public static MemorySegment BCryptEnumRegisteredProviders$address() {
        return BCryptEnumRegisteredProviders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumRegisteredProviders(ULONG *pcbBuffer, PCRYPT_PROVIDERS *ppBuffer)
     * }
     */
    public static int BCryptEnumRegisteredProviders(MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptEnumRegisteredProviders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptEnumRegisteredProviders", pcbBuffer, ppBuffer);
            }
            return (int)mh$.invokeExact(pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptCreateContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptCreateContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig)
     * }
     */
    public static FunctionDescriptor BCryptCreateContext$descriptor() {
        return BCryptCreateContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig)
     * }
     */
    public static MethodHandle BCryptCreateContext$handle() {
        return BCryptCreateContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig)
     * }
     */
    public static MemorySegment BCryptCreateContext$address() {
        return BCryptCreateContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptCreateContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig)
     * }
     */
    public static int BCryptCreateContext(int dwTable, MemorySegment pszContext, MemorySegment pConfig) {
        var mh$ = BCryptCreateContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptCreateContext", dwTable, pszContext, pConfig);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, pConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptDeleteContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptDeleteContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeleteContext(ULONG dwTable, LPCWSTR pszContext)
     * }
     */
    public static FunctionDescriptor BCryptDeleteContext$descriptor() {
        return BCryptDeleteContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeleteContext(ULONG dwTable, LPCWSTR pszContext)
     * }
     */
    public static MethodHandle BCryptDeleteContext$handle() {
        return BCryptDeleteContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptDeleteContext(ULONG dwTable, LPCWSTR pszContext)
     * }
     */
    public static MemorySegment BCryptDeleteContext$address() {
        return BCryptDeleteContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptDeleteContext(ULONG dwTable, LPCWSTR pszContext)
     * }
     */
    public static int BCryptDeleteContext(int dwTable, MemorySegment pszContext) {
        var mh$ = BCryptDeleteContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptDeleteContext", dwTable, pszContext);
            }
            return (int)mh$.invokeExact(dwTable, pszContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptEnumContexts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptEnumContexts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContexts(ULONG dwTable, ULONG *pcbBuffer, PCRYPT_CONTEXTS *ppBuffer)
     * }
     */
    public static FunctionDescriptor BCryptEnumContexts$descriptor() {
        return BCryptEnumContexts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContexts(ULONG dwTable, ULONG *pcbBuffer, PCRYPT_CONTEXTS *ppBuffer)
     * }
     */
    public static MethodHandle BCryptEnumContexts$handle() {
        return BCryptEnumContexts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContexts(ULONG dwTable, ULONG *pcbBuffer, PCRYPT_CONTEXTS *ppBuffer)
     * }
     */
    public static MemorySegment BCryptEnumContexts$address() {
        return BCryptEnumContexts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContexts(ULONG dwTable, ULONG *pcbBuffer, PCRYPT_CONTEXTS *ppBuffer)
     * }
     */
    public static int BCryptEnumContexts(int dwTable, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptEnumContexts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptEnumContexts", dwTable, pcbBuffer, ppBuffer);
            }
            return (int)mh$.invokeExact(dwTable, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptConfigureContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptConfigureContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptConfigureContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig)
     * }
     */
    public static FunctionDescriptor BCryptConfigureContext$descriptor() {
        return BCryptConfigureContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptConfigureContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig)
     * }
     */
    public static MethodHandle BCryptConfigureContext$handle() {
        return BCryptConfigureContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptConfigureContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig)
     * }
     */
    public static MemorySegment BCryptConfigureContext$address() {
        return BCryptConfigureContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptConfigureContext(ULONG dwTable, LPCWSTR pszContext, PCRYPT_CONTEXT_CONFIG pConfig)
     * }
     */
    public static int BCryptConfigureContext(int dwTable, MemorySegment pszContext, MemorySegment pConfig) {
        var mh$ = BCryptConfigureContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptConfigureContext", dwTable, pszContext, pConfig);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, pConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptQueryContextConfiguration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptQueryContextConfiguration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG *pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer)
     * }
     */
    public static FunctionDescriptor BCryptQueryContextConfiguration$descriptor() {
        return BCryptQueryContextConfiguration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG *pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer)
     * }
     */
    public static MethodHandle BCryptQueryContextConfiguration$handle() {
        return BCryptQueryContextConfiguration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG *pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer)
     * }
     */
    public static MemorySegment BCryptQueryContextConfiguration$address() {
        return BCryptQueryContextConfiguration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG *pcbBuffer, PCRYPT_CONTEXT_CONFIG *ppBuffer)
     * }
     */
    public static int BCryptQueryContextConfiguration(int dwTable, MemorySegment pszContext, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptQueryContextConfiguration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptQueryContextConfiguration", dwTable, pszContext, pcbBuffer, ppBuffer);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptAddContextFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptAddContextFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptAddContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition)
     * }
     */
    public static FunctionDescriptor BCryptAddContextFunction$descriptor() {
        return BCryptAddContextFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptAddContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition)
     * }
     */
    public static MethodHandle BCryptAddContextFunction$handle() {
        return BCryptAddContextFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptAddContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition)
     * }
     */
    public static MemorySegment BCryptAddContextFunction$address() {
        return BCryptAddContextFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptAddContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG dwPosition)
     * }
     */
    public static int BCryptAddContextFunction(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, int dwPosition) {
        var mh$ = BCryptAddContextFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptAddContextFunction", dwTable, pszContext, dwInterface, pszFunction, dwPosition);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, dwPosition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptRemoveContextFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptRemoveContextFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptRemoveContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction)
     * }
     */
    public static FunctionDescriptor BCryptRemoveContextFunction$descriptor() {
        return BCryptRemoveContextFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptRemoveContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction)
     * }
     */
    public static MethodHandle BCryptRemoveContextFunction$handle() {
        return BCryptRemoveContextFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptRemoveContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction)
     * }
     */
    public static MemorySegment BCryptRemoveContextFunction$address() {
        return BCryptRemoveContextFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptRemoveContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction)
     * }
     */
    public static int BCryptRemoveContextFunction(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction) {
        var mh$ = BCryptRemoveContextFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptRemoveContextFunction", dwTable, pszContext, dwInterface, pszFunction);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptEnumContextFunctions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptEnumContextFunctions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContextFunctions(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer)
     * }
     */
    public static FunctionDescriptor BCryptEnumContextFunctions$descriptor() {
        return BCryptEnumContextFunctions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContextFunctions(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer)
     * }
     */
    public static MethodHandle BCryptEnumContextFunctions$handle() {
        return BCryptEnumContextFunctions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContextFunctions(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer)
     * }
     */
    public static MemorySegment BCryptEnumContextFunctions$address() {
        return BCryptEnumContextFunctions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContextFunctions(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTIONS *ppBuffer)
     * }
     */
    public static int BCryptEnumContextFunctions(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptEnumContextFunctions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptEnumContextFunctions", dwTable, pszContext, dwInterface, pcbBuffer, ppBuffer);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptConfigureContextFunction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptConfigureContextFunction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptConfigureContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig)
     * }
     */
    public static FunctionDescriptor BCryptConfigureContextFunction$descriptor() {
        return BCryptConfigureContextFunction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptConfigureContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig)
     * }
     */
    public static MethodHandle BCryptConfigureContextFunction$handle() {
        return BCryptConfigureContextFunction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptConfigureContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig)
     * }
     */
    public static MemorySegment BCryptConfigureContextFunction$address() {
        return BCryptConfigureContextFunction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptConfigureContextFunction(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig)
     * }
     */
    public static int BCryptConfigureContextFunction(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pConfig) {
        var mh$ = BCryptConfigureContextFunction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptConfigureContextFunction", dwTable, pszContext, dwInterface, pszFunction, pConfig);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pConfig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptQueryContextFunctionConfiguration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptQueryContextFunctionConfiguration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextFunctionConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer)
     * }
     */
    public static FunctionDescriptor BCryptQueryContextFunctionConfiguration$descriptor() {
        return BCryptQueryContextFunctionConfiguration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextFunctionConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer)
     * }
     */
    public static MethodHandle BCryptQueryContextFunctionConfiguration$handle() {
        return BCryptQueryContextFunctionConfiguration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextFunctionConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer)
     * }
     */
    public static MemorySegment BCryptQueryContextFunctionConfiguration$address() {
        return BCryptQueryContextFunctionConfiguration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextFunctionConfiguration(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer)
     * }
     */
    public static int BCryptQueryContextFunctionConfiguration(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptQueryContextFunctionConfiguration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptQueryContextFunctionConfiguration", dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptEnumContextFunctionProviders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptEnumContextFunctionProviders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContextFunctionProviders(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer)
     * }
     */
    public static FunctionDescriptor BCryptEnumContextFunctionProviders$descriptor() {
        return BCryptEnumContextFunctionProviders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContextFunctionProviders(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer)
     * }
     */
    public static MethodHandle BCryptEnumContextFunctionProviders$handle() {
        return BCryptEnumContextFunctionProviders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContextFunctionProviders(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer)
     * }
     */
    public static MemorySegment BCryptEnumContextFunctionProviders$address() {
        return BCryptEnumContextFunctionProviders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptEnumContextFunctionProviders(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, ULONG *pcbBuffer, PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer)
     * }
     */
    public static int BCryptEnumContextFunctionProviders(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptEnumContextFunctionProviders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptEnumContextFunctionProviders", dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptSetContextFunctionProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptSetContextFunctionProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSetContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue)
     * }
     */
    public static FunctionDescriptor BCryptSetContextFunctionProperty$descriptor() {
        return BCryptSetContextFunctionProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSetContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue)
     * }
     */
    public static MethodHandle BCryptSetContextFunctionProperty$handle() {
        return BCryptSetContextFunctionProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptSetContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue)
     * }
     */
    public static MemorySegment BCryptSetContextFunctionProperty$address() {
        return BCryptSetContextFunctionProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptSetContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG cbValue, PUCHAR pbValue)
     * }
     */
    public static int BCryptSetContextFunctionProperty(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pszProperty, int cbValue, MemorySegment pbValue) {
        var mh$ = BCryptSetContextFunctionProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptSetContextFunctionProperty", dwTable, pszContext, dwInterface, pszFunction, pszProperty, cbValue, pbValue);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pszProperty, cbValue, pbValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptQueryContextFunctionProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptQueryContextFunctionProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG *pcbValue, PUCHAR *ppbValue)
     * }
     */
    public static FunctionDescriptor BCryptQueryContextFunctionProperty$descriptor() {
        return BCryptQueryContextFunctionProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG *pcbValue, PUCHAR *ppbValue)
     * }
     */
    public static MethodHandle BCryptQueryContextFunctionProperty$handle() {
        return BCryptQueryContextFunctionProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG *pcbValue, PUCHAR *ppbValue)
     * }
     */
    public static MemorySegment BCryptQueryContextFunctionProperty$address() {
        return BCryptQueryContextFunctionProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptQueryContextFunctionProperty(ULONG dwTable, LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProperty, ULONG *pcbValue, PUCHAR *ppbValue)
     * }
     */
    public static int BCryptQueryContextFunctionProperty(int dwTable, MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pszProperty, MemorySegment pcbValue, MemorySegment ppbValue) {
        var mh$ = BCryptQueryContextFunctionProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptQueryContextFunctionProperty", dwTable, pszContext, dwInterface, pszFunction, pszProperty, pcbValue, ppbValue);
            }
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pszProperty, pcbValue, ppbValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptRegisterConfigChangeNotify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptRegisterConfigChangeNotify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptRegisterConfigChangeNotify(HANDLE *phEvent)
     * }
     */
    public static FunctionDescriptor BCryptRegisterConfigChangeNotify$descriptor() {
        return BCryptRegisterConfigChangeNotify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptRegisterConfigChangeNotify(HANDLE *phEvent)
     * }
     */
    public static MethodHandle BCryptRegisterConfigChangeNotify$handle() {
        return BCryptRegisterConfigChangeNotify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptRegisterConfigChangeNotify(HANDLE *phEvent)
     * }
     */
    public static MemorySegment BCryptRegisterConfigChangeNotify$address() {
        return BCryptRegisterConfigChangeNotify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptRegisterConfigChangeNotify(HANDLE *phEvent)
     * }
     */
    public static int BCryptRegisterConfigChangeNotify(MemorySegment phEvent) {
        var mh$ = BCryptRegisterConfigChangeNotify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptRegisterConfigChangeNotify", phEvent);
            }
            return (int)mh$.invokeExact(phEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptUnregisterConfigChangeNotify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptUnregisterConfigChangeNotify");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptUnregisterConfigChangeNotify(HANDLE hEvent)
     * }
     */
    public static FunctionDescriptor BCryptUnregisterConfigChangeNotify$descriptor() {
        return BCryptUnregisterConfigChangeNotify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptUnregisterConfigChangeNotify(HANDLE hEvent)
     * }
     */
    public static MethodHandle BCryptUnregisterConfigChangeNotify$handle() {
        return BCryptUnregisterConfigChangeNotify.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptUnregisterConfigChangeNotify(HANDLE hEvent)
     * }
     */
    public static MemorySegment BCryptUnregisterConfigChangeNotify$address() {
        return BCryptUnregisterConfigChangeNotify.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptUnregisterConfigChangeNotify(HANDLE hEvent)
     * }
     */
    public static int BCryptUnregisterConfigChangeNotify(MemorySegment hEvent) {
        var mh$ = BCryptUnregisterConfigChangeNotify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptUnregisterConfigChangeNotify", hEvent);
            }
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptResolveProviders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptResolveProviders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptResolveProviders(LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG *pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer)
     * }
     */
    public static FunctionDescriptor BCryptResolveProviders$descriptor() {
        return BCryptResolveProviders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptResolveProviders(LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG *pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer)
     * }
     */
    public static MethodHandle BCryptResolveProviders$handle() {
        return BCryptResolveProviders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptResolveProviders(LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG *pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer)
     * }
     */
    public static MemorySegment BCryptResolveProviders$address() {
        return BCryptResolveProviders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptResolveProviders(LPCWSTR pszContext, ULONG dwInterface, LPCWSTR pszFunction, LPCWSTR pszProvider, ULONG dwMode, ULONG dwFlags, ULONG *pcbBuffer, PCRYPT_PROVIDER_REFS *ppBuffer)
     * }
     */
    public static int BCryptResolveProviders(MemorySegment pszContext, int dwInterface, MemorySegment pszFunction, MemorySegment pszProvider, int dwMode, int dwFlags, MemorySegment pcbBuffer, MemorySegment ppBuffer) {
        var mh$ = BCryptResolveProviders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptResolveProviders", pszContext, dwInterface, pszFunction, pszProvider, dwMode, dwFlags, pcbBuffer, ppBuffer);
            }
            return (int)mh$.invokeExact(pszContext, dwInterface, pszFunction, pszProvider, dwMode, dwFlags, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BCryptGetFipsAlgorithmMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BCryptGetFipsAlgorithmMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGetFipsAlgorithmMode(BOOLEAN *pfEnabled)
     * }
     */
    public static FunctionDescriptor BCryptGetFipsAlgorithmMode$descriptor() {
        return BCryptGetFipsAlgorithmMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGetFipsAlgorithmMode(BOOLEAN *pfEnabled)
     * }
     */
    public static MethodHandle BCryptGetFipsAlgorithmMode$handle() {
        return BCryptGetFipsAlgorithmMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NTSTATUS BCryptGetFipsAlgorithmMode(BOOLEAN *pfEnabled)
     * }
     */
    public static MemorySegment BCryptGetFipsAlgorithmMode$address() {
        return BCryptGetFipsAlgorithmMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NTSTATUS BCryptGetFipsAlgorithmMode(BOOLEAN *pfEnabled)
     * }
     */
    public static int BCryptGetFipsAlgorithmMode(MemorySegment pfEnabled) {
        var mh$ = BCryptGetFipsAlgorithmMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BCryptGetFipsAlgorithmMode", pfEnabled);
            }
            return (int)mh$.invokeExact(pfEnabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CngGetFipsAlgorithmMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_CHAR    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CngGetFipsAlgorithmMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOLEAN CngGetFipsAlgorithmMode()
     * }
     */
    public static FunctionDescriptor CngGetFipsAlgorithmMode$descriptor() {
        return CngGetFipsAlgorithmMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOLEAN CngGetFipsAlgorithmMode()
     * }
     */
    public static MethodHandle CngGetFipsAlgorithmMode$handle() {
        return CngGetFipsAlgorithmMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOLEAN CngGetFipsAlgorithmMode()
     * }
     */
    public static MemorySegment CngGetFipsAlgorithmMode$address() {
        return CngGetFipsAlgorithmMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOLEAN CngGetFipsAlgorithmMode()
     * }
     */
    public static byte CngGetFipsAlgorithmMode() {
        var mh$ = CngGetFipsAlgorithmMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CngGetFipsAlgorithmMode");
            }
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef LONG SECURITY_STATUS
     * }
     */
    public static final OfInt SECURITY_STATUS = winapi.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef BCryptBuffer *PNCryptBuffer
     * }
     */
    public static final AddressLayout PNCryptBuffer = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef BCryptBufferDesc *PNCryptBufferDesc
     * }
     */
    public static final AddressLayout PNCryptBufferDesc = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR NCRYPT_HANDLE
     * }
     */
    public static final OfLong NCRYPT_HANDLE = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR NCRYPT_PROV_HANDLE
     * }
     */
    public static final OfLong NCRYPT_PROV_HANDLE = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR NCRYPT_KEY_HANDLE
     * }
     */
    public static final OfLong NCRYPT_KEY_HANDLE = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR NCRYPT_HASH_HANDLE
     * }
     */
    public static final OfLong NCRYPT_HASH_HANDLE = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR NCRYPT_SECRET_HANDLE
     * }
     */
    public static final OfLong NCRYPT_SECRET_HANDLE = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_CIPHER_PADDING_INFO {
     *     ULONG cbSize;
     *     DWORD dwFlags;
     *     PUCHAR pbIV;
     *     ULONG cbIV;
     *     PUCHAR pbOtherInfo;
     *     ULONG cbOtherInfo;
     * } *PNCRYPT_CIPHER_PADDING_INFO
     * }
     */
    public static final AddressLayout PNCRYPT_CIPHER_PADDING_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES {
     *     ULONG Version;
     *     ULONG Flags;
     *     ULONG cbPublicKeyBlob;
     * } *PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES
     * }
     */
    public static final AddressLayout PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER {
     *     ULONG Version;
     *     ULONG KeyUsage;
     *     ULONG PerBootKey : 1;
     *     ULONG Reserved : 31;
     *     ULONG cbAlgName;
     *     ULONG cbNonce;
     *     ULONG cbAuthTag;
     *     ULONG cbWrappingKey;
     *     ULONG cbIsolatedKey;
     * } *PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER
     * }
     */
    public static final AddressLayout PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE {
     *     NCRYPT_EXPORTED_ISOLATED_KEY_HEADER Header;
     * } *PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE
     * }
     */
    public static final AddressLayout PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_VBS_ROOT_ATTESTATION_HEADER {
     *     ULONG Magic;
     *     ULONG Version;
     *     ULONG cbAttributes;
     *     ULONG cbNonce;
     *     ULONG cbReport;
     *     ULONG cbSignature;
     * } *PNCRYPT_VBS_ROOT_ATTESTATION_HEADER
     * }
     */
    public static final AddressLayout PNCRYPT_VBS_ROOT_ATTESTATION_HEADER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_VBS_IDENTITY_ATTESTATION_PADDING {
     *     ULONG Version;
     *     ULONG ulPaddingScheme;
     *     ULONG cbHashAlg;
     *     ULONG ulSalt;
     * } *PNCRYPT_VBS_IDENTITY_ATTESTATION_PADDING
     * }
     */
    public static final AddressLayout PNCRYPT_VBS_IDENTITY_ATTESTATION_PADDING = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER {
     *     ULONG Magic;
     *     ULONG Version;
     *     ULONG cbAttributes;
     *     ULONG cbNonce;
     *     ULONG cbHashAlg;
     *     ULONG cbPadding;
     *     ULONG cbSignatureAlg;
     *     ULONG cbSignature;
     * } *PNCRYPT_VBS_IDENTITY_ATTESTATION_HEADER
     * }
     */
    public static final AddressLayout PNCRYPT_VBS_IDENTITY_ATTESTATION_HEADER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_VBS_KEY_ATTESTATION_STATEMENT {
     *     ULONG Magic;
     *     ULONG Version;
     *     ULONG ClaimType;
     * } *PNCRYPT_VBS_KEY_ATTESTATION_STATEMENT
     * }
     */
    public static final AddressLayout PNCRYPT_VBS_KEY_ATTESTATION_STATEMENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_VBS_ROOT_KEY_ATTESTATION_CLAIM_DETAILS {
     *     ULONG ulKeyFlags;
     *     ULONGLONG ullTrustletId;
     *     ULONG ulTrustletSecurityVersion;
     *     ULONG ulTrustletDebuggable;
     * } *PNCRYPT_VBS_ROOT_KEY_ATTESTATION_CLAIM_DETAILS
     * }
     */
    public static final AddressLayout PNCRYPT_VBS_ROOT_KEY_ATTESTATION_CLAIM_DETAILS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_VBS_IDENTITY_KEY_ATTESTATION_CLAIM_DETAILS {
     *     ULONG ulKeyFlags;
     *     LPCWSTR pszSignatureHashAlg;
     *     ULONG ulPaddingScheme;
     *     LPCWSTR pszPaddingHashAlg;
     *     ULONG ulPaddingSalt;
     * } *PNCRYPT_VBS_IDENTITY_KEY_ATTESTATION_CLAIM_DETAILS
     * }
     */
    public static final AddressLayout PNCRYPT_VBS_IDENTITY_KEY_ATTESTATION_CLAIM_DETAILS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct __NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT {
     *     UINT32 Magic;
     *     UINT32 Version;
     *     UINT32 HeaderSize;
     *     UINT32 cbCertifyInfo;
     *     UINT32 cbSignature;
     *     UINT32 cbTpmPublic;
     * } *PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT
     * }
     */
    public static final AddressLayout PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT {
     *     ULONG Magic;
     *     ULONG Version;
     *     ULONG pcrAlg;
     *     ULONG cbSignature;
     *     ULONG cbQuote;
     *     ULONG cbPcrs;
     * } *PNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT
     * }
     */
    public static final AddressLayout PNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = winapi.C_POINTER;

    private static class NCryptOpenStorageProvider {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptOpenStorageProvider");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptOpenStorageProvider(NCRYPT_PROV_HANDLE *phProvider, LPCWSTR pszProviderName, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptOpenStorageProvider$descriptor() {
        return NCryptOpenStorageProvider.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptOpenStorageProvider(NCRYPT_PROV_HANDLE *phProvider, LPCWSTR pszProviderName, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptOpenStorageProvider$handle() {
        return NCryptOpenStorageProvider.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptOpenStorageProvider(NCRYPT_PROV_HANDLE *phProvider, LPCWSTR pszProviderName, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptOpenStorageProvider$address() {
        return NCryptOpenStorageProvider.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptOpenStorageProvider(NCRYPT_PROV_HANDLE *phProvider, LPCWSTR pszProviderName, DWORD dwFlags)
     * }
     */
    public static int NCryptOpenStorageProvider(MemorySegment phProvider, MemorySegment pszProviderName, int dwFlags) {
        var mh$ = NCryptOpenStorageProvider.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptOpenStorageProvider", phProvider, pszProviderName, dwFlags);
            }
            return (int)mh$.invokeExact(phProvider, pszProviderName, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptEnumAlgorithms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptEnumAlgorithms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumAlgorithms(NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD *pdwAlgCount, NCryptAlgorithmName **ppAlgList, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptEnumAlgorithms$descriptor() {
        return NCryptEnumAlgorithms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumAlgorithms(NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD *pdwAlgCount, NCryptAlgorithmName **ppAlgList, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptEnumAlgorithms$handle() {
        return NCryptEnumAlgorithms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumAlgorithms(NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD *pdwAlgCount, NCryptAlgorithmName **ppAlgList, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptEnumAlgorithms$address() {
        return NCryptEnumAlgorithms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumAlgorithms(NCRYPT_PROV_HANDLE hProvider, DWORD dwAlgOperations, DWORD *pdwAlgCount, NCryptAlgorithmName **ppAlgList, DWORD dwFlags)
     * }
     */
    public static int NCryptEnumAlgorithms(long hProvider, int dwAlgOperations, MemorySegment pdwAlgCount, MemorySegment ppAlgList, int dwFlags) {
        var mh$ = NCryptEnumAlgorithms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptEnumAlgorithms", hProvider, dwAlgOperations, pdwAlgCount, ppAlgList, dwFlags);
            }
            return (int)mh$.invokeExact(hProvider, dwAlgOperations, pdwAlgCount, ppAlgList, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptIsAlgSupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptIsAlgSupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptIsAlgSupported(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptIsAlgSupported$descriptor() {
        return NCryptIsAlgSupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptIsAlgSupported(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptIsAlgSupported$handle() {
        return NCryptIsAlgSupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptIsAlgSupported(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptIsAlgSupported$address() {
        return NCryptIsAlgSupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptIsAlgSupported(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszAlgId, DWORD dwFlags)
     * }
     */
    public static int NCryptIsAlgSupported(long hProvider, MemorySegment pszAlgId, int dwFlags) {
        var mh$ = NCryptIsAlgSupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptIsAlgSupported", hProvider, pszAlgId, dwFlags);
            }
            return (int)mh$.invokeExact(hProvider, pszAlgId, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptEnumKeys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptEnumKeys");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumKeys(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName **ppKeyName, PVOID *ppEnumState, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptEnumKeys$descriptor() {
        return NCryptEnumKeys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumKeys(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName **ppKeyName, PVOID *ppEnumState, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptEnumKeys$handle() {
        return NCryptEnumKeys.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumKeys(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName **ppKeyName, PVOID *ppEnumState, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptEnumKeys$address() {
        return NCryptEnumKeys.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumKeys(NCRYPT_PROV_HANDLE hProvider, LPCWSTR pszScope, NCryptKeyName **ppKeyName, PVOID *ppEnumState, DWORD dwFlags)
     * }
     */
    public static int NCryptEnumKeys(long hProvider, MemorySegment pszScope, MemorySegment ppKeyName, MemorySegment ppEnumState, int dwFlags) {
        var mh$ = NCryptEnumKeys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptEnumKeys", hProvider, pszScope, ppKeyName, ppEnumState, dwFlags);
            }
            return (int)mh$.invokeExact(hProvider, pszScope, ppKeyName, ppEnumState, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptEnumStorageProviders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptEnumStorageProviders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumStorageProviders(DWORD *pdwProviderCount, NCryptProviderName **ppProviderList, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptEnumStorageProviders$descriptor() {
        return NCryptEnumStorageProviders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumStorageProviders(DWORD *pdwProviderCount, NCryptProviderName **ppProviderList, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptEnumStorageProviders$handle() {
        return NCryptEnumStorageProviders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumStorageProviders(DWORD *pdwProviderCount, NCryptProviderName **ppProviderList, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptEnumStorageProviders$address() {
        return NCryptEnumStorageProviders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEnumStorageProviders(DWORD *pdwProviderCount, NCryptProviderName **ppProviderList, DWORD dwFlags)
     * }
     */
    public static int NCryptEnumStorageProviders(MemorySegment pdwProviderCount, MemorySegment ppProviderList, int dwFlags) {
        var mh$ = NCryptEnumStorageProviders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptEnumStorageProviders", pdwProviderCount, ppProviderList, dwFlags);
            }
            return (int)mh$.invokeExact(pdwProviderCount, ppProviderList, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptFreeBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptFreeBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFreeBuffer(PVOID pvInput)
     * }
     */
    public static FunctionDescriptor NCryptFreeBuffer$descriptor() {
        return NCryptFreeBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFreeBuffer(PVOID pvInput)
     * }
     */
    public static MethodHandle NCryptFreeBuffer$handle() {
        return NCryptFreeBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFreeBuffer(PVOID pvInput)
     * }
     */
    public static MemorySegment NCryptFreeBuffer$address() {
        return NCryptFreeBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFreeBuffer(PVOID pvInput)
     * }
     */
    public static int NCryptFreeBuffer(MemorySegment pvInput) {
        var mh$ = NCryptFreeBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptFreeBuffer", pvInput);
            }
            return (int)mh$.invokeExact(pvInput);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptOpenKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptOpenKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptOpenKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptOpenKey$descriptor() {
        return NCryptOpenKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptOpenKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptOpenKey$handle() {
        return NCryptOpenKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptOpenKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptOpenKey$address() {
        return NCryptOpenKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptOpenKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static int NCryptOpenKey(long hProvider, MemorySegment phKey, MemorySegment pszKeyName, int dwLegacyKeySpec, int dwFlags) {
        var mh$ = NCryptOpenKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptOpenKey", hProvider, phKey, pszKeyName, dwLegacyKeySpec, dwFlags);
            }
            return (int)mh$.invokeExact(hProvider, phKey, pszKeyName, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptCreatePersistedKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptCreatePersistedKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptCreatePersistedKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptCreatePersistedKey$descriptor() {
        return NCryptCreatePersistedKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptCreatePersistedKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptCreatePersistedKey$handle() {
        return NCryptCreatePersistedKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptCreatePersistedKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptCreatePersistedKey$address() {
        return NCryptCreatePersistedKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptCreatePersistedKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE *phKey, LPCWSTR pszAlgId, LPCWSTR pszKeyName, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static int NCryptCreatePersistedKey(long hProvider, MemorySegment phKey, MemorySegment pszAlgId, MemorySegment pszKeyName, int dwLegacyKeySpec, int dwFlags) {
        var mh$ = NCryptCreatePersistedKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptCreatePersistedKey", hProvider, phKey, pszAlgId, pszKeyName, dwLegacyKeySpec, dwFlags);
            }
            return (int)mh$.invokeExact(hProvider, phKey, pszAlgId, pszKeyName, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptGetProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptGetProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptGetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptGetProperty$descriptor() {
        return NCryptGetProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptGetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptGetProperty$handle() {
        return NCryptGetProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptGetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptGetProperty$address() {
        return NCryptGetProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptGetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static int NCryptGetProperty(long hObject, MemorySegment pszProperty, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptGetProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptGetProperty", hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptSetProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptSetProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptSetProperty$descriptor() {
        return NCryptSetProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptSetProperty$handle() {
        return NCryptSetProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptSetProperty$address() {
        return NCryptSetProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSetProperty(NCRYPT_HANDLE hObject, LPCWSTR pszProperty, PBYTE pbInput, DWORD cbInput, DWORD dwFlags)
     * }
     */
    public static int NCryptSetProperty(long hObject, MemorySegment pszProperty, MemorySegment pbInput, int cbInput, int dwFlags) {
        var mh$ = NCryptSetProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptSetProperty", hObject, pszProperty, pbInput, cbInput, dwFlags);
            }
            return (int)mh$.invokeExact(hObject, pszProperty, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptFinalizeKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptFinalizeKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFinalizeKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptFinalizeKey$descriptor() {
        return NCryptFinalizeKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFinalizeKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptFinalizeKey$handle() {
        return NCryptFinalizeKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFinalizeKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptFinalizeKey$address() {
        return NCryptFinalizeKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFinalizeKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags)
     * }
     */
    public static int NCryptFinalizeKey(long hKey, int dwFlags) {
        var mh$ = NCryptFinalizeKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptFinalizeKey", hKey, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptEncrypt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptEncrypt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEncrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptEncrypt$descriptor() {
        return NCryptEncrypt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEncrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptEncrypt$handle() {
        return NCryptEncrypt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEncrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptEncrypt$address() {
        return NCryptEncrypt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptEncrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static int NCryptEncrypt(long hKey, MemorySegment pbInput, int cbInput, MemorySegment pPaddingInfo, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptEncrypt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptEncrypt", hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptDecrypt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptDecrypt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDecrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptDecrypt$descriptor() {
        return NCryptDecrypt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDecrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptDecrypt$handle() {
        return NCryptDecrypt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDecrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptDecrypt$address() {
        return NCryptDecrypt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDecrypt(NCRYPT_KEY_HANDLE hKey, PBYTE pbInput, DWORD cbInput, void *pPaddingInfo, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static int NCryptDecrypt(long hKey, MemorySegment pbInput, int cbInput, MemorySegment pPaddingInfo, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptDecrypt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptDecrypt", hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _NCRYPT_KEY_BLOB_HEADER {
     *     ULONG cbSize;
     *     ULONG dwMagic;
     *     ULONG cbAlgName;
     *     ULONG cbKeyData;
     * } *PNCRYPT_KEY_BLOB_HEADER
     * }
     */
    public static final AddressLayout PNCRYPT_KEY_BLOB_HEADER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER {
     *     DWORD magic;
     *     DWORD cbHeader;
     *     DWORD cbPublic;
     *     DWORD cbPrivate;
     *     DWORD cbName;
     * } *PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER
     * }
     */
    public static final AddressLayout PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct NCRYPT_TPM_PERSISTENT_KEY_BLOB_HEADER {
     *     DWORD magic;
     *     DWORD cbHeader;
     *     DWORD tpmHandle;
     * } *PNCRYPT_TPM_PERSISTENT_KEY_BLOB_HEADER
     * }
     */
    public static final AddressLayout PNCRYPT_TPM_PERSISTENT_KEY_BLOB_HEADER = winapi.C_POINTER;

    private static class NCryptImportKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptImportKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptImportKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, NCRYPT_KEY_HANDLE *phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptImportKey$descriptor() {
        return NCryptImportKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptImportKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, NCRYPT_KEY_HANDLE *phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptImportKey$handle() {
        return NCryptImportKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptImportKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, NCRYPT_KEY_HANDLE *phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptImportKey$address() {
        return NCryptImportKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptImportKey(NCRYPT_PROV_HANDLE hProvider, NCRYPT_KEY_HANDLE hImportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, NCRYPT_KEY_HANDLE *phKey, PBYTE pbData, DWORD cbData, DWORD dwFlags)
     * }
     */
    public static int NCryptImportKey(long hProvider, long hImportKey, MemorySegment pszBlobType, MemorySegment pParameterList, MemorySegment phKey, MemorySegment pbData, int cbData, int dwFlags) {
        var mh$ = NCryptImportKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptImportKey", hProvider, hImportKey, pszBlobType, pParameterList, phKey, pbData, cbData, dwFlags);
            }
            return (int)mh$.invokeExact(hProvider, hImportKey, pszBlobType, pParameterList, phKey, pbData, cbData, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptExportKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptExportKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptExportKey(NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptExportKey$descriptor() {
        return NCryptExportKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptExportKey(NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptExportKey$handle() {
        return NCryptExportKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptExportKey(NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptExportKey$address() {
        return NCryptExportKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptExportKey(NCRYPT_KEY_HANDLE hKey, NCRYPT_KEY_HANDLE hExportKey, LPCWSTR pszBlobType, NCryptBufferDesc *pParameterList, PBYTE pbOutput, DWORD cbOutput, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static int NCryptExportKey(long hKey, long hExportKey, MemorySegment pszBlobType, MemorySegment pParameterList, MemorySegment pbOutput, int cbOutput, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptExportKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptExportKey", hKey, hExportKey, pszBlobType, pParameterList, pbOutput, cbOutput, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType, pParameterList, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptSignHash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptSignHash");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSignHash(NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptSignHash$descriptor() {
        return NCryptSignHash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSignHash(NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptSignHash$handle() {
        return NCryptSignHash.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSignHash(NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptSignHash$address() {
        return NCryptSignHash.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSignHash(NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static int NCryptSignHash(long hKey, MemorySegment pPaddingInfo, MemorySegment pbHashValue, int cbHashValue, MemorySegment pbSignature, int cbSignature, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptSignHash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptSignHash", hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptVerifySignature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptVerifySignature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptVerifySignature(NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptVerifySignature$descriptor() {
        return NCryptVerifySignature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptVerifySignature(NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptVerifySignature$handle() {
        return NCryptVerifySignature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptVerifySignature(NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptVerifySignature$address() {
        return NCryptVerifySignature.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptVerifySignature(NCRYPT_KEY_HANDLE hKey, void *pPaddingInfo, PBYTE pbHashValue, DWORD cbHashValue, PBYTE pbSignature, DWORD cbSignature, DWORD dwFlags)
     * }
     */
    public static int NCryptVerifySignature(long hKey, MemorySegment pPaddingInfo, MemorySegment pbHashValue, int cbHashValue, MemorySegment pbSignature, int cbSignature, int dwFlags) {
        var mh$ = NCryptVerifySignature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptVerifySignature", hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptDeleteKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptDeleteKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDeleteKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptDeleteKey$descriptor() {
        return NCryptDeleteKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDeleteKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptDeleteKey$handle() {
        return NCryptDeleteKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDeleteKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptDeleteKey$address() {
        return NCryptDeleteKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDeleteKey(NCRYPT_KEY_HANDLE hKey, DWORD dwFlags)
     * }
     */
    public static int NCryptDeleteKey(long hKey, int dwFlags) {
        var mh$ = NCryptDeleteKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptDeleteKey", hKey, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptFreeObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptFreeObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFreeObject(NCRYPT_HANDLE hObject)
     * }
     */
    public static FunctionDescriptor NCryptFreeObject$descriptor() {
        return NCryptFreeObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFreeObject(NCRYPT_HANDLE hObject)
     * }
     */
    public static MethodHandle NCryptFreeObject$handle() {
        return NCryptFreeObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFreeObject(NCRYPT_HANDLE hObject)
     * }
     */
    public static MemorySegment NCryptFreeObject$address() {
        return NCryptFreeObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptFreeObject(NCRYPT_HANDLE hObject)
     * }
     */
    public static int NCryptFreeObject(long hObject) {
        var mh$ = NCryptFreeObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptFreeObject", hObject);
            }
            return (int)mh$.invokeExact(hObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptIsKeyHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptIsKeyHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL NCryptIsKeyHandle(NCRYPT_KEY_HANDLE hKey)
     * }
     */
    public static FunctionDescriptor NCryptIsKeyHandle$descriptor() {
        return NCryptIsKeyHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL NCryptIsKeyHandle(NCRYPT_KEY_HANDLE hKey)
     * }
     */
    public static MethodHandle NCryptIsKeyHandle$handle() {
        return NCryptIsKeyHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL NCryptIsKeyHandle(NCRYPT_KEY_HANDLE hKey)
     * }
     */
    public static MemorySegment NCryptIsKeyHandle$address() {
        return NCryptIsKeyHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL NCryptIsKeyHandle(NCRYPT_KEY_HANDLE hKey)
     * }
     */
    public static int NCryptIsKeyHandle(long hKey) {
        var mh$ = NCryptIsKeyHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptIsKeyHandle", hKey);
            }
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptTranslateHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptTranslateHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptTranslateHandle(NCRYPT_PROV_HANDLE *phProvider, NCRYPT_KEY_HANDLE *phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptTranslateHandle$descriptor() {
        return NCryptTranslateHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptTranslateHandle(NCRYPT_PROV_HANDLE *phProvider, NCRYPT_KEY_HANDLE *phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptTranslateHandle$handle() {
        return NCryptTranslateHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptTranslateHandle(NCRYPT_PROV_HANDLE *phProvider, NCRYPT_KEY_HANDLE *phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptTranslateHandle$address() {
        return NCryptTranslateHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptTranslateHandle(NCRYPT_PROV_HANDLE *phProvider, NCRYPT_KEY_HANDLE *phKey, HCRYPTPROV hLegacyProv, HCRYPTKEY hLegacyKey, DWORD dwLegacyKeySpec, DWORD dwFlags)
     * }
     */
    public static int NCryptTranslateHandle(MemorySegment phProvider, MemorySegment phKey, long hLegacyProv, long hLegacyKey, int dwLegacyKeySpec, int dwFlags) {
        var mh$ = NCryptTranslateHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptTranslateHandle", phProvider, phKey, hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
            }
            return (int)mh$.invokeExact(phProvider, phKey, hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptNotifyChangeKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptNotifyChangeKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptNotifyChangeKey(NCRYPT_PROV_HANDLE hProvider, HANDLE *phEvent, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptNotifyChangeKey$descriptor() {
        return NCryptNotifyChangeKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptNotifyChangeKey(NCRYPT_PROV_HANDLE hProvider, HANDLE *phEvent, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptNotifyChangeKey$handle() {
        return NCryptNotifyChangeKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptNotifyChangeKey(NCRYPT_PROV_HANDLE hProvider, HANDLE *phEvent, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptNotifyChangeKey$address() {
        return NCryptNotifyChangeKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptNotifyChangeKey(NCRYPT_PROV_HANDLE hProvider, HANDLE *phEvent, DWORD dwFlags)
     * }
     */
    public static int NCryptNotifyChangeKey(long hProvider, MemorySegment phEvent, int dwFlags) {
        var mh$ = NCryptNotifyChangeKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptNotifyChangeKey", hProvider, phEvent, dwFlags);
            }
            return (int)mh$.invokeExact(hProvider, phEvent, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptSecretAgreement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptSecretAgreement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSecretAgreement(NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE *phAgreedSecret, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptSecretAgreement$descriptor() {
        return NCryptSecretAgreement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSecretAgreement(NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE *phAgreedSecret, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptSecretAgreement$handle() {
        return NCryptSecretAgreement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSecretAgreement(NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE *phAgreedSecret, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptSecretAgreement$address() {
        return NCryptSecretAgreement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptSecretAgreement(NCRYPT_KEY_HANDLE hPrivKey, NCRYPT_KEY_HANDLE hPubKey, NCRYPT_SECRET_HANDLE *phAgreedSecret, DWORD dwFlags)
     * }
     */
    public static int NCryptSecretAgreement(long hPrivKey, long hPubKey, MemorySegment phAgreedSecret, int dwFlags) {
        var mh$ = NCryptSecretAgreement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptSecretAgreement", hPrivKey, hPubKey, phAgreedSecret, dwFlags);
            }
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptDeriveKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptDeriveKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDeriveKey(NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc *pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptDeriveKey$descriptor() {
        return NCryptDeriveKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDeriveKey(NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc *pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle NCryptDeriveKey$handle() {
        return NCryptDeriveKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDeriveKey(NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc *pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment NCryptDeriveKey$address() {
        return NCryptDeriveKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptDeriveKey(NCRYPT_SECRET_HANDLE hSharedSecret, LPCWSTR pwszKDF, NCryptBufferDesc *pParameterList, PBYTE pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags)
     * }
     */
    public static int NCryptDeriveKey(long hSharedSecret, MemorySegment pwszKDF, MemorySegment pParameterList, MemorySegment pbDerivedKey, int cbDerivedKey, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptDeriveKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptDeriveKey", hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptKeyDerivation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptKeyDerivation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptKeyDerivation(NCRYPT_KEY_HANDLE hKey, NCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptKeyDerivation$descriptor() {
        return NCryptKeyDerivation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptKeyDerivation(NCRYPT_KEY_HANDLE hKey, NCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags)
     * }
     */
    public static MethodHandle NCryptKeyDerivation$handle() {
        return NCryptKeyDerivation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptKeyDerivation(NCRYPT_KEY_HANDLE hKey, NCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags)
     * }
     */
    public static MemorySegment NCryptKeyDerivation$address() {
        return NCryptKeyDerivation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptKeyDerivation(NCRYPT_KEY_HANDLE hKey, NCryptBufferDesc *pParameterList, PUCHAR pbDerivedKey, DWORD cbDerivedKey, DWORD *pcbResult, ULONG dwFlags)
     * }
     */
    public static int NCryptKeyDerivation(long hKey, MemorySegment pParameterList, MemorySegment pbDerivedKey, int cbDerivedKey, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptKeyDerivation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptKeyDerivation", hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptCreateClaim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptCreateClaim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptCreateClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptCreateClaim$descriptor() {
        return NCryptCreateClaim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptCreateClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptCreateClaim$handle() {
        return NCryptCreateClaim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptCreateClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptCreateClaim$address() {
        return NCryptCreateClaim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptCreateClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, DWORD *pcbResult, DWORD dwFlags)
     * }
     */
    public static int NCryptCreateClaim(long hSubjectKey, long hAuthorityKey, int dwClaimType, MemorySegment pParameterList, MemorySegment pbClaimBlob, int cbClaimBlob, MemorySegment pcbResult, int dwFlags) {
        var mh$ = NCryptCreateClaim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptCreateClaim", hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pcbResult, dwFlags);
            }
            return (int)mh$.invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pcbResult, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NCryptVerifyClaim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NCryptVerifyClaim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptVerifyClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, NCryptBufferDesc *pOutput, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor NCryptVerifyClaim$descriptor() {
        return NCryptVerifyClaim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptVerifyClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, NCryptBufferDesc *pOutput, DWORD dwFlags)
     * }
     */
    public static MethodHandle NCryptVerifyClaim$handle() {
        return NCryptVerifyClaim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptVerifyClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, NCryptBufferDesc *pOutput, DWORD dwFlags)
     * }
     */
    public static MemorySegment NCryptVerifyClaim$address() {
        return NCryptVerifyClaim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SECURITY_STATUS NCryptVerifyClaim(NCRYPT_KEY_HANDLE hSubjectKey, NCRYPT_KEY_HANDLE hAuthorityKey, DWORD dwClaimType, NCryptBufferDesc *pParameterList, PBYTE pbClaimBlob, DWORD cbClaimBlob, NCryptBufferDesc *pOutput, DWORD dwFlags)
     * }
     */
    public static int NCryptVerifyClaim(long hSubjectKey, long hAuthorityKey, int dwClaimType, MemorySegment pParameterList, MemorySegment pbClaimBlob, int cbClaimBlob, MemorySegment pOutput, int dwFlags) {
        var mh$ = NCryptVerifyClaim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NCryptVerifyClaim", hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pOutput, dwFlags);
            }
            return (int)mh$.invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pOutput, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE
     * }
     */
    public static final OfLong HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR HCRYPTPROV_LEGACY
     * }
     */
    public static final OfLong HCRYPTPROV_LEGACY = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_BIT_BLOB {
     *     DWORD cbData;
     *     BYTE *pbData;
     *     DWORD cUnusedBits;
     * } *PCRYPT_BIT_BLOB
     * }
     */
    public static final AddressLayout PCRYPT_BIT_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
     *     LPSTR pszObjId;
     *     CRYPT_OBJID_BLOB Parameters;
     * } *PCRYPT_ALGORITHM_IDENTIFIER
     * }
     */
    public static final AddressLayout PCRYPT_ALGORITHM_IDENTIFIER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_OBJID_TABLE {
     *     DWORD dwAlgId;
     *     LPCSTR pszObjId;
     * } *PCRYPT_OBJID_TABLE
     * }
     */
    public static final AddressLayout PCRYPT_OBJID_TABLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_HASH_INFO {
     *     CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
     *     CRYPT_HASH_BLOB Hash;
     * } *PCRYPT_HASH_INFO
     * }
     */
    public static final AddressLayout PCRYPT_HASH_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_EXTENSION {
     *     LPSTR pszObjId;
     *     BOOL fCritical;
     *     CRYPT_OBJID_BLOB Value;
     * } *PCERT_EXTENSION
     * }
     */
    public static final AddressLayout PCERT_EXTENSION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const CERT_EXTENSION *PCCERT_EXTENSION
     * }
     */
    public static final AddressLayout PCCERT_EXTENSION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
     *     LPSTR pszObjId;
     *     CRYPT_OBJID_BLOB Value;
     * } *PCRYPT_ATTRIBUTE_TYPE_VALUE
     * }
     */
    public static final AddressLayout PCRYPT_ATTRIBUTE_TYPE_VALUE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_ATTRIBUTE {
     *     LPSTR pszObjId;
     *     DWORD cValue;
     *     PCRYPT_ATTR_BLOB rgValue;
     * } *PCRYPT_ATTRIBUTE
     * }
     */
    public static final AddressLayout PCRYPT_ATTRIBUTE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_ATTRIBUTES {
     *     DWORD cAttr;
     *     PCRYPT_ATTRIBUTE rgAttr;
     * } *PCRYPT_ATTRIBUTES
     * }
     */
    public static final AddressLayout PCRYPT_ATTRIBUTES = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_RDN_ATTR {
     *     LPSTR pszObjId;
     *     DWORD dwValueType;
     *     CERT_RDN_VALUE_BLOB Value;
     * } *PCERT_RDN_ATTR
     * }
     */
    public static final AddressLayout PCERT_RDN_ATTR = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_RDN {
     *     DWORD cRDNAttr;
     *     PCERT_RDN_ATTR rgRDNAttr;
     * } *PCERT_RDN
     * }
     */
    public static final AddressLayout PCERT_RDN = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_NAME_INFO {
     *     DWORD cRDN;
     *     PCERT_RDN rgRDN;
     * } *PCERT_NAME_INFO
     * }
     */
    public static final AddressLayout PCERT_NAME_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_NAME_VALUE {
     *     DWORD dwValueType;
     *     CERT_RDN_VALUE_BLOB Value;
     * } *PCERT_NAME_VALUE
     * }
     */
    public static final AddressLayout PCERT_NAME_VALUE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_PUBLIC_KEY_INFO {
     *     CRYPT_ALGORITHM_IDENTIFIER Algorithm;
     *     CRYPT_BIT_BLOB PublicKey;
     * } *PCERT_PUBLIC_KEY_INFO
     * }
     */
    public static final AddressLayout PCERT_PUBLIC_KEY_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_ECC_PRIVATE_KEY_INFO {
     *     DWORD dwVersion;
     *     CRYPT_DER_BLOB PrivateKey;
     *     LPSTR szCurveOid;
     *     CRYPT_BIT_BLOB PublicKey;
     * } *PCRYPT_ECC_PRIVATE_KEY_INFO
     * }
     */
    public static final AddressLayout PCRYPT_ECC_PRIVATE_KEY_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PRIVATE_KEY_INFO {
     *     DWORD Version;
     *     CRYPT_ALGORITHM_IDENTIFIER Algorithm;
     *     CRYPT_DER_BLOB PrivateKey;
     *     PCRYPT_ATTRIBUTES pAttributes;
     * } *PCRYPT_PRIVATE_KEY_INFO
     * }
     */
    public static final AddressLayout PCRYPT_PRIVATE_KEY_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {
     *     CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;
     *     CRYPT_DATA_BLOB EncryptedPrivateKey;
     * } *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO
     * }
     */
    public static final AddressLayout PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PKCS8_IMPORT_PARAMS {
     *     CRYPT_DIGEST_BLOB PrivateKey;
     *     PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
     *     LPVOID pVoidResolveFunc;
     *     PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
     *     LPVOID pVoidDecryptFunc;
     * } *PCRYPT_PKCS8_IMPORT_PARAMS
     * }
     */
    public static final AddressLayout PCRYPT_PKCS8_IMPORT_PARAMS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PKCS8_IMPORT_PARAMS {
     *     CRYPT_DIGEST_BLOB PrivateKey;
     *     PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;
     *     LPVOID pVoidResolveFunc;
     *     PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
     *     LPVOID pVoidDecryptFunc;
     * } *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS
     * }
     */
    public static final AddressLayout PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_PKCS8_EXPORT_PARAMS {
     *     HCRYPTPROV hCryptProv;
     *     DWORD dwKeySpec;
     *     LPSTR pszPrivateKeyObjId;
     *     PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
     *     LPVOID pVoidEncryptFunc;
     * } *PCRYPT_PKCS8_EXPORT_PARAMS
     * }
     */
    public static final AddressLayout PCRYPT_PKCS8_EXPORT_PARAMS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_INFO {
     *     DWORD dwVersion;
     *     CRYPT_INTEGER_BLOB SerialNumber;
     *     CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
     *     CERT_NAME_BLOB Issuer;
     *     FILETIME NotBefore;
     *     FILETIME NotAfter;
     *     CERT_NAME_BLOB Subject;
     *     CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
     *     CRYPT_BIT_BLOB IssuerUniqueId;
     *     CRYPT_BIT_BLOB SubjectUniqueId;
     *     DWORD cExtension;
     *     PCERT_EXTENSION rgExtension;
     * } *PCERT_INFO
     * }
     */
    public static final AddressLayout PCERT_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRL_ENTRY {
     *     CRYPT_INTEGER_BLOB SerialNumber;
     *     FILETIME RevocationDate;
     *     DWORD cExtension;
     *     PCERT_EXTENSION rgExtension;
     * } *PCRL_ENTRY
     * }
     */
    public static final AddressLayout PCRL_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRL_INFO {
     *     DWORD dwVersion;
     *     CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
     *     CERT_NAME_BLOB Issuer;
     *     FILETIME ThisUpdate;
     *     FILETIME NextUpdate;
     *     DWORD cCRLEntry;
     *     PCRL_ENTRY rgCRLEntry;
     *     DWORD cExtension;
     *     PCERT_EXTENSION rgExtension;
     * } *PCRL_INFO
     * }
     */
    public static final AddressLayout PCRL_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_OR_CRL_BLOB {
     *     DWORD dwChoice;
     *     DWORD cbEncoded;
     *     BYTE *pbEncoded;
     * } *PCERT_OR_CRL_BLOB
     * }
     */
    public static final AddressLayout PCERT_OR_CRL_BLOB = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_OR_CRL_BUNDLE {
     *     DWORD cItem;
     *     PCERT_OR_CRL_BLOB rgItem;
     * } *PCERT_OR_CRL_BUNDLE
     * }
     */
    public static final AddressLayout PCERT_OR_CRL_BUNDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_REQUEST_INFO {
     *     DWORD dwVersion;
     *     CERT_NAME_BLOB Subject;
     *     CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
     *     DWORD cAttribute;
     *     PCRYPT_ATTRIBUTE rgAttribute;
     * } *PCERT_REQUEST_INFO
     * }
     */
    public static final AddressLayout PCERT_REQUEST_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_KEYGEN_REQUEST_INFO {
     *     DWORD dwVersion;
     *     CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
     *     LPWSTR pwszChallengeString;
     * } *PCERT_KEYGEN_REQUEST_INFO
     * }
     */
    public static final AddressLayout PCERT_KEYGEN_REQUEST_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CERT_SIGNED_CONTENT_INFO {
     *     CRYPT_DER_BLOB ToBeSigned;
     *     CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
     *     CRYPT_BIT_BLOB Signature;
     * } *PCERT_SIGNED_CONTENT_INFO
     * }
     */
    public static final AddressLayout PCERT_SIGNED_CONTENT_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CTL_USAGE {
     *     DWORD cUsageIdentifier;
     *     LPSTR *rgpszUsageIdentifier;
     * } *PCTL_USAGE
     * }
     */
    public static final AddressLayout PCTL_USAGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CTL_USAGE {
     *     DWORD cUsageIdentifier;
     *     LPSTR *rgpszUsageIdentifier;
     * } *PCERT_ENHKEY_USAGE
     * }
     */
    public static final AddressLayout PCERT_ENHKEY_USAGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const CTL_USAGE *PCCTL_USAGE
     * }
     */
    public static final AddressLayout PCCTL_USAGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const CERT_ENHKEY_USAGE *PCCERT_ENHKEY_USAGE
     * }
     */
    public static final AddressLayout PCCERT_ENHKEY_USAGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CTL_ENTRY {
     *     CRYPT_DATA_BLOB SubjectIdentifier;
     *     DWORD cAttribute;
     *     PCRYPT_ATTRIBUTE rgAttribute;
     * } *PCTL_ENTRY
     * }
     */
    public static final AddressLayout PCTL_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CTL_INFO {
     *     DWORD dwVersion;
     *     CTL_USAGE SubjectUsage;
     *     CRYPT_DATA_BLOB ListIdentifier;
     *     CRYPT_INTEGER_BLOB SequenceNumber;
     *     FILETIME ThisUpdate;
     *     FILETIME NextUpdate;
     *     CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
     *     DWORD cCTLEntry;
     *     PCTL_ENTRY rgCTLEntry;
     *     DWORD cExtension;
     *     PCERT_EXTENSION rgExtension;
     * } *PCTL_INFO
     * }
     */
    public static final AddressLayout PCTL_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
     *     LPSTR pszTimeStampAlgorithm;
     *     LPSTR pszContentType;
     *     CRYPT_OBJID_BLOB Content;
     *     DWORD cAttribute;
     *     PCRYPT_ATTRIBUTE rgAttribute;
     * } *PCRYPT_TIME_STAMP_REQUEST_INFO
     * }
     */
    public static final AddressLayout PCRYPT_TIME_STAMP_REQUEST_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
     *     LPWSTR pwszName;
     *     LPWSTR pwszValue;
     * } *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR
     * }
     */
    public static final AddressLayout PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = winapi.C_POINTER;
}

