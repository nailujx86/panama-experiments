// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STORAGE_CRYPTO_CAPABILITY_V2 {
 *     DWORD Version;
 *     DWORD Size;
 *     DWORD CryptoCapabilityIndex;
 *     STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId;
 *     STORAGE_CRYPTO_KEY_SIZE KeySize;
 *     DWORD DataUnitSizeBitmask;
 *     WORD MaxIVBitSize;
 *     WORD Reserved;
 *     STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask;
 * }
 * }
 */
public class _STORAGE_CRYPTO_CAPABILITY_V2 {

    _STORAGE_CRYPTO_CAPABILITY_V2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("Version"),
        winapi.C_LONG.withName("Size"),
        winapi.C_LONG.withName("CryptoCapabilityIndex"),
        winapi.C_INT.withName("AlgorithmId"),
        winapi.C_INT.withName("KeySize"),
        winapi.C_LONG.withName("DataUnitSizeBitmask"),
        winapi.C_SHORT.withName("MaxIVBitSize"),
        winapi.C_SHORT.withName("Reserved"),
        _STORAGE_SECURITY_COMPLIANCE_BITMASK.layout().withName("SecurityComplianceBitmask"),
        MemoryLayout.paddingLayout(3)
    ).withName("_STORAGE_CRYPTO_CAPABILITY_V2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt Size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final OfInt Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static int Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Size
     * }
     */
    public static void Size(MemorySegment struct, int fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final OfInt CryptoCapabilityIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CryptoCapabilityIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD CryptoCapabilityIndex
     * }
     */
    public static final OfInt CryptoCapabilityIndex$layout() {
        return CryptoCapabilityIndex$LAYOUT;
    }

    private static final long CryptoCapabilityIndex$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD CryptoCapabilityIndex
     * }
     */
    public static final long CryptoCapabilityIndex$offset() {
        return CryptoCapabilityIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD CryptoCapabilityIndex
     * }
     */
    public static int CryptoCapabilityIndex(MemorySegment struct) {
        return struct.get(CryptoCapabilityIndex$LAYOUT, CryptoCapabilityIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD CryptoCapabilityIndex
     * }
     */
    public static void CryptoCapabilityIndex(MemorySegment struct, int fieldValue) {
        struct.set(CryptoCapabilityIndex$LAYOUT, CryptoCapabilityIndex$OFFSET, fieldValue);
    }

    private static final OfInt AlgorithmId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AlgorithmId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId
     * }
     */
    public static final OfInt AlgorithmId$layout() {
        return AlgorithmId$LAYOUT;
    }

    private static final long AlgorithmId$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId
     * }
     */
    public static final long AlgorithmId$offset() {
        return AlgorithmId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId
     * }
     */
    public static int AlgorithmId(MemorySegment struct) {
        return struct.get(AlgorithmId$LAYOUT, AlgorithmId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId
     * }
     */
    public static void AlgorithmId(MemorySegment struct, int fieldValue) {
        struct.set(AlgorithmId$LAYOUT, AlgorithmId$OFFSET, fieldValue);
    }

    private static final OfInt KeySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("KeySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_KEY_SIZE KeySize
     * }
     */
    public static final OfInt KeySize$layout() {
        return KeySize$LAYOUT;
    }

    private static final long KeySize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_KEY_SIZE KeySize
     * }
     */
    public static final long KeySize$offset() {
        return KeySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_KEY_SIZE KeySize
     * }
     */
    public static int KeySize(MemorySegment struct) {
        return struct.get(KeySize$LAYOUT, KeySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_KEY_SIZE KeySize
     * }
     */
    public static void KeySize(MemorySegment struct, int fieldValue) {
        struct.set(KeySize$LAYOUT, KeySize$OFFSET, fieldValue);
    }

    private static final OfInt DataUnitSizeBitmask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DataUnitSizeBitmask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DataUnitSizeBitmask
     * }
     */
    public static final OfInt DataUnitSizeBitmask$layout() {
        return DataUnitSizeBitmask$LAYOUT;
    }

    private static final long DataUnitSizeBitmask$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DataUnitSizeBitmask
     * }
     */
    public static final long DataUnitSizeBitmask$offset() {
        return DataUnitSizeBitmask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DataUnitSizeBitmask
     * }
     */
    public static int DataUnitSizeBitmask(MemorySegment struct) {
        return struct.get(DataUnitSizeBitmask$LAYOUT, DataUnitSizeBitmask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DataUnitSizeBitmask
     * }
     */
    public static void DataUnitSizeBitmask(MemorySegment struct, int fieldValue) {
        struct.set(DataUnitSizeBitmask$LAYOUT, DataUnitSizeBitmask$OFFSET, fieldValue);
    }

    private static final OfShort MaxIVBitSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MaxIVBitSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MaxIVBitSize
     * }
     */
    public static final OfShort MaxIVBitSize$layout() {
        return MaxIVBitSize$LAYOUT;
    }

    private static final long MaxIVBitSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MaxIVBitSize
     * }
     */
    public static final long MaxIVBitSize$offset() {
        return MaxIVBitSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MaxIVBitSize
     * }
     */
    public static short MaxIVBitSize(MemorySegment struct) {
        return struct.get(MaxIVBitSize$LAYOUT, MaxIVBitSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MaxIVBitSize
     * }
     */
    public static void MaxIVBitSize(MemorySegment struct, short fieldValue) {
        struct.set(MaxIVBitSize$LAYOUT, MaxIVBitSize$OFFSET, fieldValue);
    }

    private static final OfShort Reserved$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Reserved
     * }
     */
    public static final OfShort Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Reserved
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Reserved
     * }
     */
    public static short Reserved(MemorySegment struct) {
        return struct.get(Reserved$LAYOUT, Reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Reserved
     * }
     */
    public static void Reserved(MemorySegment struct, short fieldValue) {
        struct.set(Reserved$LAYOUT, Reserved$OFFSET, fieldValue);
    }

    private static final GroupLayout SecurityComplianceBitmask$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SecurityComplianceBitmask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask
     * }
     */
    public static final GroupLayout SecurityComplianceBitmask$layout() {
        return SecurityComplianceBitmask$LAYOUT;
    }

    private static final long SecurityComplianceBitmask$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask
     * }
     */
    public static final long SecurityComplianceBitmask$offset() {
        return SecurityComplianceBitmask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask
     * }
     */
    public static MemorySegment SecurityComplianceBitmask(MemorySegment struct) {
        return struct.asSlice(SecurityComplianceBitmask$OFFSET, SecurityComplianceBitmask$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask
     * }
     */
    public static void SecurityComplianceBitmask(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SecurityComplianceBitmask$OFFSET, SecurityComplianceBitmask$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

