// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _FILE_STAT_LX_INFORMATION {
 *     LARGE_INTEGER FileId;
 *     LARGE_INTEGER CreationTime;
 *     LARGE_INTEGER LastAccessTime;
 *     LARGE_INTEGER LastWriteTime;
 *     LARGE_INTEGER ChangeTime;
 *     LARGE_INTEGER AllocationSize;
 *     LARGE_INTEGER EndOfFile;
 *     DWORD FileAttributes;
 *     DWORD ReparseTag;
 *     DWORD NumberOfLinks;
 *     ACCESS_MASK EffectiveAccess;
 *     DWORD LxFlags;
 *     DWORD LxUid;
 *     DWORD LxGid;
 *     DWORD LxMode;
 *     DWORD LxDeviceIdMajor;
 *     DWORD LxDeviceIdMinor;
 * }
 * }
 */
public class _FILE_STAT_LX_INFORMATION {

    _FILE_STAT_LX_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _LARGE_INTEGER.layout().withName("FileId"),
        _LARGE_INTEGER.layout().withName("CreationTime"),
        _LARGE_INTEGER.layout().withName("LastAccessTime"),
        _LARGE_INTEGER.layout().withName("LastWriteTime"),
        _LARGE_INTEGER.layout().withName("ChangeTime"),
        _LARGE_INTEGER.layout().withName("AllocationSize"),
        _LARGE_INTEGER.layout().withName("EndOfFile"),
        winapi.C_LONG.withName("FileAttributes"),
        winapi.C_LONG.withName("ReparseTag"),
        winapi.C_LONG.withName("NumberOfLinks"),
        winapi.C_LONG.withName("EffectiveAccess"),
        winapi.C_LONG.withName("LxFlags"),
        winapi.C_LONG.withName("LxUid"),
        winapi.C_LONG.withName("LxGid"),
        winapi.C_LONG.withName("LxMode"),
        winapi.C_LONG.withName("LxDeviceIdMajor"),
        winapi.C_LONG.withName("LxDeviceIdMinor")
    ).withName("_FILE_STAT_LX_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout FileId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("FileId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileId
     * }
     */
    public static final GroupLayout FileId$layout() {
        return FileId$LAYOUT;
    }

    private static final long FileId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileId
     * }
     */
    public static final long FileId$offset() {
        return FileId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileId
     * }
     */
    public static MemorySegment FileId(MemorySegment struct) {
        return struct.asSlice(FileId$OFFSET, FileId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FileId
     * }
     */
    public static void FileId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FileId$OFFSET, FileId$LAYOUT.byteSize());
    }

    private static final GroupLayout CreationTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CreationTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER CreationTime
     * }
     */
    public static final GroupLayout CreationTime$layout() {
        return CreationTime$LAYOUT;
    }

    private static final long CreationTime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER CreationTime
     * }
     */
    public static final long CreationTime$offset() {
        return CreationTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER CreationTime
     * }
     */
    public static MemorySegment CreationTime(MemorySegment struct) {
        return struct.asSlice(CreationTime$OFFSET, CreationTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER CreationTime
     * }
     */
    public static void CreationTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CreationTime$OFFSET, CreationTime$LAYOUT.byteSize());
    }

    private static final GroupLayout LastAccessTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LastAccessTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER LastAccessTime
     * }
     */
    public static final GroupLayout LastAccessTime$layout() {
        return LastAccessTime$LAYOUT;
    }

    private static final long LastAccessTime$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER LastAccessTime
     * }
     */
    public static final long LastAccessTime$offset() {
        return LastAccessTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER LastAccessTime
     * }
     */
    public static MemorySegment LastAccessTime(MemorySegment struct) {
        return struct.asSlice(LastAccessTime$OFFSET, LastAccessTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER LastAccessTime
     * }
     */
    public static void LastAccessTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LastAccessTime$OFFSET, LastAccessTime$LAYOUT.byteSize());
    }

    private static final GroupLayout LastWriteTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LastWriteTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER LastWriteTime
     * }
     */
    public static final GroupLayout LastWriteTime$layout() {
        return LastWriteTime$LAYOUT;
    }

    private static final long LastWriteTime$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER LastWriteTime
     * }
     */
    public static final long LastWriteTime$offset() {
        return LastWriteTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER LastWriteTime
     * }
     */
    public static MemorySegment LastWriteTime(MemorySegment struct) {
        return struct.asSlice(LastWriteTime$OFFSET, LastWriteTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER LastWriteTime
     * }
     */
    public static void LastWriteTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LastWriteTime$OFFSET, LastWriteTime$LAYOUT.byteSize());
    }

    private static final GroupLayout ChangeTime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ChangeTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER ChangeTime
     * }
     */
    public static final GroupLayout ChangeTime$layout() {
        return ChangeTime$LAYOUT;
    }

    private static final long ChangeTime$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER ChangeTime
     * }
     */
    public static final long ChangeTime$offset() {
        return ChangeTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER ChangeTime
     * }
     */
    public static MemorySegment ChangeTime(MemorySegment struct) {
        return struct.asSlice(ChangeTime$OFFSET, ChangeTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER ChangeTime
     * }
     */
    public static void ChangeTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ChangeTime$OFFSET, ChangeTime$LAYOUT.byteSize());
    }

    private static final GroupLayout AllocationSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("AllocationSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER AllocationSize
     * }
     */
    public static final GroupLayout AllocationSize$layout() {
        return AllocationSize$LAYOUT;
    }

    private static final long AllocationSize$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER AllocationSize
     * }
     */
    public static final long AllocationSize$offset() {
        return AllocationSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER AllocationSize
     * }
     */
    public static MemorySegment AllocationSize(MemorySegment struct) {
        return struct.asSlice(AllocationSize$OFFSET, AllocationSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER AllocationSize
     * }
     */
    public static void AllocationSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, AllocationSize$OFFSET, AllocationSize$LAYOUT.byteSize());
    }

    private static final GroupLayout EndOfFile$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("EndOfFile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER EndOfFile
     * }
     */
    public static final GroupLayout EndOfFile$layout() {
        return EndOfFile$LAYOUT;
    }

    private static final long EndOfFile$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER EndOfFile
     * }
     */
    public static final long EndOfFile$offset() {
        return EndOfFile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER EndOfFile
     * }
     */
    public static MemorySegment EndOfFile(MemorySegment struct) {
        return struct.asSlice(EndOfFile$OFFSET, EndOfFile$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER EndOfFile
     * }
     */
    public static void EndOfFile(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, EndOfFile$OFFSET, EndOfFile$LAYOUT.byteSize());
    }

    private static final OfInt FileAttributes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FileAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD FileAttributes
     * }
     */
    public static final OfInt FileAttributes$layout() {
        return FileAttributes$LAYOUT;
    }

    private static final long FileAttributes$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD FileAttributes
     * }
     */
    public static final long FileAttributes$offset() {
        return FileAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD FileAttributes
     * }
     */
    public static int FileAttributes(MemorySegment struct) {
        return struct.get(FileAttributes$LAYOUT, FileAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD FileAttributes
     * }
     */
    public static void FileAttributes(MemorySegment struct, int fieldValue) {
        struct.set(FileAttributes$LAYOUT, FileAttributes$OFFSET, fieldValue);
    }

    private static final OfInt ReparseTag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ReparseTag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ReparseTag
     * }
     */
    public static final OfInt ReparseTag$layout() {
        return ReparseTag$LAYOUT;
    }

    private static final long ReparseTag$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ReparseTag
     * }
     */
    public static final long ReparseTag$offset() {
        return ReparseTag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ReparseTag
     * }
     */
    public static int ReparseTag(MemorySegment struct) {
        return struct.get(ReparseTag$LAYOUT, ReparseTag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ReparseTag
     * }
     */
    public static void ReparseTag(MemorySegment struct, int fieldValue) {
        struct.set(ReparseTag$LAYOUT, ReparseTag$OFFSET, fieldValue);
    }

    private static final OfInt NumberOfLinks$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumberOfLinks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD NumberOfLinks
     * }
     */
    public static final OfInt NumberOfLinks$layout() {
        return NumberOfLinks$LAYOUT;
    }

    private static final long NumberOfLinks$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD NumberOfLinks
     * }
     */
    public static final long NumberOfLinks$offset() {
        return NumberOfLinks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD NumberOfLinks
     * }
     */
    public static int NumberOfLinks(MemorySegment struct) {
        return struct.get(NumberOfLinks$LAYOUT, NumberOfLinks$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD NumberOfLinks
     * }
     */
    public static void NumberOfLinks(MemorySegment struct, int fieldValue) {
        struct.set(NumberOfLinks$LAYOUT, NumberOfLinks$OFFSET, fieldValue);
    }

    private static final OfInt EffectiveAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("EffectiveAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ACCESS_MASK EffectiveAccess
     * }
     */
    public static final OfInt EffectiveAccess$layout() {
        return EffectiveAccess$LAYOUT;
    }

    private static final long EffectiveAccess$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ACCESS_MASK EffectiveAccess
     * }
     */
    public static final long EffectiveAccess$offset() {
        return EffectiveAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ACCESS_MASK EffectiveAccess
     * }
     */
    public static int EffectiveAccess(MemorySegment struct) {
        return struct.get(EffectiveAccess$LAYOUT, EffectiveAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ACCESS_MASK EffectiveAccess
     * }
     */
    public static void EffectiveAccess(MemorySegment struct, int fieldValue) {
        struct.set(EffectiveAccess$LAYOUT, EffectiveAccess$OFFSET, fieldValue);
    }

    private static final OfInt LxFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LxFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LxFlags
     * }
     */
    public static final OfInt LxFlags$layout() {
        return LxFlags$LAYOUT;
    }

    private static final long LxFlags$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LxFlags
     * }
     */
    public static final long LxFlags$offset() {
        return LxFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LxFlags
     * }
     */
    public static int LxFlags(MemorySegment struct) {
        return struct.get(LxFlags$LAYOUT, LxFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LxFlags
     * }
     */
    public static void LxFlags(MemorySegment struct, int fieldValue) {
        struct.set(LxFlags$LAYOUT, LxFlags$OFFSET, fieldValue);
    }

    private static final OfInt LxUid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LxUid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LxUid
     * }
     */
    public static final OfInt LxUid$layout() {
        return LxUid$LAYOUT;
    }

    private static final long LxUid$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LxUid
     * }
     */
    public static final long LxUid$offset() {
        return LxUid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LxUid
     * }
     */
    public static int LxUid(MemorySegment struct) {
        return struct.get(LxUid$LAYOUT, LxUid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LxUid
     * }
     */
    public static void LxUid(MemorySegment struct, int fieldValue) {
        struct.set(LxUid$LAYOUT, LxUid$OFFSET, fieldValue);
    }

    private static final OfInt LxGid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LxGid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LxGid
     * }
     */
    public static final OfInt LxGid$layout() {
        return LxGid$LAYOUT;
    }

    private static final long LxGid$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LxGid
     * }
     */
    public static final long LxGid$offset() {
        return LxGid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LxGid
     * }
     */
    public static int LxGid(MemorySegment struct) {
        return struct.get(LxGid$LAYOUT, LxGid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LxGid
     * }
     */
    public static void LxGid(MemorySegment struct, int fieldValue) {
        struct.set(LxGid$LAYOUT, LxGid$OFFSET, fieldValue);
    }

    private static final OfInt LxMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LxMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LxMode
     * }
     */
    public static final OfInt LxMode$layout() {
        return LxMode$LAYOUT;
    }

    private static final long LxMode$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LxMode
     * }
     */
    public static final long LxMode$offset() {
        return LxMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LxMode
     * }
     */
    public static int LxMode(MemorySegment struct) {
        return struct.get(LxMode$LAYOUT, LxMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LxMode
     * }
     */
    public static void LxMode(MemorySegment struct, int fieldValue) {
        struct.set(LxMode$LAYOUT, LxMode$OFFSET, fieldValue);
    }

    private static final OfInt LxDeviceIdMajor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LxDeviceIdMajor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LxDeviceIdMajor
     * }
     */
    public static final OfInt LxDeviceIdMajor$layout() {
        return LxDeviceIdMajor$LAYOUT;
    }

    private static final long LxDeviceIdMajor$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LxDeviceIdMajor
     * }
     */
    public static final long LxDeviceIdMajor$offset() {
        return LxDeviceIdMajor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LxDeviceIdMajor
     * }
     */
    public static int LxDeviceIdMajor(MemorySegment struct) {
        return struct.get(LxDeviceIdMajor$LAYOUT, LxDeviceIdMajor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LxDeviceIdMajor
     * }
     */
    public static void LxDeviceIdMajor(MemorySegment struct, int fieldValue) {
        struct.set(LxDeviceIdMajor$LAYOUT, LxDeviceIdMajor$OFFSET, fieldValue);
    }

    private static final OfInt LxDeviceIdMinor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LxDeviceIdMinor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD LxDeviceIdMinor
     * }
     */
    public static final OfInt LxDeviceIdMinor$layout() {
        return LxDeviceIdMinor$LAYOUT;
    }

    private static final long LxDeviceIdMinor$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD LxDeviceIdMinor
     * }
     */
    public static final long LxDeviceIdMinor$offset() {
        return LxDeviceIdMinor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD LxDeviceIdMinor
     * }
     */
    public static int LxDeviceIdMinor(MemorySegment struct) {
        return struct.get(LxDeviceIdMinor$LAYOUT, LxDeviceIdMinor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD LxDeviceIdMinor
     * }
     */
    public static void LxDeviceIdMinor(MemorySegment struct, int fieldValue) {
        struct.set(LxDeviceIdMinor$LAYOUT, LxDeviceIdMinor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

