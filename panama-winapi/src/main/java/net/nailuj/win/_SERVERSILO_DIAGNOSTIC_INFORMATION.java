// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _SERVERSILO_DIAGNOSTIC_INFORMATION {
 *     GUID ReportId;
 *     DWORD ExitStatus;
 *     WCHAR CriticalProcessName[15];
 * }
 * }
 */
public class _SERVERSILO_DIAGNOSTIC_INFORMATION {

    _SERVERSILO_DIAGNOSTIC_INFORMATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GUID.layout().withName("ReportId"),
        winapi.C_LONG.withName("ExitStatus"),
        MemoryLayout.sequenceLayout(15, winapi.C_SHORT).withName("CriticalProcessName"),
        MemoryLayout.paddingLayout(2)
    ).withName("_SERVERSILO_DIAGNOSTIC_INFORMATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ReportId$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ReportId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GUID ReportId
     * }
     */
    public static final GroupLayout ReportId$layout() {
        return ReportId$LAYOUT;
    }

    private static final long ReportId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GUID ReportId
     * }
     */
    public static final long ReportId$offset() {
        return ReportId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GUID ReportId
     * }
     */
    public static MemorySegment ReportId(MemorySegment struct) {
        return struct.asSlice(ReportId$OFFSET, ReportId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GUID ReportId
     * }
     */
    public static void ReportId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ReportId$OFFSET, ReportId$LAYOUT.byteSize());
    }

    private static final OfInt ExitStatus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ExitStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ExitStatus
     * }
     */
    public static final OfInt ExitStatus$layout() {
        return ExitStatus$LAYOUT;
    }

    private static final long ExitStatus$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ExitStatus
     * }
     */
    public static final long ExitStatus$offset() {
        return ExitStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ExitStatus
     * }
     */
    public static int ExitStatus(MemorySegment struct) {
        return struct.get(ExitStatus$LAYOUT, ExitStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ExitStatus
     * }
     */
    public static void ExitStatus(MemorySegment struct, int fieldValue) {
        struct.set(ExitStatus$LAYOUT, ExitStatus$OFFSET, fieldValue);
    }

    private static final SequenceLayout CriticalProcessName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("CriticalProcessName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WCHAR CriticalProcessName[15]
     * }
     */
    public static final SequenceLayout CriticalProcessName$layout() {
        return CriticalProcessName$LAYOUT;
    }

    private static final long CriticalProcessName$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WCHAR CriticalProcessName[15]
     * }
     */
    public static final long CriticalProcessName$offset() {
        return CriticalProcessName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WCHAR CriticalProcessName[15]
     * }
     */
    public static MemorySegment CriticalProcessName(MemorySegment struct) {
        return struct.asSlice(CriticalProcessName$OFFSET, CriticalProcessName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WCHAR CriticalProcessName[15]
     * }
     */
    public static void CriticalProcessName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CriticalProcessName$OFFSET, CriticalProcessName$LAYOUT.byteSize());
    }

    private static long[] CriticalProcessName$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * WCHAR CriticalProcessName[15]
     * }
     */
    public static long[] CriticalProcessName$dimensions() {
        return CriticalProcessName$DIMS;
    }
    private static final VarHandle CriticalProcessName$ELEM_HANDLE = CriticalProcessName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * WCHAR CriticalProcessName[15]
     * }
     */
    public static short CriticalProcessName(MemorySegment struct, long index0) {
        return (short)CriticalProcessName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * WCHAR CriticalProcessName[15]
     * }
     */
    public static void CriticalProcessName(MemorySegment struct, long index0, short fieldValue) {
        CriticalProcessName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

