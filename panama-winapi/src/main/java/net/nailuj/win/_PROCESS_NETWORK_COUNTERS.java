// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PROCESS_NETWORK_COUNTERS {
 *     DWORD64 BytesIn;
 *     DWORD64 BytesOut;
 * }
 * }
 */
public class _PROCESS_NETWORK_COUNTERS {

    _PROCESS_NETWORK_COUNTERS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG_LONG.withName("BytesIn"),
        winapi.C_LONG_LONG.withName("BytesOut")
    ).withName("_PROCESS_NETWORK_COUNTERS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong BytesIn$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BytesIn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD64 BytesIn
     * }
     */
    public static final OfLong BytesIn$layout() {
        return BytesIn$LAYOUT;
    }

    private static final long BytesIn$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD64 BytesIn
     * }
     */
    public static final long BytesIn$offset() {
        return BytesIn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD64 BytesIn
     * }
     */
    public static long BytesIn(MemorySegment struct) {
        return struct.get(BytesIn$LAYOUT, BytesIn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD64 BytesIn
     * }
     */
    public static void BytesIn(MemorySegment struct, long fieldValue) {
        struct.set(BytesIn$LAYOUT, BytesIn$OFFSET, fieldValue);
    }

    private static final OfLong BytesOut$LAYOUT = (OfLong)$LAYOUT.select(groupElement("BytesOut"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD64 BytesOut
     * }
     */
    public static final OfLong BytesOut$layout() {
        return BytesOut$LAYOUT;
    }

    private static final long BytesOut$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD64 BytesOut
     * }
     */
    public static final long BytesOut$offset() {
        return BytesOut$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD64 BytesOut
     * }
     */
    public static long BytesOut(MemorySegment struct) {
        return struct.get(BytesOut$LAYOUT, BytesOut$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD64 BytesOut
     * }
     */
    public static void BytesOut(MemorySegment struct, long fieldValue) {
        struct.set(BytesOut$LAYOUT, BytesOut$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

