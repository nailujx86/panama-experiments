// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     DWORD ByteCount;
 *     DWORD MajorVersion;
 *     DWORD MinorVersion;
 *     DWORD BytesPerPhysicalSector;
 *     LARGE_INTEGER VolumeSerialNumber;
 *     LARGE_INTEGER NumberSectors;
 *     LARGE_INTEGER TotalClusters;
 *     LARGE_INTEGER FreeClusters;
 *     LARGE_INTEGER TotalReserved;
 *     DWORD BytesPerSector;
 *     DWORD BytesPerCluster;
 *     LARGE_INTEGER MaximumSizeOfResidentFile;
 *     WORD FastTierDataFillRatio;
 *     WORD SlowTierDataFillRatio;
 *     DWORD DestagesFastTierToSlowTierRate;
 *     WORD MetadataChecksumType;
 *     BYTE Reserved0[6];
 *     DWORD DriverMajorVersion;
 *     DWORD DriverMinorVersion;
 *     LARGE_INTEGER Reserved[7];
 * }
 * }
 */
public class REFS_VOLUME_DATA_BUFFER {

    REFS_VOLUME_DATA_BUFFER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("ByteCount"),
        winapi.C_LONG.withName("MajorVersion"),
        winapi.C_LONG.withName("MinorVersion"),
        winapi.C_LONG.withName("BytesPerPhysicalSector"),
        _LARGE_INTEGER.layout().withName("VolumeSerialNumber"),
        _LARGE_INTEGER.layout().withName("NumberSectors"),
        _LARGE_INTEGER.layout().withName("TotalClusters"),
        _LARGE_INTEGER.layout().withName("FreeClusters"),
        _LARGE_INTEGER.layout().withName("TotalReserved"),
        winapi.C_LONG.withName("BytesPerSector"),
        winapi.C_LONG.withName("BytesPerCluster"),
        _LARGE_INTEGER.layout().withName("MaximumSizeOfResidentFile"),
        winapi.C_SHORT.withName("FastTierDataFillRatio"),
        winapi.C_SHORT.withName("SlowTierDataFillRatio"),
        winapi.C_LONG.withName("DestagesFastTierToSlowTierRate"),
        winapi.C_SHORT.withName("MetadataChecksumType"),
        MemoryLayout.sequenceLayout(6, winapi.C_CHAR).withName("Reserved0"),
        winapi.C_LONG.withName("DriverMajorVersion"),
        winapi.C_LONG.withName("DriverMinorVersion"),
        MemoryLayout.sequenceLayout(7, _LARGE_INTEGER.layout()).withName("Reserved")
    ).withName("$anon$11660:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ByteCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ByteCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD ByteCount
     * }
     */
    public static final OfInt ByteCount$layout() {
        return ByteCount$LAYOUT;
    }

    private static final long ByteCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD ByteCount
     * }
     */
    public static final long ByteCount$offset() {
        return ByteCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD ByteCount
     * }
     */
    public static int ByteCount(MemorySegment struct) {
        return struct.get(ByteCount$LAYOUT, ByteCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD ByteCount
     * }
     */
    public static void ByteCount(MemorySegment struct, int fieldValue) {
        struct.set(ByteCount$LAYOUT, ByteCount$OFFSET, fieldValue);
    }

    private static final OfInt MajorVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MajorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MajorVersion
     * }
     */
    public static final OfInt MajorVersion$layout() {
        return MajorVersion$LAYOUT;
    }

    private static final long MajorVersion$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MajorVersion
     * }
     */
    public static final long MajorVersion$offset() {
        return MajorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MajorVersion
     * }
     */
    public static int MajorVersion(MemorySegment struct) {
        return struct.get(MajorVersion$LAYOUT, MajorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MajorVersion
     * }
     */
    public static void MajorVersion(MemorySegment struct, int fieldValue) {
        struct.set(MajorVersion$LAYOUT, MajorVersion$OFFSET, fieldValue);
    }

    private static final OfInt MinorVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MinorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MinorVersion
     * }
     */
    public static final OfInt MinorVersion$layout() {
        return MinorVersion$LAYOUT;
    }

    private static final long MinorVersion$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MinorVersion
     * }
     */
    public static final long MinorVersion$offset() {
        return MinorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MinorVersion
     * }
     */
    public static int MinorVersion(MemorySegment struct) {
        return struct.get(MinorVersion$LAYOUT, MinorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MinorVersion
     * }
     */
    public static void MinorVersion(MemorySegment struct, int fieldValue) {
        struct.set(MinorVersion$LAYOUT, MinorVersion$OFFSET, fieldValue);
    }

    private static final OfInt BytesPerPhysicalSector$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesPerPhysicalSector"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesPerPhysicalSector
     * }
     */
    public static final OfInt BytesPerPhysicalSector$layout() {
        return BytesPerPhysicalSector$LAYOUT;
    }

    private static final long BytesPerPhysicalSector$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesPerPhysicalSector
     * }
     */
    public static final long BytesPerPhysicalSector$offset() {
        return BytesPerPhysicalSector$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesPerPhysicalSector
     * }
     */
    public static int BytesPerPhysicalSector(MemorySegment struct) {
        return struct.get(BytesPerPhysicalSector$LAYOUT, BytesPerPhysicalSector$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesPerPhysicalSector
     * }
     */
    public static void BytesPerPhysicalSector(MemorySegment struct, int fieldValue) {
        struct.set(BytesPerPhysicalSector$LAYOUT, BytesPerPhysicalSector$OFFSET, fieldValue);
    }

    private static final GroupLayout VolumeSerialNumber$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("VolumeSerialNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER VolumeSerialNumber
     * }
     */
    public static final GroupLayout VolumeSerialNumber$layout() {
        return VolumeSerialNumber$LAYOUT;
    }

    private static final long VolumeSerialNumber$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER VolumeSerialNumber
     * }
     */
    public static final long VolumeSerialNumber$offset() {
        return VolumeSerialNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER VolumeSerialNumber
     * }
     */
    public static MemorySegment VolumeSerialNumber(MemorySegment struct) {
        return struct.asSlice(VolumeSerialNumber$OFFSET, VolumeSerialNumber$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER VolumeSerialNumber
     * }
     */
    public static void VolumeSerialNumber(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, VolumeSerialNumber$OFFSET, VolumeSerialNumber$LAYOUT.byteSize());
    }

    private static final GroupLayout NumberSectors$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NumberSectors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER NumberSectors
     * }
     */
    public static final GroupLayout NumberSectors$layout() {
        return NumberSectors$LAYOUT;
    }

    private static final long NumberSectors$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER NumberSectors
     * }
     */
    public static final long NumberSectors$offset() {
        return NumberSectors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER NumberSectors
     * }
     */
    public static MemorySegment NumberSectors(MemorySegment struct) {
        return struct.asSlice(NumberSectors$OFFSET, NumberSectors$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER NumberSectors
     * }
     */
    public static void NumberSectors(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NumberSectors$OFFSET, NumberSectors$LAYOUT.byteSize());
    }

    private static final GroupLayout TotalClusters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TotalClusters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TotalClusters
     * }
     */
    public static final GroupLayout TotalClusters$layout() {
        return TotalClusters$LAYOUT;
    }

    private static final long TotalClusters$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TotalClusters
     * }
     */
    public static final long TotalClusters$offset() {
        return TotalClusters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TotalClusters
     * }
     */
    public static MemorySegment TotalClusters(MemorySegment struct) {
        return struct.asSlice(TotalClusters$OFFSET, TotalClusters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TotalClusters
     * }
     */
    public static void TotalClusters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TotalClusters$OFFSET, TotalClusters$LAYOUT.byteSize());
    }

    private static final GroupLayout FreeClusters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("FreeClusters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FreeClusters
     * }
     */
    public static final GroupLayout FreeClusters$layout() {
        return FreeClusters$LAYOUT;
    }

    private static final long FreeClusters$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FreeClusters
     * }
     */
    public static final long FreeClusters$offset() {
        return FreeClusters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FreeClusters
     * }
     */
    public static MemorySegment FreeClusters(MemorySegment struct) {
        return struct.asSlice(FreeClusters$OFFSET, FreeClusters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER FreeClusters
     * }
     */
    public static void FreeClusters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FreeClusters$OFFSET, FreeClusters$LAYOUT.byteSize());
    }

    private static final GroupLayout TotalReserved$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TotalReserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TotalReserved
     * }
     */
    public static final GroupLayout TotalReserved$layout() {
        return TotalReserved$LAYOUT;
    }

    private static final long TotalReserved$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TotalReserved
     * }
     */
    public static final long TotalReserved$offset() {
        return TotalReserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TotalReserved
     * }
     */
    public static MemorySegment TotalReserved(MemorySegment struct) {
        return struct.asSlice(TotalReserved$OFFSET, TotalReserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER TotalReserved
     * }
     */
    public static void TotalReserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TotalReserved$OFFSET, TotalReserved$LAYOUT.byteSize());
    }

    private static final OfInt BytesPerSector$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesPerSector"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesPerSector
     * }
     */
    public static final OfInt BytesPerSector$layout() {
        return BytesPerSector$LAYOUT;
    }

    private static final long BytesPerSector$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesPerSector
     * }
     */
    public static final long BytesPerSector$offset() {
        return BytesPerSector$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesPerSector
     * }
     */
    public static int BytesPerSector(MemorySegment struct) {
        return struct.get(BytesPerSector$LAYOUT, BytesPerSector$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesPerSector
     * }
     */
    public static void BytesPerSector(MemorySegment struct, int fieldValue) {
        struct.set(BytesPerSector$LAYOUT, BytesPerSector$OFFSET, fieldValue);
    }

    private static final OfInt BytesPerCluster$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BytesPerCluster"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD BytesPerCluster
     * }
     */
    public static final OfInt BytesPerCluster$layout() {
        return BytesPerCluster$LAYOUT;
    }

    private static final long BytesPerCluster$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD BytesPerCluster
     * }
     */
    public static final long BytesPerCluster$offset() {
        return BytesPerCluster$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD BytesPerCluster
     * }
     */
    public static int BytesPerCluster(MemorySegment struct) {
        return struct.get(BytesPerCluster$LAYOUT, BytesPerCluster$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD BytesPerCluster
     * }
     */
    public static void BytesPerCluster(MemorySegment struct, int fieldValue) {
        struct.set(BytesPerCluster$LAYOUT, BytesPerCluster$OFFSET, fieldValue);
    }

    private static final GroupLayout MaximumSizeOfResidentFile$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MaximumSizeOfResidentFile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER MaximumSizeOfResidentFile
     * }
     */
    public static final GroupLayout MaximumSizeOfResidentFile$layout() {
        return MaximumSizeOfResidentFile$LAYOUT;
    }

    private static final long MaximumSizeOfResidentFile$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER MaximumSizeOfResidentFile
     * }
     */
    public static final long MaximumSizeOfResidentFile$offset() {
        return MaximumSizeOfResidentFile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER MaximumSizeOfResidentFile
     * }
     */
    public static MemorySegment MaximumSizeOfResidentFile(MemorySegment struct) {
        return struct.asSlice(MaximumSizeOfResidentFile$OFFSET, MaximumSizeOfResidentFile$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER MaximumSizeOfResidentFile
     * }
     */
    public static void MaximumSizeOfResidentFile(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MaximumSizeOfResidentFile$OFFSET, MaximumSizeOfResidentFile$LAYOUT.byteSize());
    }

    private static final OfShort FastTierDataFillRatio$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FastTierDataFillRatio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD FastTierDataFillRatio
     * }
     */
    public static final OfShort FastTierDataFillRatio$layout() {
        return FastTierDataFillRatio$LAYOUT;
    }

    private static final long FastTierDataFillRatio$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD FastTierDataFillRatio
     * }
     */
    public static final long FastTierDataFillRatio$offset() {
        return FastTierDataFillRatio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD FastTierDataFillRatio
     * }
     */
    public static short FastTierDataFillRatio(MemorySegment struct) {
        return struct.get(FastTierDataFillRatio$LAYOUT, FastTierDataFillRatio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD FastTierDataFillRatio
     * }
     */
    public static void FastTierDataFillRatio(MemorySegment struct, short fieldValue) {
        struct.set(FastTierDataFillRatio$LAYOUT, FastTierDataFillRatio$OFFSET, fieldValue);
    }

    private static final OfShort SlowTierDataFillRatio$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SlowTierDataFillRatio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD SlowTierDataFillRatio
     * }
     */
    public static final OfShort SlowTierDataFillRatio$layout() {
        return SlowTierDataFillRatio$LAYOUT;
    }

    private static final long SlowTierDataFillRatio$OFFSET = 74;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD SlowTierDataFillRatio
     * }
     */
    public static final long SlowTierDataFillRatio$offset() {
        return SlowTierDataFillRatio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD SlowTierDataFillRatio
     * }
     */
    public static short SlowTierDataFillRatio(MemorySegment struct) {
        return struct.get(SlowTierDataFillRatio$LAYOUT, SlowTierDataFillRatio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD SlowTierDataFillRatio
     * }
     */
    public static void SlowTierDataFillRatio(MemorySegment struct, short fieldValue) {
        struct.set(SlowTierDataFillRatio$LAYOUT, SlowTierDataFillRatio$OFFSET, fieldValue);
    }

    private static final OfInt DestagesFastTierToSlowTierRate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DestagesFastTierToSlowTierRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DestagesFastTierToSlowTierRate
     * }
     */
    public static final OfInt DestagesFastTierToSlowTierRate$layout() {
        return DestagesFastTierToSlowTierRate$LAYOUT;
    }

    private static final long DestagesFastTierToSlowTierRate$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DestagesFastTierToSlowTierRate
     * }
     */
    public static final long DestagesFastTierToSlowTierRate$offset() {
        return DestagesFastTierToSlowTierRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DestagesFastTierToSlowTierRate
     * }
     */
    public static int DestagesFastTierToSlowTierRate(MemorySegment struct) {
        return struct.get(DestagesFastTierToSlowTierRate$LAYOUT, DestagesFastTierToSlowTierRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DestagesFastTierToSlowTierRate
     * }
     */
    public static void DestagesFastTierToSlowTierRate(MemorySegment struct, int fieldValue) {
        struct.set(DestagesFastTierToSlowTierRate$LAYOUT, DestagesFastTierToSlowTierRate$OFFSET, fieldValue);
    }

    private static final OfShort MetadataChecksumType$LAYOUT = (OfShort)$LAYOUT.select(groupElement("MetadataChecksumType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD MetadataChecksumType
     * }
     */
    public static final OfShort MetadataChecksumType$layout() {
        return MetadataChecksumType$LAYOUT;
    }

    private static final long MetadataChecksumType$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD MetadataChecksumType
     * }
     */
    public static final long MetadataChecksumType$offset() {
        return MetadataChecksumType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD MetadataChecksumType
     * }
     */
    public static short MetadataChecksumType(MemorySegment struct) {
        return struct.get(MetadataChecksumType$LAYOUT, MetadataChecksumType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD MetadataChecksumType
     * }
     */
    public static void MetadataChecksumType(MemorySegment struct, short fieldValue) {
        struct.set(MetadataChecksumType$LAYOUT, MetadataChecksumType$OFFSET, fieldValue);
    }

    private static final SequenceLayout Reserved0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Reserved0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Reserved0[6]
     * }
     */
    public static final SequenceLayout Reserved0$layout() {
        return Reserved0$LAYOUT;
    }

    private static final long Reserved0$OFFSET = 82;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Reserved0[6]
     * }
     */
    public static final long Reserved0$offset() {
        return Reserved0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Reserved0[6]
     * }
     */
    public static MemorySegment Reserved0(MemorySegment struct) {
        return struct.asSlice(Reserved0$OFFSET, Reserved0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Reserved0[6]
     * }
     */
    public static void Reserved0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Reserved0$OFFSET, Reserved0$LAYOUT.byteSize());
    }

    private static long[] Reserved0$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE Reserved0[6]
     * }
     */
    public static long[] Reserved0$dimensions() {
        return Reserved0$DIMS;
    }
    private static final VarHandle Reserved0$ELEM_HANDLE = Reserved0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE Reserved0[6]
     * }
     */
    public static byte Reserved0(MemorySegment struct, long index0) {
        return (byte)Reserved0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE Reserved0[6]
     * }
     */
    public static void Reserved0(MemorySegment struct, long index0, byte fieldValue) {
        Reserved0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt DriverMajorVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DriverMajorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DriverMajorVersion
     * }
     */
    public static final OfInt DriverMajorVersion$layout() {
        return DriverMajorVersion$LAYOUT;
    }

    private static final long DriverMajorVersion$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DriverMajorVersion
     * }
     */
    public static final long DriverMajorVersion$offset() {
        return DriverMajorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DriverMajorVersion
     * }
     */
    public static int DriverMajorVersion(MemorySegment struct) {
        return struct.get(DriverMajorVersion$LAYOUT, DriverMajorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DriverMajorVersion
     * }
     */
    public static void DriverMajorVersion(MemorySegment struct, int fieldValue) {
        struct.set(DriverMajorVersion$LAYOUT, DriverMajorVersion$OFFSET, fieldValue);
    }

    private static final OfInt DriverMinorVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DriverMinorVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DriverMinorVersion
     * }
     */
    public static final OfInt DriverMinorVersion$layout() {
        return DriverMinorVersion$LAYOUT;
    }

    private static final long DriverMinorVersion$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DriverMinorVersion
     * }
     */
    public static final long DriverMinorVersion$offset() {
        return DriverMinorVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DriverMinorVersion
     * }
     */
    public static int DriverMinorVersion(MemorySegment struct) {
        return struct.get(DriverMinorVersion$LAYOUT, DriverMinorVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DriverMinorVersion
     * }
     */
    public static void DriverMinorVersion(MemorySegment struct, int fieldValue) {
        struct.set(DriverMinorVersion$LAYOUT, DriverMinorVersion$OFFSET, fieldValue);
    }

    private static final SequenceLayout Reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LARGE_INTEGER Reserved[7]
     * }
     */
    public static final SequenceLayout Reserved$layout() {
        return Reserved$LAYOUT;
    }

    private static final long Reserved$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LARGE_INTEGER Reserved[7]
     * }
     */
    public static final long Reserved$offset() {
        return Reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER Reserved[7]
     * }
     */
    public static MemorySegment Reserved(MemorySegment struct) {
        return struct.asSlice(Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER Reserved[7]
     * }
     */
    public static void Reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Reserved$OFFSET, Reserved$LAYOUT.byteSize());
    }

    private static long[] Reserved$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * LARGE_INTEGER Reserved[7]
     * }
     */
    public static long[] Reserved$dimensions() {
        return Reserved$DIMS;
    }
    private static final MethodHandle Reserved$ELEM_HANDLE = Reserved$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER Reserved[7]
     * }
     */
    public static MemorySegment Reserved(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)Reserved$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * LARGE_INTEGER Reserved[7]
     * }
     */
    public static void Reserved(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, Reserved(struct, index0), 0L, _LARGE_INTEGER.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

