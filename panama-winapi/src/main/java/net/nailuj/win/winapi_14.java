// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class winapi_14 extends winapi_15 {

    winapi_14() {
        // Should not be called directly
    }

    private static class IID_IInternetBindInfoEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetBindInfoEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static GroupLayout IID_IInternetBindInfoEx$layout() {
        return IID_IInternetBindInfoEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static MemorySegment IID_IInternetBindInfoEx() {
        return IID_IInternetBindInfoEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetBindInfoEx
     * }
     */
    public static void IID_IInternetBindInfoEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetBindInfoEx$constants.SEGMENT, 0L, IID_IInternetBindInfoEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLROOT = winapi.C_POINTER;
    private static final int PI_PARSE_URL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PARSE_URL = 1
     * }
     */
    public static int PI_PARSE_URL() {
        return PI_PARSE_URL;
    }
    private static final int PI_FILTER_MODE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_FILTER_MODE = 2
     * }
     */
    public static int PI_FILTER_MODE() {
        return PI_FILTER_MODE;
    }
    private static final int PI_FORCE_ASYNC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_FORCE_ASYNC = 4
     * }
     */
    public static int PI_FORCE_ASYNC() {
        return PI_FORCE_ASYNC;
    }
    private static final int PI_USE_WORKERTHREAD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_USE_WORKERTHREAD = 8
     * }
     */
    public static int PI_USE_WORKERTHREAD() {
        return PI_USE_WORKERTHREAD;
    }
    private static final int PI_MIMEVERIFICATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_MIMEVERIFICATION = 16
     * }
     */
    public static int PI_MIMEVERIFICATION() {
        return PI_MIMEVERIFICATION;
    }
    private static final int PI_CLSIDLOOKUP = (int)32L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_CLSIDLOOKUP = 32
     * }
     */
    public static int PI_CLSIDLOOKUP() {
        return PI_CLSIDLOOKUP;
    }
    private static final int PI_DATAPROGRESS = (int)64L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_DATAPROGRESS = 64
     * }
     */
    public static int PI_DATAPROGRESS() {
        return PI_DATAPROGRESS;
    }
    private static final int PI_SYNCHRONOUS = (int)128L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_SYNCHRONOUS = 128
     * }
     */
    public static int PI_SYNCHRONOUS() {
        return PI_SYNCHRONOUS;
    }
    private static final int PI_APARTMENTTHREADED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_APARTMENTTHREADED = 256
     * }
     */
    public static int PI_APARTMENTTHREADED() {
        return PI_APARTMENTTHREADED;
    }
    private static final int PI_CLASSINSTALL = (int)512L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_CLASSINSTALL = 512
     * }
     */
    public static int PI_CLASSINSTALL() {
        return PI_CLASSINSTALL;
    }
    private static final int PI_PASSONBINDCTX = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PASSONBINDCTX = 8192
     * }
     */
    public static int PI_PASSONBINDCTX() {
        return PI_PASSONBINDCTX;
    }
    private static final int PI_NOMIMEHANDLER = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_NOMIMEHANDLER = 32768
     * }
     */
    public static int PI_NOMIMEHANDLER() {
        return PI_NOMIMEHANDLER;
    }
    private static final int PI_LOADAPPDIRECT = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_LOADAPPDIRECT = 16384
     * }
     */
    public static int PI_LOADAPPDIRECT() {
        return PI_LOADAPPDIRECT;
    }
    private static final int PD_FORCE_SWITCH = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PD_FORCE_SWITCH = 65536
     * }
     */
    public static int PD_FORCE_SWITCH() {
        return PD_FORCE_SWITCH;
    }
    private static final int PI_PREFERDEFAULTHANDLER = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum _tagPI_FLAGS.PI_PREFERDEFAULTHANDLER = 131072
     * }
     */
    public static int PI_PREFERDEFAULTHANDLER() {
        return PI_PREFERDEFAULTHANDLER;
    }

    private static class IID_IInternetProtocolRoot$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetProtocolRoot").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static GroupLayout IID_IInternetProtocolRoot$layout() {
        return IID_IInternetProtocolRoot$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static MemorySegment IID_IInternetProtocolRoot() {
        return IID_IInternetProtocolRoot$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolRoot
     * }
     */
    public static void IID_IInternetProtocolRoot(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolRoot$constants.SEGMENT, 0L, IID_IInternetProtocolRoot$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocol *LPIINTERNETPROTOCOL
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOL = winapi.C_POINTER;

    private static class IID_IInternetProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static GroupLayout IID_IInternetProtocol$layout() {
        return IID_IInternetProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static MemorySegment IID_IInternetProtocol() {
        return IID_IInternetProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocol
     * }
     */
    public static void IID_IInternetProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocol$constants.SEGMENT, 0L, IID_IInternetProtocol$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetProtocolEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetProtocolEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static GroupLayout IID_IInternetProtocolEx$layout() {
        return IID_IInternetProtocolEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static MemorySegment IID_IInternetProtocolEx() {
        return IID_IInternetProtocolEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolEx
     * }
     */
    public static void IID_IInternetProtocolEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolEx$constants.SEGMENT, 0L, IID_IInternetProtocolEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLSINK = winapi.C_POINTER;

    private static class IID_IInternetProtocolSink$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetProtocolSink").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static GroupLayout IID_IInternetProtocolSink$layout() {
        return IID_IInternetProtocolSink$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static MemorySegment IID_IInternetProtocolSink() {
        return IID_IInternetProtocolSink$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSink
     * }
     */
    public static void IID_IInternetProtocolSink(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolSink$constants.SEGMENT, 0L, IID_IInternetProtocolSink$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLSINKStackable = winapi.C_POINTER;

    private static class IID_IInternetProtocolSinkStackable$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetProtocolSinkStackable").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static GroupLayout IID_IInternetProtocolSinkStackable$layout() {
        return IID_IInternetProtocolSinkStackable$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static MemorySegment IID_IInternetProtocolSinkStackable() {
        return IID_IInternetProtocolSinkStackable$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolSinkStackable
     * }
     */
    public static void IID_IInternetProtocolSinkStackable(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolSinkStackable$constants.SEGMENT, 0L, IID_IInternetProtocolSinkStackable$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetSession *LPIINTERNETSESSION
     * }
     */
    public static final AddressLayout LPIINTERNETSESSION = winapi.C_POINTER;
    private static final int OIBDG_APARTMENTTHREADED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum _tagOIBDG_FLAGS.OIBDG_APARTMENTTHREADED = 256
     * }
     */
    public static int OIBDG_APARTMENTTHREADED() {
        return OIBDG_APARTMENTTHREADED;
    }
    private static final int OIBDG_DATAONLY = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum _tagOIBDG_FLAGS.OIBDG_DATAONLY = 4096
     * }
     */
    public static int OIBDG_DATAONLY() {
        return OIBDG_DATAONLY;
    }

    private static class IID_IInternetSession$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetSession").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static GroupLayout IID_IInternetSession$layout() {
        return IID_IInternetSession$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static MemorySegment IID_IInternetSession() {
        return IID_IInternetSession$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSession
     * }
     */
    public static void IID_IInternetSession(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSession$constants.SEGMENT, 0L, IID_IInternetSession$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH
     * }
     */
    public static final AddressLayout LPIINTERNETTHREADSWITCH = winapi.C_POINTER;

    private static class IID_IInternetThreadSwitch$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetThreadSwitch").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static GroupLayout IID_IInternetThreadSwitch$layout() {
        return IID_IInternetThreadSwitch$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static MemorySegment IID_IInternetThreadSwitch() {
        return IID_IInternetThreadSwitch$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetThreadSwitch
     * }
     */
    public static void IID_IInternetThreadSwitch(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetThreadSwitch$constants.SEGMENT, 0L, IID_IInternetThreadSwitch$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetPriority *LPIINTERNETPRIORITY
     * }
     */
    public static final AddressLayout LPIINTERNETPRIORITY = winapi.C_POINTER;

    private static class IID_IInternetPriority$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetPriority").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static GroupLayout IID_IInternetPriority$layout() {
        return IID_IInternetPriority$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static MemorySegment IID_IInternetPriority() {
        return IID_IInternetPriority$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetPriority
     * }
     */
    public static void IID_IInternetPriority(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetPriority$constants.SEGMENT, 0L, IID_IInternetPriority$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO
     * }
     */
    public static final AddressLayout LPIINTERNETPROTOCOLINFO = winapi.C_POINTER;
    private static final int PARSE_CANONICALIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_CANONICALIZE = 1
     * }
     */
    public static int PARSE_CANONICALIZE() {
        return PARSE_CANONICALIZE;
    }
    private static final int PARSE_FRIENDLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_FRIENDLY = 2
     * }
     */
    public static int PARSE_FRIENDLY() {
        return PARSE_FRIENDLY;
    }
    private static final int PARSE_SECURITY_URL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SECURITY_URL = 3
     * }
     */
    public static int PARSE_SECURITY_URL() {
        return PARSE_SECURITY_URL;
    }
    private static final int PARSE_ROOTDOCUMENT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ROOTDOCUMENT = 4
     * }
     */
    public static int PARSE_ROOTDOCUMENT() {
        return PARSE_ROOTDOCUMENT;
    }
    private static final int PARSE_DOCUMENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DOCUMENT = 5
     * }
     */
    public static int PARSE_DOCUMENT() {
        return PARSE_DOCUMENT;
    }
    private static final int PARSE_ANCHOR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ANCHOR = 6
     * }
     */
    public static int PARSE_ANCHOR() {
        return PARSE_ANCHOR;
    }
    private static final int PARSE_ENCODE_IS_UNESCAPE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ENCODE_IS_UNESCAPE = 7
     * }
     */
    public static int PARSE_ENCODE_IS_UNESCAPE() {
        return PARSE_ENCODE_IS_UNESCAPE;
    }
    private static final int PARSE_DECODE_IS_ESCAPE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DECODE_IS_ESCAPE = 8
     * }
     */
    public static int PARSE_DECODE_IS_ESCAPE() {
        return PARSE_DECODE_IS_ESCAPE;
    }
    private static final int PARSE_PATH_FROM_URL = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_PATH_FROM_URL = 9
     * }
     */
    public static int PARSE_PATH_FROM_URL() {
        return PARSE_PATH_FROM_URL;
    }
    private static final int PARSE_URL_FROM_PATH = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_URL_FROM_PATH = 10
     * }
     */
    public static int PARSE_URL_FROM_PATH() {
        return PARSE_URL_FROM_PATH;
    }
    private static final int PARSE_MIME = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_MIME = 11
     * }
     */
    public static int PARSE_MIME() {
        return PARSE_MIME;
    }
    private static final int PARSE_SERVER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SERVER = 12
     * }
     */
    public static int PARSE_SERVER() {
        return PARSE_SERVER;
    }
    private static final int PARSE_SCHEMA = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SCHEMA = 13
     * }
     */
    public static int PARSE_SCHEMA() {
        return PARSE_SCHEMA;
    }
    private static final int PARSE_SITE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SITE = 14
     * }
     */
    public static int PARSE_SITE() {
        return PARSE_SITE;
    }
    private static final int PARSE_DOMAIN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_DOMAIN = 15
     * }
     */
    public static int PARSE_DOMAIN() {
        return PARSE_DOMAIN;
    }
    private static final int PARSE_LOCATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_LOCATION = 16
     * }
     */
    public static int PARSE_LOCATION() {
        return PARSE_LOCATION;
    }
    private static final int PARSE_SECURITY_DOMAIN = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_SECURITY_DOMAIN = 17
     * }
     */
    public static int PARSE_SECURITY_DOMAIN() {
        return PARSE_SECURITY_DOMAIN;
    }
    private static final int PARSE_ESCAPE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_ESCAPE = 18
     * }
     */
    public static int PARSE_ESCAPE() {
        return PARSE_ESCAPE;
    }
    private static final int PARSE_UNESCAPE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _tagPARSEACTION.PARSE_UNESCAPE = 19
     * }
     */
    public static int PARSE_UNESCAPE() {
        return PARSE_UNESCAPE;
    }
    private static final int PSU_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagPSUACTION.PSU_DEFAULT = 1
     * }
     */
    public static int PSU_DEFAULT() {
        return PSU_DEFAULT;
    }
    private static final int PSU_SECURITY_URL_ONLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagPSUACTION.PSU_SECURITY_URL_ONLY = 2
     * }
     */
    public static int PSU_SECURITY_URL_ONLY() {
        return PSU_SECURITY_URL_ONLY;
    }
    private static final int QUERY_EXPIRATION_DATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_EXPIRATION_DATE = 1
     * }
     */
    public static int QUERY_EXPIRATION_DATE() {
        return QUERY_EXPIRATION_DATE;
    }
    private static final int QUERY_TIME_OF_LAST_CHANGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_TIME_OF_LAST_CHANGE = 2
     * }
     */
    public static int QUERY_TIME_OF_LAST_CHANGE() {
        return QUERY_TIME_OF_LAST_CHANGE;
    }
    private static final int QUERY_CONTENT_ENCODING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CONTENT_ENCODING = 3
     * }
     */
    public static int QUERY_CONTENT_ENCODING() {
        return QUERY_CONTENT_ENCODING;
    }
    private static final int QUERY_CONTENT_TYPE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CONTENT_TYPE = 4
     * }
     */
    public static int QUERY_CONTENT_TYPE() {
        return QUERY_CONTENT_TYPE;
    }
    private static final int QUERY_REFRESH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_REFRESH = 5
     * }
     */
    public static int QUERY_REFRESH() {
        return QUERY_REFRESH;
    }
    private static final int QUERY_RECOMBINE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_RECOMBINE = 6
     * }
     */
    public static int QUERY_RECOMBINE() {
        return QUERY_RECOMBINE;
    }
    private static final int QUERY_CAN_NAVIGATE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_CAN_NAVIGATE = 7
     * }
     */
    public static int QUERY_CAN_NAVIGATE() {
        return QUERY_CAN_NAVIGATE;
    }
    private static final int QUERY_USES_NETWORK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_NETWORK = 8
     * }
     */
    public static int QUERY_USES_NETWORK() {
        return QUERY_USES_NETWORK;
    }
    private static final int QUERY_IS_CACHED = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED = 9
     * }
     */
    public static int QUERY_IS_CACHED() {
        return QUERY_IS_CACHED;
    }
    private static final int QUERY_IS_INSTALLEDENTRY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_INSTALLEDENTRY = 10
     * }
     */
    public static int QUERY_IS_INSTALLEDENTRY() {
        return QUERY_IS_INSTALLEDENTRY;
    }
    private static final int QUERY_IS_CACHED_OR_MAPPED = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED_OR_MAPPED = 11
     * }
     */
    public static int QUERY_IS_CACHED_OR_MAPPED() {
        return QUERY_IS_CACHED_OR_MAPPED;
    }
    private static final int QUERY_USES_CACHE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_CACHE = 12
     * }
     */
    public static int QUERY_USES_CACHE() {
        return QUERY_USES_CACHE;
    }
    private static final int QUERY_IS_SECURE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_SECURE = 13
     * }
     */
    public static int QUERY_IS_SECURE() {
        return QUERY_IS_SECURE;
    }
    private static final int QUERY_IS_SAFE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_SAFE = 14
     * }
     */
    public static int QUERY_IS_SAFE() {
        return QUERY_IS_SAFE;
    }
    private static final int QUERY_USES_HISTORYFOLDER = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_USES_HISTORYFOLDER = 15
     * }
     */
    public static int QUERY_USES_HISTORYFOLDER() {
        return QUERY_USES_HISTORYFOLDER;
    }
    private static final int QUERY_IS_CACHED_AND_USABLE_OFFLINE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagQUERYOPTION.QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
     * }
     */
    public static int QUERY_IS_CACHED_AND_USABLE_OFFLINE() {
        return QUERY_IS_CACHED_AND_USABLE_OFFLINE;
    }

    private static class IID_IInternetProtocolInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetProtocolInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static GroupLayout IID_IInternetProtocolInfo$layout() {
        return IID_IInternetProtocolInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static MemorySegment IID_IInternetProtocolInfo() {
        return IID_IInternetProtocolInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetProtocolInfo
     * }
     */
    public static void IID_IInternetProtocolInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetProtocolInfo$constants.SEGMENT, 0L, IID_IInternetProtocolInfo$constants.LAYOUT.byteSize());
    }

    private static class CoInternetParseUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetParseUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetParseUrl$descriptor() {
        return CoInternetParseUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetParseUrl$handle() {
        return CoInternetParseUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetParseUrl$address() {
        return CoInternetParseUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseUrl(LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static int CoInternetParseUrl(MemorySegment pwzUrl, int ParseAction, int dwFlags, MemorySegment pszResult, int cchResult, MemorySegment pcchResult, int dwReserved) {
        var mh$ = CoInternetParseUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetParseUrl", pwzUrl, ParseAction, dwFlags, pszResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, ParseAction, dwFlags, pszResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetParseIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetParseIUri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetParseIUri$descriptor() {
        return CoInternetParseIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetParseIUri$handle() {
        return CoInternetParseIUri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static MemorySegment CoInternetParseIUri$address() {
        return CoInternetParseIUri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetParseIUri(IUri *pIUri, PARSEACTION ParseAction, DWORD dwFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetParseIUri(MemorySegment pIUri, int ParseAction, int dwFlags, MemorySegment pwzResult, int cchResult, MemorySegment pcchResult, long dwReserved) {
        var mh$ = CoInternetParseIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetParseIUri", pIUri, ParseAction, dwFlags, pwzResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pIUri, ParseAction, dwFlags, pwzResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetCombineUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineUrl$descriptor() {
        return CoInternetCombineUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineUrl$handle() {
        return CoInternetCombineUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetCombineUrl$address() {
        return CoInternetCombineUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrl(LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pszResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved)
     * }
     */
    public static int CoInternetCombineUrl(MemorySegment pwzBaseUrl, MemorySegment pwzRelativeUrl, int dwCombineFlags, MemorySegment pszResult, int cchResult, MemorySegment pcchResult, int dwReserved) {
        var mh$ = CoInternetCombineUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineUrl", pwzBaseUrl, pwzRelativeUrl, dwCombineFlags, pszResult, cchResult, pcchResult, dwReserved);
            }
            return (int)mh$.invokeExact(pwzBaseUrl, pwzRelativeUrl, dwCombineFlags, pszResult, cchResult, pcchResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineUrlEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetCombineUrlEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineUrlEx$descriptor() {
        return CoInternetCombineUrlEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineUrlEx$handle() {
        return CoInternetCombineUrlEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MemorySegment CoInternetCombineUrlEx$address() {
        return CoInternetCombineUrlEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineUrlEx(IUri *pBaseUri, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetCombineUrlEx(MemorySegment pBaseUri, MemorySegment pwzRelativeUrl, int dwCombineFlags, MemorySegment ppCombinedUri, long dwReserved) {
        var mh$ = CoInternetCombineUrlEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineUrlEx", pBaseUri, pwzRelativeUrl, dwCombineFlags, ppCombinedUri, dwReserved);
            }
            return (int)mh$.invokeExact(pBaseUri, pwzRelativeUrl, dwCombineFlags, ppCombinedUri, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCombineIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetCombineIUri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCombineIUri$descriptor() {
        return CoInternetCombineIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetCombineIUri$handle() {
        return CoInternetCombineIUri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static MemorySegment CoInternetCombineIUri$address() {
        return CoInternetCombineIUri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCombineIUri(IUri *pBaseUri, IUri *pRelativeUri, DWORD dwCombineFlags, IUri **ppCombinedUri, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetCombineIUri(MemorySegment pBaseUri, MemorySegment pRelativeUri, int dwCombineFlags, MemorySegment ppCombinedUri, long dwReserved) {
        var mh$ = CoInternetCombineIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCombineIUri", pBaseUri, pRelativeUri, dwCombineFlags, ppCombinedUri, dwReserved);
            }
            return (int)mh$.invokeExact(pBaseUri, pRelativeUri, dwCombineFlags, ppCombinedUri, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCompareUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetCompareUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetCompareUrl$descriptor() {
        return CoInternetCompareUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetCompareUrl$handle() {
        return CoInternetCompareUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static MemorySegment CoInternetCompareUrl$address() {
        return CoInternetCompareUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCompareUrl(LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwFlags)
     * }
     */
    public static int CoInternetCompareUrl(MemorySegment pwzUrl1, MemorySegment pwzUrl2, int dwFlags) {
        var mh$ = CoInternetCompareUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCompareUrl", pwzUrl1, pwzUrl2, dwFlags);
            }
            return (int)mh$.invokeExact(pwzUrl1, pwzUrl2, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetProtocolFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetGetProtocolFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetProtocolFlags$descriptor() {
        return CoInternetGetProtocolFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetProtocolFlags$handle() {
        return CoInternetGetProtocolFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetGetProtocolFlags$address() {
        return CoInternetGetProtocolFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetProtocolFlags(LPCWSTR pwzUrl, DWORD *pdwFlags, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetProtocolFlags(MemorySegment pwzUrl, MemorySegment pdwFlags, int dwReserved) {
        var mh$ = CoInternetGetProtocolFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetProtocolFlags", pwzUrl, pdwFlags, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, pdwFlags, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetQueryInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetQueryInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetQueryInfo$descriptor() {
        return CoInternetQueryInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetQueryInfo$handle() {
        return CoInternetQueryInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetQueryInfo$address() {
        return CoInternetQueryInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetQueryInfo(LPCWSTR pwzUrl, QUERYOPTION QueryOptions, DWORD dwQueryFlags, LPVOID pvBuffer, DWORD cbBuffer, DWORD *pcbBuffer, DWORD dwReserved)
     * }
     */
    public static int CoInternetQueryInfo(MemorySegment pwzUrl, int QueryOptions, int dwQueryFlags, MemorySegment pvBuffer, int cbBuffer, MemorySegment pcbBuffer, int dwReserved) {
        var mh$ = CoInternetQueryInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetQueryInfo", pwzUrl, QueryOptions, dwQueryFlags, pvBuffer, cbBuffer, pcbBuffer, dwReserved);
            }
            return (int)mh$.invokeExact(pwzUrl, QueryOptions, dwQueryFlags, pvBuffer, cbBuffer, pcbBuffer, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSession {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetGetSession");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSession$descriptor() {
        return CoInternetGetSession.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSession$handle() {
        return CoInternetGetSession.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetGetSession$address() {
        return CoInternetGetSession.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSession(DWORD dwSessionMode, IInternetSession **ppIInternetSession, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetSession(int dwSessionMode, MemorySegment ppIInternetSession, int dwReserved) {
        var mh$ = CoInternetGetSession.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSession", dwSessionMode, ppIInternetSession, dwReserved);
            }
            return (int)mh$.invokeExact(dwSessionMode, ppIInternetSession, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSecurityUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetGetSecurityUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSecurityUrl$descriptor() {
        return CoInternetGetSecurityUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSecurityUrl$handle() {
        return CoInternetGetSecurityUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetGetSecurityUrl$address() {
        return CoInternetGetSecurityUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrl(LPCWSTR pwszUrl, LPWSTR *ppwszSecUrl, PSUACTION psuAction, DWORD dwReserved)
     * }
     */
    public static int CoInternetGetSecurityUrl(MemorySegment pwszUrl, MemorySegment ppwszSecUrl, int psuAction, int dwReserved) {
        var mh$ = CoInternetGetSecurityUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSecurityUrl", pwszUrl, ppwszSecUrl, psuAction, dwReserved);
            }
            return (int)mh$.invokeExact(pwszUrl, ppwszSecUrl, psuAction, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AsyncInstallDistributionUnit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AsyncInstallDistributionUnit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static FunctionDescriptor AsyncInstallDistributionUnit$descriptor() {
        return AsyncInstallDistributionUnit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static MethodHandle AsyncInstallDistributionUnit$handle() {
        return AsyncInstallDistributionUnit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static MemorySegment AsyncInstallDistributionUnit$address() {
        return AsyncInstallDistributionUnit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT AsyncInstallDistributionUnit(LPCWSTR szDistUnit, LPCWSTR szTYPE, LPCWSTR szExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR szURL, IBindCtx *pbc, LPVOID pvReserved, DWORD flags)
     * }
     */
    public static int AsyncInstallDistributionUnit(MemorySegment szDistUnit, MemorySegment szTYPE, MemorySegment szExt, int dwFileVersionMS, int dwFileVersionLS, MemorySegment szURL, MemorySegment pbc, MemorySegment pvReserved, int flags) {
        var mh$ = AsyncInstallDistributionUnit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AsyncInstallDistributionUnit", szDistUnit, szTYPE, szExt, dwFileVersionMS, dwFileVersionLS, szURL, pbc, pvReserved, flags);
            }
            return (int)mh$.invokeExact(szDistUnit, szTYPE, szExt, dwFileVersionMS, dwFileVersionLS, szURL, pbc, pvReserved, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetGetSecurityUrlEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetGetSecurityUrlEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetGetSecurityUrlEx$descriptor() {
        return CoInternetGetSecurityUrlEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static MethodHandle CoInternetGetSecurityUrlEx$handle() {
        return CoInternetGetSecurityUrlEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static MemorySegment CoInternetGetSecurityUrlEx$address() {
        return CoInternetGetSecurityUrlEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetGetSecurityUrlEx(IUri *pUri, IUri **ppSecUri, PSUACTION psuAction, DWORD_PTR dwReserved)
     * }
     */
    public static int CoInternetGetSecurityUrlEx(MemorySegment pUri, MemorySegment ppSecUri, int psuAction, long dwReserved) {
        var mh$ = CoInternetGetSecurityUrlEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetGetSecurityUrlEx", pUri, ppSecUri, psuAction, dwReserved);
            }
            return (int)mh$.invokeExact(pUri, ppSecUri, psuAction, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int FEATURE_OBJECT_CACHING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_OBJECT_CACHING = 0
     * }
     */
    public static int FEATURE_OBJECT_CACHING() {
        return FEATURE_OBJECT_CACHING;
    }
    private static final int FEATURE_ZONE_ELEVATION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ZONE_ELEVATION = 1
     * }
     */
    public static int FEATURE_ZONE_ELEVATION() {
        return FEATURE_ZONE_ELEVATION;
    }
    private static final int FEATURE_MIME_HANDLING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_MIME_HANDLING = 2
     * }
     */
    public static int FEATURE_MIME_HANDLING() {
        return FEATURE_MIME_HANDLING;
    }
    private static final int FEATURE_MIME_SNIFFING = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_MIME_SNIFFING = 3
     * }
     */
    public static int FEATURE_MIME_SNIFFING() {
        return FEATURE_MIME_SNIFFING;
    }
    private static final int FEATURE_WINDOW_RESTRICTIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_WINDOW_RESTRICTIONS = 4
     * }
     */
    public static int FEATURE_WINDOW_RESTRICTIONS() {
        return FEATURE_WINDOW_RESTRICTIONS;
    }
    private static final int FEATURE_WEBOC_POPUPMANAGEMENT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_WEBOC_POPUPMANAGEMENT = 5
     * }
     */
    public static int FEATURE_WEBOC_POPUPMANAGEMENT() {
        return FEATURE_WEBOC_POPUPMANAGEMENT;
    }
    private static final int FEATURE_BEHAVIORS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_BEHAVIORS = 6
     * }
     */
    public static int FEATURE_BEHAVIORS() {
        return FEATURE_BEHAVIORS;
    }
    private static final int FEATURE_DISABLE_MK_PROTOCOL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_MK_PROTOCOL = 7
     * }
     */
    public static int FEATURE_DISABLE_MK_PROTOCOL() {
        return FEATURE_DISABLE_MK_PROTOCOL;
    }
    private static final int FEATURE_LOCALMACHINE_LOCKDOWN = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_LOCALMACHINE_LOCKDOWN = 8
     * }
     */
    public static int FEATURE_LOCALMACHINE_LOCKDOWN() {
        return FEATURE_LOCALMACHINE_LOCKDOWN;
    }
    private static final int FEATURE_SECURITYBAND = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SECURITYBAND = 9
     * }
     */
    public static int FEATURE_SECURITYBAND() {
        return FEATURE_SECURITYBAND;
    }
    private static final int FEATURE_RESTRICT_ACTIVEXINSTALL = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_RESTRICT_ACTIVEXINSTALL = 10
     * }
     */
    public static int FEATURE_RESTRICT_ACTIVEXINSTALL() {
        return FEATURE_RESTRICT_ACTIVEXINSTALL;
    }
    private static final int FEATURE_VALIDATE_NAVIGATE_URL = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_VALIDATE_NAVIGATE_URL = 11
     * }
     */
    public static int FEATURE_VALIDATE_NAVIGATE_URL() {
        return FEATURE_VALIDATE_NAVIGATE_URL;
    }
    private static final int FEATURE_RESTRICT_FILEDOWNLOAD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_RESTRICT_FILEDOWNLOAD = 12
     * }
     */
    public static int FEATURE_RESTRICT_FILEDOWNLOAD() {
        return FEATURE_RESTRICT_FILEDOWNLOAD;
    }
    private static final int FEATURE_ADDON_MANAGEMENT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ADDON_MANAGEMENT = 13
     * }
     */
    public static int FEATURE_ADDON_MANAGEMENT() {
        return FEATURE_ADDON_MANAGEMENT;
    }
    private static final int FEATURE_PROTOCOL_LOCKDOWN = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_PROTOCOL_LOCKDOWN = 14
     * }
     */
    public static int FEATURE_PROTOCOL_LOCKDOWN() {
        return FEATURE_PROTOCOL_LOCKDOWN;
    }
    private static final int FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15
     * }
     */
    public static int FEATURE_HTTP_USERNAME_PASSWORD_DISABLE() {
        return FEATURE_HTTP_USERNAME_PASSWORD_DISABLE;
    }
    private static final int FEATURE_SAFE_BINDTOOBJECT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SAFE_BINDTOOBJECT = 16
     * }
     */
    public static int FEATURE_SAFE_BINDTOOBJECT() {
        return FEATURE_SAFE_BINDTOOBJECT;
    }
    private static final int FEATURE_UNC_SAVEDFILECHECK = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_UNC_SAVEDFILECHECK = 17
     * }
     */
    public static int FEATURE_UNC_SAVEDFILECHECK() {
        return FEATURE_UNC_SAVEDFILECHECK;
    }
    private static final int FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18
     * }
     */
    public static int FEATURE_GET_URL_DOM_FILEPATH_UNENCODED() {
        return FEATURE_GET_URL_DOM_FILEPATH_UNENCODED;
    }
    private static final int FEATURE_TABBED_BROWSING = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_TABBED_BROWSING = 19
     * }
     */
    public static int FEATURE_TABBED_BROWSING() {
        return FEATURE_TABBED_BROWSING;
    }
    private static final int FEATURE_SSLUX = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_SSLUX = 20
     * }
     */
    public static int FEATURE_SSLUX() {
        return FEATURE_SSLUX;
    }
    private static final int FEATURE_DISABLE_NAVIGATION_SOUNDS = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_NAVIGATION_SOUNDS = 21
     * }
     */
    public static int FEATURE_DISABLE_NAVIGATION_SOUNDS() {
        return FEATURE_DISABLE_NAVIGATION_SOUNDS;
    }
    private static final int FEATURE_DISABLE_LEGACY_COMPRESSION = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_LEGACY_COMPRESSION = 22
     * }
     */
    public static int FEATURE_DISABLE_LEGACY_COMPRESSION() {
        return FEATURE_DISABLE_LEGACY_COMPRESSION;
    }
    private static final int FEATURE_FORCE_ADDR_AND_STATUS = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_FORCE_ADDR_AND_STATUS = 23
     * }
     */
    public static int FEATURE_FORCE_ADDR_AND_STATUS() {
        return FEATURE_FORCE_ADDR_AND_STATUS;
    }
    private static final int FEATURE_XMLHTTP = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_XMLHTTP = 24
     * }
     */
    public static int FEATURE_XMLHTTP() {
        return FEATURE_XMLHTTP;
    }
    private static final int FEATURE_DISABLE_TELNET_PROTOCOL = (int)25L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_DISABLE_TELNET_PROTOCOL = 25
     * }
     */
    public static int FEATURE_DISABLE_TELNET_PROTOCOL() {
        return FEATURE_DISABLE_TELNET_PROTOCOL;
    }
    private static final int FEATURE_FEEDS = (int)26L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_FEEDS = 26
     * }
     */
    public static int FEATURE_FEEDS() {
        return FEATURE_FEEDS;
    }
    private static final int FEATURE_BLOCK_INPUT_PROMPTS = (int)27L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_BLOCK_INPUT_PROMPTS = 27
     * }
     */
    public static int FEATURE_BLOCK_INPUT_PROMPTS() {
        return FEATURE_BLOCK_INPUT_PROMPTS;
    }
    private static final int FEATURE_ENTRY_COUNT = (int)28L;
    /**
     * {@snippet lang=c :
     * enum _tagINTERNETFEATURELIST.FEATURE_ENTRY_COUNT = 28
     * }
     */
    public static int FEATURE_ENTRY_COUNT() {
        return FEATURE_ENTRY_COUNT;
    }

    private static class CoInternetSetFeatureEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetSetFeatureEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static FunctionDescriptor CoInternetSetFeatureEnabled$descriptor() {
        return CoInternetSetFeatureEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static MethodHandle CoInternetSetFeatureEnabled$handle() {
        return CoInternetSetFeatureEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static MemorySegment CoInternetSetFeatureEnabled$address() {
        return CoInternetSetFeatureEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, BOOL fEnable)
     * }
     */
    public static int CoInternetSetFeatureEnabled(int FeatureEntry, int dwFlags, int fEnable) {
        var mh$ = CoInternetSetFeatureEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetSetFeatureEnabled", FeatureEntry, dwFlags, fEnable);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, fEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetIsFeatureEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabled$descriptor() {
        return CoInternetIsFeatureEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabled$handle() {
        return CoInternetIsFeatureEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static MemorySegment CoInternetIsFeatureEnabled$address() {
        return CoInternetIsFeatureEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags)
     * }
     */
    public static int CoInternetIsFeatureEnabled(int FeatureEntry, int dwFlags) {
        var mh$ = CoInternetIsFeatureEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabled", FeatureEntry, dwFlags);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabledForUrl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetIsFeatureEnabledForUrl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabledForUrl$descriptor() {
        return CoInternetIsFeatureEnabledForUrl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabledForUrl$handle() {
        return CoInternetIsFeatureEnabledForUrl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static MemorySegment CoInternetIsFeatureEnabledForUrl$address() {
        return CoInternetIsFeatureEnabledForUrl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, LPCWSTR szURL, IInternetSecurityManager *pSecMgr)
     * }
     */
    public static int CoInternetIsFeatureEnabledForUrl(int FeatureEntry, int dwFlags, MemorySegment szURL, MemorySegment pSecMgr) {
        var mh$ = CoInternetIsFeatureEnabledForUrl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabledForUrl", FeatureEntry, dwFlags, szURL, pSecMgr);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, szURL, pSecMgr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureEnabledForIUri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetIsFeatureEnabledForIUri");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureEnabledForIUri$descriptor() {
        return CoInternetIsFeatureEnabledForIUri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static MethodHandle CoInternetIsFeatureEnabledForIUri$handle() {
        return CoInternetIsFeatureEnabledForIUri.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static MemorySegment CoInternetIsFeatureEnabledForIUri$address() {
        return CoInternetIsFeatureEnabledForIUri.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, DWORD dwFlags, IUri *pIUri, IInternetSecurityManagerEx2 *pSecMgr)
     * }
     */
    public static int CoInternetIsFeatureEnabledForIUri(int FeatureEntry, int dwFlags, MemorySegment pIUri, MemorySegment pSecMgr) {
        var mh$ = CoInternetIsFeatureEnabledForIUri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureEnabledForIUri", FeatureEntry, dwFlags, pIUri, pSecMgr);
            }
            return (int)mh$.invokeExact(FeatureEntry, dwFlags, pIUri, pSecMgr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetIsFeatureZoneElevationEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetIsFeatureZoneElevationEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor CoInternetIsFeatureZoneElevationEnabled$descriptor() {
        return CoInternetIsFeatureZoneElevationEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static MethodHandle CoInternetIsFeatureZoneElevationEnabled$handle() {
        return CoInternetIsFeatureZoneElevationEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static MemorySegment CoInternetIsFeatureZoneElevationEnabled$address() {
        return CoInternetIsFeatureZoneElevationEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetIsFeatureZoneElevationEnabled(LPCWSTR szFromURL, LPCWSTR szToURL, IInternetSecurityManager *pSecMgr, DWORD dwFlags)
     * }
     */
    public static int CoInternetIsFeatureZoneElevationEnabled(MemorySegment szFromURL, MemorySegment szToURL, MemorySegment pSecMgr, int dwFlags) {
        var mh$ = CoInternetIsFeatureZoneElevationEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetIsFeatureZoneElevationEnabled", szFromURL, szToURL, pSecMgr, dwFlags);
            }
            return (int)mh$.invokeExact(szFromURL, szToURL, pSecMgr, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CopyStgMedium {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CopyStgMedium");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static FunctionDescriptor CopyStgMedium$descriptor() {
        return CopyStgMedium.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static MethodHandle CopyStgMedium$handle() {
        return CopyStgMedium.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static MemorySegment CopyStgMedium$address() {
        return CopyStgMedium.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CopyStgMedium(const STGMEDIUM *pcstgmedSrc, STGMEDIUM *pstgmedDest)
     * }
     */
    public static int CopyStgMedium(MemorySegment pcstgmedSrc, MemorySegment pstgmedDest) {
        var mh$ = CopyStgMedium.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CopyStgMedium", pcstgmedSrc, pstgmedDest);
            }
            return (int)mh$.invokeExact(pcstgmedSrc, pstgmedDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CopyBindInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CopyBindInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static FunctionDescriptor CopyBindInfo$descriptor() {
        return CopyBindInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static MethodHandle CopyBindInfo$handle() {
        return CopyBindInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static MemorySegment CopyBindInfo$address() {
        return CopyBindInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CopyBindInfo(const BINDINFO *pcbiSrc, BINDINFO *pbiDest)
     * }
     */
    public static int CopyBindInfo(MemorySegment pcbiSrc, MemorySegment pbiDest) {
        var mh$ = CopyBindInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CopyBindInfo", pcbiSrc, pbiDest);
            }
            return (int)mh$.invokeExact(pcbiSrc, pbiDest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReleaseBindInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ReleaseBindInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static FunctionDescriptor ReleaseBindInfo$descriptor() {
        return ReleaseBindInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static MethodHandle ReleaseBindInfo$handle() {
        return ReleaseBindInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static MemorySegment ReleaseBindInfo$address() {
        return ReleaseBindInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ReleaseBindInfo(BINDINFO *pbindinfo)
     * }
     */
    public static void ReleaseBindInfo(MemorySegment pbindinfo) {
        var mh$ = ReleaseBindInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReleaseBindInfo", pbindinfo);
            }
            mh$.invokeExact(pbindinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IEGetUserPrivateNamespaceName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("IEGetUserPrivateNamespaceName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static FunctionDescriptor IEGetUserPrivateNamespaceName$descriptor() {
        return IEGetUserPrivateNamespaceName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static MethodHandle IEGetUserPrivateNamespaceName$handle() {
        return IEGetUserPrivateNamespaceName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static MemorySegment IEGetUserPrivateNamespaceName$address() {
        return IEGetUserPrivateNamespaceName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern PWSTR IEGetUserPrivateNamespaceName()
     * }
     */
    public static MemorySegment IEGetUserPrivateNamespaceName() {
        var mh$ = IEGetUserPrivateNamespaceName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IEGetUserPrivateNamespaceName");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCreateSecurityManager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetCreateSecurityManager");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCreateSecurityManager$descriptor() {
        return CoInternetCreateSecurityManager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCreateSecurityManager$handle() {
        return CoInternetCreateSecurityManager.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetCreateSecurityManager$address() {
        return CoInternetCreateSecurityManager.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved)
     * }
     */
    public static int CoInternetCreateSecurityManager(MemorySegment pSP, MemorySegment ppSM, int dwReserved) {
        var mh$ = CoInternetCreateSecurityManager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCreateSecurityManager", pSP, ppSM, dwReserved);
            }
            return (int)mh$.invokeExact(pSP, ppSM, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CoInternetCreateZoneManager {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CoInternetCreateZoneManager");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor CoInternetCreateZoneManager$descriptor() {
        return CoInternetCreateZoneManager.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static MethodHandle CoInternetCreateZoneManager$handle() {
        return CoInternetCreateZoneManager.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static MemorySegment CoInternetCreateZoneManager$address() {
        return CoInternetCreateZoneManager.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved)
     * }
     */
    public static int CoInternetCreateZoneManager(MemorySegment pSP, MemorySegment ppZM, int dwReserved) {
        var mh$ = CoInternetCreateZoneManager.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CoInternetCreateZoneManager", pSP, ppZM, dwReserved);
            }
            return (int)mh$.invokeExact(pSP, ppZM, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CLSID_InternetSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_InternetSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static GroupLayout CLSID_InternetSecurityManager$layout() {
        return CLSID_InternetSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static MemorySegment CLSID_InternetSecurityManager() {
        return CLSID_InternetSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetSecurityManager
     * }
     */
    public static void CLSID_InternetSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_InternetSecurityManager$constants.SEGMENT, 0L, CLSID_InternetSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class CLSID_InternetZoneManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_InternetZoneManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static GroupLayout CLSID_InternetZoneManager$layout() {
        return CLSID_InternetZoneManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static MemorySegment CLSID_InternetZoneManager() {
        return CLSID_InternetZoneManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_InternetZoneManager
     * }
     */
    public static void CLSID_InternetZoneManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_InternetZoneManager$constants.SEGMENT, 0L, CLSID_InternetZoneManager$constants.LAYOUT.byteSize());
    }

    private static class CLSID_PersistentZoneIdentifier$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_PersistentZoneIdentifier").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static GroupLayout CLSID_PersistentZoneIdentifier$layout() {
        return CLSID_PersistentZoneIdentifier$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static MemorySegment CLSID_PersistentZoneIdentifier() {
        return CLSID_PersistentZoneIdentifier$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_PersistentZoneIdentifier
     * }
     */
    public static void CLSID_PersistentZoneIdentifier(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_PersistentZoneIdentifier$constants.SEGMENT, 0L, CLSID_PersistentZoneIdentifier$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityMgrSite$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetSecurityMgrSite").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static GroupLayout IID_IInternetSecurityMgrSite$layout() {
        return IID_IInternetSecurityMgrSite$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static MemorySegment IID_IInternetSecurityMgrSite() {
        return IID_IInternetSecurityMgrSite$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityMgrSite
     * }
     */
    public static void IID_IInternetSecurityMgrSite(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityMgrSite$constants.SEGMENT, 0L, IID_IInternetSecurityMgrSite$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    private static final int PUAF_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DEFAULT = 0
     * }
     */
    public static int PUAF_DEFAULT() {
        return PUAF_DEFAULT;
    }
    private static final int PUAF_NOUI = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOUI = 1
     * }
     */
    public static int PUAF_NOUI() {
        return PUAF_NOUI;
    }
    private static final int PUAF_ISFILE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ISFILE = 2
     * }
     */
    public static int PUAF_ISFILE() {
        return PUAF_ISFILE;
    }
    private static final int PUAF_WARN_IF_DENIED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_WARN_IF_DENIED = 4
     * }
     */
    public static int PUAF_WARN_IF_DENIED() {
        return PUAF_WARN_IF_DENIED;
    }
    private static final int PUAF_FORCEUI_FOREGROUND = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_FORCEUI_FOREGROUND = 8
     * }
     */
    public static int PUAF_FORCEUI_FOREGROUND() {
        return PUAF_FORCEUI_FOREGROUND;
    }
    private static final int PUAF_CHECK_TIFS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_CHECK_TIFS = 16
     * }
     */
    public static int PUAF_CHECK_TIFS() {
        return PUAF_CHECK_TIFS;
    }
    private static final int PUAF_DONTCHECKBOXINDIALOG = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DONTCHECKBOXINDIALOG = 32
     * }
     */
    public static int PUAF_DONTCHECKBOXINDIALOG() {
        return PUAF_DONTCHECKBOXINDIALOG;
    }
    private static final int PUAF_TRUSTED = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_TRUSTED = 64
     * }
     */
    public static int PUAF_TRUSTED() {
        return PUAF_TRUSTED;
    }
    private static final int PUAF_ACCEPT_WILDCARD_SCHEME = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ACCEPT_WILDCARD_SCHEME = 128
     * }
     */
    public static int PUAF_ACCEPT_WILDCARD_SCHEME() {
        return PUAF_ACCEPT_WILDCARD_SCHEME;
    }
    private static final int PUAF_ENFORCERESTRICTED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_ENFORCERESTRICTED = 256
     * }
     */
    public static int PUAF_ENFORCERESTRICTED() {
        return PUAF_ENFORCERESTRICTED;
    }
    private static final int PUAF_NOSAVEDFILECHECK = (int)512L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOSAVEDFILECHECK = 512
     * }
     */
    public static int PUAF_NOSAVEDFILECHECK() {
        return PUAF_NOSAVEDFILECHECK;
    }
    private static final int PUAF_REQUIRESAVEDFILECHECK = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_REQUIRESAVEDFILECHECK = 1024
     * }
     */
    public static int PUAF_REQUIRESAVEDFILECHECK() {
        return PUAF_REQUIRESAVEDFILECHECK;
    }
    private static final int PUAF_DONT_USE_CACHE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DONT_USE_CACHE = 4096
     * }
     */
    public static int PUAF_DONT_USE_CACHE() {
        return PUAF_DONT_USE_CACHE;
    }
    private static final int PUAF_RESERVED1 = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_RESERVED1 = 8192
     * }
     */
    public static int PUAF_RESERVED1() {
        return PUAF_RESERVED1;
    }
    private static final int PUAF_RESERVED2 = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_RESERVED2 = 16384
     * }
     */
    public static int PUAF_RESERVED2() {
        return PUAF_RESERVED2;
    }
    private static final int PUAF_LMZ_UNLOCKED = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_LMZ_UNLOCKED = 65536
     * }
     */
    public static int PUAF_LMZ_UNLOCKED() {
        return PUAF_LMZ_UNLOCKED;
    }
    private static final int PUAF_LMZ_LOCKED = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_LMZ_LOCKED = 131072
     * }
     */
    public static int PUAF_LMZ_LOCKED() {
        return PUAF_LMZ_LOCKED;
    }
    private static final int PUAF_DEFAULTZONEPOL = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DEFAULTZONEPOL = 262144
     * }
     */
    public static int PUAF_DEFAULTZONEPOL() {
        return PUAF_DEFAULTZONEPOL;
    }
    private static final int PUAF_NPL_USE_LOCKED_IF_RESTRICTED = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288
     * }
     */
    public static int PUAF_NPL_USE_LOCKED_IF_RESTRICTED() {
        return PUAF_NPL_USE_LOCKED_IF_RESTRICTED;
    }
    private static final int PUAF_NOUIIFLOCKED = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_NOUIIFLOCKED = 1048576
     * }
     */
    public static int PUAF_NOUIIFLOCKED() {
        return PUAF_NOUIIFLOCKED;
    }
    private static final int PUAF_DRAGPROTOCOLCHECK = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0001.PUAF_DRAGPROTOCOLCHECK = 2097152
     * }
     */
    public static int PUAF_DRAGPROTOCOLCHECK() {
        return PUAF_DRAGPROTOCOLCHECK;
    }
    private static final int PUAFOUT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0002.PUAFOUT_DEFAULT = 0
     * }
     */
    public static int PUAFOUT_DEFAULT() {
        return PUAFOUT_DEFAULT;
    }
    private static final int PUAFOUT_ISLOCKZONEPOLICY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0002.PUAFOUT_ISLOCKZONEPOLICY = 1
     * }
     */
    public static int PUAFOUT_ISLOCKZONEPOLICY() {
        return PUAFOUT_ISLOCKZONEPOLICY;
    }
    private static final int SZM_CREATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0003.SZM_CREATE = 0
     * }
     */
    public static int SZM_CREATE() {
        return SZM_CREATE;
    }
    private static final int SZM_DELETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetSecurityManager_0003.SZM_DELETE = 1
     * }
     */
    public static int SZM_DELETE() {
        return SZM_DELETE;
    }

    private static class IID_IInternetSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static GroupLayout IID_IInternetSecurityManager$layout() {
        return IID_IInternetSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static MemorySegment IID_IInternetSecurityManager() {
        return IID_IInternetSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManager
     * }
     */
    public static void IID_IInternetSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManager$constants.SEGMENT, 0L, IID_IInternetSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityManagerEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetSecurityManagerEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static GroupLayout IID_IInternetSecurityManagerEx$layout() {
        return IID_IInternetSecurityManagerEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static MemorySegment IID_IInternetSecurityManagerEx() {
        return IID_IInternetSecurityManagerEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx
     * }
     */
    public static void IID_IInternetSecurityManagerEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManagerEx$constants.SEGMENT, 0L, IID_IInternetSecurityManagerEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetSecurityManagerEx2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetSecurityManagerEx2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static GroupLayout IID_IInternetSecurityManagerEx2$layout() {
        return IID_IInternetSecurityManagerEx2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static MemorySegment IID_IInternetSecurityManagerEx2() {
        return IID_IInternetSecurityManagerEx2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetSecurityManagerEx2
     * }
     */
    public static void IID_IInternetSecurityManagerEx2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetSecurityManagerEx2$constants.SEGMENT, 0L, IID_IInternetSecurityManagerEx2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IZoneIdentifier$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IZoneIdentifier").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static GroupLayout IID_IZoneIdentifier$layout() {
        return IID_IZoneIdentifier$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static MemorySegment IID_IZoneIdentifier() {
        return IID_IZoneIdentifier$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier
     * }
     */
    public static void IID_IZoneIdentifier(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IZoneIdentifier$constants.SEGMENT, 0L, IID_IZoneIdentifier$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IZoneIdentifier2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IZoneIdentifier2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static GroupLayout IID_IZoneIdentifier2$layout() {
        return IID_IZoneIdentifier2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static MemorySegment IID_IZoneIdentifier2() {
        return IID_IZoneIdentifier2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IZoneIdentifier2
     * }
     */
    public static void IID_IZoneIdentifier2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IZoneIdentifier2$constants.SEGMENT, 0L, IID_IZoneIdentifier2$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetHostSecurityManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetHostSecurityManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static GroupLayout IID_IInternetHostSecurityManager$layout() {
        return IID_IInternetHostSecurityManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static MemorySegment IID_IInternetHostSecurityManager() {
        return IID_IInternetHostSecurityManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetHostSecurityManager
     * }
     */
    public static void IID_IInternetHostSecurityManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetHostSecurityManager$constants.SEGMENT, 0L, IID_IInternetHostSecurityManager$constants.LAYOUT.byteSize());
    }

    private static class GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static GroupLayout GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$layout() {
        return GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static MemorySegment GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED() {
        return GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED
     * }
     */
    public static void GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.SEGMENT, 0L, GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IInternetZoneManager *LPURLZONEMANAGER
     * }
     */
    public static final AddressLayout LPURLZONEMANAGER = winapi.C_POINTER;
    private static final int URLZONE_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INVALID = -1
     * }
     */
    public static int URLZONE_INVALID() {
        return URLZONE_INVALID;
    }
    private static final int URLZONE_PREDEFINED_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_PREDEFINED_MIN = 0
     * }
     */
    public static int URLZONE_PREDEFINED_MIN() {
        return URLZONE_PREDEFINED_MIN;
    }
    private static final int URLZONE_LOCAL_MACHINE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_LOCAL_MACHINE = 0
     * }
     */
    public static int URLZONE_LOCAL_MACHINE() {
        return URLZONE_LOCAL_MACHINE;
    }
    private static final int URLZONE_INTRANET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INTRANET = 1
     * }
     */
    public static int URLZONE_INTRANET() {
        return URLZONE_INTRANET;
    }
    private static final int URLZONE_TRUSTED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_TRUSTED = 2
     * }
     */
    public static int URLZONE_TRUSTED() {
        return URLZONE_TRUSTED;
    }
    private static final int URLZONE_INTERNET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_INTERNET = 3
     * }
     */
    public static int URLZONE_INTERNET() {
        return URLZONE_INTERNET;
    }
    private static final int URLZONE_UNTRUSTED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_UNTRUSTED = 4
     * }
     */
    public static int URLZONE_UNTRUSTED() {
        return URLZONE_UNTRUSTED;
    }
    private static final int URLZONE_PREDEFINED_MAX = (int)999L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_PREDEFINED_MAX = 999
     * }
     */
    public static int URLZONE_PREDEFINED_MAX() {
        return URLZONE_PREDEFINED_MAX;
    }
    private static final int URLZONE_USER_MIN = (int)1000L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_USER_MIN = 1000
     * }
     */
    public static int URLZONE_USER_MIN() {
        return URLZONE_USER_MIN;
    }
    private static final int URLZONE_USER_MAX = (int)10000L;
    /**
     * {@snippet lang=c :
     * enum tagURLZONE.URLZONE_USER_MAX = 10000
     * }
     */
    public static int URLZONE_USER_MAX() {
        return URLZONE_USER_MAX;
    }
    private static final int URLTEMPLATE_CUSTOM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_CUSTOM = 0
     * }
     */
    public static int URLTEMPLATE_CUSTOM() {
        return URLTEMPLATE_CUSTOM;
    }
    private static final int URLTEMPLATE_PREDEFINED_MIN = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_PREDEFINED_MIN = 65536
     * }
     */
    public static int URLTEMPLATE_PREDEFINED_MIN() {
        return URLTEMPLATE_PREDEFINED_MIN;
    }
    private static final int URLTEMPLATE_LOW = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_LOW = 65536
     * }
     */
    public static int URLTEMPLATE_LOW() {
        return URLTEMPLATE_LOW;
    }
    private static final int URLTEMPLATE_MEDLOW = (int)66816L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDLOW = 66816
     * }
     */
    public static int URLTEMPLATE_MEDLOW() {
        return URLTEMPLATE_MEDLOW;
    }
    private static final int URLTEMPLATE_MEDIUM = (int)69632L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDIUM = 69632
     * }
     */
    public static int URLTEMPLATE_MEDIUM() {
        return URLTEMPLATE_MEDIUM;
    }
    private static final int URLTEMPLATE_MEDHIGH = (int)70912L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_MEDHIGH = 70912
     * }
     */
    public static int URLTEMPLATE_MEDHIGH() {
        return URLTEMPLATE_MEDHIGH;
    }
    private static final int URLTEMPLATE_HIGH = (int)73728L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_HIGH = 73728
     * }
     */
    public static int URLTEMPLATE_HIGH() {
        return URLTEMPLATE_HIGH;
    }
    private static final int URLTEMPLATE_PREDEFINED_MAX = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum tagURLTEMPLATE.URLTEMPLATE_PREDEFINED_MAX = 131072
     * }
     */
    public static int URLTEMPLATE_PREDEFINED_MAX() {
        return URLTEMPLATE_PREDEFINED_MAX;
    }
    private static final int MAX_ZONE_PATH = (int)260L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0001.MAX_ZONE_PATH = 260
     * }
     */
    public static int MAX_ZONE_PATH() {
        return MAX_ZONE_PATH;
    }
    private static final int MAX_ZONE_DESCRIPTION = (int)200L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0001.MAX_ZONE_DESCRIPTION = 200
     * }
     */
    public static int MAX_ZONE_DESCRIPTION() {
        return MAX_ZONE_DESCRIPTION;
    }
    private static final int ZAFLAGS_CUSTOM_EDIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_CUSTOM_EDIT = 1
     * }
     */
    public static int ZAFLAGS_CUSTOM_EDIT() {
        return ZAFLAGS_CUSTOM_EDIT;
    }
    private static final int ZAFLAGS_ADD_SITES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_ADD_SITES = 2
     * }
     */
    public static int ZAFLAGS_ADD_SITES() {
        return ZAFLAGS_ADD_SITES;
    }
    private static final int ZAFLAGS_REQUIRE_VERIFICATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_REQUIRE_VERIFICATION = 4
     * }
     */
    public static int ZAFLAGS_REQUIRE_VERIFICATION() {
        return ZAFLAGS_REQUIRE_VERIFICATION;
    }
    private static final int ZAFLAGS_INCLUDE_PROXY_OVERRIDE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8
     * }
     */
    public static int ZAFLAGS_INCLUDE_PROXY_OVERRIDE() {
        return ZAFLAGS_INCLUDE_PROXY_OVERRIDE;
    }
    private static final int ZAFLAGS_INCLUDE_INTRANET_SITES = (int)16L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_INCLUDE_INTRANET_SITES = 16
     * }
     */
    public static int ZAFLAGS_INCLUDE_INTRANET_SITES() {
        return ZAFLAGS_INCLUDE_INTRANET_SITES;
    }
    private static final int ZAFLAGS_NO_UI = (int)32L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_NO_UI = 32
     * }
     */
    public static int ZAFLAGS_NO_UI() {
        return ZAFLAGS_NO_UI;
    }
    private static final int ZAFLAGS_SUPPORTS_VERIFICATION = (int)64L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_SUPPORTS_VERIFICATION = 64
     * }
     */
    public static int ZAFLAGS_SUPPORTS_VERIFICATION() {
        return ZAFLAGS_SUPPORTS_VERIFICATION;
    }
    private static final int ZAFLAGS_UNC_AS_INTRANET = (int)128L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_UNC_AS_INTRANET = 128
     * }
     */
    public static int ZAFLAGS_UNC_AS_INTRANET() {
        return ZAFLAGS_UNC_AS_INTRANET;
    }
    private static final int ZAFLAGS_DETECT_INTRANET = (int)256L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_DETECT_INTRANET = 256
     * }
     */
    public static int ZAFLAGS_DETECT_INTRANET() {
        return ZAFLAGS_DETECT_INTRANET;
    }
    private static final int ZAFLAGS_USE_LOCKED_ZONES = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_USE_LOCKED_ZONES = 65536
     * }
     */
    public static int ZAFLAGS_USE_LOCKED_ZONES() {
        return ZAFLAGS_USE_LOCKED_ZONES;
    }
    private static final int ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072
     * }
     */
    public static int ZAFLAGS_VERIFY_TEMPLATE_SETTINGS() {
        return ZAFLAGS_VERIFY_TEMPLATE_SETTINGS;
    }
    private static final int ZAFLAGS_NO_CACHE = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IInternetZoneManager_0002.ZAFLAGS_NO_CACHE = 262144
     * }
     */
    public static int ZAFLAGS_NO_CACHE() {
        return ZAFLAGS_NO_CACHE;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _ZONEATTRIBUTES {
     *     ULONG cbSize;
     *     WCHAR szDisplayName[260];
     *     WCHAR szDescription[200];
     *     WCHAR szIconPath[260];
     *     DWORD dwTemplateMinLevel;
     *     DWORD dwTemplateRecommended;
     *     DWORD dwTemplateCurrentLevel;
     *     DWORD dwFlags;
     * } *LPZONEATTRIBUTES
     * }
     */
    public static final AddressLayout LPZONEATTRIBUTES = winapi.C_POINTER;
    private static final int URLZONEREG_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_DEFAULT = 0
     * }
     */
    public static int URLZONEREG_DEFAULT() {
        return URLZONEREG_DEFAULT;
    }
    private static final int URLZONEREG_HKLM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_HKLM = 1
     * }
     */
    public static int URLZONEREG_HKLM() {
        return URLZONEREG_HKLM;
    }
    private static final int URLZONEREG_HKCU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _URLZONEREG.URLZONEREG_HKCU = 2
     * }
     */
    public static int URLZONEREG_HKCU() {
        return URLZONEREG_HKCU;
    }

    private static class IID_IInternetZoneManager$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetZoneManager").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static GroupLayout IID_IInternetZoneManager$layout() {
        return IID_IInternetZoneManager$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static MemorySegment IID_IInternetZoneManager() {
        return IID_IInternetZoneManager$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManager
     * }
     */
    public static void IID_IInternetZoneManager(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManager$constants.SEGMENT, 0L, IID_IInternetZoneManager$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetZoneManagerEx$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetZoneManagerEx").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static GroupLayout IID_IInternetZoneManagerEx$layout() {
        return IID_IInternetZoneManagerEx$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static MemorySegment IID_IInternetZoneManagerEx() {
        return IID_IInternetZoneManagerEx$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx
     * }
     */
    public static void IID_IInternetZoneManagerEx(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManagerEx$constants.SEGMENT, 0L, IID_IInternetZoneManagerEx$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IInternetZoneManagerEx2$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IInternetZoneManagerEx2").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static GroupLayout IID_IInternetZoneManagerEx2$layout() {
        return IID_IInternetZoneManagerEx2$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static MemorySegment IID_IInternetZoneManagerEx2() {
        return IID_IInternetZoneManagerEx2$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IInternetZoneManagerEx2
     * }
     */
    public static void IID_IInternetZoneManagerEx2(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IInternetZoneManagerEx2$constants.SEGMENT, 0L, IID_IInternetZoneManagerEx2$constants.LAYOUT.byteSize());
    }

    private static class CLSID_SoftDistExt$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CLSID_SoftDistExt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static GroupLayout CLSID_SoftDistExt$layout() {
        return CLSID_SoftDistExt$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static MemorySegment CLSID_SoftDistExt() {
        return CLSID_SoftDistExt$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID CLSID_SoftDistExt
     * }
     */
    public static void CLSID_SoftDistExt(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CLSID_SoftDistExt$constants.SEGMENT, 0L, CLSID_SoftDistExt$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagCODEBASEHOLD {
     *     ULONG cbSize;
     *     LPWSTR szDistUnit;
     *     LPWSTR szCodeBase;
     *     DWORD dwVersionMS;
     *     DWORD dwVersionLS;
     *     DWORD dwStyle;
     * } *LPCODEBASEHOLD
     * }
     */
    public static final AddressLayout LPCODEBASEHOLD = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _tagSOFTDISTINFO {
     *     ULONG cbSize;
     *     DWORD dwFlags;
     *     DWORD dwAdState;
     *     LPWSTR szTitle;
     *     LPWSTR szAbstract;
     *     LPWSTR szHREF;
     *     DWORD dwInstalledVersionMS;
     *     DWORD dwInstalledVersionLS;
     *     DWORD dwUpdateVersionMS;
     *     DWORD dwUpdateVersionLS;
     *     DWORD dwAdvertisedVersionMS;
     *     DWORD dwAdvertisedVersionLS;
     *     DWORD dwReserved;
     * } *LPSOFTDISTINFO
     * }
     */
    public static final AddressLayout LPSOFTDISTINFO = winapi.C_POINTER;

    private static class __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_ISoftDistExt$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ISoftDistExt").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static GroupLayout IID_ISoftDistExt$layout() {
        return IID_ISoftDistExt$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static MemorySegment IID_ISoftDistExt() {
        return IID_ISoftDistExt$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ISoftDistExt
     * }
     */
    public static void IID_ISoftDistExt(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ISoftDistExt$constants.SEGMENT, 0L, IID_ISoftDistExt$constants.LAYOUT.byteSize());
    }

    private static class GetSoftwareUpdateInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetSoftwareUpdateInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static FunctionDescriptor GetSoftwareUpdateInfo$descriptor() {
        return GetSoftwareUpdateInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static MethodHandle GetSoftwareUpdateInfo$handle() {
        return GetSoftwareUpdateInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static MemorySegment GetSoftwareUpdateInfo$address() {
        return GetSoftwareUpdateInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetSoftwareUpdateInfo(LPCWSTR szDistUnit, LPSOFTDISTINFO psdi)
     * }
     */
    public static int GetSoftwareUpdateInfo(MemorySegment szDistUnit, MemorySegment psdi) {
        var mh$ = GetSoftwareUpdateInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSoftwareUpdateInfo", szDistUnit, psdi);
            }
            return (int)mh$.invokeExact(szDistUnit, psdi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetSoftwareUpdateAdvertisementState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetSoftwareUpdateAdvertisementState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static FunctionDescriptor SetSoftwareUpdateAdvertisementState$descriptor() {
        return SetSoftwareUpdateAdvertisementState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static MethodHandle SetSoftwareUpdateAdvertisementState$handle() {
        return SetSoftwareUpdateAdvertisementState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static MemorySegment SetSoftwareUpdateAdvertisementState$address() {
        return SetSoftwareUpdateAdvertisementState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SetSoftwareUpdateAdvertisementState(LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS)
     * }
     */
    public static int SetSoftwareUpdateAdvertisementState(MemorySegment szDistUnit, int dwAdState, int dwAdvertisedVersionMS, int dwAdvertisedVersionLS) {
        var mh$ = SetSoftwareUpdateAdvertisementState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetSoftwareUpdateAdvertisementState", szDistUnit, dwAdState, dwAdvertisedVersionMS, dwAdvertisedVersionLS);
            }
            return (int)mh$.invokeExact(szDistUnit, dwAdState, dwAdvertisedVersionMS, dwAdvertisedVersionLS);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef ICatalogFileInfo *LPCATALOGFILEINFO
     * }
     */
    public static final AddressLayout LPCATALOGFILEINFO = winapi.C_POINTER;

    private static class IID_ICatalogFileInfo$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_ICatalogFileInfo").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static GroupLayout IID_ICatalogFileInfo$layout() {
        return IID_ICatalogFileInfo$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static MemorySegment IID_ICatalogFileInfo() {
        return IID_ICatalogFileInfo$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_ICatalogFileInfo
     * }
     */
    public static void IID_ICatalogFileInfo(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_ICatalogFileInfo$constants.SEGMENT, 0L, IID_ICatalogFileInfo$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IDataFilter *LPDATAFILTER
     * }
     */
    public static final AddressLayout LPDATAFILTER = winapi.C_POINTER;

    private static class IID_IDataFilter$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IDataFilter").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static GroupLayout IID_IDataFilter$layout() {
        return IID_IDataFilter$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static MemorySegment IID_IDataFilter() {
        return IID_IDataFilter$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IDataFilter
     * }
     */
    public static void IID_IDataFilter(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IDataFilter$constants.SEGMENT, 0L, IID_IDataFilter$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY
     * }
     */
    public static final AddressLayout LPENCODINGFILTERFACTORY = winapi.C_POINTER;

    private static class IID_IEncodingFilterFactory$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IEncodingFilterFactory").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static GroupLayout IID_IEncodingFilterFactory$layout() {
        return IID_IEncodingFilterFactory$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static MemorySegment IID_IEncodingFilterFactory() {
        return IID_IEncodingFilterFactory$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IEncodingFilterFactory
     * }
     */
    public static void IID_IEncodingFilterFactory(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IEncodingFilterFactory$constants.SEGMENT, 0L, IID_IEncodingFilterFactory$constants.LAYOUT.byteSize());
    }

    private static class IsLoggingEnabledA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IsLoggingEnabledA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static FunctionDescriptor IsLoggingEnabledA$descriptor() {
        return IsLoggingEnabledA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static MethodHandle IsLoggingEnabledA$handle() {
        return IsLoggingEnabledA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static MemorySegment IsLoggingEnabledA$address() {
        return IsLoggingEnabledA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledA(LPCSTR pszUrl)
     * }
     */
    public static int IsLoggingEnabledA(MemorySegment pszUrl) {
        var mh$ = IsLoggingEnabledA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsLoggingEnabledA", pszUrl);
            }
            return (int)mh$.invokeExact(pszUrl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsLoggingEnabledW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IsLoggingEnabledW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static FunctionDescriptor IsLoggingEnabledW$descriptor() {
        return IsLoggingEnabledW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static MethodHandle IsLoggingEnabledW$handle() {
        return IsLoggingEnabledW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static MemorySegment IsLoggingEnabledW$address() {
        return IsLoggingEnabledW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsLoggingEnabledW(LPCWSTR pwszUrl)
     * }
     */
    public static int IsLoggingEnabledW(MemorySegment pwszUrl) {
        var mh$ = IsLoggingEnabledW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsLoggingEnabledW", pwszUrl);
            }
            return (int)mh$.invokeExact(pwszUrl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagHIT_LOGGING_INFO {
     *     DWORD dwStructSize;
     *     LPSTR lpszLoggedUrlName;
     *     SYSTEMTIME StartTime;
     *     SYSTEMTIME EndTime;
     *     LPSTR lpszExtendedInfo;
     * } *LPHIT_LOGGING_INFO
     * }
     */
    public static final AddressLayout LPHIT_LOGGING_INFO = winapi.C_POINTER;

    private static class WriteHitLogging {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WriteHitLogging");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static FunctionDescriptor WriteHitLogging$descriptor() {
        return WriteHitLogging.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static MethodHandle WriteHitLogging$handle() {
        return WriteHitLogging.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static MemorySegment WriteHitLogging$address() {
        return WriteHitLogging.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL WriteHitLogging(LPHIT_LOGGING_INFO lpLogginginfo)
     * }
     */
    public static int WriteHitLogging(MemorySegment lpLogginginfo) {
        var mh$ = WriteHitLogging.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteHitLogging", lpLogginginfo);
            }
            return (int)mh$.invokeExact(lpLogginginfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("GUID_CUSTOM_CONFIRMOBJECTSAFETY").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static GroupLayout GUID_CUSTOM_CONFIRMOBJECTSAFETY$layout() {
        return GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static MemorySegment GUID_CUSTOM_CONFIRMOBJECTSAFETY() {
        return GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY
     * }
     */
    public static void GUID_CUSTOM_CONFIRMOBJECTSAFETY(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.SEGMENT, 0L, GUID_CUSTOM_CONFIRMOBJECTSAFETY$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IWrappedProtocol *LPIWRAPPEDPROTOCOL
     * }
     */
    public static final AddressLayout LPIWRAPPEDPROTOCOL = winapi.C_POINTER;

    private static class IID_IWrappedProtocol$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IWrappedProtocol").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static GroupLayout IID_IWrappedProtocol$layout() {
        return IID_IWrappedProtocol$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static MemorySegment IID_IWrappedProtocol() {
        return IID_IWrappedProtocol$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IWrappedProtocol
     * }
     */
    public static void IID_IWrappedProtocol(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IWrappedProtocol$constants.SEGMENT, 0L, IID_IWrappedProtocol$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IGetBindHandle *LPGETBINDHANDLE
     * }
     */
    public static final AddressLayout LPGETBINDHANDLE = winapi.C_POINTER;
    private static final int BINDHANDLETYPES_APPCACHE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_APPCACHE = 0
     * }
     */
    public static int BINDHANDLETYPES_APPCACHE() {
        return BINDHANDLETYPES_APPCACHE;
    }
    private static final int BINDHANDLETYPES_DEPENDENCY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_DEPENDENCY = 1
     * }
     */
    public static int BINDHANDLETYPES_DEPENDENCY() {
        return BINDHANDLETYPES_DEPENDENCY;
    }
    private static final int BINDHANDLETYPES_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __MIDL_IGetBindHandle_0001.BINDHANDLETYPES_COUNT = 2
     * }
     */
    public static int BINDHANDLETYPES_COUNT() {
        return BINDHANDLETYPES_COUNT;
    }

    private static class IID_IGetBindHandle$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IGetBindHandle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static GroupLayout IID_IGetBindHandle$layout() {
        return IID_IGetBindHandle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static MemorySegment IID_IGetBindHandle() {
        return IID_IGetBindHandle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IGetBindHandle
     * }
     */
    public static void IID_IGetBindHandle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IGetBindHandle$constants.SEGMENT, 0L, IID_IGetBindHandle$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _tagPROTOCOL_ARGUMENT {
     *     LPCWSTR szMethod;
     *     LPCWSTR szTargetUrl;
     * } *LPPROTOCOL_ARGUMENT
     * }
     */
    public static final AddressLayout LPPROTOCOL_ARGUMENT = winapi.C_POINTER;

    private static class __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IBindCallbackRedirect *LPBINDCALLBACKREDIRECT
     * }
     */
    public static final AddressLayout LPBINDCALLBACKREDIRECT = winapi.C_POINTER;

    private static class IID_IBindCallbackRedirect$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IBindCallbackRedirect").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static GroupLayout IID_IBindCallbackRedirect$layout() {
        return IID_IBindCallbackRedirect$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static MemorySegment IID_IBindCallbackRedirect() {
        return IID_IBindCallbackRedirect$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindCallbackRedirect
     * }
     */
    public static void IID_IBindCallbackRedirect(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindCallbackRedirect$constants.SEGMENT, 0L, IID_IBindCallbackRedirect$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IID_IBindHttpSecurity$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IBindHttpSecurity").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static GroupLayout IID_IBindHttpSecurity$layout() {
        return IID_IBindHttpSecurity$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static MemorySegment IID_IBindHttpSecurity() {
        return IID_IBindHttpSecurity$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IBindHttpSecurity
     * }
     */
    public static void IID_IBindHttpSecurity(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IBindHttpSecurity$constants.SEGMENT, 0L, IID_IBindHttpSecurity$constants.LAYOUT.byteSize());
    }

    private static class __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$layout() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$segment() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec() {
        return __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class IBinding_GetBindResult_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBinding_GetBindResult_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBinding_GetBindResult_Proxy$descriptor() {
        return IBinding_GetBindResult_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBinding_GetBindResult_Proxy$handle() {
        return IBinding_GetBindResult_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IBinding_GetBindResult_Proxy$address() {
        return IBinding_GetBindResult_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Proxy(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved)
     * }
     */
    public static int IBinding_GetBindResult_Proxy(MemorySegment This, MemorySegment pclsidProtocol, MemorySegment pdwResult, MemorySegment pszResult, MemorySegment pdwReserved) {
        var mh$ = IBinding_GetBindResult_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_GetBindResult_Proxy", This, pclsidProtocol, pdwResult, pszResult, pdwReserved);
            }
            return (int)mh$.invokeExact(This, pclsidProtocol, pdwResult, pszResult, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBinding_GetBindResult_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBinding_GetBindResult_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static FunctionDescriptor IBinding_GetBindResult_Stub$descriptor() {
        return IBinding_GetBindResult_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static MethodHandle IBinding_GetBindResult_Stub$handle() {
        return IBinding_GetBindResult_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static MemorySegment IBinding_GetBindResult_Stub$address() {
        return IBinding_GetBindResult_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBinding_GetBindResult_Stub(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD dwReserved)
     * }
     */
    public static int IBinding_GetBindResult_Stub(MemorySegment This, MemorySegment pclsidProtocol, MemorySegment pdwResult, MemorySegment pszResult, int dwReserved) {
        var mh$ = IBinding_GetBindResult_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBinding_GetBindResult_Stub", This, pclsidProtocol, pdwResult, pszResult, dwReserved);
            }
            return (int)mh$.invokeExact(This, pclsidProtocol, pdwResult, pszResult, dwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_GetBindInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindStatusCallback_GetBindInfo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_GetBindInfo_Proxy$descriptor() {
        return IBindStatusCallback_GetBindInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static MethodHandle IBindStatusCallback_GetBindInfo_Proxy$handle() {
        return IBindStatusCallback_GetBindInfo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static MemorySegment IBindStatusCallback_GetBindInfo_Proxy$address() {
        return IBindStatusCallback_GetBindInfo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo)
     * }
     */
    public static int IBindStatusCallback_GetBindInfo_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo) {
        var mh$ = IBindStatusCallback_GetBindInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_GetBindInfo_Proxy", This, grfBINDF, pbindinfo);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_GetBindInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindStatusCallback_GetBindInfo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_GetBindInfo_Stub$descriptor() {
        return IBindStatusCallback_GetBindInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_GetBindInfo_Stub$handle() {
        return IBindStatusCallback_GetBindInfo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MemorySegment IBindStatusCallback_GetBindInfo_Stub$address() {
        return IBindStatusCallback_GetBindInfo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_GetBindInfo_Stub(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_GetBindInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_GetBindInfo_Stub", This, grfBINDF, pbindinfo, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_OnDataAvailable_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindStatusCallback_OnDataAvailable_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_OnDataAvailable_Proxy$descriptor() {
        return IBindStatusCallback_OnDataAvailable_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_OnDataAvailable_Proxy$handle() {
        return IBindStatusCallback_OnDataAvailable_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static MemorySegment IBindStatusCallback_OnDataAvailable_Proxy$address() {
        return IBindStatusCallback_OnDataAvailable_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_OnDataAvailable_Proxy(MemorySegment This, int grfBSCF, int dwSize, MemorySegment pformatetc, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_OnDataAvailable_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_OnDataAvailable_Proxy", This, grfBSCF, dwSize, pformatetc, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBSCF, dwSize, pformatetc, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallback_OnDataAvailable_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindStatusCallback_OnDataAvailable_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static FunctionDescriptor IBindStatusCallback_OnDataAvailable_Stub$descriptor() {
        return IBindStatusCallback_OnDataAvailable_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MethodHandle IBindStatusCallback_OnDataAvailable_Stub$handle() {
        return IBindStatusCallback_OnDataAvailable_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static MemorySegment IBindStatusCallback_OnDataAvailable_Stub$address() {
        return IBindStatusCallback_OnDataAvailable_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, RemFORMATETC *pformatetc, RemSTGMEDIUM *pstgmed)
     * }
     */
    public static int IBindStatusCallback_OnDataAvailable_Stub(MemorySegment This, int grfBSCF, int dwSize, MemorySegment pformatetc, MemorySegment pstgmed) {
        var mh$ = IBindStatusCallback_OnDataAvailable_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallback_OnDataAvailable_Stub", This, grfBSCF, dwSize, pformatetc, pstgmed);
            }
            return (int)mh$.invokeExact(This, grfBSCF, dwSize, pformatetc, pstgmed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallbackEx_GetBindInfoEx_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindStatusCallbackEx_GetBindInfoEx_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_GetBindInfoEx_Proxy$descriptor() {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_GetBindInfoEx_Proxy$handle() {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IBindStatusCallbackEx_GetBindInfoEx_Proxy$address() {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx *This, DWORD *grfBINDF, BINDINFO *pbindinfo, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static int IBindStatusCallbackEx_GetBindInfoEx_Proxy(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment grfBINDF2, MemorySegment pdwReserved) {
        var mh$ = IBindStatusCallbackEx_GetBindInfoEx_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_GetBindInfoEx_Proxy", This, grfBINDF, pbindinfo, grfBINDF2, pdwReserved);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, grfBINDF2, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindStatusCallbackEx_GetBindInfoEx_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindStatusCallbackEx_GetBindInfoEx_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IBindStatusCallbackEx_GetBindInfoEx_Stub$descriptor() {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IBindStatusCallbackEx_GetBindInfoEx_Stub$handle() {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IBindStatusCallbackEx_GetBindInfoEx_Stub$address() {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx *This, DWORD *grfBINDF, RemBINDINFO *pbindinfo, RemSTGMEDIUM *pstgmed, DWORD *grfBINDF2, DWORD *pdwReserved)
     * }
     */
    public static int IBindStatusCallbackEx_GetBindInfoEx_Stub(MemorySegment This, MemorySegment grfBINDF, MemorySegment pbindinfo, MemorySegment pstgmed, MemorySegment grfBINDF2, MemorySegment pdwReserved) {
        var mh$ = IBindStatusCallbackEx_GetBindInfoEx_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindStatusCallbackEx_GetBindInfoEx_Stub", This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
            }
            return (int)mh$.invokeExact(This, grfBINDF, pbindinfo, pstgmed, grfBINDF2, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetInfo_QueryOption_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IWinInetInfo_QueryOption_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_QueryOption_Proxy$descriptor() {
        return IWinInetInfo_QueryOption_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MethodHandle IWinInetInfo_QueryOption_Proxy$handle() {
        return IWinInetInfo_QueryOption_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MemorySegment IWinInetInfo_QueryOption_Proxy$address() {
        return IWinInetInfo_QueryOption_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Proxy(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf)
     * }
     */
    public static int IWinInetInfo_QueryOption_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf) {
        var mh$ = IWinInetInfo_QueryOption_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_QueryOption_Proxy", This, dwOption, pBuffer, pcbBuf);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetInfo_QueryOption_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IWinInetInfo_QueryOption_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static FunctionDescriptor IWinInetInfo_QueryOption_Stub$descriptor() {
        return IWinInetInfo_QueryOption_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MethodHandle IWinInetInfo_QueryOption_Stub$handle() {
        return IWinInetInfo_QueryOption_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static MemorySegment IWinInetInfo_QueryOption_Stub$address() {
        return IWinInetInfo_QueryOption_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetInfo_QueryOption_Stub(IWinInetInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf)
     * }
     */
    public static int IWinInetInfo_QueryOption_Stub(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf) {
        var mh$ = IWinInetInfo_QueryOption_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetInfo_QueryOption_Stub", This, dwOption, pBuffer, pcbBuf);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetHttpInfo_QueryInfo_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IWinInetHttpInfo_QueryInfo_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_QueryInfo_Proxy$descriptor() {
        return IWinInetHttpInfo_QueryInfo_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_QueryInfo_Proxy$handle() {
        return IWinInetHttpInfo_QueryInfo_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IWinInetHttpInfo_QueryInfo_Proxy$address() {
        return IWinInetHttpInfo_QueryInfo_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static int IWinInetHttpInfo_QueryInfo_Proxy(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf, MemorySegment pdwFlags, MemorySegment pdwReserved) {
        var mh$ = IWinInetHttpInfo_QueryInfo_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_QueryInfo_Proxy", This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IWinInetHttpInfo_QueryInfo_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IWinInetHttpInfo_QueryInfo_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static FunctionDescriptor IWinInetHttpInfo_QueryInfo_Stub$descriptor() {
        return IWinInetHttpInfo_QueryInfo_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MethodHandle IWinInetHttpInfo_QueryInfo_Stub$handle() {
        return IWinInetHttpInfo_QueryInfo_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static MemorySegment IWinInetHttpInfo_QueryInfo_Stub$address() {
        return IWinInetHttpInfo_QueryInfo_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo *This, DWORD dwOption, BYTE *pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved)
     * }
     */
    public static int IWinInetHttpInfo_QueryInfo_Stub(MemorySegment This, int dwOption, MemorySegment pBuffer, MemorySegment pcbBuf, MemorySegment pdwFlags, MemorySegment pdwReserved) {
        var mh$ = IWinInetHttpInfo_QueryInfo_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IWinInetHttpInfo_QueryInfo_Stub", This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
            }
            return (int)mh$.invokeExact(This, dwOption, pBuffer, pcbBuf, pdwFlags, pdwReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToStorage_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindHost_MonikerBindToStorage_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToStorage_Proxy$descriptor() {
        return IBindHost_MonikerBindToStorage_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToStorage_Proxy$handle() {
        return IBindHost_MonikerBindToStorage_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_MonikerBindToStorage_Proxy$address() {
        return IBindHost_MonikerBindToStorage_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToStorage_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToStorage_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToStorage_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToStorage_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindHost_MonikerBindToStorage_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToStorage_Stub$descriptor() {
        return IBindHost_MonikerBindToStorage_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToStorage_Stub$handle() {
        return IBindHost_MonikerBindToStorage_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_MonikerBindToStorage_Stub$address() {
        return IBindHost_MonikerBindToStorage_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToStorage_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToStorage_Stub(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToStorage_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToStorage_Stub", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToObject_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindHost_MonikerBindToObject_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToObject_Proxy$descriptor() {
        return IBindHost_MonikerBindToObject_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToObject_Proxy$handle() {
        return IBindHost_MonikerBindToObject_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_MonikerBindToObject_Proxy$address() {
        return IBindHost_MonikerBindToObject_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Proxy(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToObject_Proxy(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToObject_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToObject_Proxy", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IBindHost_MonikerBindToObject_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IBindHost_MonikerBindToObject_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static FunctionDescriptor IBindHost_MonikerBindToObject_Stub$descriptor() {
        return IBindHost_MonikerBindToObject_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MethodHandle IBindHost_MonikerBindToObject_Stub$handle() {
        return IBindHost_MonikerBindToObject_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static MemorySegment IBindHost_MonikerBindToObject_Stub$address() {
        return IBindHost_MonikerBindToObject_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IBindHost_MonikerBindToObject_Stub(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, IUnknown **ppvObj)
     * }
     */
    public static int IBindHost_MonikerBindToObject_Stub(MemorySegment This, MemorySegment pMk, MemorySegment pBC, MemorySegment pBSC, MemorySegment riid, MemorySegment ppvObj) {
        var mh$ = IBindHost_MonikerBindToObject_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IBindHost_MonikerBindToObject_Stub", This, pMk, pBC, pBSC, riid, ppvObj);
            }
            return (int)mh$.invokeExact(This, pMk, pBC, pBSC, riid, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PIDMSI_STATUS_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_NORMAL = 0
     * }
     */
    public static int PIDMSI_STATUS_NORMAL() {
        return PIDMSI_STATUS_NORMAL;
    }
    private static final int PIDMSI_STATUS_NEW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_NEW = 1
     * }
     */
    public static int PIDMSI_STATUS_NEW() {
        return PIDMSI_STATUS_NEW;
    }
    private static final int PIDMSI_STATUS_PRELIM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_PRELIM = 2
     * }
     */
    public static int PIDMSI_STATUS_PRELIM() {
        return PIDMSI_STATUS_PRELIM;
    }
    private static final int PIDMSI_STATUS_DRAFT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_DRAFT = 3
     * }
     */
    public static int PIDMSI_STATUS_DRAFT() {
        return PIDMSI_STATUS_DRAFT;
    }
    private static final int PIDMSI_STATUS_INPROGRESS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_INPROGRESS = 4
     * }
     */
    public static int PIDMSI_STATUS_INPROGRESS() {
        return PIDMSI_STATUS_INPROGRESS;
    }
    private static final int PIDMSI_STATUS_EDIT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_EDIT = 5
     * }
     */
    public static int PIDMSI_STATUS_EDIT() {
        return PIDMSI_STATUS_EDIT;
    }
    private static final int PIDMSI_STATUS_REVIEW = (int)6L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_REVIEW = 6
     * }
     */
    public static int PIDMSI_STATUS_REVIEW() {
        return PIDMSI_STATUS_REVIEW;
    }
    private static final int PIDMSI_STATUS_PROOF = (int)7L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_PROOF = 7
     * }
     */
    public static int PIDMSI_STATUS_PROOF() {
        return PIDMSI_STATUS_PROOF;
    }
    private static final int PIDMSI_STATUS_FINAL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_FINAL = 8
     * }
     */
    public static int PIDMSI_STATUS_FINAL() {
        return PIDMSI_STATUS_FINAL;
    }
    private static final int PIDMSI_STATUS_OTHER = (int)32767L;
    /**
     * {@snippet lang=c :
     * enum PIDMSI_STATUS_VALUE.PIDMSI_STATUS_OTHER = 32767
     * }
     */
    public static int PIDMSI_STATUS_OTHER() {
        return PIDMSI_STATUS_OTHER;
    }

    private static class StgConvertVariantToProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StgConvertVariantToProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static FunctionDescriptor StgConvertVariantToProperty$descriptor() {
        return StgConvertVariantToProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static MethodHandle StgConvertVariantToProperty$handle() {
        return StgConvertVariantToProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static MemorySegment StgConvertVariantToProperty$address() {
        return StgConvertVariantToProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SERIALIZEDPROPERTYVALUE *StgConvertVariantToProperty(const PROPVARIANT *pvar, USHORT CodePage, SERIALIZEDPROPERTYVALUE *pprop, ULONG *pcb, PROPID pid, BOOLEAN fReserved, ULONG *pcIndirect)
     * }
     */
    public static MemorySegment StgConvertVariantToProperty(MemorySegment pvar, short CodePage, MemorySegment pprop, MemorySegment pcb, int pid, byte fReserved, MemorySegment pcIndirect) {
        var mh$ = StgConvertVariantToProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StgConvertVariantToProperty", pvar, CodePage, pprop, pcb, pid, fReserved, pcIndirect);
            }
            return (MemorySegment)mh$.invokeExact(pvar, CodePage, pprop, pcb, pid, fReserved, pcIndirect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$layout() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$segment() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec() {
        return __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$layout() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$segment() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec() {
        return __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class CreateStdProgressIndicator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateStdProgressIndicator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static FunctionDescriptor CreateStdProgressIndicator$descriptor() {
        return CreateStdProgressIndicator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static MethodHandle CreateStdProgressIndicator$handle() {
        return CreateStdProgressIndicator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static MemorySegment CreateStdProgressIndicator$address() {
        return CreateStdProgressIndicator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateStdProgressIndicator(HWND hwndParent, LPCOLESTR pszTitle, IBindStatusCallback *pIbscCaller, IBindStatusCallback **ppIbsc)
     * }
     */
    public static int CreateStdProgressIndicator(MemorySegment hwndParent, MemorySegment pszTitle, MemorySegment pIbscCaller, MemorySegment ppIbsc) {
        var mh$ = CreateStdProgressIndicator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateStdProgressIndicator", hwndParent, pszTitle, pIbscCaller, ppIbsc);
            }
            return (int)mh$.invokeExact(hwndParent, pszTitle, pIbscCaller, ppIbsc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_StdOle$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_StdOle").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static GroupLayout IID_StdOle$layout() {
        return IID_StdOle$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static MemorySegment IID_StdOle() {
        return IID_StdOle$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_StdOle
     * }
     */
    public static void IID_StdOle(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_StdOle$constants.SEGMENT, 0L, IID_StdOle$constants.LAYOUT.byteSize());
    }

    private static class SysAllocString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysAllocString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static FunctionDescriptor SysAllocString$descriptor() {
        return SysAllocString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static MethodHandle SysAllocString$handle() {
        return SysAllocString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static MemorySegment SysAllocString$address() {
        return SysAllocString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocString(const OLECHAR *psz)
     * }
     */
    public static MemorySegment SysAllocString(MemorySegment psz) {
        var mh$ = SysAllocString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocString", psz);
            }
            return (MemorySegment)mh$.invokeExact(psz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReAllocString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysReAllocString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static FunctionDescriptor SysReAllocString$descriptor() {
        return SysReAllocString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static MethodHandle SysReAllocString$handle() {
        return SysReAllocString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static MemorySegment SysReAllocString$address() {
        return SysReAllocString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT SysReAllocString(BSTR *pbstr, const OLECHAR *psz)
     * }
     */
    public static int SysReAllocString(MemorySegment pbstr, MemorySegment psz) {
        var mh$ = SysReAllocString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReAllocString", pbstr, psz);
            }
            return (int)mh$.invokeExact(pbstr, psz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAllocStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysAllocStringLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static FunctionDescriptor SysAllocStringLen$descriptor() {
        return SysAllocStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static MethodHandle SysAllocStringLen$handle() {
        return SysAllocStringLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static MemorySegment SysAllocStringLen$address() {
        return SysAllocStringLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocStringLen(const OLECHAR *strIn, UINT ui)
     * }
     */
    public static MemorySegment SysAllocStringLen(MemorySegment strIn, int ui) {
        var mh$ = SysAllocStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocStringLen", strIn, ui);
            }
            return (MemorySegment)mh$.invokeExact(strIn, ui);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReAllocStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysReAllocStringLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static FunctionDescriptor SysReAllocStringLen$descriptor() {
        return SysReAllocStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static MethodHandle SysReAllocStringLen$handle() {
        return SysReAllocStringLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static MemorySegment SysReAllocStringLen$address() {
        return SysReAllocStringLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT SysReAllocStringLen(BSTR *pbstr, const OLECHAR *psz, unsigned int len)
     * }
     */
    public static int SysReAllocStringLen(MemorySegment pbstr, MemorySegment psz, int len) {
        var mh$ = SysReAllocStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReAllocStringLen", pbstr, psz, len);
            }
            return (int)mh$.invokeExact(pbstr, psz, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAddRefString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysAddRefString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysAddRefString$descriptor() {
        return SysAddRefString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysAddRefString$handle() {
        return SysAddRefString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static MemorySegment SysAddRefString$address() {
        return SysAddRefString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SysAddRefString(BSTR bstrString)
     * }
     */
    public static int SysAddRefString(MemorySegment bstrString) {
        var mh$ = SysAddRefString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAddRefString", bstrString);
            }
            return (int)mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysReleaseString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysReleaseString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysReleaseString$descriptor() {
        return SysReleaseString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysReleaseString$handle() {
        return SysReleaseString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static MemorySegment SysReleaseString$address() {
        return SysReleaseString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SysReleaseString(BSTR bstrString)
     * }
     */
    public static void SysReleaseString(MemorySegment bstrString) {
        var mh$ = SysReleaseString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysReleaseString", bstrString);
            }
            mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysFreeString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysFreeString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static FunctionDescriptor SysFreeString$descriptor() {
        return SysFreeString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static MethodHandle SysFreeString$handle() {
        return SysFreeString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static MemorySegment SysFreeString$address() {
        return SysFreeString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SysFreeString(BSTR bstrString)
     * }
     */
    public static void SysFreeString(MemorySegment bstrString) {
        var mh$ = SysFreeString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysFreeString", bstrString);
            }
            mh$.invokeExact(bstrString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysStringLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysStringLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static FunctionDescriptor SysStringLen$descriptor() {
        return SysStringLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static MethodHandle SysStringLen$handle() {
        return SysStringLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static MemorySegment SysStringLen$address() {
        return SysStringLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT SysStringLen(BSTR pbstr)
     * }
     */
    public static int SysStringLen(MemorySegment pbstr) {
        var mh$ = SysStringLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysStringLen", pbstr);
            }
            return (int)mh$.invokeExact(pbstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysStringByteLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysStringByteLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static FunctionDescriptor SysStringByteLen$descriptor() {
        return SysStringByteLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static MethodHandle SysStringByteLen$handle() {
        return SysStringByteLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static MemorySegment SysStringByteLen$address() {
        return SysStringByteLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT SysStringByteLen(BSTR bstr)
     * }
     */
    public static int SysStringByteLen(MemorySegment bstr) {
        var mh$ = SysStringByteLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysStringByteLen", bstr);
            }
            return (int)mh$.invokeExact(bstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SysAllocStringByteLen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SysAllocStringByteLen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static FunctionDescriptor SysAllocStringByteLen$descriptor() {
        return SysAllocStringByteLen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static MethodHandle SysAllocStringByteLen$handle() {
        return SysAllocStringByteLen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static MemorySegment SysAllocStringByteLen$address() {
        return SysAllocStringByteLen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BSTR SysAllocStringByteLen(LPCSTR psz, UINT len)
     * }
     */
    public static MemorySegment SysAllocStringByteLen(MemorySegment psz, int len) {
        var mh$ = SysAllocStringByteLen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SysAllocStringByteLen", psz, len);
            }
            return (MemorySegment)mh$.invokeExact(psz, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DosDateTimeToVariantTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_SHORT,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DosDateTimeToVariantTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static FunctionDescriptor DosDateTimeToVariantTime$descriptor() {
        return DosDateTimeToVariantTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static MethodHandle DosDateTimeToVariantTime$handle() {
        return DosDateTimeToVariantTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static MemorySegment DosDateTimeToVariantTime$address() {
        return DosDateTimeToVariantTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE *pvtime)
     * }
     */
    public static int DosDateTimeToVariantTime(short wDosDate, short wDosTime, MemorySegment pvtime) {
        var mh$ = DosDateTimeToVariantTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DosDateTimeToVariantTime", wDosDate, wDosTime, pvtime);
            }
            return (int)mh$.invokeExact(wDosDate, wDosTime, pvtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantTimeToDosDateTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VariantTimeToDosDateTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static FunctionDescriptor VariantTimeToDosDateTime$descriptor() {
        return VariantTimeToDosDateTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static MethodHandle VariantTimeToDosDateTime$handle() {
        return VariantTimeToDosDateTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static MemorySegment VariantTimeToDosDateTime$address() {
        return VariantTimeToDosDateTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT VariantTimeToDosDateTime(DOUBLE vtime, USHORT *pwDosDate, USHORT *pwDosTime)
     * }
     */
    public static int VariantTimeToDosDateTime(double vtime, MemorySegment pwDosDate, MemorySegment pwDosTime) {
        var mh$ = VariantTimeToDosDateTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantTimeToDosDateTime", vtime, pwDosDate, pwDosTime);
            }
            return (int)mh$.invokeExact(vtime, pwDosDate, pwDosTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SystemTimeToVariantTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SystemTimeToVariantTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static FunctionDescriptor SystemTimeToVariantTime$descriptor() {
        return SystemTimeToVariantTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static MethodHandle SystemTimeToVariantTime$handle() {
        return SystemTimeToVariantTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static MemorySegment SystemTimeToVariantTime$address() {
        return SystemTimeToVariantTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime)
     * }
     */
    public static int SystemTimeToVariantTime(MemorySegment lpSystemTime, MemorySegment pvtime) {
        var mh$ = SystemTimeToVariantTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SystemTimeToVariantTime", lpSystemTime, pvtime);
            }
            return (int)mh$.invokeExact(lpSystemTime, pvtime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantTimeToSystemTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VariantTimeToSystemTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static FunctionDescriptor VariantTimeToSystemTime$descriptor() {
        return VariantTimeToSystemTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static MethodHandle VariantTimeToSystemTime$handle() {
        return VariantTimeToSystemTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static MemorySegment VariantTimeToSystemTime$address() {
        return VariantTimeToSystemTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern INT VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime)
     * }
     */
    public static int VariantTimeToSystemTime(double vtime, MemorySegment lpSystemTime) {
        var mh$ = VariantTimeToSystemTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantTimeToSystemTime", vtime, lpSystemTime);
            }
            return (int)mh$.invokeExact(vtime, lpSystemTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayAllocDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocDescriptor$descriptor() {
        return SafeArrayAllocDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayAllocDescriptor$handle() {
        return SafeArrayAllocDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MemorySegment SafeArrayAllocDescriptor$address() {
        return SafeArrayAllocDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayAllocDescriptor(int cDims, MemorySegment ppsaOut) {
        var mh$ = SafeArrayAllocDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocDescriptor", cDims, ppsaOut);
            }
            return (int)mh$.invokeExact(cDims, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocDescriptorEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayAllocDescriptorEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocDescriptorEx$descriptor() {
        return SafeArrayAllocDescriptorEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayAllocDescriptorEx$handle() {
        return SafeArrayAllocDescriptorEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static MemorySegment SafeArrayAllocDescriptorEx$address() {
        return SafeArrayAllocDescriptorEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayAllocDescriptorEx(short vt, int cDims, MemorySegment ppsaOut) {
        var mh$ = SafeArrayAllocDescriptorEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocDescriptorEx", vt, cDims, ppsaOut);
            }
            return (int)mh$.invokeExact(vt, cDims, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAllocData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayAllocData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayAllocData$descriptor() {
        return SafeArrayAllocData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayAllocData$handle() {
        return SafeArrayAllocData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayAllocData$address() {
        return SafeArrayAllocData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAllocData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayAllocData(MemorySegment psa) {
        var mh$ = SafeArrayAllocData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAllocData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static FunctionDescriptor SafeArrayCreate$descriptor() {
        return SafeArrayCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static MethodHandle SafeArrayCreate$handle() {
        return SafeArrayCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static MemorySegment SafeArrayCreate$address() {
        return SafeArrayCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound)
     * }
     */
    public static MemorySegment SafeArrayCreate(short vt, int cDims, MemorySegment rgsabound) {
        var mh$ = SafeArrayCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreate", vt, cDims, rgsabound);
            }
            return (MemorySegment)mh$.invokeExact(vt, cDims, rgsabound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayCreateEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateEx$descriptor() {
        return SafeArrayCreateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static MethodHandle SafeArrayCreateEx$handle() {
        return SafeArrayCreateEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateEx$address() {
        return SafeArrayCreateEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND *rgsabound, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateEx(short vt, int cDims, MemorySegment rgsabound, MemorySegment pvExtra) {
        var mh$ = SafeArrayCreateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateEx", vt, cDims, rgsabound, pvExtra);
            }
            return (MemorySegment)mh$.invokeExact(vt, cDims, rgsabound, pvExtra);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCopyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayCopyData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static FunctionDescriptor SafeArrayCopyData$descriptor() {
        return SafeArrayCopyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static MethodHandle SafeArrayCopyData$handle() {
        return SafeArrayCopyData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static MemorySegment SafeArrayCopyData$address() {
        return SafeArrayCopyData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget)
     * }
     */
    public static int SafeArrayCopyData(MemorySegment psaSource, MemorySegment psaTarget) {
        var mh$ = SafeArrayCopyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCopyData", psaSource, psaTarget);
            }
            return (int)mh$.invokeExact(psaSource, psaTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayReleaseDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayReleaseDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayReleaseDescriptor$descriptor() {
        return SafeArrayReleaseDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayReleaseDescriptor$handle() {
        return SafeArrayReleaseDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayReleaseDescriptor$address() {
        return SafeArrayReleaseDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SafeArrayReleaseDescriptor(SAFEARRAY *psa)
     * }
     */
    public static void SafeArrayReleaseDescriptor(MemorySegment psa) {
        var mh$ = SafeArrayReleaseDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayReleaseDescriptor", psa);
            }
            mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroyDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayDestroyDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroyDescriptor$descriptor() {
        return SafeArrayDestroyDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroyDescriptor$handle() {
        return SafeArrayDestroyDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayDestroyDescriptor$address() {
        return SafeArrayDestroyDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyDescriptor(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroyDescriptor(MemorySegment psa) {
        var mh$ = SafeArrayDestroyDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroyDescriptor", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayReleaseData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayReleaseData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static FunctionDescriptor SafeArrayReleaseData$descriptor() {
        return SafeArrayReleaseData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static MethodHandle SafeArrayReleaseData$handle() {
        return SafeArrayReleaseData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static MemorySegment SafeArrayReleaseData$address() {
        return SafeArrayReleaseData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SafeArrayReleaseData(PVOID pData)
     * }
     */
    public static void SafeArrayReleaseData(MemorySegment pData) {
        var mh$ = SafeArrayReleaseData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayReleaseData", pData);
            }
            mh$.invokeExact(pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroyData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayDestroyData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroyData$descriptor() {
        return SafeArrayDestroyData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroyData$handle() {
        return SafeArrayDestroyData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayDestroyData$address() {
        return SafeArrayDestroyData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroyData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroyData(MemorySegment psa) {
        var mh$ = SafeArrayDestroyData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroyData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayAddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static FunctionDescriptor SafeArrayAddRef$descriptor() {
        return SafeArrayAddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static MethodHandle SafeArrayAddRef$handle() {
        return SafeArrayAddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static MemorySegment SafeArrayAddRef$address() {
        return SafeArrayAddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAddRef(SAFEARRAY *psa, PVOID *ppDataToRelease)
     * }
     */
    public static int SafeArrayAddRef(MemorySegment psa, MemorySegment ppDataToRelease) {
        var mh$ = SafeArrayAddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAddRef", psa, ppDataToRelease);
            }
            return (int)mh$.invokeExact(psa, ppDataToRelease);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayDestroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayDestroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayDestroy$descriptor() {
        return SafeArrayDestroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayDestroy$handle() {
        return SafeArrayDestroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayDestroy$address() {
        return SafeArrayDestroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayDestroy(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayDestroy(MemorySegment psa) {
        var mh$ = SafeArrayDestroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayDestroy", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayRedim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayRedim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static FunctionDescriptor SafeArrayRedim$descriptor() {
        return SafeArrayRedim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static MethodHandle SafeArrayRedim$handle() {
        return SafeArrayRedim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static MemorySegment SafeArrayRedim$address() {
        return SafeArrayRedim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayRedim(SAFEARRAY *psa, SAFEARRAYBOUND *psaboundNew)
     * }
     */
    public static int SafeArrayRedim(MemorySegment psa, MemorySegment psaboundNew) {
        var mh$ = SafeArrayRedim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayRedim", psa, psaboundNew);
            }
            return (int)mh$.invokeExact(psa, psaboundNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetDim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayGetDim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayGetDim$descriptor() {
        return SafeArrayGetDim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayGetDim$handle() {
        return SafeArrayGetDim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayGetDim$address() {
        return SafeArrayGetDim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT SafeArrayGetDim(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayGetDim(MemorySegment psa) {
        var mh$ = SafeArrayGetDim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetDim", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetElemsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayGetElemsize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayGetElemsize$descriptor() {
        return SafeArrayGetElemsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayGetElemsize$handle() {
        return SafeArrayGetElemsize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayGetElemsize$address() {
        return SafeArrayGetElemsize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern UINT SafeArrayGetElemsize(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayGetElemsize(MemorySegment psa) {
        var mh$ = SafeArrayGetElemsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetElemsize", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetUBound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayGetUBound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static FunctionDescriptor SafeArrayGetUBound$descriptor() {
        return SafeArrayGetUBound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static MethodHandle SafeArrayGetUBound$handle() {
        return SafeArrayGetUBound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static MemorySegment SafeArrayGetUBound$address() {
        return SafeArrayGetUBound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetUBound(SAFEARRAY *psa, UINT nDim, LONG *plUbound)
     * }
     */
    public static int SafeArrayGetUBound(MemorySegment psa, int nDim, MemorySegment plUbound) {
        var mh$ = SafeArrayGetUBound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetUBound", psa, nDim, plUbound);
            }
            return (int)mh$.invokeExact(psa, nDim, plUbound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetLBound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayGetLBound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static FunctionDescriptor SafeArrayGetLBound$descriptor() {
        return SafeArrayGetLBound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static MethodHandle SafeArrayGetLBound$handle() {
        return SafeArrayGetLBound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static MemorySegment SafeArrayGetLBound$address() {
        return SafeArrayGetLBound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetLBound(SAFEARRAY *psa, UINT nDim, LONG *plLbound)
     * }
     */
    public static int SafeArrayGetLBound(MemorySegment psa, int nDim, MemorySegment plLbound) {
        var mh$ = SafeArrayGetLBound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetLBound", psa, nDim, plLbound);
            }
            return (int)mh$.invokeExact(psa, nDim, plLbound);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayLock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayLock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayLock$descriptor() {
        return SafeArrayLock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayLock$handle() {
        return SafeArrayLock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayLock$address() {
        return SafeArrayLock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayLock(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayLock(MemorySegment psa) {
        var mh$ = SafeArrayLock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayLock", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayUnlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayUnlock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayUnlock$descriptor() {
        return SafeArrayUnlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayUnlock$handle() {
        return SafeArrayUnlock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayUnlock$address() {
        return SafeArrayUnlock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnlock(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayUnlock(MemorySegment psa) {
        var mh$ = SafeArrayUnlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayUnlock", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayAccessData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayAccessData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static FunctionDescriptor SafeArrayAccessData$descriptor() {
        return SafeArrayAccessData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static MethodHandle SafeArrayAccessData$handle() {
        return SafeArrayAccessData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static MemorySegment SafeArrayAccessData$address() {
        return SafeArrayAccessData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayAccessData(SAFEARRAY *psa, void **ppvData)
     * }
     */
    public static int SafeArrayAccessData(MemorySegment psa, MemorySegment ppvData) {
        var mh$ = SafeArrayAccessData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayAccessData", psa, ppvData);
            }
            return (int)mh$.invokeExact(psa, ppvData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayUnaccessData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayUnaccessData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static FunctionDescriptor SafeArrayUnaccessData$descriptor() {
        return SafeArrayUnaccessData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static MethodHandle SafeArrayUnaccessData$handle() {
        return SafeArrayUnaccessData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static MemorySegment SafeArrayUnaccessData$address() {
        return SafeArrayUnaccessData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayUnaccessData(SAFEARRAY *psa)
     * }
     */
    public static int SafeArrayUnaccessData(MemorySegment psa) {
        var mh$ = SafeArrayUnaccessData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayUnaccessData", psa);
            }
            return (int)mh$.invokeExact(psa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayGetElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static FunctionDescriptor SafeArrayGetElement$descriptor() {
        return SafeArrayGetElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MethodHandle SafeArrayGetElement$handle() {
        return SafeArrayGetElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MemorySegment SafeArrayGetElement$address() {
        return SafeArrayGetElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static int SafeArrayGetElement(MemorySegment psa, MemorySegment rgIndices, MemorySegment pv) {
        var mh$ = SafeArrayGetElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetElement", psa, rgIndices, pv);
            }
            return (int)mh$.invokeExact(psa, rgIndices, pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayPutElement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayPutElement");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static FunctionDescriptor SafeArrayPutElement$descriptor() {
        return SafeArrayPutElement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MethodHandle SafeArrayPutElement$handle() {
        return SafeArrayPutElement.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static MemorySegment SafeArrayPutElement$address() {
        return SafeArrayPutElement.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPutElement(SAFEARRAY *psa, LONG *rgIndices, void *pv)
     * }
     */
    public static int SafeArrayPutElement(MemorySegment psa, MemorySegment rgIndices, MemorySegment pv) {
        var mh$ = SafeArrayPutElement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayPutElement", psa, rgIndices, pv);
            }
            return (int)mh$.invokeExact(psa, rgIndices, pv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static FunctionDescriptor SafeArrayCopy$descriptor() {
        return SafeArrayCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static MethodHandle SafeArrayCopy$handle() {
        return SafeArrayCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static MemorySegment SafeArrayCopy$address() {
        return SafeArrayCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayCopy(SAFEARRAY *psa, SAFEARRAY **ppsaOut)
     * }
     */
    public static int SafeArrayCopy(MemorySegment psa, MemorySegment ppsaOut) {
        var mh$ = SafeArrayCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCopy", psa, ppsaOut);
            }
            return (int)mh$.invokeExact(psa, ppsaOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayPtrOfIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayPtrOfIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static FunctionDescriptor SafeArrayPtrOfIndex$descriptor() {
        return SafeArrayPtrOfIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static MethodHandle SafeArrayPtrOfIndex$handle() {
        return SafeArrayPtrOfIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static MemorySegment SafeArrayPtrOfIndex$address() {
        return SafeArrayPtrOfIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayPtrOfIndex(SAFEARRAY *psa, LONG *rgIndices, void **ppvData)
     * }
     */
    public static int SafeArrayPtrOfIndex(MemorySegment psa, MemorySegment rgIndices, MemorySegment ppvData) {
        var mh$ = SafeArrayPtrOfIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayPtrOfIndex", psa, rgIndices, ppvData);
            }
            return (int)mh$.invokeExact(psa, rgIndices, ppvData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArraySetRecordInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArraySetRecordInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static FunctionDescriptor SafeArraySetRecordInfo$descriptor() {
        return SafeArraySetRecordInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static MethodHandle SafeArraySetRecordInfo$handle() {
        return SafeArraySetRecordInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static MemorySegment SafeArraySetRecordInfo$address() {
        return SafeArraySetRecordInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetRecordInfo(SAFEARRAY *psa, IRecordInfo *prinfo)
     * }
     */
    public static int SafeArraySetRecordInfo(MemorySegment psa, MemorySegment prinfo) {
        var mh$ = SafeArraySetRecordInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArraySetRecordInfo", psa, prinfo);
            }
            return (int)mh$.invokeExact(psa, prinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetRecordInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayGetRecordInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static FunctionDescriptor SafeArrayGetRecordInfo$descriptor() {
        return SafeArrayGetRecordInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static MethodHandle SafeArrayGetRecordInfo$handle() {
        return SafeArrayGetRecordInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static MemorySegment SafeArrayGetRecordInfo$address() {
        return SafeArrayGetRecordInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetRecordInfo(SAFEARRAY *psa, IRecordInfo **prinfo)
     * }
     */
    public static int SafeArrayGetRecordInfo(MemorySegment psa, MemorySegment prinfo) {
        var mh$ = SafeArrayGetRecordInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetRecordInfo", psa, prinfo);
            }
            return (int)mh$.invokeExact(psa, prinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArraySetIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArraySetIID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static FunctionDescriptor SafeArraySetIID$descriptor() {
        return SafeArraySetIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static MethodHandle SafeArraySetIID$handle() {
        return SafeArraySetIID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static MemorySegment SafeArraySetIID$address() {
        return SafeArraySetIID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArraySetIID(SAFEARRAY *psa, const GUID *const guid)
     * }
     */
    public static int SafeArraySetIID(MemorySegment psa, MemorySegment guid) {
        var mh$ = SafeArraySetIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArraySetIID", psa, guid);
            }
            return (int)mh$.invokeExact(psa, guid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetIID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayGetIID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static FunctionDescriptor SafeArrayGetIID$descriptor() {
        return SafeArrayGetIID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static MethodHandle SafeArrayGetIID$handle() {
        return SafeArrayGetIID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static MemorySegment SafeArrayGetIID$address() {
        return SafeArrayGetIID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetIID(SAFEARRAY *psa, GUID *pguid)
     * }
     */
    public static int SafeArrayGetIID(MemorySegment psa, MemorySegment pguid) {
        var mh$ = SafeArrayGetIID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetIID", psa, pguid);
            }
            return (int)mh$.invokeExact(psa, pguid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayGetVartype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayGetVartype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static FunctionDescriptor SafeArrayGetVartype$descriptor() {
        return SafeArrayGetVartype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static MethodHandle SafeArrayGetVartype$handle() {
        return SafeArrayGetVartype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static MemorySegment SafeArrayGetVartype$address() {
        return SafeArrayGetVartype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SafeArrayGetVartype(SAFEARRAY *psa, VARTYPE *pvt)
     * }
     */
    public static int SafeArrayGetVartype(MemorySegment psa, MemorySegment pvt) {
        var mh$ = SafeArrayGetVartype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayGetVartype", psa, pvt);
            }
            return (int)mh$.invokeExact(psa, pvt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayCreateVector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateVector$descriptor() {
        return SafeArrayCreateVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static MethodHandle SafeArrayCreateVector$handle() {
        return SafeArrayCreateVector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static MemorySegment SafeArrayCreateVector$address() {
        return SafeArrayCreateVector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements)
     * }
     */
    public static MemorySegment SafeArrayCreateVector(short vt, int lLbound, int cElements) {
        var mh$ = SafeArrayCreateVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateVector", vt, lLbound, cElements);
            }
            return (MemorySegment)mh$.invokeExact(vt, lLbound, cElements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SafeArrayCreateVectorEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SafeArrayCreateVectorEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static FunctionDescriptor SafeArrayCreateVectorEx$descriptor() {
        return SafeArrayCreateVectorEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static MethodHandle SafeArrayCreateVectorEx$handle() {
        return SafeArrayCreateVectorEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateVectorEx$address() {
        return SafeArrayCreateVectorEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern SAFEARRAY *SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra)
     * }
     */
    public static MemorySegment SafeArrayCreateVectorEx(short vt, int lLbound, int cElements, MemorySegment pvExtra) {
        var mh$ = SafeArrayCreateVectorEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SafeArrayCreateVectorEx", vt, lLbound, cElements, pvExtra);
            }
            return (MemorySegment)mh$.invokeExact(vt, lLbound, cElements, pvExtra);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VariantInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static FunctionDescriptor VariantInit$descriptor() {
        return VariantInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static MethodHandle VariantInit$handle() {
        return VariantInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static MemorySegment VariantInit$address() {
        return VariantInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void VariantInit(VARIANTARG *pvarg)
     * }
     */
    public static void VariantInit(MemorySegment pvarg) {
        var mh$ = VariantInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantInit", pvarg);
            }
            mh$.invokeExact(pvarg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VariantClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static FunctionDescriptor VariantClear$descriptor() {
        return VariantClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static MethodHandle VariantClear$handle() {
        return VariantClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static MemorySegment VariantClear$address() {
        return VariantClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantClear(VARIANTARG *pvarg)
     * }
     */
    public static int VariantClear(MemorySegment pvarg) {
        var mh$ = VariantClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantClear", pvarg);
            }
            return (int)mh$.invokeExact(pvarg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantCopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VariantCopy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static FunctionDescriptor VariantCopy$descriptor() {
        return VariantCopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MethodHandle VariantCopy$handle() {
        return VariantCopy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MemorySegment VariantCopy$address() {
        return VariantCopy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantCopy(VARIANTARG *pvargDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static int VariantCopy(MemorySegment pvargDest, MemorySegment pvargSrc) {
        var mh$ = VariantCopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantCopy", pvargDest, pvargSrc);
            }
            return (int)mh$.invokeExact(pvargDest, pvargSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantCopyInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VariantCopyInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static FunctionDescriptor VariantCopyInd$descriptor() {
        return VariantCopyInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MethodHandle VariantCopyInd$handle() {
        return VariantCopyInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static MemorySegment VariantCopyInd$address() {
        return VariantCopyInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantCopyInd(VARIANT *pvarDest, const VARIANTARG *pvargSrc)
     * }
     */
    public static int VariantCopyInd(MemorySegment pvarDest, MemorySegment pvargSrc) {
        var mh$ = VariantCopyInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantCopyInd", pvarDest, pvargSrc);
            }
            return (int)mh$.invokeExact(pvarDest, pvargSrc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantChangeType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VariantChangeType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static FunctionDescriptor VariantChangeType$descriptor() {
        return VariantChangeType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MethodHandle VariantChangeType$handle() {
        return VariantChangeType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MemorySegment VariantChangeType$address() {
        return VariantChangeType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantChangeType(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static int VariantChangeType(MemorySegment pvargDest, MemorySegment pvarSrc, short wFlags, short vt) {
        var mh$ = VariantChangeType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantChangeType", pvargDest, pvarSrc, wFlags, vt);
            }
            return (int)mh$.invokeExact(pvargDest, pvarSrc, wFlags, vt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VariantChangeTypeEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VariantChangeTypeEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static FunctionDescriptor VariantChangeTypeEx$descriptor() {
        return VariantChangeTypeEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MethodHandle VariantChangeTypeEx$handle() {
        return VariantChangeTypeEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static MemorySegment VariantChangeTypeEx$address() {
        return VariantChangeTypeEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VariantChangeTypeEx(VARIANTARG *pvargDest, const VARIANTARG *pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt)
     * }
     */
    public static int VariantChangeTypeEx(MemorySegment pvargDest, MemorySegment pvarSrc, int lcid, short wFlags, short vt) {
        var mh$ = VariantChangeTypeEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VariantChangeTypeEx", pvargDest, pvarSrc, lcid, wFlags, vt);
            }
            return (int)mh$.invokeExact(pvargDest, pvarSrc, lcid, wFlags, vt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VectorFromBstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VectorFromBstr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static FunctionDescriptor VectorFromBstr$descriptor() {
        return VectorFromBstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static MethodHandle VectorFromBstr$handle() {
        return VectorFromBstr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static MemorySegment VectorFromBstr$address() {
        return VectorFromBstr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VectorFromBstr(BSTR bstr, SAFEARRAY **ppsa)
     * }
     */
    public static int VectorFromBstr(MemorySegment bstr, MemorySegment ppsa) {
        var mh$ = VectorFromBstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VectorFromBstr", bstr, ppsa);
            }
            return (int)mh$.invokeExact(bstr, ppsa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class BstrFromVector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("BstrFromVector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static FunctionDescriptor BstrFromVector$descriptor() {
        return BstrFromVector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static MethodHandle BstrFromVector$handle() {
        return BstrFromVector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static MemorySegment BstrFromVector$address() {
        return BstrFromVector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT BstrFromVector(SAFEARRAY *psa, BSTR *pbstr)
     * }
     */
    public static int BstrFromVector(MemorySegment psa, MemorySegment pbstr) {
        var mh$ = BstrFromVector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("BstrFromVector", psa, pbstr);
            }
            return (int)mh$.invokeExact(psa, pbstr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI2$descriptor() {
        return VarUI1FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI2$handle() {
        return VarUI1FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromI2$address() {
        return VarUI1FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI2(SHORT sIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI2(short sIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI2", sIn, pbOut);
            }
            return (int)mh$.invokeExact(sIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI4$descriptor() {
        return VarUI1FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI4$handle() {
        return VarUI1FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromI4$address() {
        return VarUI1FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI4(LONG lIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI4(int lIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI4", lIn, pbOut);
            }
            return (int)mh$.invokeExact(lIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI8$descriptor() {
        return VarUI1FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI8$handle() {
        return VarUI1FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromI8$address() {
        return VarUI1FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI8(LONG64 i64In, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI8(long i64In, MemorySegment pbOut) {
        var mh$ = VarUI1FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI8", i64In, pbOut);
            }
            return (int)mh$.invokeExact(i64In, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromR4$descriptor() {
        return VarUI1FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromR4$handle() {
        return VarUI1FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromR4$address() {
        return VarUI1FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR4(FLOAT fltIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromR4(float fltIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromR4", fltIn, pbOut);
            }
            return (int)mh$.invokeExact(fltIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromR8$descriptor() {
        return VarUI1FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromR8$handle() {
        return VarUI1FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromR8$address() {
        return VarUI1FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromR8(DOUBLE dblIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromR8(double dblIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromR8", dblIn, pbOut);
            }
            return (int)mh$.invokeExact(dblIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromCy$descriptor() {
        return VarUI1FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromCy$handle() {
        return VarUI1FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromCy$address() {
        return VarUI1FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromCy(CY cyIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromCy(MemorySegment cyIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromCy", cyIn, pbOut);
            }
            return (int)mh$.invokeExact(cyIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDate$descriptor() {
        return VarUI1FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDate$handle() {
        return VarUI1FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromDate$address() {
        return VarUI1FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDate(DATE dateIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDate(double dateIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDate", dateIn, pbOut);
            }
            return (int)mh$.invokeExact(dateIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromStr$descriptor() {
        return VarUI1FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromStr$handle() {
        return VarUI1FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromStr$address() {
        return VarUI1FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pbOut) {
        var mh$ = VarUI1FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromStr", strIn, lcid, dwFlags, pbOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDisp$descriptor() {
        return VarUI1FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDisp$handle() {
        return VarUI1FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromDisp$address() {
        return VarUI1FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDisp(IDispatch *pdispIn, LCID lcid, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pbOut) {
        var mh$ = VarUI1FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDisp", pdispIn, lcid, pbOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromBool$descriptor() {
        return VarUI1FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromBool$handle() {
        return VarUI1FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromBool$address() {
        return VarUI1FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromBool(VARIANT_BOOL boolIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromBool(short boolIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromBool", boolIn, pbOut);
            }
            return (int)mh$.invokeExact(boolIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromI1$descriptor() {
        return VarUI1FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromI1$handle() {
        return VarUI1FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromI1$address() {
        return VarUI1FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromI1(CHAR cIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromI1(byte cIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromI1", cIn, pbOut);
            }
            return (int)mh$.invokeExact(cIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI2$descriptor() {
        return VarUI1FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI2$handle() {
        return VarUI1FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromUI2$address() {
        return VarUI1FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI2(USHORT uiIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI2(short uiIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI2", uiIn, pbOut);
            }
            return (int)mh$.invokeExact(uiIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI4$descriptor() {
        return VarUI1FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI4$handle() {
        return VarUI1FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromUI4$address() {
        return VarUI1FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI4(ULONG ulIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI4(int ulIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI4", ulIn, pbOut);
            }
            return (int)mh$.invokeExact(ulIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromUI8$descriptor() {
        return VarUI1FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromUI8$handle() {
        return VarUI1FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromUI8$address() {
        return VarUI1FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromUI8(ULONG64 ui64In, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromUI8(long ui64In, MemorySegment pbOut) {
        var mh$ = VarUI1FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromUI8", ui64In, pbOut);
            }
            return (int)mh$.invokeExact(ui64In, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI1FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI1FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static FunctionDescriptor VarUI1FromDec$descriptor() {
        return VarUI1FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static MethodHandle VarUI1FromDec$handle() {
        return VarUI1FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static MemorySegment VarUI1FromDec$address() {
        return VarUI1FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI1FromDec(const DECIMAL *pdecIn, BYTE *pbOut)
     * }
     */
    public static int VarUI1FromDec(MemorySegment pdecIn, MemorySegment pbOut) {
        var mh$ = VarUI1FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI1FromDec", pdecIn, pbOut);
            }
            return (int)mh$.invokeExact(pdecIn, pbOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI1$descriptor() {
        return VarI2FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI1$handle() {
        return VarI2FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromUI1$address() {
        return VarI2FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI1(BYTE bIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI1(byte bIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI1", bIn, psOut);
            }
            return (int)mh$.invokeExact(bIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI4$descriptor() {
        return VarI2FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI4$handle() {
        return VarI2FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromI4$address() {
        return VarI2FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI4(LONG lIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromI4(int lIn, MemorySegment psOut) {
        var mh$ = VarI2FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI4", lIn, psOut);
            }
            return (int)mh$.invokeExact(lIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI8$descriptor() {
        return VarI2FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI8$handle() {
        return VarI2FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromI8$address() {
        return VarI2FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI8(LONG64 i64In, SHORT *psOut)
     * }
     */
    public static int VarI2FromI8(long i64In, MemorySegment psOut) {
        var mh$ = VarI2FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI8", i64In, psOut);
            }
            return (int)mh$.invokeExact(i64In, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromR4$descriptor() {
        return VarI2FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromR4$handle() {
        return VarI2FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromR4$address() {
        return VarI2FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR4(FLOAT fltIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromR4(float fltIn, MemorySegment psOut) {
        var mh$ = VarI2FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromR4", fltIn, psOut);
            }
            return (int)mh$.invokeExact(fltIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromR8$descriptor() {
        return VarI2FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromR8$handle() {
        return VarI2FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromR8$address() {
        return VarI2FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromR8(DOUBLE dblIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromR8(double dblIn, MemorySegment psOut) {
        var mh$ = VarI2FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromR8", dblIn, psOut);
            }
            return (int)mh$.invokeExact(dblIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromCy$descriptor() {
        return VarI2FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromCy$handle() {
        return VarI2FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromCy$address() {
        return VarI2FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromCy(CY cyIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromCy(MemorySegment cyIn, MemorySegment psOut) {
        var mh$ = VarI2FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromCy", cyIn, psOut);
            }
            return (int)mh$.invokeExact(cyIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDate$descriptor() {
        return VarI2FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDate$handle() {
        return VarI2FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromDate$address() {
        return VarI2FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDate(DATE dateIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromDate(double dateIn, MemorySegment psOut) {
        var mh$ = VarI2FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDate", dateIn, psOut);
            }
            return (int)mh$.invokeExact(dateIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromStr$descriptor() {
        return VarI2FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromStr$handle() {
        return VarI2FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromStr$address() {
        return VarI2FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, SHORT *psOut)
     * }
     */
    public static int VarI2FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment psOut) {
        var mh$ = VarI2FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromStr", strIn, lcid, dwFlags, psOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDisp$descriptor() {
        return VarI2FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDisp$handle() {
        return VarI2FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromDisp$address() {
        return VarI2FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDisp(IDispatch *pdispIn, LCID lcid, SHORT *psOut)
     * }
     */
    public static int VarI2FromDisp(MemorySegment pdispIn, int lcid, MemorySegment psOut) {
        var mh$ = VarI2FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDisp", pdispIn, lcid, psOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromBool$descriptor() {
        return VarI2FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromBool$handle() {
        return VarI2FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromBool$address() {
        return VarI2FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromBool(VARIANT_BOOL boolIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromBool(short boolIn, MemorySegment psOut) {
        var mh$ = VarI2FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromBool", boolIn, psOut);
            }
            return (int)mh$.invokeExact(boolIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromI1$descriptor() {
        return VarI2FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromI1$handle() {
        return VarI2FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromI1$address() {
        return VarI2FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromI1(CHAR cIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromI1(byte cIn, MemorySegment psOut) {
        var mh$ = VarI2FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromI1", cIn, psOut);
            }
            return (int)mh$.invokeExact(cIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI2$descriptor() {
        return VarI2FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI2$handle() {
        return VarI2FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromUI2$address() {
        return VarI2FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI2(USHORT uiIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI2(short uiIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI2", uiIn, psOut);
            }
            return (int)mh$.invokeExact(uiIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI4$descriptor() {
        return VarI2FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI4$handle() {
        return VarI2FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromUI4$address() {
        return VarI2FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI4(ULONG ulIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI4(int ulIn, MemorySegment psOut) {
        var mh$ = VarI2FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI4", ulIn, psOut);
            }
            return (int)mh$.invokeExact(ulIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromUI8$descriptor() {
        return VarI2FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromUI8$handle() {
        return VarI2FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromUI8$address() {
        return VarI2FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromUI8(ULONG64 ui64In, SHORT *psOut)
     * }
     */
    public static int VarI2FromUI8(long ui64In, MemorySegment psOut) {
        var mh$ = VarI2FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromUI8", ui64In, psOut);
            }
            return (int)mh$.invokeExact(ui64In, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI2FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI2FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static FunctionDescriptor VarI2FromDec$descriptor() {
        return VarI2FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static MethodHandle VarI2FromDec$handle() {
        return VarI2FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static MemorySegment VarI2FromDec$address() {
        return VarI2FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI2FromDec(const DECIMAL *pdecIn, SHORT *psOut)
     * }
     */
    public static int VarI2FromDec(MemorySegment pdecIn, MemorySegment psOut) {
        var mh$ = VarI2FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI2FromDec", pdecIn, psOut);
            }
            return (int)mh$.invokeExact(pdecIn, psOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI1$descriptor() {
        return VarI4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI1$handle() {
        return VarI4FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromUI1$address() {
        return VarI4FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI1(BYTE bIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI1(byte bIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI1", bIn, plOut);
            }
            return (int)mh$.invokeExact(bIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI2$descriptor() {
        return VarI4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI2$handle() {
        return VarI4FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromI2$address() {
        return VarI4FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI2(SHORT sIn, LONG *plOut)
     * }
     */
    public static int VarI4FromI2(short sIn, MemorySegment plOut) {
        var mh$ = VarI4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI2", sIn, plOut);
            }
            return (int)mh$.invokeExact(sIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI8$descriptor() {
        return VarI4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI8$handle() {
        return VarI4FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromI8$address() {
        return VarI4FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI8(LONG64 i64In, LONG *plOut)
     * }
     */
    public static int VarI4FromI8(long i64In, MemorySegment plOut) {
        var mh$ = VarI4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI8", i64In, plOut);
            }
            return (int)mh$.invokeExact(i64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromR4$descriptor() {
        return VarI4FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromR4$handle() {
        return VarI4FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromR4$address() {
        return VarI4FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR4(FLOAT fltIn, LONG *plOut)
     * }
     */
    public static int VarI4FromR4(float fltIn, MemorySegment plOut) {
        var mh$ = VarI4FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromR4", fltIn, plOut);
            }
            return (int)mh$.invokeExact(fltIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromR8$descriptor() {
        return VarI4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromR8$handle() {
        return VarI4FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromR8$address() {
        return VarI4FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromR8(DOUBLE dblIn, LONG *plOut)
     * }
     */
    public static int VarI4FromR8(double dblIn, MemorySegment plOut) {
        var mh$ = VarI4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromR8", dblIn, plOut);
            }
            return (int)mh$.invokeExact(dblIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromCy$descriptor() {
        return VarI4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromCy$handle() {
        return VarI4FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromCy$address() {
        return VarI4FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromCy(CY cyIn, LONG *plOut)
     * }
     */
    public static int VarI4FromCy(MemorySegment cyIn, MemorySegment plOut) {
        var mh$ = VarI4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromCy", cyIn, plOut);
            }
            return (int)mh$.invokeExact(cyIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDate$descriptor() {
        return VarI4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDate$handle() {
        return VarI4FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromDate$address() {
        return VarI4FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDate(DATE dateIn, LONG *plOut)
     * }
     */
    public static int VarI4FromDate(double dateIn, MemorySegment plOut) {
        var mh$ = VarI4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDate", dateIn, plOut);
            }
            return (int)mh$.invokeExact(dateIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromStr$descriptor() {
        return VarI4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromStr$handle() {
        return VarI4FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromStr$address() {
        return VarI4FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG *plOut)
     * }
     */
    public static int VarI4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment plOut) {
        var mh$ = VarI4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromStr", strIn, lcid, dwFlags, plOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDisp$descriptor() {
        return VarI4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDisp$handle() {
        return VarI4FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromDisp$address() {
        return VarI4FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDisp(IDispatch *pdispIn, LCID lcid, LONG *plOut)
     * }
     */
    public static int VarI4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment plOut) {
        var mh$ = VarI4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDisp", pdispIn, lcid, plOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromBool$descriptor() {
        return VarI4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromBool$handle() {
        return VarI4FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromBool$address() {
        return VarI4FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromBool(VARIANT_BOOL boolIn, LONG *plOut)
     * }
     */
    public static int VarI4FromBool(short boolIn, MemorySegment plOut) {
        var mh$ = VarI4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromBool", boolIn, plOut);
            }
            return (int)mh$.invokeExact(boolIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromI1$descriptor() {
        return VarI4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromI1$handle() {
        return VarI4FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromI1$address() {
        return VarI4FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromI1(CHAR cIn, LONG *plOut)
     * }
     */
    public static int VarI4FromI1(byte cIn, MemorySegment plOut) {
        var mh$ = VarI4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromI1", cIn, plOut);
            }
            return (int)mh$.invokeExact(cIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI2$descriptor() {
        return VarI4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI2$handle() {
        return VarI4FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromUI2$address() {
        return VarI4FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI2(USHORT uiIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI2(short uiIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI2", uiIn, plOut);
            }
            return (int)mh$.invokeExact(uiIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI4$descriptor() {
        return VarI4FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI4$handle() {
        return VarI4FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromUI4$address() {
        return VarI4FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI4(ULONG ulIn, LONG *plOut)
     * }
     */
    public static int VarI4FromUI4(int ulIn, MemorySegment plOut) {
        var mh$ = VarI4FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI4", ulIn, plOut);
            }
            return (int)mh$.invokeExact(ulIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromUI8$descriptor() {
        return VarI4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromUI8$handle() {
        return VarI4FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromUI8$address() {
        return VarI4FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromUI8(ULONG64 ui64In, LONG *plOut)
     * }
     */
    public static int VarI4FromUI8(long ui64In, MemorySegment plOut) {
        var mh$ = VarI4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromUI8", ui64In, plOut);
            }
            return (int)mh$.invokeExact(ui64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI4FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static FunctionDescriptor VarI4FromDec$descriptor() {
        return VarI4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static MethodHandle VarI4FromDec$handle() {
        return VarI4FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static MemorySegment VarI4FromDec$address() {
        return VarI4FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI4FromDec(const DECIMAL *pdecIn, LONG *plOut)
     * }
     */
    public static int VarI4FromDec(MemorySegment pdecIn, MemorySegment plOut) {
        var mh$ = VarI4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI4FromDec", pdecIn, plOut);
            }
            return (int)mh$.invokeExact(pdecIn, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI1$descriptor() {
        return VarI8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI1$handle() {
        return VarI8FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromUI1$address() {
        return VarI8FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI1(BYTE bIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI1(byte bIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI1", bIn, pi64Out);
            }
            return (int)mh$.invokeExact(bIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromI2$descriptor() {
        return VarI8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromI2$handle() {
        return VarI8FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromI2$address() {
        return VarI8FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI2(SHORT sIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromI2(short sIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromI2", sIn, pi64Out);
            }
            return (int)mh$.invokeExact(sIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromR4$descriptor() {
        return VarI8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromR4$handle() {
        return VarI8FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromR4$address() {
        return VarI8FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR4(FLOAT fltIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromR4(float fltIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromR4", fltIn, pi64Out);
            }
            return (int)mh$.invokeExact(fltIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromR8$descriptor() {
        return VarI8FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromR8$handle() {
        return VarI8FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromR8$address() {
        return VarI8FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromR8(DOUBLE dblIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromR8(double dblIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromR8", dblIn, pi64Out);
            }
            return (int)mh$.invokeExact(dblIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromCy$descriptor() {
        return VarI8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromCy$handle() {
        return VarI8FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromCy$address() {
        return VarI8FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromCy(CY cyIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromCy(MemorySegment cyIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromCy", cyIn, pi64Out);
            }
            return (int)mh$.invokeExact(cyIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDate$descriptor() {
        return VarI8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDate$handle() {
        return VarI8FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromDate$address() {
        return VarI8FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDate(DATE dateIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDate(double dateIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDate", dateIn, pi64Out);
            }
            return (int)mh$.invokeExact(dateIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromStr$descriptor() {
        return VarI8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromStr$handle() {
        return VarI8FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromStr$address() {
        return VarI8FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pi64Out) {
        var mh$ = VarI8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromStr", strIn, lcid, dwFlags, pi64Out);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDisp$descriptor() {
        return VarI8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDisp$handle() {
        return VarI8FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromDisp$address() {
        return VarI8FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDisp(IDispatch *pdispIn, LCID lcid, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pi64Out) {
        var mh$ = VarI8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDisp", pdispIn, lcid, pi64Out);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromBool$descriptor() {
        return VarI8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromBool$handle() {
        return VarI8FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromBool$address() {
        return VarI8FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromBool(VARIANT_BOOL boolIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromBool(short boolIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromBool", boolIn, pi64Out);
            }
            return (int)mh$.invokeExact(boolIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromI1$descriptor() {
        return VarI8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromI1$handle() {
        return VarI8FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromI1$address() {
        return VarI8FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromI1(CHAR cIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromI1(byte cIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromI1", cIn, pi64Out);
            }
            return (int)mh$.invokeExact(cIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI2$descriptor() {
        return VarI8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI2$handle() {
        return VarI8FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromUI2$address() {
        return VarI8FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI2(USHORT uiIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI2(short uiIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI2", uiIn, pi64Out);
            }
            return (int)mh$.invokeExact(uiIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI4$descriptor() {
        return VarI8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI4$handle() {
        return VarI8FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromUI4$address() {
        return VarI8FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI4(ULONG ulIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI4(int ulIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI4", ulIn, pi64Out);
            }
            return (int)mh$.invokeExact(ulIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromUI8$descriptor() {
        return VarI8FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromUI8$handle() {
        return VarI8FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromUI8$address() {
        return VarI8FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromUI8(ULONG64 ui64In, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromUI8(long ui64In, MemorySegment pi64Out) {
        var mh$ = VarI8FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromUI8", ui64In, pi64Out);
            }
            return (int)mh$.invokeExact(ui64In, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI8FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarI8FromDec$descriptor() {
        return VarI8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarI8FromDec$handle() {
        return VarI8FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarI8FromDec$address() {
        return VarI8FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI8FromDec(const DECIMAL *pdecIn, LONG64 *pi64Out)
     * }
     */
    public static int VarI8FromDec(MemorySegment pdecIn, MemorySegment pi64Out) {
        var mh$ = VarI8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI8FromDec", pdecIn, pi64Out);
            }
            return (int)mh$.invokeExact(pdecIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI1$descriptor() {
        return VarR4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI1$handle() {
        return VarR4FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromUI1$address() {
        return VarR4FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI1(BYTE bIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI1(byte bIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI1", bIn, pfltOut);
            }
            return (int)mh$.invokeExact(bIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI2$descriptor() {
        return VarR4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI2$handle() {
        return VarR4FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromI2$address() {
        return VarR4FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI2(SHORT sIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI2(short sIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI2", sIn, pfltOut);
            }
            return (int)mh$.invokeExact(sIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI4$descriptor() {
        return VarR4FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI4$handle() {
        return VarR4FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromI4$address() {
        return VarR4FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI4(LONG lIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI4(int lIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI4", lIn, pfltOut);
            }
            return (int)mh$.invokeExact(lIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI8$descriptor() {
        return VarR4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI8$handle() {
        return VarR4FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromI8$address() {
        return VarR4FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI8(LONG64 i64In, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI8(long i64In, MemorySegment pfltOut) {
        var mh$ = VarR4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI8", i64In, pfltOut);
            }
            return (int)mh$.invokeExact(i64In, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromR8$descriptor() {
        return VarR4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromR8$handle() {
        return VarR4FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromR8$address() {
        return VarR4FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromR8(DOUBLE dblIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromR8(double dblIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromR8", dblIn, pfltOut);
            }
            return (int)mh$.invokeExact(dblIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromCy$descriptor() {
        return VarR4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromCy$handle() {
        return VarR4FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromCy$address() {
        return VarR4FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromCy(CY cyIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromCy(MemorySegment cyIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromCy", cyIn, pfltOut);
            }
            return (int)mh$.invokeExact(cyIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDate$descriptor() {
        return VarR4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDate$handle() {
        return VarR4FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromDate$address() {
        return VarR4FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDate(DATE dateIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDate(double dateIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDate", dateIn, pfltOut);
            }
            return (int)mh$.invokeExact(dateIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromStr$descriptor() {
        return VarR4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromStr$handle() {
        return VarR4FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromStr$address() {
        return VarR4FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pfltOut) {
        var mh$ = VarR4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromStr", strIn, lcid, dwFlags, pfltOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDisp$descriptor() {
        return VarR4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDisp$handle() {
        return VarR4FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromDisp$address() {
        return VarR4FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDisp(IDispatch *pdispIn, LCID lcid, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pfltOut) {
        var mh$ = VarR4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDisp", pdispIn, lcid, pfltOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromBool$descriptor() {
        return VarR4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromBool$handle() {
        return VarR4FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromBool$address() {
        return VarR4FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromBool(VARIANT_BOOL boolIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromBool(short boolIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromBool", boolIn, pfltOut);
            }
            return (int)mh$.invokeExact(boolIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromI1$descriptor() {
        return VarR4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromI1$handle() {
        return VarR4FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromI1$address() {
        return VarR4FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromI1(CHAR cIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromI1(byte cIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromI1", cIn, pfltOut);
            }
            return (int)mh$.invokeExact(cIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI2$descriptor() {
        return VarR4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI2$handle() {
        return VarR4FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromUI2$address() {
        return VarR4FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI2(short uiIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI2", uiIn, pfltOut);
            }
            return (int)mh$.invokeExact(uiIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI4$descriptor() {
        return VarR4FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI4$handle() {
        return VarR4FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromUI4$address() {
        return VarR4FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI4(int ulIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI4", ulIn, pfltOut);
            }
            return (int)mh$.invokeExact(ulIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromUI8$descriptor() {
        return VarR4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromUI8$handle() {
        return VarR4FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromUI8$address() {
        return VarR4FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromUI8(ULONG64 ui64In, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromUI8(long ui64In, MemorySegment pfltOut) {
        var mh$ = VarR4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromUI8", ui64In, pfltOut);
            }
            return (int)mh$.invokeExact(ui64In, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static FunctionDescriptor VarR4FromDec$descriptor() {
        return VarR4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static MethodHandle VarR4FromDec$handle() {
        return VarR4FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static MemorySegment VarR4FromDec$address() {
        return VarR4FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4FromDec(const DECIMAL *pdecIn, FLOAT *pfltOut)
     * }
     */
    public static int VarR4FromDec(MemorySegment pdecIn, MemorySegment pfltOut) {
        var mh$ = VarR4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4FromDec", pdecIn, pfltOut);
            }
            return (int)mh$.invokeExact(pdecIn, pfltOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI1$descriptor() {
        return VarR8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI1$handle() {
        return VarR8FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromUI1$address() {
        return VarR8FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI1(BYTE bIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI1(byte bIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI1", bIn, pdblOut);
            }
            return (int)mh$.invokeExact(bIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI2$descriptor() {
        return VarR8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI2$handle() {
        return VarR8FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromI2$address() {
        return VarR8FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI2(SHORT sIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI2(short sIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI2", sIn, pdblOut);
            }
            return (int)mh$.invokeExact(sIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI4$descriptor() {
        return VarR8FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI4$handle() {
        return VarR8FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromI4$address() {
        return VarR8FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI4(LONG lIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI4(int lIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI4", lIn, pdblOut);
            }
            return (int)mh$.invokeExact(lIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI8$descriptor() {
        return VarR8FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI8$handle() {
        return VarR8FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromI8$address() {
        return VarR8FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI8(LONG64 i64In, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI8(long i64In, MemorySegment pdblOut) {
        var mh$ = VarR8FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI8", i64In, pdblOut);
            }
            return (int)mh$.invokeExact(i64In, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromR4$descriptor() {
        return VarR8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromR4$handle() {
        return VarR8FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromR4$address() {
        return VarR8FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromR4(FLOAT fltIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromR4(float fltIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromR4", fltIn, pdblOut);
            }
            return (int)mh$.invokeExact(fltIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromCy$descriptor() {
        return VarR8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromCy$handle() {
        return VarR8FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromCy$address() {
        return VarR8FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromCy(CY cyIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromCy(MemorySegment cyIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromCy", cyIn, pdblOut);
            }
            return (int)mh$.invokeExact(cyIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDate$descriptor() {
        return VarR8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDate$handle() {
        return VarR8FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromDate$address() {
        return VarR8FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDate(DATE dateIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDate(double dateIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDate", dateIn, pdblOut);
            }
            return (int)mh$.invokeExact(dateIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromStr$descriptor() {
        return VarR8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromStr$handle() {
        return VarR8FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromStr$address() {
        return VarR8FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdblOut) {
        var mh$ = VarR8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromStr", strIn, lcid, dwFlags, pdblOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDisp$descriptor() {
        return VarR8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDisp$handle() {
        return VarR8FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromDisp$address() {
        return VarR8FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDisp(IDispatch *pdispIn, LCID lcid, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdblOut) {
        var mh$ = VarR8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDisp", pdispIn, lcid, pdblOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromBool$descriptor() {
        return VarR8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromBool$handle() {
        return VarR8FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromBool$address() {
        return VarR8FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromBool(short boolIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromBool", boolIn, pdblOut);
            }
            return (int)mh$.invokeExact(boolIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromI1$descriptor() {
        return VarR8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromI1$handle() {
        return VarR8FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromI1$address() {
        return VarR8FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromI1(CHAR cIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromI1(byte cIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromI1", cIn, pdblOut);
            }
            return (int)mh$.invokeExact(cIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI2$descriptor() {
        return VarR8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI2$handle() {
        return VarR8FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromUI2$address() {
        return VarR8FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI2(short uiIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI2", uiIn, pdblOut);
            }
            return (int)mh$.invokeExact(uiIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI4$descriptor() {
        return VarR8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI4$handle() {
        return VarR8FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromUI4$address() {
        return VarR8FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI4(int ulIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI4", ulIn, pdblOut);
            }
            return (int)mh$.invokeExact(ulIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromUI8$descriptor() {
        return VarR8FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromUI8$handle() {
        return VarR8FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromUI8$address() {
        return VarR8FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromUI8(ULONG64 ui64In, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromUI8(long ui64In, MemorySegment pdblOut) {
        var mh$ = VarR8FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromUI8", ui64In, pdblOut);
            }
            return (int)mh$.invokeExact(ui64In, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static FunctionDescriptor VarR8FromDec$descriptor() {
        return VarR8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static MethodHandle VarR8FromDec$handle() {
        return VarR8FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static MemorySegment VarR8FromDec$address() {
        return VarR8FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8FromDec(const DECIMAL *pdecIn, DOUBLE *pdblOut)
     * }
     */
    public static int VarR8FromDec(MemorySegment pdecIn, MemorySegment pdblOut) {
        var mh$ = VarR8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8FromDec", pdecIn, pdblOut);
            }
            return (int)mh$.invokeExact(pdecIn, pdblOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI1$descriptor() {
        return VarDateFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI1$handle() {
        return VarDateFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUI1$address() {
        return VarDateFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI1(BYTE bIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI1(byte bIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI1", bIn, pdateOut);
            }
            return (int)mh$.invokeExact(bIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI2$descriptor() {
        return VarDateFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI2$handle() {
        return VarDateFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromI2$address() {
        return VarDateFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI2(SHORT sIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI2(short sIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI2", sIn, pdateOut);
            }
            return (int)mh$.invokeExact(sIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI4$descriptor() {
        return VarDateFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI4$handle() {
        return VarDateFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromI4$address() {
        return VarDateFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI4(LONG lIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI4(int lIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI4", lIn, pdateOut);
            }
            return (int)mh$.invokeExact(lIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI8$descriptor() {
        return VarDateFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI8$handle() {
        return VarDateFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromI8$address() {
        return VarDateFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI8(LONG64 i64In, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI8(long i64In, MemorySegment pdateOut) {
        var mh$ = VarDateFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI8", i64In, pdateOut);
            }
            return (int)mh$.invokeExact(i64In, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromR4$descriptor() {
        return VarDateFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromR4$handle() {
        return VarDateFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromR4$address() {
        return VarDateFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR4(FLOAT fltIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromR4(float fltIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromR4", fltIn, pdateOut);
            }
            return (int)mh$.invokeExact(fltIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromR8$descriptor() {
        return VarDateFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromR8$handle() {
        return VarDateFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromR8$address() {
        return VarDateFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromR8(DOUBLE dblIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromR8(double dblIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromR8", dblIn, pdateOut);
            }
            return (int)mh$.invokeExact(dblIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromCy$descriptor() {
        return VarDateFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromCy$handle() {
        return VarDateFromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromCy$address() {
        return VarDateFromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromCy(CY cyIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromCy(MemorySegment cyIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromCy", cyIn, pdateOut);
            }
            return (int)mh$.invokeExact(cyIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromStr$descriptor() {
        return VarDateFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromStr$handle() {
        return VarDateFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromStr$address() {
        return VarDateFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromStr", strIn, lcid, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromDisp$descriptor() {
        return VarDateFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromDisp$handle() {
        return VarDateFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromDisp$address() {
        return VarDateFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDisp(IDispatch *pdispIn, LCID lcid, DATE *pdateOut)
     * }
     */
    public static int VarDateFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdateOut) {
        var mh$ = VarDateFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromDisp", pdispIn, lcid, pdateOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromBool$descriptor() {
        return VarDateFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromBool$handle() {
        return VarDateFromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromBool$address() {
        return VarDateFromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromBool(VARIANT_BOOL boolIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromBool(short boolIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromBool", boolIn, pdateOut);
            }
            return (int)mh$.invokeExact(boolIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromI1$descriptor() {
        return VarDateFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromI1$handle() {
        return VarDateFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromI1$address() {
        return VarDateFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromI1(CHAR cIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromI1(byte cIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromI1", cIn, pdateOut);
            }
            return (int)mh$.invokeExact(cIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI2$descriptor() {
        return VarDateFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI2$handle() {
        return VarDateFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUI2$address() {
        return VarDateFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI2(USHORT uiIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI2(short uiIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI2", uiIn, pdateOut);
            }
            return (int)mh$.invokeExact(uiIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI4$descriptor() {
        return VarDateFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI4$handle() {
        return VarDateFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUI4$address() {
        return VarDateFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI4(ULONG ulIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI4(int ulIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI4", ulIn, pdateOut);
            }
            return (int)mh$.invokeExact(ulIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUI8$descriptor() {
        return VarDateFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUI8$handle() {
        return VarDateFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUI8$address() {
        return VarDateFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUI8(ULONG64 ui64In, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUI8(long ui64In, MemorySegment pdateOut) {
        var mh$ = VarDateFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUI8", ui64In, pdateOut);
            }
            return (int)mh$.invokeExact(ui64In, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromDec$descriptor() {
        return VarDateFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromDec$handle() {
        return VarDateFromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromDec$address() {
        return VarDateFromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromDec(const DECIMAL *pdecIn, DATE *pdateOut)
     * }
     */
    public static int VarDateFromDec(MemorySegment pdecIn, MemorySegment pdateOut) {
        var mh$ = VarDateFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromDec", pdecIn, pdateOut);
            }
            return (int)mh$.invokeExact(pdecIn, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI1$descriptor() {
        return VarCyFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI1$handle() {
        return VarCyFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromUI1$address() {
        return VarCyFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI1(BYTE bIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI1(byte bIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI1", bIn, pcyOut);
            }
            return (int)mh$.invokeExact(bIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI2$descriptor() {
        return VarCyFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI2$handle() {
        return VarCyFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromI2$address() {
        return VarCyFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI2(SHORT sIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI2(short sIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI2", sIn, pcyOut);
            }
            return (int)mh$.invokeExact(sIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI4$descriptor() {
        return VarCyFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI4$handle() {
        return VarCyFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromI4$address() {
        return VarCyFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI4(LONG lIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI4(int lIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI4", lIn, pcyOut);
            }
            return (int)mh$.invokeExact(lIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI8$descriptor() {
        return VarCyFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI8$handle() {
        return VarCyFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromI8$address() {
        return VarCyFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI8(LONG64 i64In, CY *pcyOut)
     * }
     */
    public static int VarCyFromI8(long i64In, MemorySegment pcyOut) {
        var mh$ = VarCyFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI8", i64In, pcyOut);
            }
            return (int)mh$.invokeExact(i64In, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromR4$descriptor() {
        return VarCyFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromR4$handle() {
        return VarCyFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromR4$address() {
        return VarCyFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR4(FLOAT fltIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromR4(float fltIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromR4", fltIn, pcyOut);
            }
            return (int)mh$.invokeExact(fltIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromR8$descriptor() {
        return VarCyFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromR8$handle() {
        return VarCyFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromR8$address() {
        return VarCyFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromR8(DOUBLE dblIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromR8(double dblIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromR8", dblIn, pcyOut);
            }
            return (int)mh$.invokeExact(dblIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDate$descriptor() {
        return VarCyFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDate$handle() {
        return VarCyFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromDate$address() {
        return VarCyFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDate(DATE dateIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromDate(double dateIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDate", dateIn, pcyOut);
            }
            return (int)mh$.invokeExact(dateIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromStr$descriptor() {
        return VarCyFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromStr$handle() {
        return VarCyFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromStr$address() {
        return VarCyFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CY *pcyOut)
     * }
     */
    public static int VarCyFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pcyOut) {
        var mh$ = VarCyFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromStr", strIn, lcid, dwFlags, pcyOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDisp$descriptor() {
        return VarCyFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDisp$handle() {
        return VarCyFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromDisp$address() {
        return VarCyFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDisp(IDispatch *pdispIn, LCID lcid, CY *pcyOut)
     * }
     */
    public static int VarCyFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pcyOut) {
        var mh$ = VarCyFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDisp", pdispIn, lcid, pcyOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromBool$descriptor() {
        return VarCyFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromBool$handle() {
        return VarCyFromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromBool$address() {
        return VarCyFromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromBool(VARIANT_BOOL boolIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromBool(short boolIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromBool", boolIn, pcyOut);
            }
            return (int)mh$.invokeExact(boolIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromI1$descriptor() {
        return VarCyFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromI1$handle() {
        return VarCyFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromI1$address() {
        return VarCyFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromI1(CHAR cIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromI1(byte cIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromI1", cIn, pcyOut);
            }
            return (int)mh$.invokeExact(cIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI2$descriptor() {
        return VarCyFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI2$handle() {
        return VarCyFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromUI2$address() {
        return VarCyFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI2(USHORT uiIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI2(short uiIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI2", uiIn, pcyOut);
            }
            return (int)mh$.invokeExact(uiIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI4$descriptor() {
        return VarCyFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI4$handle() {
        return VarCyFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromUI4$address() {
        return VarCyFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI4(ULONG ulIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI4(int ulIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI4", ulIn, pcyOut);
            }
            return (int)mh$.invokeExact(ulIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromUI8$descriptor() {
        return VarCyFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromUI8$handle() {
        return VarCyFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromUI8$address() {
        return VarCyFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromUI8(ULONG64 ui64In, CY *pcyOut)
     * }
     */
    public static int VarCyFromUI8(long ui64In, MemorySegment pcyOut) {
        var mh$ = VarCyFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromUI8", ui64In, pcyOut);
            }
            return (int)mh$.invokeExact(ui64In, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static FunctionDescriptor VarCyFromDec$descriptor() {
        return VarCyFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static MethodHandle VarCyFromDec$handle() {
        return VarCyFromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static MemorySegment VarCyFromDec$address() {
        return VarCyFromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFromDec(const DECIMAL *pdecIn, CY *pcyOut)
     * }
     */
    public static int VarCyFromDec(MemorySegment pdecIn, MemorySegment pcyOut) {
        var mh$ = VarCyFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFromDec", pdecIn, pcyOut);
            }
            return (int)mh$.invokeExact(pdecIn, pcyOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI1$descriptor() {
        return VarBstrFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI1$handle() {
        return VarBstrFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromUI1$address() {
        return VarBstrFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI1(byte bVal, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI1", bVal, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(bVal, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI2$descriptor() {
        return VarBstrFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI2$handle() {
        return VarBstrFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromI2$address() {
        return VarBstrFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI2(short iVal, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI2", iVal, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iVal, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI4$descriptor() {
        return VarBstrFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI4$handle() {
        return VarBstrFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromI4$address() {
        return VarBstrFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI4(int lIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI4", lIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(lIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI8$descriptor() {
        return VarBstrFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI8$handle() {
        return VarBstrFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromI8$address() {
        return VarBstrFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI8(LONG64 i64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI8(long i64In, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI8", i64In, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(i64In, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromR4$descriptor() {
        return VarBstrFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromR4$handle() {
        return VarBstrFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromR4$address() {
        return VarBstrFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromR4(float fltIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromR4", fltIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(fltIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromR8$descriptor() {
        return VarBstrFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromR8$handle() {
        return VarBstrFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromR8$address() {
        return VarBstrFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromR8(double dblIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromR8", dblIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(dblIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromCy$descriptor() {
        return VarBstrFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromCy$handle() {
        return VarBstrFromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromCy$address() {
        return VarBstrFromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromCy(MemorySegment cyIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromCy", cyIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(cyIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDate$descriptor() {
        return VarBstrFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDate$handle() {
        return VarBstrFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromDate$address() {
        return VarBstrFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDate(double dateIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDate", dateIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(dateIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDisp$descriptor() {
        return VarBstrFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDisp$handle() {
        return VarBstrFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromDisp$address() {
        return VarBstrFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDisp(IDispatch *pdispIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDisp(MemorySegment pdispIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDisp", pdispIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromBool$descriptor() {
        return VarBstrFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromBool$handle() {
        return VarBstrFromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromBool$address() {
        return VarBstrFromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromBool(short boolIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromBool", boolIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(boolIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromI1$descriptor() {
        return VarBstrFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromI1$handle() {
        return VarBstrFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromI1$address() {
        return VarBstrFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromI1(byte cIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromI1", cIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(cIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI2$descriptor() {
        return VarBstrFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI2$handle() {
        return VarBstrFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromUI2$address() {
        return VarBstrFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI2(short uiIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI2", uiIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(uiIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI4$descriptor() {
        return VarBstrFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI4$handle() {
        return VarBstrFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromUI4$address() {
        return VarBstrFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI4(int ulIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI4", ulIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(ulIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromUI8$descriptor() {
        return VarBstrFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromUI8$handle() {
        return VarBstrFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromUI8$address() {
        return VarBstrFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromUI8(ULONG64 ui64In, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromUI8(long ui64In, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromUI8", ui64In, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(ui64In, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrFromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarBstrFromDec$descriptor() {
        return VarBstrFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarBstrFromDec$handle() {
        return VarBstrFromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarBstrFromDec$address() {
        return VarBstrFromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrFromDec(const DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarBstrFromDec(MemorySegment pdecIn, int lcid, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarBstrFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrFromDec", pdecIn, lcid, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pdecIn, lcid, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI1$descriptor() {
        return VarBoolFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI1$handle() {
        return VarBoolFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromUI1$address() {
        return VarBoolFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI1(BYTE bIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI1(byte bIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI1", bIn, pboolOut);
            }
            return (int)mh$.invokeExact(bIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI2$descriptor() {
        return VarBoolFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI2$handle() {
        return VarBoolFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromI2$address() {
        return VarBoolFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI2(SHORT sIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI2(short sIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI2", sIn, pboolOut);
            }
            return (int)mh$.invokeExact(sIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI4$descriptor() {
        return VarBoolFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI4$handle() {
        return VarBoolFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromI4$address() {
        return VarBoolFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI4(LONG lIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI4(int lIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI4", lIn, pboolOut);
            }
            return (int)mh$.invokeExact(lIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI8$descriptor() {
        return VarBoolFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI8$handle() {
        return VarBoolFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromI8$address() {
        return VarBoolFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI8(LONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI8(long i64In, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI8", i64In, pboolOut);
            }
            return (int)mh$.invokeExact(i64In, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromR4$descriptor() {
        return VarBoolFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromR4$handle() {
        return VarBoolFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromR4$address() {
        return VarBoolFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromR4(float fltIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromR4", fltIn, pboolOut);
            }
            return (int)mh$.invokeExact(fltIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromR8$descriptor() {
        return VarBoolFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromR8$handle() {
        return VarBoolFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromR8$address() {
        return VarBoolFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromR8(double dblIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromR8", dblIn, pboolOut);
            }
            return (int)mh$.invokeExact(dblIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDate$descriptor() {
        return VarBoolFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDate$handle() {
        return VarBoolFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromDate$address() {
        return VarBoolFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDate(DATE dateIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDate(double dateIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDate", dateIn, pboolOut);
            }
            return (int)mh$.invokeExact(dateIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromCy$descriptor() {
        return VarBoolFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromCy$handle() {
        return VarBoolFromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromCy$address() {
        return VarBoolFromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromCy(CY cyIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromCy(MemorySegment cyIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromCy", cyIn, pboolOut);
            }
            return (int)mh$.invokeExact(cyIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromStr$descriptor() {
        return VarBoolFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromStr$handle() {
        return VarBoolFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromStr$address() {
        return VarBoolFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pboolOut) {
        var mh$ = VarBoolFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromStr", strIn, lcid, dwFlags, pboolOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDisp$descriptor() {
        return VarBoolFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDisp$handle() {
        return VarBoolFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromDisp$address() {
        return VarBoolFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDisp(IDispatch *pdispIn, LCID lcid, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDisp", pdispIn, lcid, pboolOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromI1$descriptor() {
        return VarBoolFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromI1$handle() {
        return VarBoolFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromI1$address() {
        return VarBoolFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromI1(byte cIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromI1", cIn, pboolOut);
            }
            return (int)mh$.invokeExact(cIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI2$descriptor() {
        return VarBoolFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI2$handle() {
        return VarBoolFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromUI2$address() {
        return VarBoolFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI2(short uiIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI2", uiIn, pboolOut);
            }
            return (int)mh$.invokeExact(uiIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI4$descriptor() {
        return VarBoolFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI4$handle() {
        return VarBoolFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromUI4$address() {
        return VarBoolFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI4(int ulIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI4", ulIn, pboolOut);
            }
            return (int)mh$.invokeExact(ulIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromUI8$descriptor() {
        return VarBoolFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromUI8$handle() {
        return VarBoolFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromUI8$address() {
        return VarBoolFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromUI8(long i64In, MemorySegment pboolOut) {
        var mh$ = VarBoolFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromUI8", i64In, pboolOut);
            }
            return (int)mh$.invokeExact(i64In, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBoolFromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBoolFromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static FunctionDescriptor VarBoolFromDec$descriptor() {
        return VarBoolFromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MethodHandle VarBoolFromDec$handle() {
        return VarBoolFromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static MemorySegment VarBoolFromDec$address() {
        return VarBoolFromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBoolFromDec(const DECIMAL *pdecIn, VARIANT_BOOL *pboolOut)
     * }
     */
    public static int VarBoolFromDec(MemorySegment pdecIn, MemorySegment pboolOut) {
        var mh$ = VarBoolFromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBoolFromDec", pdecIn, pboolOut);
            }
            return (int)mh$.invokeExact(pdecIn, pboolOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI1$descriptor() {
        return VarI1FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI1$handle() {
        return VarI1FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromUI1$address() {
        return VarI1FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI1(BYTE bIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI1(byte bIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI1", bIn, pcOut);
            }
            return (int)mh$.invokeExact(bIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI2$descriptor() {
        return VarI1FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI2$handle() {
        return VarI1FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromI2$address() {
        return VarI1FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI2(SHORT uiIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI2(short uiIn, MemorySegment pcOut) {
        var mh$ = VarI1FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI2", uiIn, pcOut);
            }
            return (int)mh$.invokeExact(uiIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI4$descriptor() {
        return VarI1FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI4$handle() {
        return VarI1FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromI4$address() {
        return VarI1FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI4(LONG lIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI4(int lIn, MemorySegment pcOut) {
        var mh$ = VarI1FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI4", lIn, pcOut);
            }
            return (int)mh$.invokeExact(lIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromI8$descriptor() {
        return VarI1FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromI8$handle() {
        return VarI1FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromI8$address() {
        return VarI1FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromI8(LONG64 i64In, CHAR *pcOut)
     * }
     */
    public static int VarI1FromI8(long i64In, MemorySegment pcOut) {
        var mh$ = VarI1FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromI8", i64In, pcOut);
            }
            return (int)mh$.invokeExact(i64In, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromR4$descriptor() {
        return VarI1FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromR4$handle() {
        return VarI1FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromR4$address() {
        return VarI1FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR4(FLOAT fltIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromR4(float fltIn, MemorySegment pcOut) {
        var mh$ = VarI1FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromR4", fltIn, pcOut);
            }
            return (int)mh$.invokeExact(fltIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromR8$descriptor() {
        return VarI1FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromR8$handle() {
        return VarI1FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromR8$address() {
        return VarI1FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromR8(DOUBLE dblIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromR8(double dblIn, MemorySegment pcOut) {
        var mh$ = VarI1FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromR8", dblIn, pcOut);
            }
            return (int)mh$.invokeExact(dblIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDate$descriptor() {
        return VarI1FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDate$handle() {
        return VarI1FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromDate$address() {
        return VarI1FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDate(DATE dateIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDate(double dateIn, MemorySegment pcOut) {
        var mh$ = VarI1FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDate", dateIn, pcOut);
            }
            return (int)mh$.invokeExact(dateIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromCy$descriptor() {
        return VarI1FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromCy$handle() {
        return VarI1FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromCy$address() {
        return VarI1FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromCy(CY cyIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromCy(MemorySegment cyIn, MemorySegment pcOut) {
        var mh$ = VarI1FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromCy", cyIn, pcOut);
            }
            return (int)mh$.invokeExact(cyIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromStr$descriptor() {
        return VarI1FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromStr$handle() {
        return VarI1FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromStr$address() {
        return VarI1FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut)
     * }
     */
    public static int VarI1FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pcOut) {
        var mh$ = VarI1FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromStr", strIn, lcid, dwFlags, pcOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDisp$descriptor() {
        return VarI1FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDisp$handle() {
        return VarI1FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromDisp$address() {
        return VarI1FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pcOut) {
        var mh$ = VarI1FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDisp", pdispIn, lcid, pcOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromBool$descriptor() {
        return VarI1FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromBool$handle() {
        return VarI1FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromBool$address() {
        return VarI1FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromBool(short boolIn, MemorySegment pcOut) {
        var mh$ = VarI1FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromBool", boolIn, pcOut);
            }
            return (int)mh$.invokeExact(boolIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI2$descriptor() {
        return VarI1FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI2$handle() {
        return VarI1FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromUI2$address() {
        return VarI1FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI2(USHORT uiIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI2(short uiIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI2", uiIn, pcOut);
            }
            return (int)mh$.invokeExact(uiIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI4$descriptor() {
        return VarI1FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI4$handle() {
        return VarI1FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromUI4$address() {
        return VarI1FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI4(ULONG ulIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI4(int ulIn, MemorySegment pcOut) {
        var mh$ = VarI1FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI4", ulIn, pcOut);
            }
            return (int)mh$.invokeExact(ulIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromUI8$descriptor() {
        return VarI1FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromUI8$handle() {
        return VarI1FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromUI8$address() {
        return VarI1FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromUI8(ULONG64 i64In, CHAR *pcOut)
     * }
     */
    public static int VarI1FromUI8(long i64In, MemorySegment pcOut) {
        var mh$ = VarI1FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromUI8", i64In, pcOut);
            }
            return (int)mh$.invokeExact(i64In, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarI1FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarI1FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static FunctionDescriptor VarI1FromDec$descriptor() {
        return VarI1FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static MethodHandle VarI1FromDec$handle() {
        return VarI1FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static MemorySegment VarI1FromDec$address() {
        return VarI1FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarI1FromDec(const DECIMAL *pdecIn, CHAR *pcOut)
     * }
     */
    public static int VarI1FromDec(MemorySegment pdecIn, MemorySegment pcOut) {
        var mh$ = VarI1FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarI1FromDec", pdecIn, pcOut);
            }
            return (int)mh$.invokeExact(pdecIn, pcOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI1$descriptor() {
        return VarUI2FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI1$handle() {
        return VarUI2FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromUI1$address() {
        return VarUI2FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI1(BYTE bIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI1(byte bIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI1", bIn, puiOut);
            }
            return (int)mh$.invokeExact(bIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI2$descriptor() {
        return VarUI2FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI2$handle() {
        return VarUI2FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromI2$address() {
        return VarUI2FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI2(SHORT uiIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI2(short uiIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI2", uiIn, puiOut);
            }
            return (int)mh$.invokeExact(uiIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI4$descriptor() {
        return VarUI2FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI4$handle() {
        return VarUI2FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromI4$address() {
        return VarUI2FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI4(LONG lIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI4(int lIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI4", lIn, puiOut);
            }
            return (int)mh$.invokeExact(lIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI8$descriptor() {
        return VarUI2FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI8$handle() {
        return VarUI2FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromI8$address() {
        return VarUI2FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI8(LONG64 i64In, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI8(long i64In, MemorySegment puiOut) {
        var mh$ = VarUI2FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI8", i64In, puiOut);
            }
            return (int)mh$.invokeExact(i64In, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromR4$descriptor() {
        return VarUI2FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromR4$handle() {
        return VarUI2FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromR4$address() {
        return VarUI2FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR4(FLOAT fltIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromR4(float fltIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromR4", fltIn, puiOut);
            }
            return (int)mh$.invokeExact(fltIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromR8$descriptor() {
        return VarUI2FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromR8$handle() {
        return VarUI2FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromR8$address() {
        return VarUI2FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromR8(double dblIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromR8", dblIn, puiOut);
            }
            return (int)mh$.invokeExact(dblIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDate$descriptor() {
        return VarUI2FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDate$handle() {
        return VarUI2FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromDate$address() {
        return VarUI2FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDate(DATE dateIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDate(double dateIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDate", dateIn, puiOut);
            }
            return (int)mh$.invokeExact(dateIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromCy$descriptor() {
        return VarUI2FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromCy$handle() {
        return VarUI2FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromCy$address() {
        return VarUI2FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromCy(CY cyIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromCy(MemorySegment cyIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromCy", cyIn, puiOut);
            }
            return (int)mh$.invokeExact(cyIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromStr$descriptor() {
        return VarUI2FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromStr$handle() {
        return VarUI2FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromStr$address() {
        return VarUI2FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment puiOut) {
        var mh$ = VarUI2FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromStr", strIn, lcid, dwFlags, puiOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDisp$descriptor() {
        return VarUI2FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDisp$handle() {
        return VarUI2FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromDisp$address() {
        return VarUI2FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDisp(MemorySegment pdispIn, int lcid, MemorySegment puiOut) {
        var mh$ = VarUI2FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDisp", pdispIn, lcid, puiOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromBool$descriptor() {
        return VarUI2FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromBool$handle() {
        return VarUI2FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromBool$address() {
        return VarUI2FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromBool(short boolIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromBool", boolIn, puiOut);
            }
            return (int)mh$.invokeExact(boolIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromI1$descriptor() {
        return VarUI2FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromI1$handle() {
        return VarUI2FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromI1$address() {
        return VarUI2FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromI1(CHAR cIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromI1(byte cIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromI1", cIn, puiOut);
            }
            return (int)mh$.invokeExact(cIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI4$descriptor() {
        return VarUI2FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI4$handle() {
        return VarUI2FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromUI4$address() {
        return VarUI2FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI4(ULONG ulIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI4(int ulIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI4", ulIn, puiOut);
            }
            return (int)mh$.invokeExact(ulIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromUI8$descriptor() {
        return VarUI2FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromUI8$handle() {
        return VarUI2FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromUI8$address() {
        return VarUI2FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromUI8(long i64In, MemorySegment puiOut) {
        var mh$ = VarUI2FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromUI8", i64In, puiOut);
            }
            return (int)mh$.invokeExact(i64In, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI2FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI2FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static FunctionDescriptor VarUI2FromDec$descriptor() {
        return VarUI2FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static MethodHandle VarUI2FromDec$handle() {
        return VarUI2FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static MemorySegment VarUI2FromDec$address() {
        return VarUI2FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI2FromDec(const DECIMAL *pdecIn, USHORT *puiOut)
     * }
     */
    public static int VarUI2FromDec(MemorySegment pdecIn, MemorySegment puiOut) {
        var mh$ = VarUI2FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI2FromDec", pdecIn, puiOut);
            }
            return (int)mh$.invokeExact(pdecIn, puiOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI1$descriptor() {
        return VarUI4FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromUI1$handle() {
        return VarUI4FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromUI1$address() {
        return VarUI4FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI1(BYTE bIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromUI1(byte bIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI1", bIn, pulOut);
            }
            return (int)mh$.invokeExact(bIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI2$descriptor() {
        return VarUI4FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI2$handle() {
        return VarUI4FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromI2$address() {
        return VarUI4FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI2(SHORT uiIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI2(short uiIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI2", uiIn, pulOut);
            }
            return (int)mh$.invokeExact(uiIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI4$descriptor() {
        return VarUI4FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI4$handle() {
        return VarUI4FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromI4$address() {
        return VarUI4FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI4(LONG lIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI4(int lIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI4", lIn, pulOut);
            }
            return (int)mh$.invokeExact(lIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI8$descriptor() {
        return VarUI4FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static MethodHandle VarUI4FromI8$handle() {
        return VarUI4FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static MemorySegment VarUI4FromI8$address() {
        return VarUI4FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI8(LONG64 i64In, ULONG *plOut)
     * }
     */
    public static int VarUI4FromI8(long i64In, MemorySegment plOut) {
        var mh$ = VarUI4FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI8", i64In, plOut);
            }
            return (int)mh$.invokeExact(i64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromR4$descriptor() {
        return VarUI4FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromR4$handle() {
        return VarUI4FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromR4$address() {
        return VarUI4FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR4(FLOAT fltIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromR4(float fltIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromR4", fltIn, pulOut);
            }
            return (int)mh$.invokeExact(fltIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromR8$descriptor() {
        return VarUI4FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromR8$handle() {
        return VarUI4FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromR8$address() {
        return VarUI4FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromR8(double dblIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromR8", dblIn, pulOut);
            }
            return (int)mh$.invokeExact(dblIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDate$descriptor() {
        return VarUI4FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDate$handle() {
        return VarUI4FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromDate$address() {
        return VarUI4FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDate(DATE dateIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDate(double dateIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDate", dateIn, pulOut);
            }
            return (int)mh$.invokeExact(dateIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromCy$descriptor() {
        return VarUI4FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromCy$handle() {
        return VarUI4FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromCy$address() {
        return VarUI4FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromCy(CY cyIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromCy(MemorySegment cyIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromCy", cyIn, pulOut);
            }
            return (int)mh$.invokeExact(cyIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromStr$descriptor() {
        return VarUI4FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromStr$handle() {
        return VarUI4FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromStr$address() {
        return VarUI4FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pulOut) {
        var mh$ = VarUI4FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromStr", strIn, lcid, dwFlags, pulOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDisp$descriptor() {
        return VarUI4FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDisp$handle() {
        return VarUI4FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromDisp$address() {
        return VarUI4FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pulOut) {
        var mh$ = VarUI4FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDisp", pdispIn, lcid, pulOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromBool$descriptor() {
        return VarUI4FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromBool$handle() {
        return VarUI4FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromBool$address() {
        return VarUI4FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromBool(short boolIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromBool", boolIn, pulOut);
            }
            return (int)mh$.invokeExact(boolIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromI1$descriptor() {
        return VarUI4FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromI1$handle() {
        return VarUI4FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromI1$address() {
        return VarUI4FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromI1(CHAR cIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromI1(byte cIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromI1", cIn, pulOut);
            }
            return (int)mh$.invokeExact(cIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI2$descriptor() {
        return VarUI4FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromUI2$handle() {
        return VarUI4FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromUI2$address() {
        return VarUI4FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI2(USHORT uiIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromUI2(short uiIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI2", uiIn, pulOut);
            }
            return (int)mh$.invokeExact(uiIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromUI8$descriptor() {
        return VarUI4FromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static MethodHandle VarUI4FromUI8$handle() {
        return VarUI4FromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static MemorySegment VarUI4FromUI8$address() {
        return VarUI4FromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut)
     * }
     */
    public static int VarUI4FromUI8(long ui64In, MemorySegment plOut) {
        var mh$ = VarUI4FromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromUI8", ui64In, plOut);
            }
            return (int)mh$.invokeExact(ui64In, plOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI4FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI4FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static FunctionDescriptor VarUI4FromDec$descriptor() {
        return VarUI4FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static MethodHandle VarUI4FromDec$handle() {
        return VarUI4FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static MemorySegment VarUI4FromDec$address() {
        return VarUI4FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI4FromDec(const DECIMAL *pdecIn, ULONG *pulOut)
     * }
     */
    public static int VarUI4FromDec(MemorySegment pdecIn, MemorySegment pulOut) {
        var mh$ = VarUI4FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI4FromDec", pdecIn, pulOut);
            }
            return (int)mh$.invokeExact(pdecIn, pulOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI1$descriptor() {
        return VarUI8FromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI1$handle() {
        return VarUI8FromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromUI1$address() {
        return VarUI8FromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI1(BYTE bIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI1(byte bIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI1", bIn, pi64Out);
            }
            return (int)mh$.invokeExact(bIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI2$descriptor() {
        return VarUI8FromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI2$handle() {
        return VarUI8FromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromI2$address() {
        return VarUI8FromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI2(SHORT sIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI2(short sIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI2", sIn, pi64Out);
            }
            return (int)mh$.invokeExact(sIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI4$descriptor() {
        return VarUI8FromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI4$handle() {
        return VarUI8FromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromI4$address() {
        return VarUI8FromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI4(LONG lIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI4(int lIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI4", lIn, pi64Out);
            }
            return (int)mh$.invokeExact(lIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI8$descriptor() {
        return VarUI8FromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI8$handle() {
        return VarUI8FromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromI8$address() {
        return VarUI8FromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI8(LONG64 ui64In, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI8(long ui64In, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI8", ui64In, pi64Out);
            }
            return (int)mh$.invokeExact(ui64In, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromR4$descriptor() {
        return VarUI8FromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromR4$handle() {
        return VarUI8FromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromR4$address() {
        return VarUI8FromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR4(FLOAT fltIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromR4(float fltIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromR4", fltIn, pi64Out);
            }
            return (int)mh$.invokeExact(fltIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromR8$descriptor() {
        return VarUI8FromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromR8$handle() {
        return VarUI8FromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromR8$address() {
        return VarUI8FromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromR8(DOUBLE dblIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromR8(double dblIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromR8", dblIn, pi64Out);
            }
            return (int)mh$.invokeExact(dblIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromCy$descriptor() {
        return VarUI8FromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromCy$handle() {
        return VarUI8FromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromCy$address() {
        return VarUI8FromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromCy(CY cyIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromCy(MemorySegment cyIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromCy", cyIn, pi64Out);
            }
            return (int)mh$.invokeExact(cyIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDate$descriptor() {
        return VarUI8FromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDate$handle() {
        return VarUI8FromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromDate$address() {
        return VarUI8FromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDate(DATE dateIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDate(double dateIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDate", dateIn, pi64Out);
            }
            return (int)mh$.invokeExact(dateIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromStr$descriptor() {
        return VarUI8FromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromStr$handle() {
        return VarUI8FromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromStr$address() {
        return VarUI8FromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pi64Out) {
        var mh$ = VarUI8FromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromStr", strIn, lcid, dwFlags, pi64Out);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDisp$descriptor() {
        return VarUI8FromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDisp$handle() {
        return VarUI8FromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromDisp$address() {
        return VarUI8FromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDisp(IDispatch *pdispIn, LCID lcid, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDisp(MemorySegment pdispIn, int lcid, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDisp", pdispIn, lcid, pi64Out);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromBool$descriptor() {
        return VarUI8FromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromBool$handle() {
        return VarUI8FromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromBool$address() {
        return VarUI8FromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromBool(short boolIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromBool", boolIn, pi64Out);
            }
            return (int)mh$.invokeExact(boolIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromI1$descriptor() {
        return VarUI8FromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromI1$handle() {
        return VarUI8FromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromI1$address() {
        return VarUI8FromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromI1(CHAR cIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromI1(byte cIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromI1", cIn, pi64Out);
            }
            return (int)mh$.invokeExact(cIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI2$descriptor() {
        return VarUI8FromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI2$handle() {
        return VarUI8FromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromUI2$address() {
        return VarUI8FromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI2(USHORT uiIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI2(short uiIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI2", uiIn, pi64Out);
            }
            return (int)mh$.invokeExact(uiIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromUI4$descriptor() {
        return VarUI8FromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromUI4$handle() {
        return VarUI8FromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromUI4$address() {
        return VarUI8FromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromUI4(ULONG ulIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromUI4(int ulIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromUI4", ulIn, pi64Out);
            }
            return (int)mh$.invokeExact(ulIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUI8FromDec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUI8FromDec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static FunctionDescriptor VarUI8FromDec$descriptor() {
        return VarUI8FromDec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static MethodHandle VarUI8FromDec$handle() {
        return VarUI8FromDec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static MemorySegment VarUI8FromDec$address() {
        return VarUI8FromDec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUI8FromDec(const DECIMAL *pdecIn, ULONG64 *pi64Out)
     * }
     */
    public static int VarUI8FromDec(MemorySegment pdecIn, MemorySegment pi64Out) {
        var mh$ = VarUI8FromDec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUI8FromDec", pdecIn, pi64Out);
            }
            return (int)mh$.invokeExact(pdecIn, pi64Out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromUI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI1$descriptor() {
        return VarDecFromUI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI1$handle() {
        return VarDecFromUI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromUI1$address() {
        return VarDecFromUI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI1(byte bIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI1", bIn, pdecOut);
            }
            return (int)mh$.invokeExact(bIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI2$descriptor() {
        return VarDecFromI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI2$handle() {
        return VarDecFromI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromI2$address() {
        return VarDecFromI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI2(short uiIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI2", uiIn, pdecOut);
            }
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI4$descriptor() {
        return VarDecFromI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI4$handle() {
        return VarDecFromI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromI4$address() {
        return VarDecFromI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI4(LONG lIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI4(int lIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI4", lIn, pdecOut);
            }
            return (int)mh$.invokeExact(lIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI8$descriptor() {
        return VarDecFromI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI8$handle() {
        return VarDecFromI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromI8$address() {
        return VarDecFromI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI8(long i64In, MemorySegment pdecOut) {
        var mh$ = VarDecFromI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI8", i64In, pdecOut);
            }
            return (int)mh$.invokeExact(i64In, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromR4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromR4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromR4$descriptor() {
        return VarDecFromR4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromR4$handle() {
        return VarDecFromR4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromR4$address() {
        return VarDecFromR4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromR4(float fltIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromR4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromR4", fltIn, pdecOut);
            }
            return (int)mh$.invokeExact(fltIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromR8$descriptor() {
        return VarDecFromR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromR8$handle() {
        return VarDecFromR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromR8$address() {
        return VarDecFromR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromR8(double dblIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromR8", dblIn, pdecOut);
            }
            return (int)mh$.invokeExact(dblIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromDate$descriptor() {
        return VarDecFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromDate$handle() {
        return VarDecFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromDate$address() {
        return VarDecFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDate(DATE dateIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromDate(double dateIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromDate", dateIn, pdecOut);
            }
            return (int)mh$.invokeExact(dateIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromCy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromCy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromCy$descriptor() {
        return VarDecFromCy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromCy$handle() {
        return VarDecFromCy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromCy$address() {
        return VarDecFromCy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromCy(CY cyIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromCy(MemorySegment cyIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromCy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromCy", cyIn, pdecOut);
            }
            return (int)mh$.invokeExact(cyIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromStr$descriptor() {
        return VarDecFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromStr$handle() {
        return VarDecFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromStr$address() {
        return VarDecFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pdecOut) {
        var mh$ = VarDecFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromStr", strIn, lcid, dwFlags, pdecOut);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromDisp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromDisp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromDisp$descriptor() {
        return VarDecFromDisp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromDisp$handle() {
        return VarDecFromDisp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromDisp$address() {
        return VarDecFromDisp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromDisp(MemorySegment pdispIn, int lcid, MemorySegment pdecOut) {
        var mh$ = VarDecFromDisp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromDisp", pdispIn, lcid, pdecOut);
            }
            return (int)mh$.invokeExact(pdispIn, lcid, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromBool$descriptor() {
        return VarDecFromBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromBool$handle() {
        return VarDecFromBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromBool$address() {
        return VarDecFromBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromBool(short boolIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromBool", boolIn, pdecOut);
            }
            return (int)mh$.invokeExact(boolIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromI1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_CHAR,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromI1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromI1$descriptor() {
        return VarDecFromI1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromI1$handle() {
        return VarDecFromI1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromI1$address() {
        return VarDecFromI1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromI1(CHAR cIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromI1(byte cIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromI1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromI1", cIn, pdecOut);
            }
            return (int)mh$.invokeExact(cIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromUI2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI2$descriptor() {
        return VarDecFromUI2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI2$handle() {
        return VarDecFromUI2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromUI2$address() {
        return VarDecFromUI2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI2(short uiIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI2", uiIn, pdecOut);
            }
            return (int)mh$.invokeExact(uiIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromUI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI4$descriptor() {
        return VarDecFromUI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI4$handle() {
        return VarDecFromUI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromUI4$address() {
        return VarDecFromUI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI4(int ulIn, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI4", ulIn, pdecOut);
            }
            return (int)mh$.invokeExact(ulIn, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFromUI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFromUI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static FunctionDescriptor VarDecFromUI8$descriptor() {
        return VarDecFromUI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static MethodHandle VarDecFromUI8$handle() {
        return VarDecFromUI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static MemorySegment VarDecFromUI8$address() {
        return VarDecFromUI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut)
     * }
     */
    public static int VarDecFromUI8(long ui64In, MemorySegment pdecOut) {
        var mh$ = VarDecFromUI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFromUI8", ui64In, pdecOut);
            }
            return (int)mh$.invokeExact(ui64In, pdecOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarParseNumFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarParseNumFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static FunctionDescriptor VarParseNumFromStr$descriptor() {
        return VarParseNumFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static MethodHandle VarParseNumFromStr$handle() {
        return VarParseNumFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static MemorySegment VarParseNumFromStr$address() {
        return VarParseNumFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarParseNumFromStr(LPCOLESTR strIn, LCID lcid, ULONG dwFlags, NUMPARSE *pnumprs, BYTE *rgbDig)
     * }
     */
    public static int VarParseNumFromStr(MemorySegment strIn, int lcid, int dwFlags, MemorySegment pnumprs, MemorySegment rgbDig) {
        var mh$ = VarParseNumFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarParseNumFromStr", strIn, lcid, dwFlags, pnumprs, rgbDig);
            }
            return (int)mh$.invokeExact(strIn, lcid, dwFlags, pnumprs, rgbDig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNumFromParseNum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarNumFromParseNum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static FunctionDescriptor VarNumFromParseNum$descriptor() {
        return VarNumFromParseNum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static MethodHandle VarNumFromParseNum$handle() {
        return VarNumFromParseNum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static MemorySegment VarNumFromParseNum$address() {
        return VarNumFromParseNum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarNumFromParseNum(NUMPARSE *pnumprs, BYTE *rgbDig, ULONG dwVtBits, VARIANT *pvar)
     * }
     */
    public static int VarNumFromParseNum(MemorySegment pnumprs, MemorySegment rgbDig, int dwVtBits, MemorySegment pvar) {
        var mh$ = VarNumFromParseNum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNumFromParseNum", pnumprs, rgbDig, dwVtBits, pvar);
            }
            return (int)mh$.invokeExact(pnumprs, rgbDig, dwVtBits, pvar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarAdd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAdd$descriptor() {
        return VarAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAdd$handle() {
        return VarAdd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarAdd$address() {
        return VarAdd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarAdd(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAdd", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarAnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAnd$descriptor() {
        return VarAnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAnd$handle() {
        return VarAnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarAnd$address() {
        return VarAnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarAnd(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarAnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAnd", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarCat$descriptor() {
        return VarCat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarCat$handle() {
        return VarCat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarCat$address() {
        return VarCat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarCat(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarCat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCat", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarDiv$descriptor() {
        return VarDiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarDiv$handle() {
        return VarDiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarDiv$address() {
        return VarDiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarDiv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarDiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDiv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarEqv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarEqv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarEqv$descriptor() {
        return VarEqv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarEqv$handle() {
        return VarEqv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarEqv$address() {
        return VarEqv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarEqv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarEqv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarEqv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarIdiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarIdiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarIdiv$descriptor() {
        return VarIdiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarIdiv$handle() {
        return VarIdiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarIdiv$address() {
        return VarIdiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarIdiv(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarIdiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarIdiv", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarImp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarImp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarImp$descriptor() {
        return VarImp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarImp$handle() {
        return VarImp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarImp$address() {
        return VarImp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarImp(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarImp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarImp", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarMod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarMod$descriptor() {
        return VarMod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarMod$handle() {
        return VarMod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarMod$address() {
        return VarMod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarMod(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarMod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMod", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarMul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarMul$descriptor() {
        return VarMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarMul$handle() {
        return VarMul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarMul$address() {
        return VarMul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarMul(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMul", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarOr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarOr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarOr$descriptor() {
        return VarOr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarOr$handle() {
        return VarOr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarOr$address() {
        return VarOr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarOr(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarOr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarOr", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarPow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarPow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarPow$descriptor() {
        return VarPow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarPow$handle() {
        return VarPow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarPow$address() {
        return VarPow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarPow(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarPow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarPow", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarSub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarSub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarSub$descriptor() {
        return VarSub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarSub$handle() {
        return VarSub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarSub$address() {
        return VarSub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarSub(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarSub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarSub", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarXor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarXor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarXor$descriptor() {
        return VarXor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarXor$handle() {
        return VarXor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarXor$address() {
        return VarXor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult)
     * }
     */
    public static int VarXor(MemorySegment pvarLeft, MemorySegment pvarRight, MemorySegment pvarResult) {
        var mh$ = VarXor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarXor", pvarLeft, pvarRight, pvarResult);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarAbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarAbs$descriptor() {
        return VarAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarAbs$handle() {
        return VarAbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarAbs$address() {
        return VarAbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarAbs(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarAbs", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarFix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarFix$descriptor() {
        return VarFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarFix$handle() {
        return VarFix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarFix$address() {
        return VarFix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarFix(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFix", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarInt$descriptor() {
        return VarInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarInt$handle() {
        return VarInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarInt$address() {
        return VarInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarInt(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarInt", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarNeg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarNeg$descriptor() {
        return VarNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarNeg$handle() {
        return VarNeg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarNeg$address() {
        return VarNeg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarNeg(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNeg", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarNot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarNot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarNot$descriptor() {
        return VarNot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarNot$handle() {
        return VarNot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarNot$address() {
        return VarNot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult)
     * }
     */
    public static int VarNot(MemorySegment pvarIn, MemorySegment pvarResult) {
        var mh$ = VarNot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarNot", pvarIn, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarRound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static FunctionDescriptor VarRound$descriptor() {
        return VarRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static MethodHandle VarRound$handle() {
        return VarRound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static MemorySegment VarRound$address() {
        return VarRound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult)
     * }
     */
    public static int VarRound(MemorySegment pvarIn, int cDecimals, MemorySegment pvarResult) {
        var mh$ = VarRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarRound", pvarIn, cDecimals, pvarResult);
            }
            return (int)mh$.invokeExact(pvarIn, cDecimals, pvarResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor VarCmp$descriptor() {
        return VarCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MethodHandle VarCmp$handle() {
        return VarCmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MemorySegment VarCmp$address() {
        return VarCmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static int VarCmp(MemorySegment pvarLeft, MemorySegment pvarRight, int lcid, int dwFlags) {
        var mh$ = VarCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCmp", pvarLeft, pvarRight, lcid, dwFlags);
            }
            return (int)mh$.invokeExact(pvarLeft, pvarRight, lcid, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecAdd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecAdd$descriptor() {
        return VarDecAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecAdd$handle() {
        return VarDecAdd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecAdd$address() {
        return VarDecAdd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecAdd(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecAdd", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecDiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecDiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecDiv$descriptor() {
        return VarDecDiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecDiv$handle() {
        return VarDecDiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecDiv$address() {
        return VarDecDiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecDiv(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecDiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecDiv", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecMul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecMul$descriptor() {
        return VarDecMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecMul$handle() {
        return VarDecMul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecMul$address() {
        return VarDecMul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecMul(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecMul", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecSub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecSub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecSub$descriptor() {
        return VarDecSub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecSub$handle() {
        return VarDecSub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecSub$address() {
        return VarDecSub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecSub(MemorySegment pdecLeft, MemorySegment pdecRight, MemorySegment pdecResult) {
        var mh$ = VarDecSub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecSub", pdecLeft, pdecRight, pdecResult);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecAbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecAbs$descriptor() {
        return VarDecAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecAbs$handle() {
        return VarDecAbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecAbs$address() {
        return VarDecAbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecAbs(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecAbs", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecFix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecFix$descriptor() {
        return VarDecFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecFix$handle() {
        return VarDecFix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecFix$address() {
        return VarDecFix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecFix(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecFix", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecInt$descriptor() {
        return VarDecInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecInt$handle() {
        return VarDecInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecInt$address() {
        return VarDecInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecInt(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecInt", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecNeg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecNeg$descriptor() {
        return VarDecNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecNeg$handle() {
        return VarDecNeg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecNeg$address() {
        return VarDecNeg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecNeg(MemorySegment pdecIn, MemorySegment pdecResult) {
        var mh$ = VarDecNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecNeg", pdecIn, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecRound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static FunctionDescriptor VarDecRound$descriptor() {
        return VarDecRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static MethodHandle VarDecRound$handle() {
        return VarDecRound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static MemorySegment VarDecRound$address() {
        return VarDecRound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult)
     * }
     */
    public static int VarDecRound(MemorySegment pdecIn, int cDecimals, MemorySegment pdecResult) {
        var mh$ = VarDecRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecRound", pdecIn, cDecimals, pdecResult);
            }
            return (int)mh$.invokeExact(pdecIn, cDecimals, pdecResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecCmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static FunctionDescriptor VarDecCmp$descriptor() {
        return VarDecCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static MethodHandle VarDecCmp$handle() {
        return VarDecCmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static MemorySegment VarDecCmp$address() {
        return VarDecCmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight)
     * }
     */
    public static int VarDecCmp(MemorySegment pdecLeft, MemorySegment pdecRight) {
        var mh$ = VarDecCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecCmp", pdecLeft, pdecRight);
            }
            return (int)mh$.invokeExact(pdecLeft, pdecRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDecCmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_DOUBLE
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDecCmpR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarDecCmpR8$descriptor() {
        return VarDecCmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static MethodHandle VarDecCmpR8$handle() {
        return VarDecCmpR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static MemorySegment VarDecCmpR8$address() {
        return VarDecCmpR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight)
     * }
     */
    public static int VarDecCmpR8(MemorySegment pdecLeft, double dblRight) {
        var mh$ = VarDecCmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDecCmpR8", pdecLeft, dblRight);
            }
            return (int)mh$.invokeExact(pdecLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyAdd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyAdd$descriptor() {
        return VarCyAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyAdd$handle() {
        return VarCyAdd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyAdd$address() {
        return VarCyAdd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCyAdd(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCyAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyAdd", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyMul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMul$descriptor() {
        return VarCyMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMul$handle() {
        return VarCyMul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyMul$address() {
        return VarCyMul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMul(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCyMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMul", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMulI4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyMulI4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMulI4$descriptor() {
        return VarCyMulI4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMulI4$handle() {
        return VarCyMulI4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyMulI4$address() {
        return VarCyMulI4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI4(CY cyLeft, LONG lRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMulI4(MemorySegment cyLeft, int lRight, MemorySegment pcyResult) {
        var mh$ = VarCyMulI4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMulI4", cyLeft, lRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyMulI8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyMulI8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyMulI8$descriptor() {
        return VarCyMulI8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyMulI8$handle() {
        return VarCyMulI8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyMulI8$address() {
        return VarCyMulI8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult)
     * }
     */
    public static int VarCyMulI8(MemorySegment cyLeft, long lRight, MemorySegment pcyResult) {
        var mh$ = VarCyMulI8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyMulI8", cyLeft, lRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, lRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCySub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCySub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCySub$descriptor() {
        return VarCySub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCySub$handle() {
        return VarCySub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCySub$address() {
        return VarCySub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult)
     * }
     */
    public static int VarCySub(MemorySegment cyLeft, MemorySegment cyRight, MemorySegment pcyResult) {
        var mh$ = VarCySub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCySub", cyLeft, cyRight, pcyResult);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyAbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyAbs$descriptor() {
        return VarCyAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyAbs$handle() {
        return VarCyAbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyAbs$address() {
        return VarCyAbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyAbs(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyAbs(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyAbs", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyFix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyFix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyFix$descriptor() {
        return VarCyFix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyFix$handle() {
        return VarCyFix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyFix$address() {
        return VarCyFix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyFix(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyFix(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyFix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyFix", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyInt$descriptor() {
        return VarCyInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyInt$handle() {
        return VarCyInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyInt$address() {
        return VarCyInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyInt(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyInt(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyInt", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyNeg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyNeg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyNeg$descriptor() {
        return VarCyNeg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyNeg$handle() {
        return VarCyNeg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyNeg$address() {
        return VarCyNeg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyNeg(CY cyIn, LPCY pcyResult)
     * }
     */
    public static int VarCyNeg(MemorySegment cyIn, MemorySegment pcyResult) {
        var mh$ = VarCyNeg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyNeg", cyIn, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyRound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyRound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static FunctionDescriptor VarCyRound$descriptor() {
        return VarCyRound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static MethodHandle VarCyRound$handle() {
        return VarCyRound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static MemorySegment VarCyRound$address() {
        return VarCyRound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult)
     * }
     */
    public static int VarCyRound(MemorySegment cyIn, int cDecimals, MemorySegment pcyResult) {
        var mh$ = VarCyRound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyRound", cyIn, cDecimals, pcyResult);
            }
            return (int)mh$.invokeExact(cyIn, cDecimals, pcyResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            tagCY.layout()
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyCmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static FunctionDescriptor VarCyCmp$descriptor() {
        return VarCyCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static MethodHandle VarCyCmp$handle() {
        return VarCyCmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static MemorySegment VarCyCmp$address() {
        return VarCyCmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyCmp(CY cyLeft, CY cyRight)
     * }
     */
    public static int VarCyCmp(MemorySegment cyLeft, MemorySegment cyRight) {
        var mh$ = VarCyCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyCmp", cyLeft, cyRight);
            }
            return (int)mh$.invokeExact(cyLeft, cyRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarCyCmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            tagCY.layout(),
            winapi.C_DOUBLE
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarCyCmpR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarCyCmpR8$descriptor() {
        return VarCyCmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static MethodHandle VarCyCmpR8$handle() {
        return VarCyCmpR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static MemorySegment VarCyCmpR8$address() {
        return VarCyCmpR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarCyCmpR8(CY cyLeft, double dblRight)
     * }
     */
    public static int VarCyCmpR8(MemorySegment cyLeft, double dblRight) {
        var mh$ = VarCyCmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarCyCmpR8", cyLeft, dblRight);
            }
            return (int)mh$.invokeExact(cyLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrCat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrCat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static FunctionDescriptor VarBstrCat$descriptor() {
        return VarBstrCat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static MethodHandle VarBstrCat$handle() {
        return VarBstrCat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static MemorySegment VarBstrCat$address() {
        return VarBstrCat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult)
     * }
     */
    public static int VarBstrCat(MemorySegment bstrLeft, MemorySegment bstrRight, MemorySegment pbstrResult) {
        var mh$ = VarBstrCat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrCat", bstrLeft, bstrRight, pbstrResult);
            }
            return (int)mh$.invokeExact(bstrLeft, bstrRight, pbstrResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarBstrCmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarBstrCmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static FunctionDescriptor VarBstrCmp$descriptor() {
        return VarBstrCmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MethodHandle VarBstrCmp$handle() {
        return VarBstrCmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static MemorySegment VarBstrCmp$address() {
        return VarBstrCmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags)
     * }
     */
    public static int VarBstrCmp(MemorySegment bstrLeft, MemorySegment bstrRight, int lcid, int dwFlags) {
        var mh$ = VarBstrCmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarBstrCmp", bstrLeft, bstrRight, lcid, dwFlags);
            }
            return (int)mh$.invokeExact(bstrLeft, bstrRight, lcid, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8Pow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8Pow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static FunctionDescriptor VarR8Pow$descriptor() {
        return VarR8Pow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static MethodHandle VarR8Pow$handle() {
        return VarR8Pow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static MemorySegment VarR8Pow$address() {
        return VarR8Pow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8Pow(double dblLeft, double dblRight, double *pdblResult)
     * }
     */
    public static int VarR8Pow(double dblLeft, double dblRight, MemorySegment pdblResult) {
        var mh$ = VarR8Pow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8Pow", dblLeft, dblRight, pdblResult);
            }
            return (int)mh$.invokeExact(dblLeft, dblRight, pdblResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR4CmpR8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_FLOAT,
            winapi.C_DOUBLE
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR4CmpR8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static FunctionDescriptor VarR4CmpR8$descriptor() {
        return VarR4CmpR8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static MethodHandle VarR4CmpR8$handle() {
        return VarR4CmpR8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static MemorySegment VarR4CmpR8$address() {
        return VarR4CmpR8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR4CmpR8(float fltLeft, double dblRight)
     * }
     */
    public static int VarR4CmpR8(float fltLeft, double dblRight) {
        var mh$ = VarR4CmpR8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR4CmpR8", fltLeft, dblRight);
            }
            return (int)mh$.invokeExact(fltLeft, dblRight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarR8Round {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarR8Round");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static FunctionDescriptor VarR8Round$descriptor() {
        return VarR8Round.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static MethodHandle VarR8Round$handle() {
        return VarR8Round.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static MemorySegment VarR8Round$address() {
        return VarR8Round.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarR8Round(double dblIn, int cDecimals, double *pdblResult)
     * }
     */
    public static int VarR8Round(double dblIn, int cDecimals, MemorySegment pdblResult) {
        var mh$ = VarR8Round.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarR8Round", dblIn, cDecimals, pdblResult);
            }
            return (int)mh$.invokeExact(dblIn, cDecimals, pdblResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromUdate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUdate$descriptor() {
        return VarDateFromUdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUdate$handle() {
        return VarDateFromUdate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUdate$address() {
        return VarDateFromUdate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUdate(MemorySegment pudateIn, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromUdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUdate", pudateIn, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(pudateIn, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarDateFromUdateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarDateFromUdateEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static FunctionDescriptor VarDateFromUdateEx$descriptor() {
        return VarDateFromUdateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MethodHandle VarDateFromUdateEx$handle() {
        return VarDateFromUdateEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static MemorySegment VarDateFromUdateEx$address() {
        return VarDateFromUdateEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut)
     * }
     */
    public static int VarDateFromUdateEx(MemorySegment pudateIn, int lcid, int dwFlags, MemorySegment pdateOut) {
        var mh$ = VarDateFromUdateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarDateFromUdateEx", pudateIn, lcid, dwFlags, pdateOut);
            }
            return (int)mh$.invokeExact(pudateIn, lcid, dwFlags, pdateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarUdateFromDate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_DOUBLE,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarUdateFromDate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static FunctionDescriptor VarUdateFromDate$descriptor() {
        return VarUdateFromDate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static MethodHandle VarUdateFromDate$handle() {
        return VarUdateFromDate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static MemorySegment VarUdateFromDate$address() {
        return VarUdateFromDate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut)
     * }
     */
    public static int VarUdateFromDate(double dateIn, int dwFlags, MemorySegment pudateOut) {
        var mh$ = VarUdateFromDate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarUdateFromDate", dateIn, dwFlags, pudateOut);
            }
            return (int)mh$.invokeExact(dateIn, dwFlags, pudateOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetAltMonthNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetAltMonthNames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static FunctionDescriptor GetAltMonthNames$descriptor() {
        return GetAltMonthNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static MethodHandle GetAltMonthNames$handle() {
        return GetAltMonthNames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static MemorySegment GetAltMonthNames$address() {
        return GetAltMonthNames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetAltMonthNames(LCID lcid, LPOLESTR **prgp)
     * }
     */
    public static int GetAltMonthNames(int lcid, MemorySegment prgp) {
        var mh$ = GetAltMonthNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetAltMonthNames", lcid, prgp);
            }
            return (int)mh$.invokeExact(lcid, prgp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarFormat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormat$descriptor() {
        return VarFormat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormat$handle() {
        return VarFormat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormat$address() {
        return VarFormat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormat(MemorySegment pvarIn, MemorySegment pstrFormat, int iFirstDay, int iFirstWeek, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormat", pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatDateTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarFormatDateTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatDateTime$descriptor() {
        return VarFormatDateTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatDateTime$handle() {
        return VarFormatDateTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormatDateTime$address() {
        return VarFormatDateTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatDateTime(MemorySegment pvarIn, int iNamedFormat, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatDateTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatDateTime", pvarIn, iNamedFormat, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNamedFormat, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatNumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarFormatNumber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatNumber$descriptor() {
        return VarFormatNumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatNumber$handle() {
        return VarFormatNumber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormatNumber$address() {
        return VarFormatNumber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatNumber(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatNumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatNumber", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatPercent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarFormatPercent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatPercent$descriptor() {
        return VarFormatPercent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatPercent$handle() {
        return VarFormatPercent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormatPercent$address() {
        return VarFormatPercent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatPercent(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatPercent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatPercent", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatCurrency {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarFormatCurrency");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarFormatCurrency$descriptor() {
        return VarFormatCurrency.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarFormatCurrency$handle() {
        return VarFormatCurrency.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarFormatCurrency$address() {
        return VarFormatCurrency.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarFormatCurrency(MemorySegment pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarFormatCurrency.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatCurrency", pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarWeekdayName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarWeekdayName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarWeekdayName$descriptor() {
        return VarWeekdayName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarWeekdayName$handle() {
        return VarWeekdayName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarWeekdayName$address() {
        return VarWeekdayName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarWeekdayName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarWeekdayName", iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarMonthName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarMonthName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static FunctionDescriptor VarMonthName$descriptor() {
        return VarMonthName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MethodHandle VarMonthName$handle() {
        return VarMonthName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static MemorySegment VarMonthName$address() {
        return VarMonthName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut)
     * }
     */
    public static int VarMonthName(int iMonth, int fAbbrev, int dwFlags, MemorySegment pbstrOut) {
        var mh$ = VarMonthName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarMonthName", iMonth, fAbbrev, dwFlags, pbstrOut);
            }
            return (int)mh$.invokeExact(iMonth, fAbbrev, dwFlags, pbstrOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarFormatFromTokens {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarFormatFromTokens");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static FunctionDescriptor VarFormatFromTokens$descriptor() {
        return VarFormatFromTokens.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static MethodHandle VarFormatFromTokens$handle() {
        return VarFormatFromTokens.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static MemorySegment VarFormatFromTokens$address() {
        return VarFormatFromTokens.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid)
     * }
     */
    public static int VarFormatFromTokens(MemorySegment pvarIn, MemorySegment pstrFormat, MemorySegment pbTokCur, int dwFlags, MemorySegment pbstrOut, int lcid) {
        var mh$ = VarFormatFromTokens.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarFormatFromTokens", pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid);
            }
            return (int)mh$.invokeExact(pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class VarTokenizeFormatString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("VarTokenizeFormatString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static FunctionDescriptor VarTokenizeFormatString$descriptor() {
        return VarTokenizeFormatString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static MethodHandle VarTokenizeFormatString$handle() {
        return VarTokenizeFormatString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static MemorySegment VarTokenizeFormatString$address() {
        return VarTokenizeFormatString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual)
     * }
     */
    public static int VarTokenizeFormatString(MemorySegment pstrFormat, MemorySegment rgbTok, int cbTok, int iFirstDay, int iFirstWeek, int lcid, MemorySegment pcbActual) {
        var mh$ = VarTokenizeFormatString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("VarTokenizeFormatString", pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual);
            }
            return (int)mh$.invokeExact(pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LHashValOfNameSysA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("LHashValOfNameSysA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static FunctionDescriptor LHashValOfNameSysA$descriptor() {
        return LHashValOfNameSysA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static MethodHandle LHashValOfNameSysA$handle() {
        return LHashValOfNameSysA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static MemorySegment LHashValOfNameSysA$address() {
        return LHashValOfNameSysA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSysA(SYSKIND syskind, LCID lcid, LPCSTR szName)
     * }
     */
    public static int LHashValOfNameSysA(int syskind, int lcid, MemorySegment szName) {
        var mh$ = LHashValOfNameSysA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LHashValOfNameSysA", syskind, lcid, szName);
            }
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LHashValOfNameSys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("LHashValOfNameSys");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static FunctionDescriptor LHashValOfNameSys$descriptor() {
        return LHashValOfNameSys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static MethodHandle LHashValOfNameSys$handle() {
        return LHashValOfNameSys.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static MemorySegment LHashValOfNameSys$address() {
        return LHashValOfNameSys.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR *szName)
     * }
     */
    public static int LHashValOfNameSys(int syskind, int lcid, MemorySegment szName) {
        var mh$ = LHashValOfNameSys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LHashValOfNameSys", syskind, lcid, szName);
            }
            return (int)mh$.invokeExact(syskind, lcid, szName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LoadTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("LoadTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadTypeLib$descriptor() {
        return LoadTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadTypeLib$handle() {
        return LoadTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static MemorySegment LoadTypeLib$address() {
        return LoadTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLib(LPCOLESTR szFile, ITypeLib **pptlib)
     * }
     */
    public static int LoadTypeLib(MemorySegment szFile, MemorySegment pptlib) {
        var mh$ = LoadTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadTypeLib", szFile, pptlib);
            }
            return (int)mh$.invokeExact(szFile, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int REGKIND_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_DEFAULT = 0
     * }
     */
    public static int REGKIND_DEFAULT() {
        return REGKIND_DEFAULT;
    }
    private static final int REGKIND_REGISTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_REGISTER = 1
     * }
     */
    public static int REGKIND_REGISTER() {
        return REGKIND_REGISTER;
    }
    private static final int REGKIND_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagREGKIND.REGKIND_NONE = 2
     * }
     */
    public static int REGKIND_NONE() {
        return REGKIND_NONE;
    }

    private static class LoadTypeLibEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("LoadTypeLibEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadTypeLibEx$descriptor() {
        return LoadTypeLibEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadTypeLibEx$handle() {
        return LoadTypeLibEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static MemorySegment LoadTypeLibEx$address() {
        return LoadTypeLibEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind, ITypeLib **pptlib)
     * }
     */
    public static int LoadTypeLibEx(MemorySegment szFile, int regkind, MemorySegment pptlib) {
        var mh$ = LoadTypeLibEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadTypeLibEx", szFile, regkind, pptlib);
            }
            return (int)mh$.invokeExact(szFile, regkind, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LoadRegTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("LoadRegTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static FunctionDescriptor LoadRegTypeLib$descriptor() {
        return LoadRegTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static MethodHandle LoadRegTypeLib$handle() {
        return LoadRegTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static MemorySegment LoadRegTypeLib$address() {
        return LoadRegTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT LoadRegTypeLib(const GUID *const rguid, WORD wVerMajor, WORD wVerMinor, LCID lcid, ITypeLib **pptlib)
     * }
     */
    public static int LoadRegTypeLib(MemorySegment rguid, short wVerMajor, short wVerMinor, int lcid, MemorySegment pptlib) {
        var mh$ = LoadRegTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LoadRegTypeLib", rguid, wVerMajor, wVerMinor, lcid, pptlib);
            }
            return (int)mh$.invokeExact(rguid, wVerMajor, wVerMinor, lcid, pptlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryPathOfRegTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryPathOfRegTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static FunctionDescriptor QueryPathOfRegTypeLib$descriptor() {
        return QueryPathOfRegTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static MethodHandle QueryPathOfRegTypeLib$handle() {
        return QueryPathOfRegTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static MemorySegment QueryPathOfRegTypeLib$address() {
        return QueryPathOfRegTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT QueryPathOfRegTypeLib(const GUID *const guid, USHORT wMaj, USHORT wMin, LCID lcid, LPBSTR lpbstrPathName)
     * }
     */
    public static int QueryPathOfRegTypeLib(MemorySegment guid, short wMaj, short wMin, int lcid, MemorySegment lpbstrPathName) {
        var mh$ = QueryPathOfRegTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryPathOfRegTypeLib", guid, wMaj, wMin, lcid, lpbstrPathName);
            }
            return (int)mh$.invokeExact(guid, wMaj, wMin, lcid, lpbstrPathName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RegisterTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static FunctionDescriptor RegisterTypeLib$descriptor() {
        return RegisterTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static MethodHandle RegisterTypeLib$handle() {
        return RegisterTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static MemorySegment RegisterTypeLib$address() {
        return RegisterTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLib(ITypeLib *ptlib, LPCOLESTR szFullPath, LPCOLESTR szHelpDir)
     * }
     */
    public static int RegisterTypeLib(MemorySegment ptlib, MemorySegment szFullPath, MemorySegment szHelpDir) {
        var mh$ = RegisterTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterTypeLib", ptlib, szFullPath, szHelpDir);
            }
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnRegisterTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UnRegisterTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static FunctionDescriptor UnRegisterTypeLib$descriptor() {
        return UnRegisterTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MethodHandle UnRegisterTypeLib$handle() {
        return UnRegisterTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MemorySegment UnRegisterTypeLib$address() {
        return UnRegisterTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLib(const GUID *const libID, WORD wVerMajor, WORD wVerMinor, LCID lcid, SYSKIND syskind)
     * }
     */
    public static int UnRegisterTypeLib(MemorySegment libID, short wVerMajor, short wVerMinor, int lcid, int syskind) {
        var mh$ = UnRegisterTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnRegisterTypeLib", libID, wVerMajor, wVerMinor, lcid, syskind);
            }
            return (int)mh$.invokeExact(libID, wVerMajor, wVerMinor, lcid, syskind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterTypeLibForUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RegisterTypeLibForUser");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static FunctionDescriptor RegisterTypeLibForUser$descriptor() {
        return RegisterTypeLibForUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static MethodHandle RegisterTypeLibForUser$handle() {
        return RegisterTypeLibForUser.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static MemorySegment RegisterTypeLibForUser$address() {
        return RegisterTypeLibForUser.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterTypeLibForUser(ITypeLib *ptlib, OLECHAR *szFullPath, OLECHAR *szHelpDir)
     * }
     */
    public static int RegisterTypeLibForUser(MemorySegment ptlib, MemorySegment szFullPath, MemorySegment szHelpDir) {
        var mh$ = RegisterTypeLibForUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterTypeLibForUser", ptlib, szFullPath, szHelpDir);
            }
            return (int)mh$.invokeExact(ptlib, szFullPath, szHelpDir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnRegisterTypeLibForUser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UnRegisterTypeLibForUser");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static FunctionDescriptor UnRegisterTypeLibForUser$descriptor() {
        return UnRegisterTypeLibForUser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MethodHandle UnRegisterTypeLibForUser$handle() {
        return UnRegisterTypeLibForUser.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static MemorySegment UnRegisterTypeLibForUser$address() {
        return UnRegisterTypeLibForUser.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT UnRegisterTypeLibForUser(const GUID *const libID, WORD wMajorVerNum, WORD wMinorVerNum, LCID lcid, SYSKIND syskind)
     * }
     */
    public static int UnRegisterTypeLibForUser(MemorySegment libID, short wMajorVerNum, short wMinorVerNum, int lcid, int syskind) {
        var mh$ = UnRegisterTypeLibForUser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnRegisterTypeLibForUser", libID, wMajorVerNum, wMinorVerNum, lcid, syskind);
            }
            return (int)mh$.invokeExact(libID, wMajorVerNum, wMinorVerNum, lcid, syskind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateTypeLib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateTypeLib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static FunctionDescriptor CreateTypeLib$descriptor() {
        return CreateTypeLib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static MethodHandle CreateTypeLib$handle() {
        return CreateTypeLib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static MemorySegment CreateTypeLib$address() {
        return CreateTypeLib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib **ppctlib)
     * }
     */
    public static int CreateTypeLib(int syskind, MemorySegment szFile, MemorySegment ppctlib) {
        var mh$ = CreateTypeLib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateTypeLib", syskind, szFile, ppctlib);
            }
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateTypeLib2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateTypeLib2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static FunctionDescriptor CreateTypeLib2$descriptor() {
        return CreateTypeLib2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static MethodHandle CreateTypeLib2$handle() {
        return CreateTypeLib2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static MemorySegment CreateTypeLib2$address() {
        return CreateTypeLib2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile, ICreateTypeLib2 **ppctlib)
     * }
     */
    public static int CreateTypeLib2(int syskind, MemorySegment szFile, MemorySegment ppctlib) {
        var mh$ = CreateTypeLib2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateTypeLib2", syskind, szFile, ppctlib);
            }
            return (int)mh$.invokeExact(syskind, szFile, ppctlib);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPARAMDATA {
     *     OLECHAR *szName;
     *     VARTYPE vt;
     * } *LPPARAMDATA
     * }
     */
    public static final AddressLayout LPPARAMDATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagMETHODDATA {
     *     OLECHAR *szName;
     *     PARAMDATA *ppdata;
     *     DISPID dispid;
     *     UINT iMeth;
     *     CALLCONV cc;
     *     UINT cArgs;
     *     WORD wFlags;
     *     VARTYPE vtReturn;
     * } *LPMETHODDATA
     * }
     */
    public static final AddressLayout LPMETHODDATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagINTERFACEDATA {
     *     METHODDATA *pmethdata;
     *     UINT cMembers;
     * } *LPINTERFACEDATA
     * }
     */
    public static final AddressLayout LPINTERFACEDATA = winapi.C_POINTER;

    private static class DispGetParam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_SHORT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DispGetParam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor DispGetParam$descriptor() {
        return DispGetParam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static MethodHandle DispGetParam$handle() {
        return DispGetParam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static MemorySegment DispGetParam$address() {
        return DispGetParam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DispGetParam(DISPPARAMS *pdispparams, UINT position, VARTYPE vtTarg, VARIANT *pvarResult, UINT *puArgErr)
     * }
     */
    public static int DispGetParam(MemorySegment pdispparams, int position, short vtTarg, MemorySegment pvarResult, MemorySegment puArgErr) {
        var mh$ = DispGetParam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispGetParam", pdispparams, position, vtTarg, pvarResult, puArgErr);
            }
            return (int)mh$.invokeExact(pdispparams, position, vtTarg, pvarResult, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispGetIDsOfNames {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DispGetIDsOfNames");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static FunctionDescriptor DispGetIDsOfNames$descriptor() {
        return DispGetIDsOfNames.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static MethodHandle DispGetIDsOfNames$handle() {
        return DispGetIDsOfNames.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static MemorySegment DispGetIDsOfNames$address() {
        return DispGetIDsOfNames.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DispGetIDsOfNames(ITypeInfo *ptinfo, LPOLESTR *rgszNames, UINT cNames, DISPID *rgdispid)
     * }
     */
    public static int DispGetIDsOfNames(MemorySegment ptinfo, MemorySegment rgszNames, int cNames, MemorySegment rgdispid) {
        var mh$ = DispGetIDsOfNames.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispGetIDsOfNames", ptinfo, rgszNames, cNames, rgdispid);
            }
            return (int)mh$.invokeExact(ptinfo, rgszNames, cNames, rgdispid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispInvoke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DispInvoke");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static FunctionDescriptor DispInvoke$descriptor() {
        return DispInvoke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static MethodHandle DispInvoke$handle() {
        return DispInvoke.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static MemorySegment DispInvoke$address() {
        return DispInvoke.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DispInvoke(void *_this, ITypeInfo *ptinfo, DISPID dispidMember, WORD wFlags, DISPPARAMS *pparams, VARIANT *pvarResult, EXCEPINFO *pexcepinfo, UINT *puArgErr)
     * }
     */
    public static int DispInvoke(MemorySegment _this, MemorySegment ptinfo, int dispidMember, short wFlags, MemorySegment pparams, MemorySegment pvarResult, MemorySegment pexcepinfo, MemorySegment puArgErr) {
        var mh$ = DispInvoke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispInvoke", _this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr);
            }
            return (int)mh$.invokeExact(_this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateDispTypeInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateDispTypeInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static FunctionDescriptor CreateDispTypeInfo$descriptor() {
        return CreateDispTypeInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static MethodHandle CreateDispTypeInfo$handle() {
        return CreateDispTypeInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static MemorySegment CreateDispTypeInfo$address() {
        return CreateDispTypeInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateDispTypeInfo(INTERFACEDATA *pidata, LCID lcid, ITypeInfo **pptinfo)
     * }
     */
    public static int CreateDispTypeInfo(MemorySegment pidata, int lcid, MemorySegment pptinfo) {
        var mh$ = CreateDispTypeInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateDispTypeInfo", pidata, lcid, pptinfo);
            }
            return (int)mh$.invokeExact(pidata, lcid, pptinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateStdDispatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateStdDispatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static FunctionDescriptor CreateStdDispatch$descriptor() {
        return CreateStdDispatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static MethodHandle CreateStdDispatch$handle() {
        return CreateStdDispatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static MemorySegment CreateStdDispatch$address() {
        return CreateStdDispatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateStdDispatch(IUnknown *punkOuter, void *pvThis, ITypeInfo *ptinfo, IUnknown **ppunkStdDisp)
     * }
     */
    public static int CreateStdDispatch(MemorySegment punkOuter, MemorySegment pvThis, MemorySegment ptinfo, MemorySegment ppunkStdDisp) {
        var mh$ = CreateStdDispatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateStdDispatch", punkOuter, pvThis, ptinfo, ppunkStdDisp);
            }
            return (int)mh$.invokeExact(punkOuter, pvThis, ptinfo, ppunkStdDisp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DispCallFunc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT,
            winapi.C_SHORT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DispCallFunc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static FunctionDescriptor DispCallFunc$descriptor() {
        return DispCallFunc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static MethodHandle DispCallFunc$handle() {
        return DispCallFunc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static MemorySegment DispCallFunc$address() {
        return DispCallFunc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DispCallFunc(void *pvInstance, ULONG_PTR oVft, CALLCONV cc, VARTYPE vtReturn, UINT cActuals, VARTYPE *prgvt, VARIANTARG **prgpvarg, VARIANT *pvargResult)
     * }
     */
    public static int DispCallFunc(MemorySegment pvInstance, long oVft, int cc, short vtReturn, int cActuals, MemorySegment prgvt, MemorySegment prgpvarg, MemorySegment pvargResult) {
        var mh$ = DispCallFunc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DispCallFunc", pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
            }
            return (int)mh$.invokeExact(pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RegisterActiveObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static FunctionDescriptor RegisterActiveObject$descriptor() {
        return RegisterActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static MethodHandle RegisterActiveObject$handle() {
        return RegisterActiveObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static MemorySegment RegisterActiveObject$address() {
        return RegisterActiveObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterActiveObject(IUnknown *punk, const IID *const rclsid, DWORD dwFlags, DWORD *pdwRegister)
     * }
     */
    public static int RegisterActiveObject(MemorySegment punk, MemorySegment rclsid, int dwFlags, MemorySegment pdwRegister) {
        var mh$ = RegisterActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterActiveObject", punk, rclsid, dwFlags, pdwRegister);
            }
            return (int)mh$.invokeExact(punk, rclsid, dwFlags, pdwRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RevokeActiveObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static FunctionDescriptor RevokeActiveObject$descriptor() {
        return RevokeActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static MethodHandle RevokeActiveObject$handle() {
        return RevokeActiveObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static MemorySegment RevokeActiveObject$address() {
        return RevokeActiveObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeActiveObject(DWORD dwRegister, void *pvReserved)
     * }
     */
    public static int RevokeActiveObject(int dwRegister, MemorySegment pvReserved) {
        var mh$ = RevokeActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeActiveObject", dwRegister, pvReserved);
            }
            return (int)mh$.invokeExact(dwRegister, pvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetActiveObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetActiveObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static FunctionDescriptor GetActiveObject$descriptor() {
        return GetActiveObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static MethodHandle GetActiveObject$handle() {
        return GetActiveObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static MemorySegment GetActiveObject$address() {
        return GetActiveObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetActiveObject(const IID *const rclsid, void *pvReserved, IUnknown **ppunk)
     * }
     */
    public static int GetActiveObject(MemorySegment rclsid, MemorySegment pvReserved, MemorySegment ppunk) {
        var mh$ = GetActiveObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetActiveObject", rclsid, pvReserved, ppunk);
            }
            return (int)mh$.invokeExact(rclsid, pvReserved, ppunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static FunctionDescriptor SetErrorInfo$descriptor() {
        return SetErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static MethodHandle SetErrorInfo$handle() {
        return SetErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static MemorySegment SetErrorInfo$address() {
        return SetErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SetErrorInfo(ULONG dwReserved, IErrorInfo *perrinfo)
     * }
     */
    public static int SetErrorInfo(int dwReserved, MemorySegment perrinfo) {
        var mh$ = SetErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetErrorInfo", dwReserved, perrinfo);
            }
            return (int)mh$.invokeExact(dwReserved, perrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static FunctionDescriptor GetErrorInfo$descriptor() {
        return GetErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static MethodHandle GetErrorInfo$handle() {
        return GetErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static MemorySegment GetErrorInfo$address() {
        return GetErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetErrorInfo(ULONG dwReserved, IErrorInfo **pperrinfo)
     * }
     */
    public static int GetErrorInfo(int dwReserved, MemorySegment pperrinfo) {
        var mh$ = GetErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetErrorInfo", dwReserved, pperrinfo);
            }
            return (int)mh$.invokeExact(dwReserved, pperrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateErrorInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateErrorInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static FunctionDescriptor CreateErrorInfo$descriptor() {
        return CreateErrorInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static MethodHandle CreateErrorInfo$handle() {
        return CreateErrorInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static MemorySegment CreateErrorInfo$address() {
        return CreateErrorInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateErrorInfo(ICreateErrorInfo **pperrinfo)
     * }
     */
    public static int CreateErrorInfo(MemorySegment pperrinfo) {
        var mh$ = CreateErrorInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateErrorInfo", pperrinfo);
            }
            return (int)mh$.invokeExact(pperrinfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetRecordInfoFromTypeInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetRecordInfoFromTypeInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static FunctionDescriptor GetRecordInfoFromTypeInfo$descriptor() {
        return GetRecordInfoFromTypeInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MethodHandle GetRecordInfoFromTypeInfo$handle() {
        return GetRecordInfoFromTypeInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MemorySegment GetRecordInfoFromTypeInfo$address() {
        return GetRecordInfoFromTypeInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromTypeInfo(ITypeInfo *pTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static int GetRecordInfoFromTypeInfo(MemorySegment pTypeInfo, MemorySegment ppRecInfo) {
        var mh$ = GetRecordInfoFromTypeInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetRecordInfoFromTypeInfo", pTypeInfo, ppRecInfo);
            }
            return (int)mh$.invokeExact(pTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetRecordInfoFromGuids {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetRecordInfoFromGuids");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static FunctionDescriptor GetRecordInfoFromGuids$descriptor() {
        return GetRecordInfoFromGuids.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MethodHandle GetRecordInfoFromGuids$handle() {
        return GetRecordInfoFromGuids.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static MemorySegment GetRecordInfoFromGuids$address() {
        return GetRecordInfoFromGuids.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT GetRecordInfoFromGuids(const GUID *const rGuidTypeLib, ULONG uVerMajor, ULONG uVerMinor, LCID lcid, const GUID *const rGuidTypeInfo, IRecordInfo **ppRecInfo)
     * }
     */
    public static int GetRecordInfoFromGuids(MemorySegment rGuidTypeLib, int uVerMajor, int uVerMinor, int lcid, MemorySegment rGuidTypeInfo, MemorySegment ppRecInfo) {
        var mh$ = GetRecordInfoFromGuids.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetRecordInfoFromGuids", rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
            }
            return (int)mh$.invokeExact(rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OaBuildVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("OaBuildVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static FunctionDescriptor OaBuildVersion$descriptor() {
        return OaBuildVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static MethodHandle OaBuildVersion$handle() {
        return OaBuildVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static MemorySegment OaBuildVersion$address() {
        return OaBuildVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ULONG OaBuildVersion()
     * }
     */
    public static int OaBuildVersion() {
        var mh$ = OaBuildVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OaBuildVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClearCustData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ClearCustData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static FunctionDescriptor ClearCustData$descriptor() {
        return ClearCustData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static MethodHandle ClearCustData$handle() {
        return ClearCustData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static MemorySegment ClearCustData$address() {
        return ClearCustData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ClearCustData(LPCUSTDATA pCustData)
     * }
     */
    public static void ClearCustData(MemorySegment pCustData) {
        var mh$ = ClearCustData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClearCustData", pCustData);
            }
            mh$.invokeExact(pCustData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OaEnablePerUserTLibRegistration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("OaEnablePerUserTLibRegistration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static FunctionDescriptor OaEnablePerUserTLibRegistration$descriptor() {
        return OaEnablePerUserTLibRegistration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static MethodHandle OaEnablePerUserTLibRegistration$handle() {
        return OaEnablePerUserTLibRegistration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static MemorySegment OaEnablePerUserTLibRegistration$address() {
        return OaEnablePerUserTLibRegistration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void OaEnablePerUserTLibRegistration()
     * }
     */
    public static void OaEnablePerUserTLibRegistration() {
        var mh$ = OaEnablePerUserTLibRegistration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OaEnablePerUserTLibRegistration");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleBuildVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleBuildVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static FunctionDescriptor OleBuildVersion$descriptor() {
        return OleBuildVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static MethodHandle OleBuildVersion$handle() {
        return OleBuildVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static MemorySegment OleBuildVersion$address() {
        return OleBuildVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern DWORD OleBuildVersion()
     * }
     */
    public static int OleBuildVersion() {
        var mh$ = OleBuildVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleBuildVersion");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WriteFmtUserTypeStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WriteFmtUserTypeStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static FunctionDescriptor WriteFmtUserTypeStg$descriptor() {
        return WriteFmtUserTypeStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static MethodHandle WriteFmtUserTypeStg$handle() {
        return WriteFmtUserTypeStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static MemorySegment WriteFmtUserTypeStg$address() {
        return WriteFmtUserTypeStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT WriteFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType)
     * }
     */
    public static int WriteFmtUserTypeStg(MemorySegment pstg, short cf, MemorySegment lpszUserType) {
        var mh$ = WriteFmtUserTypeStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WriteFmtUserTypeStg", pstg, cf, lpszUserType);
            }
            return (int)mh$.invokeExact(pstg, cf, lpszUserType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadFmtUserTypeStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ReadFmtUserTypeStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static FunctionDescriptor ReadFmtUserTypeStg$descriptor() {
        return ReadFmtUserTypeStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static MethodHandle ReadFmtUserTypeStg$handle() {
        return ReadFmtUserTypeStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static MemorySegment ReadFmtUserTypeStg$address() {
        return ReadFmtUserTypeStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT ReadFmtUserTypeStg(LPSTORAGE pstg, CLIPFORMAT *pcf, LPOLESTR *lplpszUserType)
     * }
     */
    public static int ReadFmtUserTypeStg(MemorySegment pstg, MemorySegment pcf, MemorySegment lplpszUserType) {
        var mh$ = ReadFmtUserTypeStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadFmtUserTypeStg", pstg, pcf, lplpszUserType);
            }
            return (int)mh$.invokeExact(pstg, pcf, lplpszUserType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static FunctionDescriptor OleInitialize$descriptor() {
        return OleInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static MethodHandle OleInitialize$handle() {
        return OleInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static MemorySegment OleInitialize$address() {
        return OleInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleInitialize(LPVOID pvReserved)
     * }
     */
    public static int OleInitialize(MemorySegment pvReserved) {
        var mh$ = OleInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleInitialize", pvReserved);
            }
            return (int)mh$.invokeExact(pvReserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleUninitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleUninitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static FunctionDescriptor OleUninitialize$descriptor() {
        return OleUninitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static MethodHandle OleUninitialize$handle() {
        return OleUninitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static MemorySegment OleUninitialize$address() {
        return OleUninitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void OleUninitialize()
     * }
     */
    public static void OleUninitialize() {
        var mh$ = OleUninitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleUninitialize");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleQueryLinkFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleQueryLinkFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static FunctionDescriptor OleQueryLinkFromData$descriptor() {
        return OleQueryLinkFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MethodHandle OleQueryLinkFromData$handle() {
        return OleQueryLinkFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MemorySegment OleQueryLinkFromData$address() {
        return OleQueryLinkFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static int OleQueryLinkFromData(MemorySegment pSrcDataObject) {
        var mh$ = OleQueryLinkFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleQueryLinkFromData", pSrcDataObject);
            }
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleQueryCreateFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleQueryCreateFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static FunctionDescriptor OleQueryCreateFromData$descriptor() {
        return OleQueryCreateFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MethodHandle OleQueryCreateFromData$handle() {
        return OleQueryCreateFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static MemorySegment OleQueryCreateFromData$address() {
        return OleQueryCreateFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject)
     * }
     */
    public static int OleQueryCreateFromData(MemorySegment pSrcDataObject) {
        var mh$ = OleQueryCreateFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleQueryCreateFromData", pSrcDataObject);
            }
            return (int)mh$.invokeExact(pSrcDataObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreate$descriptor() {
        return OleCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreate$handle() {
        return OleCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreate$address() {
        return OleCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreate(const IID *const rclsid, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreate(MemorySegment rclsid, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreate", rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateEx$descriptor() {
        return OleCreateEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateEx$handle() {
        return OleCreateEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateEx$address() {
        return OleCreateEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateEx(const IID *const rclsid, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateEx(MemorySegment rclsid, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateEx", rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromData$descriptor() {
        return OleCreateFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromData$handle() {
        return OleCreateFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateFromData$address() {
        return OleCreateFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromData(MemorySegment pSrcDataObj, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromData", pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromDataEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateFromDataEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromDataEx$descriptor() {
        return OleCreateFromDataEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromDataEx$handle() {
        return OleCreateFromDataEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateFromDataEx$address() {
        return OleCreateFromDataEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromDataEx(MemorySegment pSrcDataObj, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromDataEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromDataEx", pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateLinkFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkFromData$descriptor() {
        return OleCreateLinkFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkFromData$handle() {
        return OleCreateLinkFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkFromData$address() {
        return OleCreateLinkFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkFromData(MemorySegment pSrcDataObj, MemorySegment riid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkFromData", pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkFromDataEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateLinkFromDataEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkFromDataEx$descriptor() {
        return OleCreateLinkFromDataEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkFromDataEx$handle() {
        return OleCreateLinkFromDataEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkFromDataEx$address() {
        return OleCreateLinkFromDataEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkFromDataEx(MemorySegment pSrcDataObj, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkFromDataEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkFromDataEx", pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateStaticFromData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateStaticFromData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateStaticFromData$descriptor() {
        return OleCreateStaticFromData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateStaticFromData$handle() {
        return OleCreateStaticFromData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateStaticFromData$address() {
        return OleCreateStaticFromData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID *const iid, DWORD renderopt, LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateStaticFromData(MemorySegment pSrcDataObj, MemorySegment iid, int renderopt, MemorySegment pFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateStaticFromData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateStaticFromData", pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateLink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLink$descriptor() {
        return OleCreateLink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLink$handle() {
        return OleCreateLink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLink$address() {
        return OleCreateLink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLink(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLink(MemorySegment pmkLinkSrc, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLink", pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateLinkEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkEx$descriptor() {
        return OleCreateLinkEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkEx$handle() {
        return OleCreateLinkEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkEx$address() {
        return OleCreateLinkEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkEx(MemorySegment pmkLinkSrc, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkEx", pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkToFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateLinkToFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkToFile$descriptor() {
        return OleCreateLinkToFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkToFile$handle() {
        return OleCreateLinkToFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkToFile$address() {
        return OleCreateLinkToFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkToFile(MemorySegment lpszFileName, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkToFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkToFile", lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateLinkToFileEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateLinkToFileEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateLinkToFileEx$descriptor() {
        return OleCreateLinkToFileEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateLinkToFileEx$handle() {
        return OleCreateLinkToFileEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateLinkToFileEx$address() {
        return OleCreateLinkToFileEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateLinkToFileEx(MemorySegment lpszFileName, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateLinkToFileEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateLinkToFileEx", lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateFromFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFile(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromFile$descriptor() {
        return OleCreateFromFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFile(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromFile$handle() {
        return OleCreateFromFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFile(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateFromFile$address() {
        return OleCreateFromFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFile(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD renderopt, LPFORMATETC lpFormatEtc, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromFile(MemorySegment rclsid, MemorySegment lpszFileName, MemorySegment riid, int renderopt, MemorySegment lpFormatEtc, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromFile", rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateFromFileEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateFromFileEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFileEx(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleCreateFromFileEx$descriptor() {
        return OleCreateFromFileEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFileEx(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleCreateFromFileEx$handle() {
        return OleCreateFromFileEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFileEx(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleCreateFromFileEx$address() {
        return OleCreateFromFileEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateFromFileEx(const IID *const rclsid, LPCOLESTR lpszFileName, const IID *const riid, DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD *rgAdvf, LPFORMATETC rgFormatEtc, IAdviseSink *lpAdviseSink, DWORD *rgdwConnection, LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID *ppvObj)
     * }
     */
    public static int OleCreateFromFileEx(MemorySegment rclsid, MemorySegment lpszFileName, MemorySegment riid, int dwFlags, int renderopt, int cFormats, MemorySegment rgAdvf, MemorySegment rgFormatEtc, MemorySegment lpAdviseSink, MemorySegment rgdwConnection, MemorySegment pClientSite, MemorySegment pStg, MemorySegment ppvObj) {
        var mh$ = OleCreateFromFileEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateFromFileEx", rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
            }
            return (int)mh$.invokeExact(rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleLoad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleLoad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleLoad(LPSTORAGE pStg, const IID *const riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleLoad$descriptor() {
        return OleLoad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleLoad(LPSTORAGE pStg, const IID *const riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleLoad$handle() {
        return OleLoad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleLoad(LPSTORAGE pStg, const IID *const riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleLoad$address() {
        return OleLoad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleLoad(LPSTORAGE pStg, const IID *const riid, LPOLECLIENTSITE pClientSite, LPVOID *ppvObj)
     * }
     */
    public static int OleLoad(MemorySegment pStg, MemorySegment riid, MemorySegment pClientSite, MemorySegment ppvObj) {
        var mh$ = OleLoad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleLoad", pStg, riid, pClientSite, ppvObj);
            }
            return (int)mh$.invokeExact(pStg, riid, pClientSite, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSave {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleSave");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad)
     * }
     */
    public static FunctionDescriptor OleSave$descriptor() {
        return OleSave.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad)
     * }
     */
    public static MethodHandle OleSave$handle() {
        return OleSave.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad)
     * }
     */
    public static MemorySegment OleSave$address() {
        return OleSave.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad)
     * }
     */
    public static int OleSave(MemorySegment pPS, MemorySegment pStg, int fSameAsLoad) {
        var mh$ = OleSave.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSave", pPS, pStg, fSameAsLoad);
            }
            return (int)mh$.invokeExact(pPS, pStg, fSameAsLoad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleLoadFromStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleLoadFromStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
     * }
     */
    public static FunctionDescriptor OleLoadFromStream$descriptor() {
        return OleLoadFromStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
     * }
     */
    public static MethodHandle OleLoadFromStream$handle() {
        return OleLoadFromStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
     * }
     */
    public static MemorySegment OleLoadFromStream$address() {
        return OleLoadFromStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleLoadFromStream(LPSTREAM pStm, const IID *const iidInterface, LPVOID *ppvObj)
     * }
     */
    public static int OleLoadFromStream(MemorySegment pStm, MemorySegment iidInterface, MemorySegment ppvObj) {
        var mh$ = OleLoadFromStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleLoadFromStream", pStm, iidInterface, ppvObj);
            }
            return (int)mh$.invokeExact(pStm, iidInterface, ppvObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSaveToStream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleSaveToStream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
     * }
     */
    public static FunctionDescriptor OleSaveToStream$descriptor() {
        return OleSaveToStream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
     * }
     */
    public static MethodHandle OleSaveToStream$handle() {
        return OleSaveToStream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
     * }
     */
    public static MemorySegment OleSaveToStream$address() {
        return OleSaveToStream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleSaveToStream(LPPERSISTSTREAM pPStm, LPSTREAM pStm)
     * }
     */
    public static int OleSaveToStream(MemorySegment pPStm, MemorySegment pStm) {
        var mh$ = OleSaveToStream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSaveToStream", pPStm, pStm);
            }
            return (int)mh$.invokeExact(pPStm, pStm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSetContainedObject {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleSetContainedObject");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained)
     * }
     */
    public static FunctionDescriptor OleSetContainedObject$descriptor() {
        return OleSetContainedObject.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained)
     * }
     */
    public static MethodHandle OleSetContainedObject$handle() {
        return OleSetContainedObject.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained)
     * }
     */
    public static MemorySegment OleSetContainedObject$address() {
        return OleSetContainedObject.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained)
     * }
     */
    public static int OleSetContainedObject(MemorySegment pUnknown, int fContained) {
        var mh$ = OleSetContainedObject.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSetContainedObject", pUnknown, fContained);
            }
            return (int)mh$.invokeExact(pUnknown, fContained);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleNoteObjectVisible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleNoteObjectVisible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible)
     * }
     */
    public static FunctionDescriptor OleNoteObjectVisible$descriptor() {
        return OleNoteObjectVisible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible)
     * }
     */
    public static MethodHandle OleNoteObjectVisible$handle() {
        return OleNoteObjectVisible.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible)
     * }
     */
    public static MemorySegment OleNoteObjectVisible$address() {
        return OleNoteObjectVisible.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible)
     * }
     */
    public static int OleNoteObjectVisible(MemorySegment pUnknown, int fVisible) {
        var mh$ = OleNoteObjectVisible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleNoteObjectVisible", pUnknown, fVisible);
            }
            return (int)mh$.invokeExact(pUnknown, fVisible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterDragDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RegisterDragDrop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget)
     * }
     */
    public static FunctionDescriptor RegisterDragDrop$descriptor() {
        return RegisterDragDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget)
     * }
     */
    public static MethodHandle RegisterDragDrop$handle() {
        return RegisterDragDrop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget)
     * }
     */
    public static MemorySegment RegisterDragDrop$address() {
        return RegisterDragDrop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget)
     * }
     */
    public static int RegisterDragDrop(MemorySegment hwnd, MemorySegment pDropTarget) {
        var mh$ = RegisterDragDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterDragDrop", hwnd, pDropTarget);
            }
            return (int)mh$.invokeExact(hwnd, pDropTarget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RevokeDragDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RevokeDragDrop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT RevokeDragDrop(HWND hwnd)
     * }
     */
    public static FunctionDescriptor RevokeDragDrop$descriptor() {
        return RevokeDragDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT RevokeDragDrop(HWND hwnd)
     * }
     */
    public static MethodHandle RevokeDragDrop$handle() {
        return RevokeDragDrop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT RevokeDragDrop(HWND hwnd)
     * }
     */
    public static MemorySegment RevokeDragDrop$address() {
        return RevokeDragDrop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT RevokeDragDrop(HWND hwnd)
     * }
     */
    public static int RevokeDragDrop(MemorySegment hwnd) {
        var mh$ = RevokeDragDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RevokeDragDrop", hwnd);
            }
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DoDragDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DoDragDrop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect)
     * }
     */
    public static FunctionDescriptor DoDragDrop$descriptor() {
        return DoDragDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect)
     * }
     */
    public static MethodHandle DoDragDrop$handle() {
        return DoDragDrop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect)
     * }
     */
    public static MemorySegment DoDragDrop$address() {
        return DoDragDrop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource, DWORD dwOKEffects, LPDWORD pdwEffect)
     * }
     */
    public static int DoDragDrop(MemorySegment pDataObj, MemorySegment pDropSource, int dwOKEffects, MemorySegment pdwEffect) {
        var mh$ = DoDragDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DoDragDrop", pDataObj, pDropSource, dwOKEffects, pdwEffect);
            }
            return (int)mh$.invokeExact(pDataObj, pDropSource, dwOKEffects, pdwEffect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSetClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleSetClipboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSetClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static FunctionDescriptor OleSetClipboard$descriptor() {
        return OleSetClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSetClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static MethodHandle OleSetClipboard$handle() {
        return OleSetClipboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleSetClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static MemorySegment OleSetClipboard$address() {
        return OleSetClipboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleSetClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static int OleSetClipboard(MemorySegment pDataObj) {
        var mh$ = OleSetClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSetClipboard", pDataObj);
            }
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleGetClipboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboard(LPDATAOBJECT *ppDataObj)
     * }
     */
    public static FunctionDescriptor OleGetClipboard$descriptor() {
        return OleGetClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboard(LPDATAOBJECT *ppDataObj)
     * }
     */
    public static MethodHandle OleGetClipboard$handle() {
        return OleGetClipboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboard(LPDATAOBJECT *ppDataObj)
     * }
     */
    public static MemorySegment OleGetClipboard$address() {
        return OleGetClipboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboard(LPDATAOBJECT *ppDataObj)
     * }
     */
    public static int OleGetClipboard(MemorySegment ppDataObj) {
        var mh$ = OleGetClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetClipboard", ppDataObj);
            }
            return (int)mh$.invokeExact(ppDataObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetClipboardWithEnterpriseInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleGetClipboardWithEnterpriseInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject **dataObject, PWSTR *dataEnterpriseId, PWSTR *sourceDescription, PWSTR *targetDescription, PWSTR *dataDescription)
     * }
     */
    public static FunctionDescriptor OleGetClipboardWithEnterpriseInfo$descriptor() {
        return OleGetClipboardWithEnterpriseInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject **dataObject, PWSTR *dataEnterpriseId, PWSTR *sourceDescription, PWSTR *targetDescription, PWSTR *dataDescription)
     * }
     */
    public static MethodHandle OleGetClipboardWithEnterpriseInfo$handle() {
        return OleGetClipboardWithEnterpriseInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject **dataObject, PWSTR *dataEnterpriseId, PWSTR *sourceDescription, PWSTR *targetDescription, PWSTR *dataDescription)
     * }
     */
    public static MemorySegment OleGetClipboardWithEnterpriseInfo$address() {
        return OleGetClipboardWithEnterpriseInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject **dataObject, PWSTR *dataEnterpriseId, PWSTR *sourceDescription, PWSTR *targetDescription, PWSTR *dataDescription)
     * }
     */
    public static int OleGetClipboardWithEnterpriseInfo(MemorySegment dataObject, MemorySegment dataEnterpriseId, MemorySegment sourceDescription, MemorySegment targetDescription, MemorySegment dataDescription) {
        var mh$ = OleGetClipboardWithEnterpriseInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetClipboardWithEnterpriseInfo", dataObject, dataEnterpriseId, sourceDescription, targetDescription, dataDescription);
            }
            return (int)mh$.invokeExact(dataObject, dataEnterpriseId, sourceDescription, targetDescription, dataDescription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleFlushClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleFlushClipboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleFlushClipboard()
     * }
     */
    public static FunctionDescriptor OleFlushClipboard$descriptor() {
        return OleFlushClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleFlushClipboard()
     * }
     */
    public static MethodHandle OleFlushClipboard$handle() {
        return OleFlushClipboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleFlushClipboard()
     * }
     */
    public static MemorySegment OleFlushClipboard$address() {
        return OleFlushClipboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleFlushClipboard()
     * }
     */
    public static int OleFlushClipboard() {
        var mh$ = OleFlushClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleFlushClipboard");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleIsCurrentClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleIsCurrentClipboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static FunctionDescriptor OleIsCurrentClipboard$descriptor() {
        return OleIsCurrentClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static MethodHandle OleIsCurrentClipboard$handle() {
        return OleIsCurrentClipboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static MemorySegment OleIsCurrentClipboard$address() {
        return OleIsCurrentClipboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleIsCurrentClipboard(LPDATAOBJECT pDataObj)
     * }
     */
    public static int OleIsCurrentClipboard(MemorySegment pDataObj) {
        var mh$ = OleIsCurrentClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleIsCurrentClipboard", pDataObj);
            }
            return (int)mh$.invokeExact(pDataObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateMenuDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateMenuDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HOLEMENU OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths)
     * }
     */
    public static FunctionDescriptor OleCreateMenuDescriptor$descriptor() {
        return OleCreateMenuDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HOLEMENU OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths)
     * }
     */
    public static MethodHandle OleCreateMenuDescriptor$handle() {
        return OleCreateMenuDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HOLEMENU OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths)
     * }
     */
    public static MemorySegment OleCreateMenuDescriptor$address() {
        return OleCreateMenuDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HOLEMENU OleCreateMenuDescriptor(HMENU hmenuCombined, LPOLEMENUGROUPWIDTHS lpMenuWidths)
     * }
     */
    public static MemorySegment OleCreateMenuDescriptor(MemorySegment hmenuCombined, MemorySegment lpMenuWidths) {
        var mh$ = OleCreateMenuDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateMenuDescriptor", hmenuCombined, lpMenuWidths);
            }
            return (MemorySegment)mh$.invokeExact(hmenuCombined, lpMenuWidths);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSetMenuDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleSetMenuDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj)
     * }
     */
    public static FunctionDescriptor OleSetMenuDescriptor$descriptor() {
        return OleSetMenuDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj)
     * }
     */
    public static MethodHandle OleSetMenuDescriptor$handle() {
        return OleSetMenuDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj)
     * }
     */
    public static MemorySegment OleSetMenuDescriptor$address() {
        return OleSetMenuDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleSetMenuDescriptor(HOLEMENU holemenu, HWND hwndFrame, HWND hwndActiveObject, LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEACTIVEOBJECT lpActiveObj)
     * }
     */
    public static int OleSetMenuDescriptor(MemorySegment holemenu, MemorySegment hwndFrame, MemorySegment hwndActiveObject, MemorySegment lpFrame, MemorySegment lpActiveObj) {
        var mh$ = OleSetMenuDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSetMenuDescriptor", holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj);
            }
            return (int)mh$.invokeExact(holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleDestroyMenuDescriptor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleDestroyMenuDescriptor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleDestroyMenuDescriptor(HOLEMENU holemenu)
     * }
     */
    public static FunctionDescriptor OleDestroyMenuDescriptor$descriptor() {
        return OleDestroyMenuDescriptor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleDestroyMenuDescriptor(HOLEMENU holemenu)
     * }
     */
    public static MethodHandle OleDestroyMenuDescriptor$handle() {
        return OleDestroyMenuDescriptor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleDestroyMenuDescriptor(HOLEMENU holemenu)
     * }
     */
    public static MemorySegment OleDestroyMenuDescriptor$address() {
        return OleDestroyMenuDescriptor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleDestroyMenuDescriptor(HOLEMENU holemenu)
     * }
     */
    public static int OleDestroyMenuDescriptor(MemorySegment holemenu) {
        var mh$ = OleDestroyMenuDescriptor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleDestroyMenuDescriptor", holemenu);
            }
            return (int)mh$.invokeExact(holemenu);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleTranslateAccelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleTranslateAccelerator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg)
     * }
     */
    public static FunctionDescriptor OleTranslateAccelerator$descriptor() {
        return OleTranslateAccelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg)
     * }
     */
    public static MethodHandle OleTranslateAccelerator$handle() {
        return OleTranslateAccelerator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg)
     * }
     */
    public static MemorySegment OleTranslateAccelerator$address() {
        return OleTranslateAccelerator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleTranslateAccelerator(LPOLEINPLACEFRAME lpFrame, LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg)
     * }
     */
    public static int OleTranslateAccelerator(MemorySegment lpFrame, MemorySegment lpFrameInfo, MemorySegment lpmsg) {
        var mh$ = OleTranslateAccelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleTranslateAccelerator", lpFrame, lpFrameInfo, lpmsg);
            }
            return (int)mh$.invokeExact(lpFrame, lpFrameInfo, lpmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleDuplicateData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleDuplicateData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HANDLE OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags)
     * }
     */
    public static FunctionDescriptor OleDuplicateData$descriptor() {
        return OleDuplicateData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HANDLE OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags)
     * }
     */
    public static MethodHandle OleDuplicateData$handle() {
        return OleDuplicateData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HANDLE OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags)
     * }
     */
    public static MemorySegment OleDuplicateData$address() {
        return OleDuplicateData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HANDLE OleDuplicateData(HANDLE hSrc, CLIPFORMAT cfFormat, UINT uiFlags)
     * }
     */
    public static MemorySegment OleDuplicateData(MemorySegment hSrc, short cfFormat, int uiFlags) {
        var mh$ = OleDuplicateData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleDuplicateData", hSrc, cfFormat, uiFlags);
            }
            return (MemorySegment)mh$.invokeExact(hSrc, cfFormat, uiFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleDraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleDraw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds)
     * }
     */
    public static FunctionDescriptor OleDraw$descriptor() {
        return OleDraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds)
     * }
     */
    public static MethodHandle OleDraw$handle() {
        return OleDraw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds)
     * }
     */
    public static MemorySegment OleDraw$address() {
        return OleDraw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleDraw(LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw, LPCRECT lprcBounds)
     * }
     */
    public static int OleDraw(MemorySegment pUnknown, int dwAspect, MemorySegment hdcDraw, MemorySegment lprcBounds) {
        var mh$ = OleDraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleDraw", pUnknown, dwAspect, hdcDraw, lprcBounds);
            }
            return (int)mh$.invokeExact(pUnknown, dwAspect, hdcDraw, lprcBounds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRun {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleRun");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRun(LPUNKNOWN pUnknown)
     * }
     */
    public static FunctionDescriptor OleRun$descriptor() {
        return OleRun.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRun(LPUNKNOWN pUnknown)
     * }
     */
    public static MethodHandle OleRun$handle() {
        return OleRun.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleRun(LPUNKNOWN pUnknown)
     * }
     */
    public static MemorySegment OleRun$address() {
        return OleRun.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleRun(LPUNKNOWN pUnknown)
     * }
     */
    public static int OleRun(MemorySegment pUnknown) {
        var mh$ = OleRun.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRun", pUnknown);
            }
            return (int)mh$.invokeExact(pUnknown);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleIsRunning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleIsRunning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL OleIsRunning(LPOLEOBJECT pObject)
     * }
     */
    public static FunctionDescriptor OleIsRunning$descriptor() {
        return OleIsRunning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL OleIsRunning(LPOLEOBJECT pObject)
     * }
     */
    public static MethodHandle OleIsRunning$handle() {
        return OleIsRunning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL OleIsRunning(LPOLEOBJECT pObject)
     * }
     */
    public static MemorySegment OleIsRunning$address() {
        return OleIsRunning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL OleIsRunning(LPOLEOBJECT pObject)
     * }
     */
    public static int OleIsRunning(MemorySegment pObject) {
        var mh$ = OleIsRunning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleIsRunning", pObject);
            }
            return (int)mh$.invokeExact(pObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleLockRunning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleLockRunning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses)
     * }
     */
    public static FunctionDescriptor OleLockRunning$descriptor() {
        return OleLockRunning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses)
     * }
     */
    public static MethodHandle OleLockRunning$handle() {
        return OleLockRunning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses)
     * }
     */
    public static MemorySegment OleLockRunning$address() {
        return OleLockRunning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses)
     * }
     */
    public static int OleLockRunning(MemorySegment pUnknown, int fLock, int fLastUnlockCloses) {
        var mh$ = OleLockRunning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleLockRunning", pUnknown, fLock, fLastUnlockCloses);
            }
            return (int)mh$.invokeExact(pUnknown, fLock, fLastUnlockCloses);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReleaseStgMedium {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ReleaseStgMedium");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ReleaseStgMedium(LPSTGMEDIUM)
     * }
     */
    public static FunctionDescriptor ReleaseStgMedium$descriptor() {
        return ReleaseStgMedium.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ReleaseStgMedium(LPSTGMEDIUM)
     * }
     */
    public static MethodHandle ReleaseStgMedium$handle() {
        return ReleaseStgMedium.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ReleaseStgMedium(LPSTGMEDIUM)
     * }
     */
    public static MemorySegment ReleaseStgMedium$address() {
        return ReleaseStgMedium.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ReleaseStgMedium(LPSTGMEDIUM)
     * }
     */
    public static void ReleaseStgMedium(MemorySegment x0) {
        var mh$ = ReleaseStgMedium.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReleaseStgMedium", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateOleAdviseHolder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateOleAdviseHolder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder)
     * }
     */
    public static FunctionDescriptor CreateOleAdviseHolder$descriptor() {
        return CreateOleAdviseHolder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder)
     * }
     */
    public static MethodHandle CreateOleAdviseHolder$handle() {
        return CreateOleAdviseHolder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder)
     * }
     */
    public static MemorySegment CreateOleAdviseHolder$address() {
        return CreateOleAdviseHolder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT CreateOleAdviseHolder(LPOLEADVISEHOLDER *ppOAHolder)
     * }
     */
    public static int CreateOleAdviseHolder(MemorySegment ppOAHolder) {
        var mh$ = CreateOleAdviseHolder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateOleAdviseHolder", ppOAHolder);
            }
            return (int)mh$.invokeExact(ppOAHolder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateDefaultHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateDefaultHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateDefaultHandler(const IID *const clsid, LPUNKNOWN pUnkOuter, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static FunctionDescriptor OleCreateDefaultHandler$descriptor() {
        return OleCreateDefaultHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateDefaultHandler(const IID *const clsid, LPUNKNOWN pUnkOuter, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static MethodHandle OleCreateDefaultHandler$handle() {
        return OleCreateDefaultHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateDefaultHandler(const IID *const clsid, LPUNKNOWN pUnkOuter, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static MemorySegment OleCreateDefaultHandler$address() {
        return OleCreateDefaultHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateDefaultHandler(const IID *const clsid, LPUNKNOWN pUnkOuter, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static int OleCreateDefaultHandler(MemorySegment clsid, MemorySegment pUnkOuter, MemorySegment riid, MemorySegment lplpObj) {
        var mh$ = OleCreateDefaultHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateDefaultHandler", clsid, pUnkOuter, riid, lplpObj);
            }
            return (int)mh$.invokeExact(clsid, pUnkOuter, riid, lplpObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleCreateEmbeddingHelper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleCreateEmbeddingHelper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEmbeddingHelper(const IID *const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static FunctionDescriptor OleCreateEmbeddingHelper$descriptor() {
        return OleCreateEmbeddingHelper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEmbeddingHelper(const IID *const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static MethodHandle OleCreateEmbeddingHelper$handle() {
        return OleCreateEmbeddingHelper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleCreateEmbeddingHelper(const IID *const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static MemorySegment OleCreateEmbeddingHelper$address() {
        return OleCreateEmbeddingHelper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleCreateEmbeddingHelper(const IID *const clsid, LPUNKNOWN pUnkOuter, DWORD flags, LPCLASSFACTORY pCF, const IID *const riid, LPVOID *lplpObj)
     * }
     */
    public static int OleCreateEmbeddingHelper(MemorySegment clsid, MemorySegment pUnkOuter, int flags, MemorySegment pCF, MemorySegment riid, MemorySegment lplpObj) {
        var mh$ = OleCreateEmbeddingHelper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleCreateEmbeddingHelper", clsid, pUnkOuter, flags, pCF, riid, lplpObj);
            }
            return (int)mh$.invokeExact(clsid, pUnkOuter, flags, pCF, riid, lplpObj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsAccelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IsAccelerator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd)
     * }
     */
    public static FunctionDescriptor IsAccelerator$descriptor() {
        return IsAccelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd)
     * }
     */
    public static MethodHandle IsAccelerator$handle() {
        return IsAccelerator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd)
     * }
     */
    public static MemorySegment IsAccelerator$address() {
        return IsAccelerator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg, WORD *lpwCmd)
     * }
     */
    public static int IsAccelerator(MemorySegment hAccel, int cAccelEntries, MemorySegment lpMsg, MemorySegment lpwCmd) {
        var mh$ = IsAccelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsAccelerator", hAccel, cAccelEntries, lpMsg, lpwCmd);
            }
            return (int)mh$.invokeExact(hAccel, cAccelEntries, lpMsg, lpwCmd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetIconOfFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleGetIconOfFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel)
     * }
     */
    public static FunctionDescriptor OleGetIconOfFile$descriptor() {
        return OleGetIconOfFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel)
     * }
     */
    public static MethodHandle OleGetIconOfFile$handle() {
        return OleGetIconOfFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel)
     * }
     */
    public static MemorySegment OleGetIconOfFile$address() {
        return OleGetIconOfFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel)
     * }
     */
    public static MemorySegment OleGetIconOfFile(MemorySegment lpszPath, int fUseFileAsLabel) {
        var mh$ = OleGetIconOfFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetIconOfFile", lpszPath, fUseFileAsLabel);
            }
            return (MemorySegment)mh$.invokeExact(lpszPath, fUseFileAsLabel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetIconOfClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleGetIconOfClass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfClass(const IID *const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel)
     * }
     */
    public static FunctionDescriptor OleGetIconOfClass$descriptor() {
        return OleGetIconOfClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfClass(const IID *const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel)
     * }
     */
    public static MethodHandle OleGetIconOfClass$handle() {
        return OleGetIconOfClass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfClass(const IID *const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel)
     * }
     */
    public static MemorySegment OleGetIconOfClass$address() {
        return OleGetIconOfClass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HGLOBAL OleGetIconOfClass(const IID *const rclsid, LPOLESTR lpszLabel, BOOL fUseTypeAsLabel)
     * }
     */
    public static MemorySegment OleGetIconOfClass(MemorySegment rclsid, MemorySegment lpszLabel, int fUseTypeAsLabel) {
        var mh$ = OleGetIconOfClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetIconOfClass", rclsid, lpszLabel, fUseTypeAsLabel);
            }
            return (MemorySegment)mh$.invokeExact(rclsid, lpszLabel, fUseTypeAsLabel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleMetafilePictFromIconAndLabel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleMetafilePictFromIconAndLabel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex)
     * }
     */
    public static FunctionDescriptor OleMetafilePictFromIconAndLabel$descriptor() {
        return OleMetafilePictFromIconAndLabel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex)
     * }
     */
    public static MethodHandle OleMetafilePictFromIconAndLabel$handle() {
        return OleMetafilePictFromIconAndLabel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex)
     * }
     */
    public static MemorySegment OleMetafilePictFromIconAndLabel$address() {
        return OleMetafilePictFromIconAndLabel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HGLOBAL OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel, LPOLESTR lpszSourceFile, UINT iIconIndex)
     * }
     */
    public static MemorySegment OleMetafilePictFromIconAndLabel(MemorySegment hIcon, MemorySegment lpszLabel, MemorySegment lpszSourceFile, int iIconIndex) {
        var mh$ = OleMetafilePictFromIconAndLabel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleMetafilePictFromIconAndLabel", hIcon, lpszLabel, lpszSourceFile, iIconIndex);
            }
            return (MemorySegment)mh$.invokeExact(hIcon, lpszLabel, lpszSourceFile, iIconIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRegGetUserType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleRegGetUserType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetUserType(const IID *const clsid, DWORD dwFormOfType, LPOLESTR *pszUserType)
     * }
     */
    public static FunctionDescriptor OleRegGetUserType$descriptor() {
        return OleRegGetUserType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetUserType(const IID *const clsid, DWORD dwFormOfType, LPOLESTR *pszUserType)
     * }
     */
    public static MethodHandle OleRegGetUserType$handle() {
        return OleRegGetUserType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetUserType(const IID *const clsid, DWORD dwFormOfType, LPOLESTR *pszUserType)
     * }
     */
    public static MemorySegment OleRegGetUserType$address() {
        return OleRegGetUserType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleRegGetUserType(const IID *const clsid, DWORD dwFormOfType, LPOLESTR *pszUserType)
     * }
     */
    public static int OleRegGetUserType(MemorySegment clsid, int dwFormOfType, MemorySegment pszUserType) {
        var mh$ = OleRegGetUserType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRegGetUserType", clsid, dwFormOfType, pszUserType);
            }
            return (int)mh$.invokeExact(clsid, dwFormOfType, pszUserType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRegGetMiscStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleRegGetMiscStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetMiscStatus(const IID *const clsid, DWORD dwAspect, DWORD *pdwStatus)
     * }
     */
    public static FunctionDescriptor OleRegGetMiscStatus$descriptor() {
        return OleRegGetMiscStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetMiscStatus(const IID *const clsid, DWORD dwAspect, DWORD *pdwStatus)
     * }
     */
    public static MethodHandle OleRegGetMiscStatus$handle() {
        return OleRegGetMiscStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleRegGetMiscStatus(const IID *const clsid, DWORD dwAspect, DWORD *pdwStatus)
     * }
     */
    public static MemorySegment OleRegGetMiscStatus$address() {
        return OleRegGetMiscStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleRegGetMiscStatus(const IID *const clsid, DWORD dwAspect, DWORD *pdwStatus)
     * }
     */
    public static int OleRegGetMiscStatus(MemorySegment clsid, int dwAspect, MemorySegment pdwStatus) {
        var mh$ = OleRegGetMiscStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRegGetMiscStatus", clsid, dwAspect, pdwStatus);
            }
            return (int)mh$.invokeExact(clsid, dwAspect, pdwStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRegEnumFormatEtc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleRegEnumFormatEtc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumFormatEtc(const IID *const clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum)
     * }
     */
    public static FunctionDescriptor OleRegEnumFormatEtc$descriptor() {
        return OleRegEnumFormatEtc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumFormatEtc(const IID *const clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum)
     * }
     */
    public static MethodHandle OleRegEnumFormatEtc$handle() {
        return OleRegEnumFormatEtc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumFormatEtc(const IID *const clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum)
     * }
     */
    public static MemorySegment OleRegEnumFormatEtc$address() {
        return OleRegEnumFormatEtc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumFormatEtc(const IID *const clsid, DWORD dwDirection, LPENUMFORMATETC *ppenum)
     * }
     */
    public static int OleRegEnumFormatEtc(MemorySegment clsid, int dwDirection, MemorySegment ppenum) {
        var mh$ = OleRegEnumFormatEtc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRegEnumFormatEtc", clsid, dwDirection, ppenum);
            }
            return (int)mh$.invokeExact(clsid, dwDirection, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleRegEnumVerbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleRegEnumVerbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumVerbs(const IID *const clsid, LPENUMOLEVERB *ppenum)
     * }
     */
    public static FunctionDescriptor OleRegEnumVerbs$descriptor() {
        return OleRegEnumVerbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumVerbs(const IID *const clsid, LPENUMOLEVERB *ppenum)
     * }
     */
    public static MethodHandle OleRegEnumVerbs$handle() {
        return OleRegEnumVerbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumVerbs(const IID *const clsid, LPENUMOLEVERB *ppenum)
     * }
     */
    public static MemorySegment OleRegEnumVerbs$address() {
        return OleRegEnumVerbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleRegEnumVerbs(const IID *const clsid, LPENUMOLEVERB *ppenum)
     * }
     */
    public static int OleRegEnumVerbs(MemorySegment clsid, MemorySegment ppenum) {
        var mh$ = OleRegEnumVerbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleRegEnumVerbs", clsid, ppenum);
            }
            return (int)mh$.invokeExact(clsid, ppenum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _OLESTREAM *LPOLESTREAM
     * }
     */
    public static final AddressLayout LPOLESTREAM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef OLESTREAMVTBL *LPOLESTREAMVTBL
     * }
     */
    public static final AddressLayout LPOLESTREAMVTBL = winapi.C_POINTER;

    private static class OleConvertOLESTREAMToIStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleConvertOLESTREAMToIStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd)
     * }
     */
    public static FunctionDescriptor OleConvertOLESTREAMToIStorage$descriptor() {
        return OleConvertOLESTREAMToIStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd)
     * }
     */
    public static MethodHandle OleConvertOLESTREAMToIStorage$handle() {
        return OleConvertOLESTREAMToIStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd)
     * }
     */
    public static MemorySegment OleConvertOLESTREAMToIStorage$address() {
        return OleConvertOLESTREAMToIStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd)
     * }
     */
    public static int OleConvertOLESTREAMToIStorage(MemorySegment lpolestream, MemorySegment pstg, MemorySegment ptd) {
        var mh$ = OleConvertOLESTREAMToIStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertOLESTREAMToIStorage", lpolestream, pstg, ptd);
            }
            return (int)mh$.invokeExact(lpolestream, pstg, ptd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleConvertOLESTREAMToIStorage2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleConvertOLESTREAMToIStorage2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage2(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd, DWORD opt, PVOID pvCallbackContext, OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback)
     * }
     */
    public static FunctionDescriptor OleConvertOLESTREAMToIStorage2$descriptor() {
        return OleConvertOLESTREAMToIStorage2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage2(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd, DWORD opt, PVOID pvCallbackContext, OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback)
     * }
     */
    public static MethodHandle OleConvertOLESTREAMToIStorage2$handle() {
        return OleConvertOLESTREAMToIStorage2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage2(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd, DWORD opt, PVOID pvCallbackContext, OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback)
     * }
     */
    public static MemorySegment OleConvertOLESTREAMToIStorage2$address() {
        return OleConvertOLESTREAMToIStorage2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorage2(LPOLESTREAM lpolestream, LPSTORAGE pstg, const DVTARGETDEVICE *ptd, DWORD opt, PVOID pvCallbackContext, OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback)
     * }
     */
    public static int OleConvertOLESTREAMToIStorage2(MemorySegment lpolestream, MemorySegment pstg, MemorySegment ptd, int opt, MemorySegment pvCallbackContext, MemorySegment pQueryConvertOLELinkCallback) {
        var mh$ = OleConvertOLESTREAMToIStorage2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertOLESTREAMToIStorage2", lpolestream, pstg, ptd, opt, pvCallbackContext, pQueryConvertOLELinkCallback);
            }
            return (int)mh$.invokeExact(lpolestream, pstg, ptd, opt, pvCallbackContext, pQueryConvertOLELinkCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleConvertIStorageToOLESTREAM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleConvertIStorageToOLESTREAM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream)
     * }
     */
    public static FunctionDescriptor OleConvertIStorageToOLESTREAM$descriptor() {
        return OleConvertIStorageToOLESTREAM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream)
     * }
     */
    public static MethodHandle OleConvertIStorageToOLESTREAM$handle() {
        return OleConvertIStorageToOLESTREAM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream)
     * }
     */
    public static MemorySegment OleConvertIStorageToOLESTREAM$address() {
        return OleConvertIStorageToOLESTREAM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAM(LPSTORAGE pstg, LPOLESTREAM lpolestream)
     * }
     */
    public static int OleConvertIStorageToOLESTREAM(MemorySegment pstg, MemorySegment lpolestream) {
        var mh$ = OleConvertIStorageToOLESTREAM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertIStorageToOLESTREAM", pstg, lpolestream);
            }
            return (int)mh$.invokeExact(pstg, lpolestream);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleDoAutoConvert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleDoAutoConvert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew)
     * }
     */
    public static FunctionDescriptor OleDoAutoConvert$descriptor() {
        return OleDoAutoConvert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew)
     * }
     */
    public static MethodHandle OleDoAutoConvert$handle() {
        return OleDoAutoConvert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew)
     * }
     */
    public static MemorySegment OleDoAutoConvert$address() {
        return OleDoAutoConvert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew)
     * }
     */
    public static int OleDoAutoConvert(MemorySegment pStg, MemorySegment pClsidNew) {
        var mh$ = OleDoAutoConvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleDoAutoConvert", pStg, pClsidNew);
            }
            return (int)mh$.invokeExact(pStg, pClsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleGetAutoConvert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleGetAutoConvert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleGetAutoConvert(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static FunctionDescriptor OleGetAutoConvert$descriptor() {
        return OleGetAutoConvert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleGetAutoConvert(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static MethodHandle OleGetAutoConvert$handle() {
        return OleGetAutoConvert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleGetAutoConvert(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static MemorySegment OleGetAutoConvert$address() {
        return OleGetAutoConvert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleGetAutoConvert(const IID *const clsidOld, LPCLSID pClsidNew)
     * }
     */
    public static int OleGetAutoConvert(MemorySegment clsidOld, MemorySegment pClsidNew) {
        var mh$ = OleGetAutoConvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleGetAutoConvert", clsidOld, pClsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, pClsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleSetAutoConvert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleSetAutoConvert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleSetAutoConvert(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static FunctionDescriptor OleSetAutoConvert$descriptor() {
        return OleSetAutoConvert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleSetAutoConvert(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static MethodHandle OleSetAutoConvert$handle() {
        return OleSetAutoConvert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleSetAutoConvert(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static MemorySegment OleSetAutoConvert$address() {
        return OleSetAutoConvert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleSetAutoConvert(const IID *const clsidOld, const IID *const clsidNew)
     * }
     */
    public static int OleSetAutoConvert(MemorySegment clsidOld, MemorySegment clsidNew) {
        var mh$ = OleSetAutoConvert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleSetAutoConvert", clsidOld, clsidNew);
            }
            return (int)mh$.invokeExact(clsidOld, clsidNew);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetConvertStg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetConvertStg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT SetConvertStg(LPSTORAGE pStg, BOOL fConvert)
     * }
     */
    public static FunctionDescriptor SetConvertStg$descriptor() {
        return SetConvertStg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT SetConvertStg(LPSTORAGE pStg, BOOL fConvert)
     * }
     */
    public static MethodHandle SetConvertStg$handle() {
        return SetConvertStg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT SetConvertStg(LPSTORAGE pStg, BOOL fConvert)
     * }
     */
    public static MemorySegment SetConvertStg$address() {
        return SetConvertStg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT SetConvertStg(LPSTORAGE pStg, BOOL fConvert)
     * }
     */
    public static int SetConvertStg(MemorySegment pStg, int fConvert) {
        var mh$ = SetConvertStg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetConvertStg", pStg, fConvert);
            }
            return (int)mh$.invokeExact(pStg, fConvert);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleConvertIStorageToOLESTREAMEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleConvertIStorageToOLESTREAMEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm)
     * }
     */
    public static FunctionDescriptor OleConvertIStorageToOLESTREAMEx$descriptor() {
        return OleConvertIStorageToOLESTREAMEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm)
     * }
     */
    public static MethodHandle OleConvertIStorageToOLESTREAMEx$handle() {
        return OleConvertIStorageToOLESTREAMEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm)
     * }
     */
    public static MemorySegment OleConvertIStorageToOLESTREAMEx$address() {
        return OleConvertIStorageToOLESTREAMEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertIStorageToOLESTREAMEx(LPSTORAGE pstg, CLIPFORMAT cfFormat, LONG lWidth, LONG lHeight, DWORD dwSize, LPSTGMEDIUM pmedium, LPOLESTREAM polestm)
     * }
     */
    public static int OleConvertIStorageToOLESTREAMEx(MemorySegment pstg, short cfFormat, int lWidth, int lHeight, int dwSize, MemorySegment pmedium, MemorySegment polestm) {
        var mh$ = OleConvertIStorageToOLESTREAMEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertIStorageToOLESTREAMEx", pstg, cfFormat, lWidth, lHeight, dwSize, pmedium, polestm);
            }
            return (int)mh$.invokeExact(pstg, cfFormat, lWidth, lHeight, dwSize, pmedium, polestm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleConvertOLESTREAMToIStorageEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleConvertOLESTREAMToIStorageEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium)
     * }
     */
    public static FunctionDescriptor OleConvertOLESTREAMToIStorageEx$descriptor() {
        return OleConvertOLESTREAMToIStorageEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium)
     * }
     */
    public static MethodHandle OleConvertOLESTREAMToIStorageEx$handle() {
        return OleConvertOLESTREAMToIStorageEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium)
     * }
     */
    public static MemorySegment OleConvertOLESTREAMToIStorageEx$address() {
        return OleConvertOLESTREAMToIStorageEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium)
     * }
     */
    public static int OleConvertOLESTREAMToIStorageEx(MemorySegment polestm, MemorySegment pstg, MemorySegment pcfFormat, MemorySegment plwWidth, MemorySegment plHeight, MemorySegment pdwSize, MemorySegment pmedium) {
        var mh$ = OleConvertOLESTREAMToIStorageEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertOLESTREAMToIStorageEx", polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium);
            }
            return (int)mh$.invokeExact(polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OleConvertOLESTREAMToIStorageEx2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OleConvertOLESTREAMToIStorageEx2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx2(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium, DWORD opt, PVOID pvCallbackContext, OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback)
     * }
     */
    public static FunctionDescriptor OleConvertOLESTREAMToIStorageEx2$descriptor() {
        return OleConvertOLESTREAMToIStorageEx2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx2(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium, DWORD opt, PVOID pvCallbackContext, OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback)
     * }
     */
    public static MethodHandle OleConvertOLESTREAMToIStorageEx2$handle() {
        return OleConvertOLESTREAMToIStorageEx2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx2(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium, DWORD opt, PVOID pvCallbackContext, OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback)
     * }
     */
    public static MemorySegment OleConvertOLESTREAMToIStorageEx2$address() {
        return OleConvertOLESTREAMToIStorageEx2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HRESULT OleConvertOLESTREAMToIStorageEx2(LPOLESTREAM polestm, LPSTORAGE pstg, CLIPFORMAT *pcfFormat, LONG *plwWidth, LONG *plHeight, DWORD *pdwSize, LPSTGMEDIUM pmedium, DWORD opt, PVOID pvCallbackContext, OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback)
     * }
     */
    public static int OleConvertOLESTREAMToIStorageEx2(MemorySegment polestm, MemorySegment pstg, MemorySegment pcfFormat, MemorySegment plwWidth, MemorySegment plHeight, MemorySegment pdwSize, MemorySegment pmedium, int opt, MemorySegment pvCallbackContext, MemorySegment pQueryConvertOLELinkCallback) {
        var mh$ = OleConvertOLESTREAMToIStorageEx2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OleConvertOLESTREAMToIStorageEx2", polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium, opt, pvCallbackContext, pQueryConvertOLELinkCallback);
            }
            return (int)mh$.invokeExact(polestm, pstg, pcfFormat, plwWidth, plHeight, pdwSize, pmedium, opt, pvCallbackContext, pQueryConvertOLELinkCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IID_IPrintDialogCallback$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPrintDialogCallback").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogCallback
     * }
     */
    public static GroupLayout IID_IPrintDialogCallback$layout() {
        return IID_IPrintDialogCallback$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogCallback
     * }
     */
    public static MemorySegment IID_IPrintDialogCallback() {
        return IID_IPrintDialogCallback$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogCallback
     * }
     */
    public static void IID_IPrintDialogCallback(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPrintDialogCallback$constants.SEGMENT, 0L, IID_IPrintDialogCallback$constants.LAYOUT.byteSize());
    }

    private static class IID_IPrintDialogServices$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IPrintDialogServices").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogServices
     * }
     */
    public static GroupLayout IID_IPrintDialogServices$layout() {
        return IID_IPrintDialogServices$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogServices
     * }
     */
    public static MemorySegment IID_IPrintDialogServices() {
        return IID_IPrintDialogServices$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID IID_IPrintDialogServices
     * }
     */
    public static void IID_IPrintDialogServices(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IPrintDialogServices$constants.SEGMENT, 0L, IID_IPrintDialogServices$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagOFN_NT4A {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     LPCSTR lpstrFilter;
     *     LPSTR lpstrCustomFilter;
     *     DWORD nMaxCustFilter;
     *     DWORD nFilterIndex;
     *     LPSTR lpstrFile;
     *     DWORD nMaxFile;
     *     LPSTR lpstrFileTitle;
     *     DWORD nMaxFileTitle;
     *     LPCSTR lpstrInitialDir;
     *     LPCSTR lpstrTitle;
     *     DWORD Flags;
     *     WORD nFileOffset;
     *     WORD nFileExtension;
     *     LPCSTR lpstrDefExt;
     *     LPARAM lCustData;
     *     LPOFNHOOKPROC lpfnHook;
     *     LPCSTR lpTemplateName;
     * } *LPOPENFILENAME_NT4A
     * }
     */
    public static final AddressLayout LPOPENFILENAME_NT4A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOFN_NT4W {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     LPCWSTR lpstrFilter;
     *     LPWSTR lpstrCustomFilter;
     *     DWORD nMaxCustFilter;
     *     DWORD nFilterIndex;
     *     LPWSTR lpstrFile;
     *     DWORD nMaxFile;
     *     LPWSTR lpstrFileTitle;
     *     DWORD nMaxFileTitle;
     *     LPCWSTR lpstrInitialDir;
     *     LPCWSTR lpstrTitle;
     *     DWORD Flags;
     *     WORD nFileOffset;
     *     WORD nFileExtension;
     *     LPCWSTR lpstrDefExt;
     *     LPARAM lCustData;
     *     LPOFNHOOKPROC lpfnHook;
     *     LPCWSTR lpTemplateName;
     * } *LPOPENFILENAME_NT4W
     * }
     */
    public static final AddressLayout LPOPENFILENAME_NT4W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4
     * }
     */
    public static final AddressLayout LPOPENFILENAME_NT4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOFNA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     LPCSTR lpstrFilter;
     *     LPSTR lpstrCustomFilter;
     *     DWORD nMaxCustFilter;
     *     DWORD nFilterIndex;
     *     LPSTR lpstrFile;
     *     DWORD nMaxFile;
     *     LPSTR lpstrFileTitle;
     *     DWORD nMaxFileTitle;
     *     LPCSTR lpstrInitialDir;
     *     LPCSTR lpstrTitle;
     *     DWORD Flags;
     *     WORD nFileOffset;
     *     WORD nFileExtension;
     *     LPCSTR lpstrDefExt;
     *     LPARAM lCustData;
     *     LPOFNHOOKPROC lpfnHook;
     *     LPCSTR lpTemplateName;
     *     void *pvReserved;
     *     DWORD dwReserved;
     *     DWORD FlagsEx;
     * } *LPOPENFILENAMEA
     * }
     */
    public static final AddressLayout LPOPENFILENAMEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagOFNW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     LPCWSTR lpstrFilter;
     *     LPWSTR lpstrCustomFilter;
     *     DWORD nMaxCustFilter;
     *     DWORD nFilterIndex;
     *     LPWSTR lpstrFile;
     *     DWORD nMaxFile;
     *     LPWSTR lpstrFileTitle;
     *     DWORD nMaxFileTitle;
     *     LPCWSTR lpstrInitialDir;
     *     LPCWSTR lpstrTitle;
     *     DWORD Flags;
     *     WORD nFileOffset;
     *     WORD nFileExtension;
     *     LPCWSTR lpstrDefExt;
     *     LPARAM lCustData;
     *     LPOFNHOOKPROC lpfnHook;
     *     LPCWSTR lpTemplateName;
     *     void *pvReserved;
     *     DWORD dwReserved;
     *     DWORD FlagsEx;
     * } *LPOPENFILENAMEW
     * }
     */
    public static final AddressLayout LPOPENFILENAMEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENFILENAMEA LPOPENFILENAME
     * }
     */
    public static final AddressLayout LPOPENFILENAME = winapi.C_POINTER;

    private static class GetOpenFileNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetOpenFileNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static FunctionDescriptor GetOpenFileNameA$descriptor() {
        return GetOpenFileNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static MethodHandle GetOpenFileNameA$handle() {
        return GetOpenFileNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static MemorySegment GetOpenFileNameA$address() {
        return GetOpenFileNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetOpenFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static int GetOpenFileNameA(MemorySegment x0) {
        var mh$ = GetOpenFileNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenFileNameA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetOpenFileNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetOpenFileNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static FunctionDescriptor GetOpenFileNameW$descriptor() {
        return GetOpenFileNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static MethodHandle GetOpenFileNameW$handle() {
        return GetOpenFileNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetOpenFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static MemorySegment GetOpenFileNameW$address() {
        return GetOpenFileNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetOpenFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static int GetOpenFileNameW(MemorySegment x0) {
        var mh$ = GetOpenFileNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenFileNameW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetSaveFileNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetSaveFileNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static FunctionDescriptor GetSaveFileNameA$descriptor() {
        return GetSaveFileNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static MethodHandle GetSaveFileNameA$handle() {
        return GetSaveFileNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static MemorySegment GetSaveFileNameA$address() {
        return GetSaveFileNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetSaveFileNameA(LPOPENFILENAMEA)
     * }
     */
    public static int GetSaveFileNameA(MemorySegment x0) {
        var mh$ = GetSaveFileNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSaveFileNameA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetSaveFileNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetSaveFileNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static FunctionDescriptor GetSaveFileNameW$descriptor() {
        return GetSaveFileNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static MethodHandle GetSaveFileNameW$handle() {
        return GetSaveFileNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetSaveFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static MemorySegment GetSaveFileNameW$address() {
        return GetSaveFileNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetSaveFileNameW(LPOPENFILENAMEW)
     * }
     */
    public static int GetSaveFileNameW(MemorySegment x0) {
        var mh$ = GetSaveFileNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSaveFileNameW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetFileTitleA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_SHORT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetFileTitleA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize)
     * }
     */
    public static FunctionDescriptor GetFileTitleA$descriptor() {
        return GetFileTitleA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize)
     * }
     */
    public static MethodHandle GetFileTitleA$handle() {
        return GetFileTitleA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * short GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize)
     * }
     */
    public static MemorySegment GetFileTitleA$address() {
        return GetFileTitleA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * short GetFileTitleA(LPCSTR, LPSTR Buf, WORD cchSize)
     * }
     */
    public static short GetFileTitleA(MemorySegment x0, MemorySegment Buf, short cchSize) {
        var mh$ = GetFileTitleA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetFileTitleA", x0, Buf, cchSize);
            }
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetFileTitleW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_SHORT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetFileTitleW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * short GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize)
     * }
     */
    public static FunctionDescriptor GetFileTitleW$descriptor() {
        return GetFileTitleW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * short GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize)
     * }
     */
    public static MethodHandle GetFileTitleW$handle() {
        return GetFileTitleW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * short GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize)
     * }
     */
    public static MemorySegment GetFileTitleW$address() {
        return GetFileTitleW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * short GetFileTitleW(LPCWSTR, LPWSTR Buf, WORD cchSize)
     * }
     */
    public static short GetFileTitleW(MemorySegment x0, MemorySegment Buf, short cchSize) {
        var mh$ = GetFileTitleW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetFileTitleW", x0, Buf, cchSize);
            }
            return (short)mh$.invokeExact(x0, Buf, cchSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _OFNOTIFYA {
     *     NMHDR hdr;
     *     LPOPENFILENAMEA lpOFN;
     *     LPSTR pszFile;
     * } *LPOFNOTIFYA
     * }
     */
    public static final AddressLayout LPOFNOTIFYA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OFNOTIFYW {
     *     NMHDR hdr;
     *     LPOPENFILENAMEW lpOFN;
     *     LPWSTR pszFile;
     * } *LPOFNOTIFYW
     * }
     */
    public static final AddressLayout LPOFNOTIFYW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOFNOTIFYA LPOFNOTIFY
     * }
     */
    public static final AddressLayout LPOFNOTIFY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OFNOTIFYEXA {
     *     NMHDR hdr;
     *     LPOPENFILENAMEA lpOFN;
     *     LPVOID psf;
     *     LPVOID pidl;
     * } *LPOFNOTIFYEXA
     * }
     */
    public static final AddressLayout LPOFNOTIFYEXA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _OFNOTIFYEXW {
     *     NMHDR hdr;
     *     LPOPENFILENAMEW lpOFN;
     *     LPVOID psf;
     *     LPVOID pidl;
     * } *LPOFNOTIFYEXW
     * }
     */
    public static final AddressLayout LPOFNOTIFYEXW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOFNOTIFYEXA LPOFNOTIFYEX
     * }
     */
    public static final AddressLayout LPOFNOTIFYEX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCHOOSECOLORA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HWND hInstance;
     *     COLORREF rgbResult;
     *     COLORREF *lpCustColors;
     *     DWORD Flags;
     *     LPARAM lCustData;
     *     LPCCHOOKPROC lpfnHook;
     *     LPCSTR lpTemplateName;
     * } *LPCHOOSECOLORA
     * }
     */
    public static final AddressLayout LPCHOOSECOLORA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCHOOSECOLORW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HWND hInstance;
     *     COLORREF rgbResult;
     *     COLORREF *lpCustColors;
     *     DWORD Flags;
     *     LPARAM lCustData;
     *     LPCCHOOKPROC lpfnHook;
     *     LPCWSTR lpTemplateName;
     * } *LPCHOOSECOLORW
     * }
     */
    public static final AddressLayout LPCHOOSECOLORW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCHOOSECOLORA LPCHOOSECOLOR
     * }
     */
    public static final AddressLayout LPCHOOSECOLOR = winapi.C_POINTER;

    private static class ChooseColorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ChooseColorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChooseColorA(LPCHOOSECOLORA)
     * }
     */
    public static FunctionDescriptor ChooseColorA$descriptor() {
        return ChooseColorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChooseColorA(LPCHOOSECOLORA)
     * }
     */
    public static MethodHandle ChooseColorA$handle() {
        return ChooseColorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ChooseColorA(LPCHOOSECOLORA)
     * }
     */
    public static MemorySegment ChooseColorA$address() {
        return ChooseColorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ChooseColorA(LPCHOOSECOLORA)
     * }
     */
    public static int ChooseColorA(MemorySegment x0) {
        var mh$ = ChooseColorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChooseColorA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChooseColorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ChooseColorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChooseColorW(LPCHOOSECOLORW)
     * }
     */
    public static FunctionDescriptor ChooseColorW$descriptor() {
        return ChooseColorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChooseColorW(LPCHOOSECOLORW)
     * }
     */
    public static MethodHandle ChooseColorW$handle() {
        return ChooseColorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ChooseColorW(LPCHOOSECOLORW)
     * }
     */
    public static MemorySegment ChooseColorW$address() {
        return ChooseColorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ChooseColorW(LPCHOOSECOLORW)
     * }
     */
    public static int ChooseColorW(MemorySegment x0) {
        var mh$ = ChooseColorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChooseColorW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagFINDREPLACEA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     DWORD Flags;
     *     LPSTR lpstrFindWhat;
     *     LPSTR lpstrReplaceWith;
     *     WORD wFindWhatLen;
     *     WORD wReplaceWithLen;
     *     LPARAM lCustData;
     *     LPFRHOOKPROC lpfnHook;
     *     LPCSTR lpTemplateName;
     * } *LPFINDREPLACEA
     * }
     */
    public static final AddressLayout LPFINDREPLACEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagFINDREPLACEW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HINSTANCE hInstance;
     *     DWORD Flags;
     *     LPWSTR lpstrFindWhat;
     *     LPWSTR lpstrReplaceWith;
     *     WORD wFindWhatLen;
     *     WORD wReplaceWithLen;
     *     LPARAM lCustData;
     *     LPFRHOOKPROC lpfnHook;
     *     LPCWSTR lpTemplateName;
     * } *LPFINDREPLACEW
     * }
     */
    public static final AddressLayout LPFINDREPLACEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPFINDREPLACEA LPFINDREPLACE
     * }
     */
    public static final AddressLayout LPFINDREPLACE = winapi.C_POINTER;

    private static class FindTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FindTextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND FindTextA(LPFINDREPLACEA)
     * }
     */
    public static FunctionDescriptor FindTextA$descriptor() {
        return FindTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND FindTextA(LPFINDREPLACEA)
     * }
     */
    public static MethodHandle FindTextA$handle() {
        return FindTextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HWND FindTextA(LPFINDREPLACEA)
     * }
     */
    public static MemorySegment FindTextA$address() {
        return FindTextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HWND FindTextA(LPFINDREPLACEA)
     * }
     */
    public static MemorySegment FindTextA(MemorySegment x0) {
        var mh$ = FindTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindTextA", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FindTextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND FindTextW(LPFINDREPLACEW)
     * }
     */
    public static FunctionDescriptor FindTextW$descriptor() {
        return FindTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND FindTextW(LPFINDREPLACEW)
     * }
     */
    public static MethodHandle FindTextW$handle() {
        return FindTextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HWND FindTextW(LPFINDREPLACEW)
     * }
     */
    public static MemorySegment FindTextW$address() {
        return FindTextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HWND FindTextW(LPFINDREPLACEW)
     * }
     */
    public static MemorySegment FindTextW(MemorySegment x0) {
        var mh$ = FindTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindTextW", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReplaceTextA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ReplaceTextA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND ReplaceTextA(LPFINDREPLACEA)
     * }
     */
    public static FunctionDescriptor ReplaceTextA$descriptor() {
        return ReplaceTextA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND ReplaceTextA(LPFINDREPLACEA)
     * }
     */
    public static MethodHandle ReplaceTextA$handle() {
        return ReplaceTextA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HWND ReplaceTextA(LPFINDREPLACEA)
     * }
     */
    public static MemorySegment ReplaceTextA$address() {
        return ReplaceTextA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HWND ReplaceTextA(LPFINDREPLACEA)
     * }
     */
    public static MemorySegment ReplaceTextA(MemorySegment x0) {
        var mh$ = ReplaceTextA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReplaceTextA", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReplaceTextW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ReplaceTextW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND ReplaceTextW(LPFINDREPLACEW)
     * }
     */
    public static FunctionDescriptor ReplaceTextW$descriptor() {
        return ReplaceTextW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND ReplaceTextW(LPFINDREPLACEW)
     * }
     */
    public static MethodHandle ReplaceTextW$handle() {
        return ReplaceTextW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HWND ReplaceTextW(LPFINDREPLACEW)
     * }
     */
    public static MemorySegment ReplaceTextW$address() {
        return ReplaceTextW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HWND ReplaceTextW(LPFINDREPLACEW)
     * }
     */
    public static MemorySegment ReplaceTextW(MemorySegment x0) {
        var mh$ = ReplaceTextW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReplaceTextW", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef CHOOSEFONTA *LPCHOOSEFONTA
     * }
     */
    public static final AddressLayout LPCHOOSEFONTA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef CHOOSEFONTW *LPCHOOSEFONTW
     * }
     */
    public static final AddressLayout LPCHOOSEFONTW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCHOOSEFONTA LPCHOOSEFONT
     * }
     */
    public static final AddressLayout LPCHOOSEFONT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const CHOOSEFONTA *PCCHOOSEFONTA
     * }
     */
    public static final AddressLayout PCCHOOSEFONTA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const CHOOSEFONTW *PCCHOOSEFONTW
     * }
     */
    public static final AddressLayout PCCHOOSEFONTW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PCCHOOSEFONTA PCCHOOSEFONT
     * }
     */
    public static final AddressLayout PCCHOOSEFONT = winapi.C_POINTER;

    private static class ChooseFontA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ChooseFontA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChooseFontA(LPCHOOSEFONTA)
     * }
     */
    public static FunctionDescriptor ChooseFontA$descriptor() {
        return ChooseFontA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChooseFontA(LPCHOOSEFONTA)
     * }
     */
    public static MethodHandle ChooseFontA$handle() {
        return ChooseFontA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ChooseFontA(LPCHOOSEFONTA)
     * }
     */
    public static MemorySegment ChooseFontA$address() {
        return ChooseFontA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ChooseFontA(LPCHOOSEFONTA)
     * }
     */
    public static int ChooseFontA(MemorySegment x0) {
        var mh$ = ChooseFontA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChooseFontA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChooseFontW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ChooseFontW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChooseFontW(LPCHOOSEFONTW)
     * }
     */
    public static FunctionDescriptor ChooseFontW$descriptor() {
        return ChooseFontW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChooseFontW(LPCHOOSEFONTW)
     * }
     */
    public static MethodHandle ChooseFontW$handle() {
        return ChooseFontW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ChooseFontW(LPCHOOSEFONTW)
     * }
     */
    public static MemorySegment ChooseFontW$address() {
        return ChooseFontW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ChooseFontW(LPCHOOSEFONTW)
     * }
     */
    public static int ChooseFontW(MemorySegment x0) {
        var mh$ = ChooseFontW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChooseFontW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPDA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     HDC hDC;
     *     DWORD Flags;
     *     WORD nFromPage;
     *     WORD nToPage;
     *     WORD nMinPage;
     *     WORD nMaxPage;
     *     WORD nCopies;
     *     HINSTANCE hInstance;
     *     LPARAM lCustData;
     *     LPPRINTHOOKPROC lpfnPrintHook;
     *     LPSETUPHOOKPROC lpfnSetupHook;
     *     LPCSTR lpPrintTemplateName;
     *     LPCSTR lpSetupTemplateName;
     *     HGLOBAL hPrintTemplate;
     *     HGLOBAL hSetupTemplate;
     * } *LPPRINTDLGA
     * }
     */
    public static final AddressLayout LPPRINTDLGA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPDW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     HDC hDC;
     *     DWORD Flags;
     *     WORD nFromPage;
     *     WORD nToPage;
     *     WORD nMinPage;
     *     WORD nMaxPage;
     *     WORD nCopies;
     *     HINSTANCE hInstance;
     *     LPARAM lCustData;
     *     LPPRINTHOOKPROC lpfnPrintHook;
     *     LPSETUPHOOKPROC lpfnSetupHook;
     *     LPCWSTR lpPrintTemplateName;
     *     LPCWSTR lpSetupTemplateName;
     *     HGLOBAL hPrintTemplate;
     *     HGLOBAL hSetupTemplate;
     * } *LPPRINTDLGW
     * }
     */
    public static final AddressLayout LPPRINTDLGW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTDLGA LPPRINTDLG
     * }
     */
    public static final AddressLayout LPPRINTDLG = winapi.C_POINTER;

    private static class PrintDlgA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PrintDlgA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PrintDlgA(LPPRINTDLGA pPD)
     * }
     */
    public static FunctionDescriptor PrintDlgA$descriptor() {
        return PrintDlgA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PrintDlgA(LPPRINTDLGA pPD)
     * }
     */
    public static MethodHandle PrintDlgA$handle() {
        return PrintDlgA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL PrintDlgA(LPPRINTDLGA pPD)
     * }
     */
    public static MemorySegment PrintDlgA$address() {
        return PrintDlgA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL PrintDlgA(LPPRINTDLGA pPD)
     * }
     */
    public static int PrintDlgA(MemorySegment pPD) {
        var mh$ = PrintDlgA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrintDlgA", pPD);
            }
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrintDlgW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PrintDlgW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PrintDlgW(LPPRINTDLGW pPD)
     * }
     */
    public static FunctionDescriptor PrintDlgW$descriptor() {
        return PrintDlgW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PrintDlgW(LPPRINTDLGW pPD)
     * }
     */
    public static MethodHandle PrintDlgW$handle() {
        return PrintDlgW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL PrintDlgW(LPPRINTDLGW pPD)
     * }
     */
    public static MemorySegment PrintDlgW$address() {
        return PrintDlgW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL PrintDlgW(LPPRINTDLGW pPD)
     * }
     */
    public static int PrintDlgW(MemorySegment pPD) {
        var mh$ = PrintDlgW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrintDlgW", pPD);
            }
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef PRINTPAGERANGE *LPPRINTPAGERANGE
     * }
     */
    public static final AddressLayout LPPRINTPAGERANGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PRINTPAGERANGE *PCPRINTPAGERANGE
     * }
     */
    public static final AddressLayout PCPRINTPAGERANGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPDEXA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     HDC hDC;
     *     DWORD Flags;
     *     DWORD Flags2;
     *     DWORD ExclusionFlags;
     *     DWORD nPageRanges;
     *     DWORD nMaxPageRanges;
     *     LPPRINTPAGERANGE lpPageRanges;
     *     DWORD nMinPage;
     *     DWORD nMaxPage;
     *     DWORD nCopies;
     *     HINSTANCE hInstance;
     *     LPCSTR lpPrintTemplateName;
     *     LPUNKNOWN lpCallback;
     *     DWORD nPropertyPages;
     *     HPROPSHEETPAGE *lphPropertyPages;
     *     DWORD nStartPage;
     *     DWORD dwResultAction;
     * } *LPPRINTDLGEXA
     * }
     */
    public static final AddressLayout LPPRINTDLGEXA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPDEXW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     HDC hDC;
     *     DWORD Flags;
     *     DWORD Flags2;
     *     DWORD ExclusionFlags;
     *     DWORD nPageRanges;
     *     DWORD nMaxPageRanges;
     *     LPPRINTPAGERANGE lpPageRanges;
     *     DWORD nMinPage;
     *     DWORD nMaxPage;
     *     DWORD nCopies;
     *     HINSTANCE hInstance;
     *     LPCWSTR lpPrintTemplateName;
     *     LPUNKNOWN lpCallback;
     *     DWORD nPropertyPages;
     *     HPROPSHEETPAGE *lphPropertyPages;
     *     DWORD nStartPage;
     *     DWORD dwResultAction;
     * } *LPPRINTDLGEXW
     * }
     */
    public static final AddressLayout LPPRINTDLGEXW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTDLGEXA LPPRINTDLGEX
     * }
     */
    public static final AddressLayout LPPRINTDLGEX = winapi.C_POINTER;

    private static class PrintDlgExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PrintDlgExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExA(LPPRINTDLGEXA pPD)
     * }
     */
    public static FunctionDescriptor PrintDlgExA$descriptor() {
        return PrintDlgExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExA(LPPRINTDLGEXA pPD)
     * }
     */
    public static MethodHandle PrintDlgExA$handle() {
        return PrintDlgExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExA(LPPRINTDLGEXA pPD)
     * }
     */
    public static MemorySegment PrintDlgExA$address() {
        return PrintDlgExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT PrintDlgExA(LPPRINTDLGEXA pPD)
     * }
     */
    public static int PrintDlgExA(MemorySegment pPD) {
        var mh$ = PrintDlgExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrintDlgExA", pPD);
            }
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrintDlgExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PrintDlgExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExW(LPPRINTDLGEXW pPD)
     * }
     */
    public static FunctionDescriptor PrintDlgExW$descriptor() {
        return PrintDlgExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExW(LPPRINTDLGEXW pPD)
     * }
     */
    public static MethodHandle PrintDlgExW$handle() {
        return PrintDlgExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT PrintDlgExW(LPPRINTDLGEXW pPD)
     * }
     */
    public static MemorySegment PrintDlgExW$address() {
        return PrintDlgExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT PrintDlgExW(LPPRINTDLGEXW pPD)
     * }
     */
    public static int PrintDlgExW(MemorySegment pPD) {
        var mh$ = PrintDlgExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrintDlgExW", pPD);
            }
            return (int)mh$.invokeExact(pPD);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef DEVNAMES *LPDEVNAMES
     * }
     */
    public static final AddressLayout LPDEVNAMES = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const DEVNAMES *PCDEVNAMES
     * }
     */
    public static final AddressLayout PCDEVNAMES = winapi.C_POINTER;

    private static class CommDlgExtendedError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("CommDlgExtendedError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD CommDlgExtendedError()
     * }
     */
    public static FunctionDescriptor CommDlgExtendedError$descriptor() {
        return CommDlgExtendedError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD CommDlgExtendedError()
     * }
     */
    public static MethodHandle CommDlgExtendedError$handle() {
        return CommDlgExtendedError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD CommDlgExtendedError()
     * }
     */
    public static MemorySegment CommDlgExtendedError$address() {
        return CommDlgExtendedError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD CommDlgExtendedError()
     * }
     */
    public static int CommDlgExtendedError() {
        var mh$ = CommDlgExtendedError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CommDlgExtendedError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagPSDA {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     DWORD Flags;
     *     POINT ptPaperSize;
     *     RECT rtMinMargin;
     *     RECT rtMargin;
     *     HINSTANCE hInstance;
     *     LPARAM lCustData;
     *     LPPAGESETUPHOOK lpfnPageSetupHook;
     *     LPPAGEPAINTHOOK lpfnPagePaintHook;
     *     LPCSTR lpPageSetupTemplateName;
     *     HGLOBAL hPageSetupTemplate;
     * } *LPPAGESETUPDLGA
     * }
     */
    public static final AddressLayout LPPAGESETUPDLGA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagPSDW {
     *     DWORD lStructSize;
     *     HWND hwndOwner;
     *     HGLOBAL hDevMode;
     *     HGLOBAL hDevNames;
     *     DWORD Flags;
     *     POINT ptPaperSize;
     *     RECT rtMinMargin;
     *     RECT rtMargin;
     *     HINSTANCE hInstance;
     *     LPARAM lCustData;
     *     LPPAGESETUPHOOK lpfnPageSetupHook;
     *     LPPAGEPAINTHOOK lpfnPagePaintHook;
     *     LPCWSTR lpPageSetupTemplateName;
     *     HGLOBAL hPageSetupTemplate;
     * } *LPPAGESETUPDLGW
     * }
     */
    public static final AddressLayout LPPAGESETUPDLGW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPAGESETUPDLGA LPPAGESETUPDLG
     * }
     */
    public static final AddressLayout LPPAGESETUPDLG = winapi.C_POINTER;

    private static class PageSetupDlgA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PageSetupDlgA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgA(LPPAGESETUPDLGA)
     * }
     */
    public static FunctionDescriptor PageSetupDlgA$descriptor() {
        return PageSetupDlgA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgA(LPPAGESETUPDLGA)
     * }
     */
    public static MethodHandle PageSetupDlgA$handle() {
        return PageSetupDlgA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgA(LPPAGESETUPDLGA)
     * }
     */
    public static MemorySegment PageSetupDlgA$address() {
        return PageSetupDlgA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL PageSetupDlgA(LPPAGESETUPDLGA)
     * }
     */
    public static int PageSetupDlgA(MemorySegment x0) {
        var mh$ = PageSetupDlgA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PageSetupDlgA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PageSetupDlgW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PageSetupDlgW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgW(LPPAGESETUPDLGW)
     * }
     */
    public static FunctionDescriptor PageSetupDlgW$descriptor() {
        return PageSetupDlgW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgW(LPPAGESETUPDLGW)
     * }
     */
    public static MethodHandle PageSetupDlgW$handle() {
        return PageSetupDlgW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL PageSetupDlgW(LPPAGESETUPDLGW)
     * }
     */
    public static MemorySegment PageSetupDlgW$address() {
        return PageSetupDlgW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL PageSetupDlgW(LPPAGESETUPDLGW)
     * }
     */
    public static int PageSetupDlgW(MemorySegment x0) {
        var mh$ = PageSetupDlgW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PageSetupDlgW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_CharUpperW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_CharUpperW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LPUWSTR uaw_CharUpperW(LPUWSTR String)
     * }
     */
    public static FunctionDescriptor uaw_CharUpperW$descriptor() {
        return uaw_CharUpperW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LPUWSTR uaw_CharUpperW(LPUWSTR String)
     * }
     */
    public static MethodHandle uaw_CharUpperW$handle() {
        return uaw_CharUpperW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LPUWSTR uaw_CharUpperW(LPUWSTR String)
     * }
     */
    public static MemorySegment uaw_CharUpperW$address() {
        return uaw_CharUpperW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LPUWSTR uaw_CharUpperW(LPUWSTR String)
     * }
     */
    public static MemorySegment uaw_CharUpperW(MemorySegment String_) {
        var mh$ = uaw_CharUpperW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_CharUpperW", String_);
            }
            return (MemorySegment)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_lstrcmpW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_lstrcmpW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static FunctionDescriptor uaw_lstrcmpW$descriptor() {
        return uaw_lstrcmpW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MethodHandle uaw_lstrcmpW$handle() {
        return uaw_lstrcmpW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MemorySegment uaw_lstrcmpW$address() {
        return uaw_lstrcmpW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int uaw_lstrcmpW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static int uaw_lstrcmpW(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_lstrcmpW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_lstrcmpW", String1, String2);
            }
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_lstrcmpiW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_lstrcmpiW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static FunctionDescriptor uaw_lstrcmpiW$descriptor() {
        return uaw_lstrcmpiW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MethodHandle uaw_lstrcmpiW$handle() {
        return uaw_lstrcmpiW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MemorySegment uaw_lstrcmpiW$address() {
        return uaw_lstrcmpiW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int uaw_lstrcmpiW(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static int uaw_lstrcmpiW(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_lstrcmpiW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_lstrcmpiW", String1, String2);
            }
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_lstrlenW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_lstrlenW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int uaw_lstrlenW(LPCUWSTR String)
     * }
     */
    public static FunctionDescriptor uaw_lstrlenW$descriptor() {
        return uaw_lstrlenW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int uaw_lstrlenW(LPCUWSTR String)
     * }
     */
    public static MethodHandle uaw_lstrlenW$handle() {
        return uaw_lstrlenW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int uaw_lstrlenW(LPCUWSTR String)
     * }
     */
    public static MemorySegment uaw_lstrlenW$address() {
        return uaw_lstrlenW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int uaw_lstrlenW(LPCUWSTR String)
     * }
     */
    public static int uaw_lstrlenW(MemorySegment String_) {
        var mh$ = uaw_lstrlenW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_lstrlenW", String_);
            }
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcschr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_wcschr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcschr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static FunctionDescriptor uaw_wcschr$descriptor() {
        return uaw_wcschr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcschr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MethodHandle uaw_wcschr$handle() {
        return uaw_wcschr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcschr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MemorySegment uaw_wcschr$address() {
        return uaw_wcschr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PUWSTR uaw_wcschr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MemorySegment uaw_wcschr(MemorySegment String_, short Character_) {
        var mh$ = uaw_wcschr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcschr", String_, Character_);
            }
            return (MemorySegment)mh$.invokeExact(String_, Character_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcscpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_wcscpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcscpy(PUWSTR Destination, PCUWSTR Source)
     * }
     */
    public static FunctionDescriptor uaw_wcscpy$descriptor() {
        return uaw_wcscpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcscpy(PUWSTR Destination, PCUWSTR Source)
     * }
     */
    public static MethodHandle uaw_wcscpy$handle() {
        return uaw_wcscpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcscpy(PUWSTR Destination, PCUWSTR Source)
     * }
     */
    public static MemorySegment uaw_wcscpy$address() {
        return uaw_wcscpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PUWSTR uaw_wcscpy(PUWSTR Destination, PCUWSTR Source)
     * }
     */
    public static MemorySegment uaw_wcscpy(MemorySegment Destination, MemorySegment Source) {
        var mh$ = uaw_wcscpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcscpy", Destination, Source);
            }
            return (MemorySegment)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcsicmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_wcsicmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static FunctionDescriptor uaw_wcsicmp$descriptor() {
        return uaw_wcsicmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MethodHandle uaw_wcsicmp$handle() {
        return uaw_wcsicmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static MemorySegment uaw_wcsicmp$address() {
        return uaw_wcsicmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int uaw_wcsicmp(PCUWSTR String1, PCUWSTR String2)
     * }
     */
    public static int uaw_wcsicmp(MemorySegment String1, MemorySegment String2) {
        var mh$ = uaw_wcsicmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcsicmp", String1, String2);
            }
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcslen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_wcslen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t uaw_wcslen(PCUWSTR String)
     * }
     */
    public static FunctionDescriptor uaw_wcslen$descriptor() {
        return uaw_wcslen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t uaw_wcslen(PCUWSTR String)
     * }
     */
    public static MethodHandle uaw_wcslen$handle() {
        return uaw_wcslen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t uaw_wcslen(PCUWSTR String)
     * }
     */
    public static MemorySegment uaw_wcslen$address() {
        return uaw_wcslen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t uaw_wcslen(PCUWSTR String)
     * }
     */
    public static long uaw_wcslen(MemorySegment String_) {
        var mh$ = uaw_wcslen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcslen", String_);
            }
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class uaw_wcsrchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("uaw_wcsrchr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcsrchr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static FunctionDescriptor uaw_wcsrchr$descriptor() {
        return uaw_wcsrchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcsrchr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MethodHandle uaw_wcsrchr$handle() {
        return uaw_wcsrchr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * PUWSTR uaw_wcsrchr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MemorySegment uaw_wcsrchr$address() {
        return uaw_wcsrchr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * PUWSTR uaw_wcsrchr(PCUWSTR String, WCHAR Character)
     * }
     */
    public static MemorySegment uaw_wcsrchr(MemorySegment String_, short Character_) {
        var mh$ = uaw_wcsrchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("uaw_wcsrchr", String_, Character_);
            }
            return (MemorySegment)mh$.invokeExact(String_, Character_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __unaligned WCHAR *PUWSTR_C
     * }
     */
    public static final AddressLayout PUWSTR_C = winapi.C_POINTER;

    private static class NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
     * }
     */
    public static GroupLayout NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$layout() {
        return NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
     * }
     */
    public static MemorySegment NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID() {
        return NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID
     * }
     */
    public static void NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants.SEGMENT, 0L, NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$constants.LAYOUT.byteSize());
    }

    private static class NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
     * }
     */
    public static GroupLayout NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$layout() {
        return NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
     * }
     */
    public static MemorySegment NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID() {
        return NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID
     * }
     */
    public static void NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants.SEGMENT, 0L, NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$constants.LAYOUT.byteSize());
    }

    private static class DOMAIN_JOIN_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("DOMAIN_JOIN_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_JOIN_GUID
     * }
     */
    public static GroupLayout DOMAIN_JOIN_GUID$layout() {
        return DOMAIN_JOIN_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_JOIN_GUID
     * }
     */
    public static MemorySegment DOMAIN_JOIN_GUID() {
        return DOMAIN_JOIN_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_JOIN_GUID
     * }
     */
    public static void DOMAIN_JOIN_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, DOMAIN_JOIN_GUID$constants.SEGMENT, 0L, DOMAIN_JOIN_GUID$constants.LAYOUT.byteSize());
    }

    private static class DOMAIN_LEAVE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("DOMAIN_LEAVE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_LEAVE_GUID
     * }
     */
    public static GroupLayout DOMAIN_LEAVE_GUID$layout() {
        return DOMAIN_LEAVE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_LEAVE_GUID
     * }
     */
    public static MemorySegment DOMAIN_LEAVE_GUID() {
        return DOMAIN_LEAVE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID DOMAIN_LEAVE_GUID
     * }
     */
    public static void DOMAIN_LEAVE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, DOMAIN_LEAVE_GUID$constants.SEGMENT, 0L, DOMAIN_LEAVE_GUID$constants.LAYOUT.byteSize());
    }

    private static class FIREWALL_PORT_OPEN_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FIREWALL_PORT_OPEN_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_OPEN_GUID
     * }
     */
    public static GroupLayout FIREWALL_PORT_OPEN_GUID$layout() {
        return FIREWALL_PORT_OPEN_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_OPEN_GUID
     * }
     */
    public static MemorySegment FIREWALL_PORT_OPEN_GUID() {
        return FIREWALL_PORT_OPEN_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_OPEN_GUID
     * }
     */
    public static void FIREWALL_PORT_OPEN_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FIREWALL_PORT_OPEN_GUID$constants.SEGMENT, 0L, FIREWALL_PORT_OPEN_GUID$constants.LAYOUT.byteSize());
    }

    private static class FIREWALL_PORT_CLOSE_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("FIREWALL_PORT_CLOSE_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_CLOSE_GUID
     * }
     */
    public static GroupLayout FIREWALL_PORT_CLOSE_GUID$layout() {
        return FIREWALL_PORT_CLOSE_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_CLOSE_GUID
     * }
     */
    public static MemorySegment FIREWALL_PORT_CLOSE_GUID() {
        return FIREWALL_PORT_CLOSE_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID FIREWALL_PORT_CLOSE_GUID
     * }
     */
    public static void FIREWALL_PORT_CLOSE_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, FIREWALL_PORT_CLOSE_GUID$constants.SEGMENT, 0L, FIREWALL_PORT_CLOSE_GUID$constants.LAYOUT.byteSize());
    }

    private static class MACHINE_POLICY_PRESENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("MACHINE_POLICY_PRESENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID MACHINE_POLICY_PRESENT_GUID
     * }
     */
    public static GroupLayout MACHINE_POLICY_PRESENT_GUID$layout() {
        return MACHINE_POLICY_PRESENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID MACHINE_POLICY_PRESENT_GUID
     * }
     */
    public static MemorySegment MACHINE_POLICY_PRESENT_GUID() {
        return MACHINE_POLICY_PRESENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID MACHINE_POLICY_PRESENT_GUID
     * }
     */
    public static void MACHINE_POLICY_PRESENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, MACHINE_POLICY_PRESENT_GUID$constants.SEGMENT, 0L, MACHINE_POLICY_PRESENT_GUID$constants.LAYOUT.byteSize());
    }

    private static class USER_POLICY_PRESENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("USER_POLICY_PRESENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID USER_POLICY_PRESENT_GUID
     * }
     */
    public static GroupLayout USER_POLICY_PRESENT_GUID$layout() {
        return USER_POLICY_PRESENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID USER_POLICY_PRESENT_GUID
     * }
     */
    public static MemorySegment USER_POLICY_PRESENT_GUID() {
        return USER_POLICY_PRESENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID USER_POLICY_PRESENT_GUID
     * }
     */
    public static void USER_POLICY_PRESENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, USER_POLICY_PRESENT_GUID$constants.SEGMENT, 0L, USER_POLICY_PRESENT_GUID$constants.LAYOUT.byteSize());
    }

    private static class RPC_INTERFACE_EVENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("RPC_INTERFACE_EVENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID RPC_INTERFACE_EVENT_GUID
     * }
     */
    public static GroupLayout RPC_INTERFACE_EVENT_GUID$layout() {
        return RPC_INTERFACE_EVENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID RPC_INTERFACE_EVENT_GUID
     * }
     */
    public static MemorySegment RPC_INTERFACE_EVENT_GUID() {
        return RPC_INTERFACE_EVENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID RPC_INTERFACE_EVENT_GUID
     * }
     */
    public static void RPC_INTERFACE_EVENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, RPC_INTERFACE_EVENT_GUID$constants.SEGMENT, 0L, RPC_INTERFACE_EVENT_GUID$constants.LAYOUT.byteSize());
    }

    private static class NAMED_PIPE_EVENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("NAMED_PIPE_EVENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID NAMED_PIPE_EVENT_GUID
     * }
     */
    public static GroupLayout NAMED_PIPE_EVENT_GUID$layout() {
        return NAMED_PIPE_EVENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID NAMED_PIPE_EVENT_GUID
     * }
     */
    public static MemorySegment NAMED_PIPE_EVENT_GUID() {
        return NAMED_PIPE_EVENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID NAMED_PIPE_EVENT_GUID
     * }
     */
    public static void NAMED_PIPE_EVENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, NAMED_PIPE_EVENT_GUID$constants.SEGMENT, 0L, NAMED_PIPE_EVENT_GUID$constants.LAYOUT.byteSize());
    }

    private static class CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
     * }
     */
    public static GroupLayout CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$layout() {
        return CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
     * }
     */
    public static MemorySegment CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID() {
        return CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID
     * }
     */
    public static void CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants.SEGMENT, 0L, CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
     *     union {
     *         SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
     *         struct {
     *             DWORD DataOffset;
     *             BYTE Data[1];
     *         } s;
     *     } u;
     * } *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
     * }
     */
    public static final AddressLayout LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_DESCRIPTIONA {
     *     LPSTR lpDescription;
     * } *LPSERVICE_DESCRIPTIONA
     * }
     */
    public static final AddressLayout LPSERVICE_DESCRIPTIONA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_DESCRIPTIONW {
     *     LPWSTR lpDescription;
     * } *LPSERVICE_DESCRIPTIONW
     * }
     */
    public static final AddressLayout LPSERVICE_DESCRIPTIONW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION
     * }
     */
    public static final AddressLayout LPSERVICE_DESCRIPTION = winapi.C_POINTER;
    private static final int SC_ACTION_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_NONE = 0
     * }
     */
    public static int SC_ACTION_NONE() {
        return SC_ACTION_NONE;
    }
    private static final int SC_ACTION_RESTART = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_RESTART = 1
     * }
     */
    public static int SC_ACTION_RESTART() {
        return SC_ACTION_RESTART;
    }
    private static final int SC_ACTION_REBOOT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_REBOOT = 2
     * }
     */
    public static int SC_ACTION_REBOOT() {
        return SC_ACTION_REBOOT;
    }
    private static final int SC_ACTION_RUN_COMMAND = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND = 3
     * }
     */
    public static int SC_ACTION_RUN_COMMAND() {
        return SC_ACTION_RUN_COMMAND;
    }
    private static final int SC_ACTION_OWN_RESTART = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _SC_ACTION_TYPE.SC_ACTION_OWN_RESTART = 4
     * }
     */
    public static int SC_ACTION_OWN_RESTART() {
        return SC_ACTION_OWN_RESTART;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SC_ACTION {
     *     SC_ACTION_TYPE Type;
     *     DWORD Delay;
     * } *LPSC_ACTION
     * }
     */
    public static final AddressLayout LPSC_ACTION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_FAILURE_ACTIONSA {
     *     DWORD dwResetPeriod;
     *     LPSTR lpRebootMsg;
     *     LPSTR lpCommand;
     *     DWORD cActions;
     *     SC_ACTION *lpsaActions;
     * } *LPSERVICE_FAILURE_ACTIONSA
     * }
     */
    public static final AddressLayout LPSERVICE_FAILURE_ACTIONSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_FAILURE_ACTIONSW {
     *     DWORD dwResetPeriod;
     *     LPWSTR lpRebootMsg;
     *     LPWSTR lpCommand;
     *     DWORD cActions;
     *     SC_ACTION *lpsaActions;
     * } *LPSERVICE_FAILURE_ACTIONSW
     * }
     */
    public static final AddressLayout LPSERVICE_FAILURE_ACTIONSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS
     * }
     */
    public static final AddressLayout LPSERVICE_FAILURE_ACTIONS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
     *     BOOL fDelayedAutostart;
     * } *LPSERVICE_DELAYED_AUTO_START_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_DELAYED_AUTO_START_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
     *     BOOL fFailureActionsOnNonCrashFailures;
     * } *LPSERVICE_FAILURE_ACTIONS_FLAG
     * }
     */
    public static final AddressLayout LPSERVICE_FAILURE_ACTIONS_FLAG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_SID_INFO {
     *     DWORD dwServiceSidType;
     * } *LPSERVICE_SID_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_SID_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
     *     LPSTR pmszRequiredPrivileges;
     * } *LPSERVICE_REQUIRED_PRIVILEGES_INFOA
     * }
     */
    public static final AddressLayout LPSERVICE_REQUIRED_PRIVILEGES_INFOA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
     *     LPWSTR pmszRequiredPrivileges;
     * } *LPSERVICE_REQUIRED_PRIVILEGES_INFOW
     * }
     */
    public static final AddressLayout LPSERVICE_REQUIRED_PRIVILEGES_INFOW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_REQUIRED_PRIVILEGES_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_PRESHUTDOWN_INFO {
     *     DWORD dwPreshutdownTimeout;
     * } *LPSERVICE_PRESHUTDOWN_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_PRESHUTDOWN_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
     *     DWORD dwDataType;
     *     DWORD cbData;
     *     PBYTE pData;
     * } *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM
     * }
     */
    public static final AddressLayout PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TRIGGER {
     *     DWORD dwTriggerType;
     *     DWORD dwAction;
     *     GUID *pTriggerSubtype;
     *     DWORD cDataItems;
     *     PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
     * } *PSERVICE_TRIGGER
     * }
     */
    public static final AddressLayout PSERVICE_TRIGGER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TRIGGER_INFO {
     *     DWORD cTriggers;
     *     PSERVICE_TRIGGER pTriggers;
     *     PBYTE pReserved;
     * } *PSERVICE_TRIGGER_INFO
     * }
     */
    public static final AddressLayout PSERVICE_TRIGGER_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_PREFERRED_NODE_INFO {
     *     USHORT usPreferredNode;
     *     BOOLEAN fDelete;
     * } *LPSERVICE_PREFERRED_NODE_INFO
     * }
     */
    public static final AddressLayout LPSERVICE_PREFERRED_NODE_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TIMECHANGE_INFO {
     *     LARGE_INTEGER liNewTime;
     *     LARGE_INTEGER liOldTime;
     * } *PSERVICE_TIMECHANGE_INFO
     * }
     */
    public static final AddressLayout PSERVICE_TIMECHANGE_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
     *     DWORD dwLaunchProtected;
     * } *PSERVICE_LAUNCH_PROTECTED_INFO
     * }
     */
    public static final AddressLayout PSERVICE_LAUNCH_PROTECTED_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct SC_HANDLE__ {
     *     int unused;
     * } *SC_HANDLE
     * }
     */
    public static final AddressLayout SC_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SC_HANDLE *LPSC_HANDLE
     * }
     */
    public static final AddressLayout LPSC_HANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct SERVICE_STATUS_HANDLE__ {
     *     int unused;
     * } *SERVICE_STATUS_HANDLE
     * }
     */
    public static final AddressLayout SERVICE_STATUS_HANDLE = winapi.C_POINTER;
    private static final int SC_STATUS_PROCESS_INFO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SC_STATUS_TYPE.SC_STATUS_PROCESS_INFO = 0
     * }
     */
    public static int SC_STATUS_PROCESS_INFO() {
        return SC_STATUS_PROCESS_INFO;
    }
    private static final int SC_ENUM_PROCESS_INFO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SC_ENUM_TYPE.SC_ENUM_PROCESS_INFO = 0
     * }
     */
    public static int SC_ENUM_PROCESS_INFO() {
        return SC_ENUM_PROCESS_INFO;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_STATUS {
     *     DWORD dwServiceType;
     *     DWORD dwCurrentState;
     *     DWORD dwControlsAccepted;
     *     DWORD dwWin32ExitCode;
     *     DWORD dwServiceSpecificExitCode;
     *     DWORD dwCheckPoint;
     *     DWORD dwWaitHint;
     * } *LPSERVICE_STATUS
     * }
     */
    public static final AddressLayout LPSERVICE_STATUS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_STATUS_PROCESS {
     *     DWORD dwServiceType;
     *     DWORD dwCurrentState;
     *     DWORD dwControlsAccepted;
     *     DWORD dwWin32ExitCode;
     *     DWORD dwServiceSpecificExitCode;
     *     DWORD dwCheckPoint;
     *     DWORD dwWaitHint;
     *     DWORD dwProcessId;
     *     DWORD dwServiceFlags;
     * } *LPSERVICE_STATUS_PROCESS
     * }
     */
    public static final AddressLayout LPSERVICE_STATUS_PROCESS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENUM_SERVICE_STATUSA {
     *     LPSTR lpServiceName;
     *     LPSTR lpDisplayName;
     *     SERVICE_STATUS ServiceStatus;
     * } *LPENUM_SERVICE_STATUSA
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENUM_SERVICE_STATUSW {
     *     LPWSTR lpServiceName;
     *     LPWSTR lpDisplayName;
     *     SERVICE_STATUS ServiceStatus;
     * } *LPENUM_SERVICE_STATUSW
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
     *     LPSTR lpServiceName;
     *     LPSTR lpDisplayName;
     *     SERVICE_STATUS_PROCESS ServiceStatusProcess;
     * } *LPENUM_SERVICE_STATUS_PROCESSA
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUS_PROCESSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
     *     LPWSTR lpServiceName;
     *     LPWSTR lpDisplayName;
     *     SERVICE_STATUS_PROCESS ServiceStatusProcess;
     * } *LPENUM_SERVICE_STATUS_PROCESSW
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUS_PROCESSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS
     * }
     */
    public static final AddressLayout LPENUM_SERVICE_STATUS_PROCESS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPVOID SC_LOCK
     * }
     */
    public static final AddressLayout SC_LOCK = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_SERVICE_LOCK_STATUSA {
     *     DWORD fIsLocked;
     *     LPSTR lpLockOwner;
     *     DWORD dwLockDuration;
     * } *LPQUERY_SERVICE_LOCK_STATUSA
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_LOCK_STATUSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_SERVICE_LOCK_STATUSW {
     *     DWORD fIsLocked;
     *     LPWSTR lpLockOwner;
     *     DWORD dwLockDuration;
     * } *LPQUERY_SERVICE_LOCK_STATUSW
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_LOCK_STATUSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_LOCK_STATUS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_SERVICE_CONFIGA {
     *     DWORD dwServiceType;
     *     DWORD dwStartType;
     *     DWORD dwErrorControl;
     *     LPSTR lpBinaryPathName;
     *     LPSTR lpLoadOrderGroup;
     *     DWORD dwTagId;
     *     LPSTR lpDependencies;
     *     LPSTR lpServiceStartName;
     *     LPSTR lpDisplayName;
     * } *LPQUERY_SERVICE_CONFIGA
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_CONFIGA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_SERVICE_CONFIGW {
     *     DWORD dwServiceType;
     *     DWORD dwStartType;
     *     DWORD dwErrorControl;
     *     LPWSTR lpBinaryPathName;
     *     LPWSTR lpLoadOrderGroup;
     *     DWORD dwTagId;
     *     LPWSTR lpDependencies;
     *     LPWSTR lpServiceStartName;
     *     LPWSTR lpDisplayName;
     * } *LPQUERY_SERVICE_CONFIGW
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_CONFIGW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG
     * }
     */
    public static final AddressLayout LPQUERY_SERVICE_CONFIG = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TABLE_ENTRYA {
     *     LPSTR lpServiceName;
     *     LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
     * } *LPSERVICE_TABLE_ENTRYA
     * }
     */
    public static final AddressLayout LPSERVICE_TABLE_ENTRYA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_TABLE_ENTRYW {
     *     LPWSTR lpServiceName;
     *     LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
     * } *LPSERVICE_TABLE_ENTRYW
     * }
     */
    public static final AddressLayout LPSERVICE_TABLE_ENTRYW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY
     * }
     */
    public static final AddressLayout LPSERVICE_TABLE_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_NOTIFY_1 {
     *     DWORD dwVersion;
     *     PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
     *     PVOID pContext;
     *     DWORD dwNotificationStatus;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     * } *PSERVICE_NOTIFY_1
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_NOTIFY_2A {
     *     DWORD dwVersion;
     *     PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
     *     PVOID pContext;
     *     DWORD dwNotificationStatus;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     *     DWORD dwNotificationTriggered;
     *     LPSTR pszServiceNames;
     * } *PSERVICE_NOTIFY_2A
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_NOTIFY_2W {
     *     DWORD dwVersion;
     *     PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
     *     PVOID pContext;
     *     DWORD dwNotificationStatus;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     *     DWORD dwNotificationTriggered;
     *     LPWSTR pszServiceNames;
     * } *PSERVICE_NOTIFY_2W
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SERVICE_NOTIFY_2A *PSERVICE_NOTIFYA
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFYA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SERVICE_NOTIFY_2W *PSERVICE_NOTIFYW
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFYW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY
     * }
     */
    public static final AddressLayout PSERVICE_NOTIFY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
     *     DWORD dwReason;
     *     LPSTR pszComment;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     * } *PSERVICE_CONTROL_STATUS_REASON_PARAMSA
     * }
     */
    public static final AddressLayout PSERVICE_CONTROL_STATUS_REASON_PARAMSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
     *     DWORD dwReason;
     *     LPWSTR pszComment;
     *     SERVICE_STATUS_PROCESS ServiceStatus;
     * } *PSERVICE_CONTROL_STATUS_REASON_PARAMSW
     * }
     */
    public static final AddressLayout PSERVICE_CONTROL_STATUS_REASON_PARAMSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS
     * }
     */
    public static final AddressLayout PSERVICE_CONTROL_STATUS_REASON_PARAMS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SERVICE_START_REASON {
     *     DWORD dwReason;
     * } *PSERVICE_START_REASON
     * }
     */
    public static final AddressLayout PSERVICE_START_REASON = winapi.C_POINTER;

    private static class ChangeServiceConfigA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ChangeServiceConfigA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName)
     * }
     */
    public static FunctionDescriptor ChangeServiceConfigA$descriptor() {
        return ChangeServiceConfigA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName)
     * }
     */
    public static MethodHandle ChangeServiceConfigA$handle() {
        return ChangeServiceConfigA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName)
     * }
     */
    public static MemorySegment ChangeServiceConfigA$address() {
        return ChangeServiceConfigA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigA(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword, LPCSTR lpDisplayName)
     * }
     */
    public static int ChangeServiceConfigA(MemorySegment hService, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword, MemorySegment lpDisplayName) {
        var mh$ = ChangeServiceConfigA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChangeServiceConfigA", hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
            }
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChangeServiceConfigW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ChangeServiceConfigW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName)
     * }
     */
    public static FunctionDescriptor ChangeServiceConfigW$descriptor() {
        return ChangeServiceConfigW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName)
     * }
     */
    public static MethodHandle ChangeServiceConfigW$handle() {
        return ChangeServiceConfigW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName)
     * }
     */
    public static MemorySegment ChangeServiceConfigW$address() {
        return ChangeServiceConfigW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ChangeServiceConfigW(SC_HANDLE hService, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword, LPCWSTR lpDisplayName)
     * }
     */
    public static int ChangeServiceConfigW(MemorySegment hService, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword, MemorySegment lpDisplayName) {
        var mh$ = ChangeServiceConfigW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChangeServiceConfigW", hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
            }
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChangeServiceConfig2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ChangeServiceConfig2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static FunctionDescriptor ChangeServiceConfig2A$descriptor() {
        return ChangeServiceConfig2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static MethodHandle ChangeServiceConfig2A$handle() {
        return ChangeServiceConfig2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static MemorySegment ChangeServiceConfig2A$address() {
        return ChangeServiceConfig2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static int ChangeServiceConfig2A(MemorySegment hService, int dwInfoLevel, MemorySegment lpInfo) {
        var mh$ = ChangeServiceConfig2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChangeServiceConfig2A", hService, dwInfoLevel, lpInfo);
            }
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ChangeServiceConfig2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ChangeServiceConfig2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static FunctionDescriptor ChangeServiceConfig2W$descriptor() {
        return ChangeServiceConfig2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static MethodHandle ChangeServiceConfig2W$handle() {
        return ChangeServiceConfig2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static MemorySegment ChangeServiceConfig2W$address() {
        return ChangeServiceConfig2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ChangeServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPVOID lpInfo)
     * }
     */
    public static int ChangeServiceConfig2W(MemorySegment hService, int dwInfoLevel, MemorySegment lpInfo) {
        var mh$ = ChangeServiceConfig2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ChangeServiceConfig2W", hService, dwInfoLevel, lpInfo);
            }
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CloseServiceHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CloseServiceHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CloseServiceHandle(SC_HANDLE hSCObject)
     * }
     */
    public static FunctionDescriptor CloseServiceHandle$descriptor() {
        return CloseServiceHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CloseServiceHandle(SC_HANDLE hSCObject)
     * }
     */
    public static MethodHandle CloseServiceHandle$handle() {
        return CloseServiceHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CloseServiceHandle(SC_HANDLE hSCObject)
     * }
     */
    public static MemorySegment CloseServiceHandle$address() {
        return CloseServiceHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CloseServiceHandle(SC_HANDLE hSCObject)
     * }
     */
    public static int CloseServiceHandle(MemorySegment hSCObject) {
        var mh$ = CloseServiceHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloseServiceHandle", hSCObject);
            }
            return (int)mh$.invokeExact(hSCObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ControlService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ControlService");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static FunctionDescriptor ControlService$descriptor() {
        return ControlService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MethodHandle ControlService$handle() {
        return ControlService.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MemorySegment ControlService$address() {
        return ControlService.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static int ControlService(MemorySegment hService, int dwControl, MemorySegment lpServiceStatus) {
        var mh$ = ControlService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ControlService", hService, dwControl, lpServiceStatus);
            }
            return (int)mh$.invokeExact(hService, dwControl, lpServiceStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateServiceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateServiceA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword)
     * }
     */
    public static FunctionDescriptor CreateServiceA$descriptor() {
        return CreateServiceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword)
     * }
     */
    public static MethodHandle CreateServiceA$handle() {
        return CreateServiceA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword)
     * }
     */
    public static MemorySegment CreateServiceA$address() {
        return CreateServiceA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR lpDependencies, LPCSTR lpServiceStartName, LPCSTR lpPassword)
     * }
     */
    public static MemorySegment CreateServiceA(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, int dwDesiredAccess, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword) {
        var mh$ = CreateServiceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateServiceA", hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreateServiceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreateServiceW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword)
     * }
     */
    public static FunctionDescriptor CreateServiceW$descriptor() {
        return CreateServiceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword)
     * }
     */
    public static MethodHandle CreateServiceW$handle() {
        return CreateServiceW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword)
     * }
     */
    public static MemorySegment CreateServiceW$address() {
        return CreateServiceW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SC_HANDLE CreateServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPCWSTR lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCWSTR lpBinaryPathName, LPCWSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCWSTR lpDependencies, LPCWSTR lpServiceStartName, LPCWSTR lpPassword)
     * }
     */
    public static MemorySegment CreateServiceW(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, int dwDesiredAccess, int dwServiceType, int dwStartType, int dwErrorControl, MemorySegment lpBinaryPathName, MemorySegment lpLoadOrderGroup, MemorySegment lpdwTagId, MemorySegment lpDependencies, MemorySegment lpServiceStartName, MemorySegment lpPassword) {
        var mh$ = CreateServiceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreateServiceW", hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeleteService");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteService(SC_HANDLE hService)
     * }
     */
    public static FunctionDescriptor DeleteService$descriptor() {
        return DeleteService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteService(SC_HANDLE hService)
     * }
     */
    public static MethodHandle DeleteService$handle() {
        return DeleteService.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteService(SC_HANDLE hService)
     * }
     */
    public static MemorySegment DeleteService$address() {
        return DeleteService.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteService(SC_HANDLE hService)
     * }
     */
    public static int DeleteService(MemorySegment hService) {
        var mh$ = DeleteService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteService", hService);
            }
            return (int)mh$.invokeExact(hService);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumDependentServicesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumDependentServicesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static FunctionDescriptor EnumDependentServicesA$descriptor() {
        return EnumDependentServicesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static MethodHandle EnumDependentServicesA$handle() {
        return EnumDependentServicesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static MemorySegment EnumDependentServicesA$address() {
        return EnumDependentServicesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumDependentServicesA(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static int EnumDependentServicesA(MemorySegment hService, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned) {
        var mh$ = EnumDependentServicesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumDependentServicesA", hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
            }
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumDependentServicesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumDependentServicesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static FunctionDescriptor EnumDependentServicesW$descriptor() {
        return EnumDependentServicesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static MethodHandle EnumDependentServicesW$handle() {
        return EnumDependentServicesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static MemorySegment EnumDependentServicesW$address() {
        return EnumDependentServicesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumDependentServicesW(SC_HANDLE hService, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned)
     * }
     */
    public static int EnumDependentServicesW(MemorySegment hService, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned) {
        var mh$ = EnumDependentServicesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumDependentServicesW", hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
            }
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumServicesStatusA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumServicesStatusA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static FunctionDescriptor EnumServicesStatusA$descriptor() {
        return EnumServicesStatusA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static MethodHandle EnumServicesStatusA$handle() {
        return EnumServicesStatusA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static MemorySegment EnumServicesStatusA$address() {
        return EnumServicesStatusA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumServicesStatusA(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSA lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static int EnumServicesStatusA(MemorySegment hSCManager, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle) {
        var mh$ = EnumServicesStatusA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumServicesStatusA", hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
            }
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumServicesStatusW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumServicesStatusW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static FunctionDescriptor EnumServicesStatusW$descriptor() {
        return EnumServicesStatusW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static MethodHandle EnumServicesStatusW$handle() {
        return EnumServicesStatusW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static MemorySegment EnumServicesStatusW$address() {
        return EnumServicesStatusW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumServicesStatusW(SC_HANDLE hSCManager, DWORD dwServiceType, DWORD dwServiceState, LPENUM_SERVICE_STATUSW lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle)
     * }
     */
    public static int EnumServicesStatusW(MemorySegment hSCManager, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle) {
        var mh$ = EnumServicesStatusW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumServicesStatusW", hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
            }
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumServicesStatusExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumServicesStatusExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName)
     * }
     */
    public static FunctionDescriptor EnumServicesStatusExA$descriptor() {
        return EnumServicesStatusExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName)
     * }
     */
    public static MethodHandle EnumServicesStatusExA$handle() {
        return EnumServicesStatusExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName)
     * }
     */
    public static MemorySegment EnumServicesStatusExA$address() {
        return EnumServicesStatusExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExA(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCSTR pszGroupName)
     * }
     */
    public static int EnumServicesStatusExA(MemorySegment hSCManager, int InfoLevel, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle, MemorySegment pszGroupName) {
        var mh$ = EnumServicesStatusExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumServicesStatusExA", hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
            }
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumServicesStatusExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumServicesStatusExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName)
     * }
     */
    public static FunctionDescriptor EnumServicesStatusExW$descriptor() {
        return EnumServicesStatusExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName)
     * }
     */
    public static MethodHandle EnumServicesStatusExW$handle() {
        return EnumServicesStatusExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName)
     * }
     */
    public static MemorySegment EnumServicesStatusExW$address() {
        return EnumServicesStatusExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumServicesStatusExW(SC_HANDLE hSCManager, SC_ENUM_TYPE InfoLevel, DWORD dwServiceType, DWORD dwServiceState, LPBYTE lpServices, DWORD cbBufSize, LPDWORD pcbBytesNeeded, LPDWORD lpServicesReturned, LPDWORD lpResumeHandle, LPCWSTR pszGroupName)
     * }
     */
    public static int EnumServicesStatusExW(MemorySegment hSCManager, int InfoLevel, int dwServiceType, int dwServiceState, MemorySegment lpServices, int cbBufSize, MemorySegment pcbBytesNeeded, MemorySegment lpServicesReturned, MemorySegment lpResumeHandle, MemorySegment pszGroupName) {
        var mh$ = EnumServicesStatusExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumServicesStatusExW", hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
            }
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetServiceKeyNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetServiceKeyNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static FunctionDescriptor GetServiceKeyNameA$descriptor() {
        return GetServiceKeyNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static MethodHandle GetServiceKeyNameA$handle() {
        return GetServiceKeyNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static MemorySegment GetServiceKeyNameA$address() {
        return GetServiceKeyNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameA(SC_HANDLE hSCManager, LPCSTR lpDisplayName, LPSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static int GetServiceKeyNameA(MemorySegment hSCManager, MemorySegment lpDisplayName, MemorySegment lpServiceName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceKeyNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceKeyNameA", hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
            }
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetServiceKeyNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetServiceKeyNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static FunctionDescriptor GetServiceKeyNameW$descriptor() {
        return GetServiceKeyNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static MethodHandle GetServiceKeyNameW$handle() {
        return GetServiceKeyNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static MemorySegment GetServiceKeyNameW$address() {
        return GetServiceKeyNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetServiceKeyNameW(SC_HANDLE hSCManager, LPCWSTR lpDisplayName, LPWSTR lpServiceName, LPDWORD lpcchBuffer)
     * }
     */
    public static int GetServiceKeyNameW(MemorySegment hSCManager, MemorySegment lpDisplayName, MemorySegment lpServiceName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceKeyNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceKeyNameW", hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
            }
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetServiceDisplayNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetServiceDisplayNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static FunctionDescriptor GetServiceDisplayNameA$descriptor() {
        return GetServiceDisplayNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static MethodHandle GetServiceDisplayNameA$handle() {
        return GetServiceDisplayNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static MemorySegment GetServiceDisplayNameA$address() {
        return GetServiceDisplayNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static int GetServiceDisplayNameA(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceDisplayNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceDisplayNameA", hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
            }
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetServiceDisplayNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetServiceDisplayNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static FunctionDescriptor GetServiceDisplayNameW$descriptor() {
        return GetServiceDisplayNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static MethodHandle GetServiceDisplayNameW$handle() {
        return GetServiceDisplayNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static MemorySegment GetServiceDisplayNameW$address() {
        return GetServiceDisplayNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetServiceDisplayNameW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, LPWSTR lpDisplayName, LPDWORD lpcchBuffer)
     * }
     */
    public static int GetServiceDisplayNameW(MemorySegment hSCManager, MemorySegment lpServiceName, MemorySegment lpDisplayName, MemorySegment lpcchBuffer) {
        var mh$ = GetServiceDisplayNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceDisplayNameW", hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
            }
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class LockServiceDatabase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("LockServiceDatabase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager)
     * }
     */
    public static FunctionDescriptor LockServiceDatabase$descriptor() {
        return LockServiceDatabase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager)
     * }
     */
    public static MethodHandle LockServiceDatabase$handle() {
        return LockServiceDatabase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager)
     * }
     */
    public static MemorySegment LockServiceDatabase$address() {
        return LockServiceDatabase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SC_LOCK LockServiceDatabase(SC_HANDLE hSCManager)
     * }
     */
    public static MemorySegment LockServiceDatabase(MemorySegment hSCManager) {
        var mh$ = LockServiceDatabase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("LockServiceDatabase", hSCManager);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NotifyBootConfigStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NotifyBootConfigStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL NotifyBootConfigStatus(BOOL BootAcceptable)
     * }
     */
    public static FunctionDescriptor NotifyBootConfigStatus$descriptor() {
        return NotifyBootConfigStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL NotifyBootConfigStatus(BOOL BootAcceptable)
     * }
     */
    public static MethodHandle NotifyBootConfigStatus$handle() {
        return NotifyBootConfigStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL NotifyBootConfigStatus(BOOL BootAcceptable)
     * }
     */
    public static MemorySegment NotifyBootConfigStatus$address() {
        return NotifyBootConfigStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL NotifyBootConfigStatus(BOOL BootAcceptable)
     * }
     */
    public static int NotifyBootConfigStatus(int BootAcceptable) {
        var mh$ = NotifyBootConfigStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NotifyBootConfigStatus", BootAcceptable);
            }
            return (int)mh$.invokeExact(BootAcceptable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenSCManagerA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OpenSCManagerA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static FunctionDescriptor OpenSCManagerA$descriptor() {
        return OpenSCManagerA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MethodHandle OpenSCManagerA$handle() {
        return OpenSCManagerA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenSCManagerA$address() {
        return OpenSCManagerA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenSCManagerA(MemorySegment lpMachineName, MemorySegment lpDatabaseName, int dwDesiredAccess) {
        var mh$ = OpenSCManagerA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenSCManagerA", lpMachineName, lpDatabaseName, dwDesiredAccess);
            }
            return (MemorySegment)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenSCManagerW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OpenSCManagerW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static FunctionDescriptor OpenSCManagerW$descriptor() {
        return OpenSCManagerW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MethodHandle OpenSCManagerW$handle() {
        return OpenSCManagerW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenSCManagerW$address() {
        return OpenSCManagerW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SC_HANDLE OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenSCManagerW(MemorySegment lpMachineName, MemorySegment lpDatabaseName, int dwDesiredAccess) {
        var mh$ = OpenSCManagerW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenSCManagerW", lpMachineName, lpDatabaseName, dwDesiredAccess);
            }
            return (MemorySegment)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenServiceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OpenServiceA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static FunctionDescriptor OpenServiceA$descriptor() {
        return OpenServiceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MethodHandle OpenServiceA$handle() {
        return OpenServiceA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenServiceA$address() {
        return OpenServiceA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenServiceA(MemorySegment hSCManager, MemorySegment lpServiceName, int dwDesiredAccess) {
        var mh$ = OpenServiceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenServiceA", hSCManager, lpServiceName, dwDesiredAccess);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenServiceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OpenServiceW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static FunctionDescriptor OpenServiceW$descriptor() {
        return OpenServiceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MethodHandle OpenServiceW$handle() {
        return OpenServiceW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenServiceW$address() {
        return OpenServiceW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SC_HANDLE OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName, DWORD dwDesiredAccess)
     * }
     */
    public static MemorySegment OpenServiceW(MemorySegment hSCManager, MemorySegment lpServiceName, int dwDesiredAccess) {
        var mh$ = OpenServiceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenServiceW", hSCManager, lpServiceName, dwDesiredAccess);
            }
            return (MemorySegment)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceConfigA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceConfigA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceConfigA$descriptor() {
        return QueryServiceConfigA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceConfigA$handle() {
        return QueryServiceConfigA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MemorySegment QueryServiceConfigA$address() {
        return QueryServiceConfigA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceConfigA(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGA lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceConfigA(MemorySegment hService, MemorySegment lpServiceConfig, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfigA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceConfigA", hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceConfigW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceConfigW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceConfigW$descriptor() {
        return QueryServiceConfigW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceConfigW$handle() {
        return QueryServiceConfigW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MemorySegment QueryServiceConfigW$address() {
        return QueryServiceConfigW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceConfigW(SC_HANDLE hService, LPQUERY_SERVICE_CONFIGW lpServiceConfig, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceConfigW(MemorySegment hService, MemorySegment lpServiceConfig, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfigW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceConfigW", hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceConfig2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceConfig2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceConfig2A$descriptor() {
        return QueryServiceConfig2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceConfig2A$handle() {
        return QueryServiceConfig2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MemorySegment QueryServiceConfig2A$address() {
        return QueryServiceConfig2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2A(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceConfig2A(MemorySegment hService, int dwInfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceConfig2A", hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceConfig2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceConfig2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceConfig2W$descriptor() {
        return QueryServiceConfig2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceConfig2W$handle() {
        return QueryServiceConfig2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MemorySegment QueryServiceConfig2W$address() {
        return QueryServiceConfig2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceConfig2W(SC_HANDLE hService, DWORD dwInfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceConfig2W(MemorySegment hService, int dwInfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceConfig2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceConfig2W", hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceLockStatusA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceLockStatusA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceLockStatusA$descriptor() {
        return QueryServiceLockStatusA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceLockStatusA$handle() {
        return QueryServiceLockStatusA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MemorySegment QueryServiceLockStatusA$address() {
        return QueryServiceLockStatusA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusA(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSA lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceLockStatusA(MemorySegment hSCManager, MemorySegment lpLockStatus, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceLockStatusA", hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceLockStatusW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceLockStatusW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceLockStatusW$descriptor() {
        return QueryServiceLockStatusW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceLockStatusW$handle() {
        return QueryServiceLockStatusW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MemorySegment QueryServiceLockStatusW$address() {
        return QueryServiceLockStatusW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceLockStatusW(SC_HANDLE hSCManager, LPQUERY_SERVICE_LOCK_STATUSW lpLockStatus, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceLockStatusW(MemorySegment hSCManager, MemorySegment lpLockStatus, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceLockStatusW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceLockStatusW", hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceObjectSecurity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceObjectSecurity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceObjectSecurity$descriptor() {
        return QueryServiceObjectSecurity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceObjectSecurity$handle() {
        return QueryServiceObjectSecurity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MemorySegment QueryServiceObjectSecurity$address() {
        return QueryServiceObjectSecurity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceObjectSecurity(MemorySegment hService, int dwSecurityInformation, MemorySegment lpSecurityDescriptor, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceObjectSecurity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceObjectSecurity", hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static FunctionDescriptor QueryServiceStatus$descriptor() {
        return QueryServiceStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MethodHandle QueryServiceStatus$handle() {
        return QueryServiceStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MemorySegment QueryServiceStatus$address() {
        return QueryServiceStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceStatus(SC_HANDLE hService, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static int QueryServiceStatus(MemorySegment hService, MemorySegment lpServiceStatus) {
        var mh$ = QueryServiceStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceStatus", hService, lpServiceStatus);
            }
            return (int)mh$.invokeExact(hService, lpServiceStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceStatusEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceStatusEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static FunctionDescriptor QueryServiceStatusEx$descriptor() {
        return QueryServiceStatusEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MethodHandle QueryServiceStatusEx$handle() {
        return QueryServiceStatusEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static MemorySegment QueryServiceStatusEx$address() {
        return QueryServiceStatusEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceStatusEx(SC_HANDLE hService, SC_STATUS_TYPE InfoLevel, LPBYTE lpBuffer, DWORD cbBufSize, LPDWORD pcbBytesNeeded)
     * }
     */
    public static int QueryServiceStatusEx(MemorySegment hService, int InfoLevel, MemorySegment lpBuffer, int cbBufSize, MemorySegment pcbBytesNeeded) {
        var mh$ = QueryServiceStatusEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceStatusEx", hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
            }
            return (int)mh$.invokeExact(hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterServiceCtrlHandlerA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RegisterServiceCtrlHandlerA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static FunctionDescriptor RegisterServiceCtrlHandlerA$descriptor() {
        return RegisterServiceCtrlHandlerA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MethodHandle RegisterServiceCtrlHandlerA$handle() {
        return RegisterServiceCtrlHandlerA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerA$address() {
        return RegisterServiceCtrlHandlerA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerA(MemorySegment lpServiceName, MemorySegment lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterServiceCtrlHandlerA", lpServiceName, lpHandlerProc);
            }
            return (MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterServiceCtrlHandlerW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RegisterServiceCtrlHandlerW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static FunctionDescriptor RegisterServiceCtrlHandlerW$descriptor() {
        return RegisterServiceCtrlHandlerW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MethodHandle RegisterServiceCtrlHandlerW$handle() {
        return RegisterServiceCtrlHandlerW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerW$address() {
        return RegisterServiceCtrlHandlerW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerW(MemorySegment lpServiceName, MemorySegment lpHandlerProc) {
        var mh$ = RegisterServiceCtrlHandlerW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterServiceCtrlHandlerW", lpServiceName, lpHandlerProc);
            }
            return (MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterServiceCtrlHandlerExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RegisterServiceCtrlHandlerExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static FunctionDescriptor RegisterServiceCtrlHandlerExA$descriptor() {
        return RegisterServiceCtrlHandlerExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MethodHandle RegisterServiceCtrlHandlerExA$handle() {
        return RegisterServiceCtrlHandlerExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerExA$address() {
        return RegisterServiceCtrlHandlerExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExA(LPCSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerExA(MemorySegment lpServiceName, MemorySegment lpHandlerProc, MemorySegment lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterServiceCtrlHandlerExA", lpServiceName, lpHandlerProc, lpContext);
            }
            return (MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class RegisterServiceCtrlHandlerExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("RegisterServiceCtrlHandlerExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static FunctionDescriptor RegisterServiceCtrlHandlerExW$descriptor() {
        return RegisterServiceCtrlHandlerExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MethodHandle RegisterServiceCtrlHandlerExW$handle() {
        return RegisterServiceCtrlHandlerExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerExW$address() {
        return RegisterServiceCtrlHandlerExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerExW(LPCWSTR lpServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, LPVOID lpContext)
     * }
     */
    public static MemorySegment RegisterServiceCtrlHandlerExW(MemorySegment lpServiceName, MemorySegment lpHandlerProc, MemorySegment lpContext) {
        var mh$ = RegisterServiceCtrlHandlerExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("RegisterServiceCtrlHandlerExW", lpServiceName, lpHandlerProc, lpContext);
            }
            return (MemorySegment)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetServiceObjectSecurity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetServiceObjectSecurity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor)
     * }
     */
    public static FunctionDescriptor SetServiceObjectSecurity$descriptor() {
        return SetServiceObjectSecurity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor)
     * }
     */
    public static MethodHandle SetServiceObjectSecurity$handle() {
        return SetServiceObjectSecurity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor)
     * }
     */
    public static MemorySegment SetServiceObjectSecurity$address() {
        return SetServiceObjectSecurity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetServiceObjectSecurity(SC_HANDLE hService, SECURITY_INFORMATION dwSecurityInformation, PSECURITY_DESCRIPTOR lpSecurityDescriptor)
     * }
     */
    public static int SetServiceObjectSecurity(MemorySegment hService, int dwSecurityInformation, MemorySegment lpSecurityDescriptor) {
        var mh$ = SetServiceObjectSecurity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetServiceObjectSecurity", hService, dwSecurityInformation, lpSecurityDescriptor);
            }
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetServiceStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetServiceStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static FunctionDescriptor SetServiceStatus$descriptor() {
        return SetServiceStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MethodHandle SetServiceStatus$handle() {
        return SetServiceStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static MemorySegment SetServiceStatus$address() {
        return SetServiceStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus, LPSERVICE_STATUS lpServiceStatus)
     * }
     */
    public static int SetServiceStatus(MemorySegment hServiceStatus, MemorySegment lpServiceStatus) {
        var mh$ = SetServiceStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetServiceStatus", hServiceStatus, lpServiceStatus);
            }
            return (int)mh$.invokeExact(hServiceStatus, lpServiceStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartServiceCtrlDispatcherA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StartServiceCtrlDispatcherA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable)
     * }
     */
    public static FunctionDescriptor StartServiceCtrlDispatcherA$descriptor() {
        return StartServiceCtrlDispatcherA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable)
     * }
     */
    public static MethodHandle StartServiceCtrlDispatcherA$handle() {
        return StartServiceCtrlDispatcherA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable)
     * }
     */
    public static MemorySegment StartServiceCtrlDispatcherA$address() {
        return StartServiceCtrlDispatcherA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA *lpServiceStartTable)
     * }
     */
    public static int StartServiceCtrlDispatcherA(MemorySegment lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartServiceCtrlDispatcherA", lpServiceStartTable);
            }
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartServiceCtrlDispatcherW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StartServiceCtrlDispatcherW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable)
     * }
     */
    public static FunctionDescriptor StartServiceCtrlDispatcherW$descriptor() {
        return StartServiceCtrlDispatcherW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable)
     * }
     */
    public static MethodHandle StartServiceCtrlDispatcherW$handle() {
        return StartServiceCtrlDispatcherW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable)
     * }
     */
    public static MemorySegment StartServiceCtrlDispatcherW$address() {
        return StartServiceCtrlDispatcherW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL StartServiceCtrlDispatcherW(const SERVICE_TABLE_ENTRYW *lpServiceStartTable)
     * }
     */
    public static int StartServiceCtrlDispatcherW(MemorySegment lpServiceStartTable) {
        var mh$ = StartServiceCtrlDispatcherW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartServiceCtrlDispatcherW", lpServiceStartTable);
            }
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartServiceA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StartServiceA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
     * }
     */
    public static FunctionDescriptor StartServiceA$descriptor() {
        return StartServiceA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
     * }
     */
    public static MethodHandle StartServiceA$handle() {
        return StartServiceA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
     * }
     */
    public static MemorySegment StartServiceA$address() {
        return StartServiceA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
     * }
     */
    public static int StartServiceA(MemorySegment hService, int dwNumServiceArgs, MemorySegment lpServiceArgVectors) {
        var mh$ = StartServiceA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartServiceA", hService, dwNumServiceArgs, lpServiceArgVectors);
            }
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartServiceW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StartServiceW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors)
     * }
     */
    public static FunctionDescriptor StartServiceW$descriptor() {
        return StartServiceW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors)
     * }
     */
    public static MethodHandle StartServiceW$handle() {
        return StartServiceW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors)
     * }
     */
    public static MemorySegment StartServiceW$address() {
        return StartServiceW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors)
     * }
     */
    public static int StartServiceW(MemorySegment hService, int dwNumServiceArgs, MemorySegment lpServiceArgVectors) {
        var mh$ = StartServiceW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartServiceW", hService, dwNumServiceArgs, lpServiceArgVectors);
            }
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnlockServiceDatabase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UnlockServiceDatabase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL UnlockServiceDatabase(SC_LOCK ScLock)
     * }
     */
    public static FunctionDescriptor UnlockServiceDatabase$descriptor() {
        return UnlockServiceDatabase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL UnlockServiceDatabase(SC_LOCK ScLock)
     * }
     */
    public static MethodHandle UnlockServiceDatabase$handle() {
        return UnlockServiceDatabase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL UnlockServiceDatabase(SC_LOCK ScLock)
     * }
     */
    public static MemorySegment UnlockServiceDatabase$address() {
        return UnlockServiceDatabase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL UnlockServiceDatabase(SC_LOCK ScLock)
     * }
     */
    public static int UnlockServiceDatabase(MemorySegment ScLock) {
        var mh$ = UnlockServiceDatabase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnlockServiceDatabase", ScLock);
            }
            return (int)mh$.invokeExact(ScLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NotifyServiceStatusChangeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NotifyServiceStatusChangeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer)
     * }
     */
    public static FunctionDescriptor NotifyServiceStatusChangeA$descriptor() {
        return NotifyServiceStatusChangeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer)
     * }
     */
    public static MethodHandle NotifyServiceStatusChangeA$handle() {
        return NotifyServiceStatusChangeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer)
     * }
     */
    public static MemorySegment NotifyServiceStatusChangeA$address() {
        return NotifyServiceStatusChangeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeA(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYA pNotifyBuffer)
     * }
     */
    public static int NotifyServiceStatusChangeA(MemorySegment hService, int dwNotifyMask, MemorySegment pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NotifyServiceStatusChangeA", hService, dwNotifyMask, pNotifyBuffer);
            }
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class NotifyServiceStatusChangeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("NotifyServiceStatusChangeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer)
     * }
     */
    public static FunctionDescriptor NotifyServiceStatusChangeW$descriptor() {
        return NotifyServiceStatusChangeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer)
     * }
     */
    public static MethodHandle NotifyServiceStatusChangeW$handle() {
        return NotifyServiceStatusChangeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer)
     * }
     */
    public static MemorySegment NotifyServiceStatusChangeW$address() {
        return NotifyServiceStatusChangeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD NotifyServiceStatusChangeW(SC_HANDLE hService, DWORD dwNotifyMask, PSERVICE_NOTIFYW pNotifyBuffer)
     * }
     */
    public static int NotifyServiceStatusChangeW(MemorySegment hService, int dwNotifyMask, MemorySegment pNotifyBuffer) {
        var mh$ = NotifyServiceStatusChangeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("NotifyServiceStatusChangeW", hService, dwNotifyMask, pNotifyBuffer);
            }
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ControlServiceExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ControlServiceExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static FunctionDescriptor ControlServiceExA$descriptor() {
        return ControlServiceExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static MethodHandle ControlServiceExA$handle() {
        return ControlServiceExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static MemorySegment ControlServiceExA$address() {
        return ControlServiceExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ControlServiceExA(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static int ControlServiceExA(MemorySegment hService, int dwControl, int dwInfoLevel, MemorySegment pControlParams) {
        var mh$ = ControlServiceExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ControlServiceExA", hService, dwControl, dwInfoLevel, pControlParams);
            }
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ControlServiceExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ControlServiceExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static FunctionDescriptor ControlServiceExW$descriptor() {
        return ControlServiceExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static MethodHandle ControlServiceExW$handle() {
        return ControlServiceExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static MemorySegment ControlServiceExW$address() {
        return ControlServiceExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ControlServiceExW(SC_HANDLE hService, DWORD dwControl, DWORD dwInfoLevel, PVOID pControlParams)
     * }
     */
    public static int ControlServiceExW(MemorySegment hService, int dwControl, int dwInfoLevel, MemorySegment pControlParams) {
        var mh$ = ControlServiceExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ControlServiceExW", hService, dwControl, dwInfoLevel, pControlParams);
            }
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class QueryServiceDynamicInformation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("QueryServiceDynamicInformation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID *ppDynamicInfo)
     * }
     */
    public static FunctionDescriptor QueryServiceDynamicInformation$descriptor() {
        return QueryServiceDynamicInformation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID *ppDynamicInfo)
     * }
     */
    public static MethodHandle QueryServiceDynamicInformation$handle() {
        return QueryServiceDynamicInformation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID *ppDynamicInfo)
     * }
     */
    public static MemorySegment QueryServiceDynamicInformation$address() {
        return QueryServiceDynamicInformation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE hServiceStatus, DWORD dwInfoLevel, PVOID *ppDynamicInfo)
     * }
     */
    public static int QueryServiceDynamicInformation(MemorySegment hServiceStatus, int dwInfoLevel, MemorySegment ppDynamicInfo) {
        var mh$ = QueryServiceDynamicInformation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("QueryServiceDynamicInformation", hServiceStatus, dwInfoLevel, ppDynamicInfo);
            }
            return (int)mh$.invokeExact(hServiceStatus, dwInfoLevel, ppDynamicInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SC_EVENT_DATABASE_CHANGE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _SC_EVENT_TYPE.SC_EVENT_DATABASE_CHANGE = 0
     * }
     */
    public static int SC_EVENT_DATABASE_CHANGE() {
        return SC_EVENT_DATABASE_CHANGE;
    }
    private static final int SC_EVENT_PROPERTY_CHANGE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _SC_EVENT_TYPE.SC_EVENT_PROPERTY_CHANGE = 1
     * }
     */
    public static int SC_EVENT_PROPERTY_CHANGE() {
        return SC_EVENT_PROPERTY_CHANGE;
    }
    private static final int SC_EVENT_STATUS_CHANGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _SC_EVENT_TYPE.SC_EVENT_STATUS_CHANGE = 2
     * }
     */
    public static int SC_EVENT_STATUS_CHANGE() {
        return SC_EVENT_STATUS_CHANGE;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _SC_EVENT_TYPE {
     *     SC_EVENT_DATABASE_CHANGE,
     *     SC_EVENT_PROPERTY_CHANGE,
     *     SC_EVENT_STATUS_CHANGE
     * } *PSC_EVENT_TYPE
     * }
     */
    public static final AddressLayout PSC_EVENT_TYPE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SC_NOTIFICATION_REGISTRATION *PSC_NOTIFICATION_REGISTRATION
     * }
     */
    public static final AddressLayout PSC_NOTIFICATION_REGISTRATION = winapi.C_POINTER;

    private static class SubscribeServiceChangeNotifications {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SubscribeServiceChangeNotifications");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION *pSubscription)
     * }
     */
    public static FunctionDescriptor SubscribeServiceChangeNotifications$descriptor() {
        return SubscribeServiceChangeNotifications.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION *pSubscription)
     * }
     */
    public static MethodHandle SubscribeServiceChangeNotifications$handle() {
        return SubscribeServiceChangeNotifications.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION *pSubscription)
     * }
     */
    public static MemorySegment SubscribeServiceChangeNotifications$address() {
        return SubscribeServiceChangeNotifications.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SubscribeServiceChangeNotifications(SC_HANDLE hService, SC_EVENT_TYPE eEventType, PSC_NOTIFICATION_CALLBACK pCallback, PVOID pCallbackContext, PSC_NOTIFICATION_REGISTRATION *pSubscription)
     * }
     */
    public static int SubscribeServiceChangeNotifications(MemorySegment hService, int eEventType, MemorySegment pCallback, MemorySegment pCallbackContext, MemorySegment pSubscription) {
        var mh$ = SubscribeServiceChangeNotifications.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SubscribeServiceChangeNotifications", hService, eEventType, pCallback, pCallbackContext, pSubscription);
            }
            return (int)mh$.invokeExact(hService, eEventType, pCallback, pCallbackContext, pSubscription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UnsubscribeServiceChangeNotifications {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UnsubscribeServiceChangeNotifications");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription)
     * }
     */
    public static FunctionDescriptor UnsubscribeServiceChangeNotifications$descriptor() {
        return UnsubscribeServiceChangeNotifications.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription)
     * }
     */
    public static MethodHandle UnsubscribeServiceChangeNotifications$handle() {
        return UnsubscribeServiceChangeNotifications.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription)
     * }
     */
    public static MemorySegment UnsubscribeServiceChangeNotifications$address() {
        return UnsubscribeServiceChangeNotifications.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void UnsubscribeServiceChangeNotifications(PSC_NOTIFICATION_REGISTRATION pSubscription)
     * }
     */
    public static void UnsubscribeServiceChangeNotifications(MemorySegment pSubscription) {
        var mh$ = UnsubscribeServiceChangeNotifications.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UnsubscribeServiceChangeNotifications", pSubscription);
            }
            mh$.invokeExact(pSubscription);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WaitServiceState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WaitServiceState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent)
     * }
     */
    public static FunctionDescriptor WaitServiceState$descriptor() {
        return WaitServiceState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent)
     * }
     */
    public static MethodHandle WaitServiceState$handle() {
        return WaitServiceState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent)
     * }
     */
    public static MemorySegment WaitServiceState$address() {
        return WaitServiceState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD WaitServiceState(SC_HANDLE hService, DWORD dwNotify, DWORD dwTimeout, HANDLE hCancelEvent)
     * }
     */
    public static int WaitServiceState(MemorySegment hService, int dwNotify, int dwTimeout, MemorySegment hCancelEvent) {
        var mh$ = WaitServiceState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WaitServiceState", hService, dwNotify, dwTimeout, hCancelEvent);
            }
            return (int)mh$.invokeExact(hService, dwNotify, dwTimeout, hCancelEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ServiceRegistryStateParameters = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStateParameters = 0
     * }
     */
    public static int ServiceRegistryStateParameters() {
        return ServiceRegistryStateParameters;
    }
    private static final int ServiceRegistryStatePersistent = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStatePersistent = 1
     * }
     */
    public static int ServiceRegistryStatePersistent() {
        return ServiceRegistryStatePersistent;
    }
    private static final int MaxServiceRegistryStateType = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_REGISTRY_STATE_TYPE.MaxServiceRegistryStateType = 2
     * }
     */
    public static int MaxServiceRegistryStateType() {
        return MaxServiceRegistryStateType;
    }

    private static class GetServiceRegistryStateKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetServiceRegistryStateKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static FunctionDescriptor GetServiceRegistryStateKey$descriptor() {
        return GetServiceRegistryStateKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static MethodHandle GetServiceRegistryStateKey$handle() {
        return GetServiceRegistryStateKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static MemorySegment GetServiceRegistryStateKey$address() {
        return GetServiceRegistryStateKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE ServiceStatusHandle, SERVICE_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static int GetServiceRegistryStateKey(MemorySegment ServiceStatusHandle, int StateType, int AccessMask, MemorySegment ServiceStateKey) {
        var mh$ = GetServiceRegistryStateKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceRegistryStateKey", ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
            }
            return (int)mh$.invokeExact(ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ServiceDirectoryPersistentState = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_DIRECTORY_TYPE.ServiceDirectoryPersistentState = 0
     * }
     */
    public static int ServiceDirectoryPersistentState() {
        return ServiceDirectoryPersistentState;
    }
    private static final int ServiceDirectoryTypeMax = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_DIRECTORY_TYPE.ServiceDirectoryTypeMax = 1
     * }
     */
    public static int ServiceDirectoryTypeMax() {
        return ServiceDirectoryTypeMax;
    }

    private static class GetServiceDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetServiceDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength)
     * }
     */
    public static FunctionDescriptor GetServiceDirectory$descriptor() {
        return GetServiceDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength)
     * }
     */
    public static MethodHandle GetServiceDirectory$handle() {
        return GetServiceDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength)
     * }
     */
    public static MemorySegment GetServiceDirectory$address() {
        return GetServiceDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetServiceDirectory(SERVICE_STATUS_HANDLE hServiceStatus, SERVICE_DIRECTORY_TYPE eDirectoryType, PWCHAR lpPathBuffer, DWORD cchPathBufferLength, DWORD *lpcchRequiredBufferLength)
     * }
     */
    public static int GetServiceDirectory(MemorySegment hServiceStatus, int eDirectoryType, MemorySegment lpPathBuffer, int cchPathBufferLength, MemorySegment lpcchRequiredBufferLength) {
        var mh$ = GetServiceDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetServiceDirectory", hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
            }
            return (int)mh$.invokeExact(hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ServiceSharedRegistryPersistentState = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_SHARED_REGISTRY_STATE_TYPE.ServiceSharedRegistryPersistentState = 0
     * }
     */
    public static int ServiceSharedRegistryPersistentState() {
        return ServiceSharedRegistryPersistentState;
    }

    private static class GetSharedServiceRegistryStateKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetSharedServiceRegistryStateKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static FunctionDescriptor GetSharedServiceRegistryStateKey$descriptor() {
        return GetSharedServiceRegistryStateKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static MethodHandle GetSharedServiceRegistryStateKey$handle() {
        return GetSharedServiceRegistryStateKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static MemorySegment GetSharedServiceRegistryStateKey$address() {
        return GetSharedServiceRegistryStateKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetSharedServiceRegistryStateKey(SC_HANDLE ServiceHandle, SERVICE_SHARED_REGISTRY_STATE_TYPE StateType, DWORD AccessMask, HKEY *ServiceStateKey)
     * }
     */
    public static int GetSharedServiceRegistryStateKey(MemorySegment ServiceHandle, int StateType, int AccessMask, MemorySegment ServiceStateKey) {
        var mh$ = GetSharedServiceRegistryStateKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSharedServiceRegistryStateKey", ServiceHandle, StateType, AccessMask, ServiceStateKey);
            }
            return (int)mh$.invokeExact(ServiceHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ServiceSharedDirectoryPersistentState = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SERVICE_SHARED_DIRECTORY_TYPE.ServiceSharedDirectoryPersistentState = 0
     * }
     */
    public static int ServiceSharedDirectoryPersistentState() {
        return ServiceSharedDirectoryPersistentState;
    }

    private static class GetSharedServiceDirectory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetSharedServiceDirectory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD *RequiredBufferLength)
     * }
     */
    public static FunctionDescriptor GetSharedServiceDirectory$descriptor() {
        return GetSharedServiceDirectory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD *RequiredBufferLength)
     * }
     */
    public static MethodHandle GetSharedServiceDirectory$handle() {
        return GetSharedServiceDirectory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD *RequiredBufferLength)
     * }
     */
    public static MemorySegment GetSharedServiceDirectory$address() {
        return GetSharedServiceDirectory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetSharedServiceDirectory(SC_HANDLE ServiceHandle, SERVICE_SHARED_DIRECTORY_TYPE DirectoryType, PWCHAR PathBuffer, DWORD PathBufferLength, DWORD *RequiredBufferLength)
     * }
     */
    public static int GetSharedServiceDirectory(MemorySegment ServiceHandle, int DirectoryType, MemorySegment PathBuffer, int PathBufferLength, MemorySegment RequiredBufferLength) {
        var mh$ = GetSharedServiceDirectory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSharedServiceDirectory", ServiceHandle, DirectoryType, PathBuffer, PathBufferLength, RequiredBufferLength);
            }
            return (int)mh$.invokeExact(ServiceHandle, DirectoryType, PathBuffer, PathBufferLength, RequiredBufferLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _MODEMDEVCAPS {
     *     DWORD dwActualSize;
     *     DWORD dwRequiredSize;
     *     DWORD dwDevSpecificOffset;
     *     DWORD dwDevSpecificSize;
     *     DWORD dwModemProviderVersion;
     *     DWORD dwModemManufacturerOffset;
     *     DWORD dwModemManufacturerSize;
     *     DWORD dwModemModelOffset;
     *     DWORD dwModemModelSize;
     *     DWORD dwModemVersionOffset;
     *     DWORD dwModemVersionSize;
     *     DWORD dwDialOptions;
     *     DWORD dwCallSetupFailTimer;
     *     DWORD dwInactivityTimeout;
     *     DWORD dwSpeakerVolume;
     *     DWORD dwSpeakerMode;
     *     DWORD dwModemOptions;
     *     DWORD dwMaxDTERate;
     *     DWORD dwMaxDCERate;
     *     BYTE abVariablePortion[1];
     * } *PMODEMDEVCAPS
     * }
     */
    public static final AddressLayout PMODEMDEVCAPS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MODEMDEVCAPS {
     *     DWORD dwActualSize;
     *     DWORD dwRequiredSize;
     *     DWORD dwDevSpecificOffset;
     *     DWORD dwDevSpecificSize;
     *     DWORD dwModemProviderVersion;
     *     DWORD dwModemManufacturerOffset;
     *     DWORD dwModemManufacturerSize;
     *     DWORD dwModemModelOffset;
     *     DWORD dwModemModelSize;
     *     DWORD dwModemVersionOffset;
     *     DWORD dwModemVersionSize;
     *     DWORD dwDialOptions;
     *     DWORD dwCallSetupFailTimer;
     *     DWORD dwInactivityTimeout;
     *     DWORD dwSpeakerVolume;
     *     DWORD dwSpeakerMode;
     *     DWORD dwModemOptions;
     *     DWORD dwMaxDTERate;
     *     DWORD dwMaxDCERate;
     *     BYTE abVariablePortion[1];
     * } *LPMODEMDEVCAPS
     * }
     */
    public static final AddressLayout LPMODEMDEVCAPS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MODEMSETTINGS {
     *     DWORD dwActualSize;
     *     DWORD dwRequiredSize;
     *     DWORD dwDevSpecificOffset;
     *     DWORD dwDevSpecificSize;
     *     DWORD dwCallSetupFailTimer;
     *     DWORD dwInactivityTimeout;
     *     DWORD dwSpeakerVolume;
     *     DWORD dwSpeakerMode;
     *     DWORD dwPreferredModemOptions;
     *     DWORD dwNegotiatedModemOptions;
     *     DWORD dwNegotiatedDCERate;
     *     BYTE abVariablePortion[1];
     * } *PMODEMSETTINGS
     * }
     */
    public static final AddressLayout PMODEMSETTINGS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MODEMSETTINGS {
     *     DWORD dwActualSize;
     *     DWORD dwRequiredSize;
     *     DWORD dwDevSpecificOffset;
     *     DWORD dwDevSpecificSize;
     *     DWORD dwCallSetupFailTimer;
     *     DWORD dwInactivityTimeout;
     *     DWORD dwSpeakerVolume;
     *     DWORD dwSpeakerMode;
     *     DWORD dwPreferredModemOptions;
     *     DWORD dwNegotiatedModemOptions;
     *     DWORD dwNegotiatedDCERate;
     *     BYTE abVariablePortion[1];
     * } *LPMODEMSETTINGS
     * }
     */
    public static final AddressLayout LPMODEMSETTINGS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HIMC__ {
     *     int unused;
     * } *HIMC
     * }
     */
    public static final AddressLayout HIMC = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct HIMCC__ {
     *     int unused;
     * } *HIMCC
     * }
     */
    public static final AddressLayout HIMCC = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef HKL *LPHKL
     * }
     */
    public static final AddressLayout LPHKL = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCOMPOSITIONFORM {
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *PCOMPOSITIONFORM
     * }
     */
    public static final AddressLayout PCOMPOSITIONFORM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCOMPOSITIONFORM {
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *NPCOMPOSITIONFORM
     * }
     */
    public static final AddressLayout NPCOMPOSITIONFORM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCOMPOSITIONFORM {
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *LPCOMPOSITIONFORM
     * }
     */
    public static final AddressLayout LPCOMPOSITIONFORM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATEFORM {
     *     DWORD dwIndex;
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *PCANDIDATEFORM
     * }
     */
    public static final AddressLayout PCANDIDATEFORM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATEFORM {
     *     DWORD dwIndex;
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *NPCANDIDATEFORM
     * }
     */
    public static final AddressLayout NPCANDIDATEFORM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATEFORM {
     *     DWORD dwIndex;
     *     DWORD dwStyle;
     *     POINT ptCurrentPos;
     *     RECT rcArea;
     * } *LPCANDIDATEFORM
     * }
     */
    public static final AddressLayout LPCANDIDATEFORM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATELIST {
     *     DWORD dwSize;
     *     DWORD dwStyle;
     *     DWORD dwCount;
     *     DWORD dwSelection;
     *     DWORD dwPageStart;
     *     DWORD dwPageSize;
     *     DWORD dwOffset[1];
     * } *PCANDIDATELIST
     * }
     */
    public static final AddressLayout PCANDIDATELIST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATELIST {
     *     DWORD dwSize;
     *     DWORD dwStyle;
     *     DWORD dwCount;
     *     DWORD dwSelection;
     *     DWORD dwPageStart;
     *     DWORD dwPageSize;
     *     DWORD dwOffset[1];
     * } *NPCANDIDATELIST
     * }
     */
    public static final AddressLayout NPCANDIDATELIST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagCANDIDATELIST {
     *     DWORD dwSize;
     *     DWORD dwStyle;
     *     DWORD dwCount;
     *     DWORD dwSelection;
     *     DWORD dwPageStart;
     *     DWORD dwPageSize;
     *     DWORD dwOffset[1];
     * } *LPCANDIDATELIST
     * }
     */
    public static final AddressLayout LPCANDIDATELIST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDA {
     *     LPSTR lpReading;
     *     LPSTR lpWord;
     * } *PREGISTERWORDA
     * }
     */
    public static final AddressLayout PREGISTERWORDA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDA {
     *     LPSTR lpReading;
     *     LPSTR lpWord;
     * } *NPREGISTERWORDA
     * }
     */
    public static final AddressLayout NPREGISTERWORDA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDA {
     *     LPSTR lpReading;
     *     LPSTR lpWord;
     * } *LPREGISTERWORDA
     * }
     */
    public static final AddressLayout LPREGISTERWORDA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDW {
     *     LPWSTR lpReading;
     *     LPWSTR lpWord;
     * } *PREGISTERWORDW
     * }
     */
    public static final AddressLayout PREGISTERWORDW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDW {
     *     LPWSTR lpReading;
     *     LPWSTR lpWord;
     * } *NPREGISTERWORDW
     * }
     */
    public static final AddressLayout NPREGISTERWORDW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagREGISTERWORDW {
     *     LPWSTR lpReading;
     *     LPWSTR lpWord;
     * } *LPREGISTERWORDW
     * }
     */
    public static final AddressLayout LPREGISTERWORDW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PREGISTERWORDA PREGISTERWORD
     * }
     */
    public static final AddressLayout PREGISTERWORD = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPREGISTERWORDA NPREGISTERWORD
     * }
     */
    public static final AddressLayout NPREGISTERWORD = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPREGISTERWORDA LPREGISTERWORD
     * }
     */
    public static final AddressLayout LPREGISTERWORD = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECONVERTSTRING {
     *     DWORD dwSize;
     *     DWORD dwVersion;
     *     DWORD dwStrLen;
     *     DWORD dwStrOffset;
     *     DWORD dwCompStrLen;
     *     DWORD dwCompStrOffset;
     *     DWORD dwTargetStrLen;
     *     DWORD dwTargetStrOffset;
     * } *PRECONVERTSTRING
     * }
     */
    public static final AddressLayout PRECONVERTSTRING = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECONVERTSTRING {
     *     DWORD dwSize;
     *     DWORD dwVersion;
     *     DWORD dwStrLen;
     *     DWORD dwStrOffset;
     *     DWORD dwCompStrLen;
     *     DWORD dwCompStrOffset;
     *     DWORD dwTargetStrLen;
     *     DWORD dwTargetStrOffset;
     * } *NPRECONVERTSTRING
     * }
     */
    public static final AddressLayout NPRECONVERTSTRING = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagRECONVERTSTRING {
     *     DWORD dwSize;
     *     DWORD dwVersion;
     *     DWORD dwStrLen;
     *     DWORD dwStrOffset;
     *     DWORD dwCompStrLen;
     *     DWORD dwCompStrOffset;
     *     DWORD dwTargetStrLen;
     *     DWORD dwTargetStrOffset;
     * } *LPRECONVERTSTRING
     * }
     */
    public static final AddressLayout LPRECONVERTSTRING = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFA {
     *     DWORD dwStyle;
     *     CHAR szDescription[32];
     * } *PSTYLEBUFA
     * }
     */
    public static final AddressLayout PSTYLEBUFA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFA {
     *     DWORD dwStyle;
     *     CHAR szDescription[32];
     * } *NPSTYLEBUFA
     * }
     */
    public static final AddressLayout NPSTYLEBUFA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFA {
     *     DWORD dwStyle;
     *     CHAR szDescription[32];
     * } *LPSTYLEBUFA
     * }
     */
    public static final AddressLayout LPSTYLEBUFA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFW {
     *     DWORD dwStyle;
     *     WCHAR szDescription[32];
     * } *PSTYLEBUFW
     * }
     */
    public static final AddressLayout PSTYLEBUFW = winapi.C_POINTER;
}

