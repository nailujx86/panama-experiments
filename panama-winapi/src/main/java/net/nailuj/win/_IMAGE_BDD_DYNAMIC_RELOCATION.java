// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _IMAGE_BDD_DYNAMIC_RELOCATION {
 *     WORD Left;
 *     WORD Right;
 *     DWORD Value;
 * }
 * }
 */
public class _IMAGE_BDD_DYNAMIC_RELOCATION {

    _IMAGE_BDD_DYNAMIC_RELOCATION() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.align(winapi.C_SHORT, 1).withName("Left"),
        winapi.align(winapi.C_SHORT, 1).withName("Right"),
        winapi.align(winapi.C_LONG, 1).withName("Value")
    ).withName("_IMAGE_BDD_DYNAMIC_RELOCATION");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort Left$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Left"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Left
     * }
     */
    public static final OfShort Left$layout() {
        return Left$LAYOUT;
    }

    private static final long Left$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Left
     * }
     */
    public static final long Left$offset() {
        return Left$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Left
     * }
     */
    public static short Left(MemorySegment struct) {
        return struct.get(Left$LAYOUT, Left$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Left
     * }
     */
    public static void Left(MemorySegment struct, short fieldValue) {
        struct.set(Left$LAYOUT, Left$OFFSET, fieldValue);
    }

    private static final OfShort Right$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Right"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * WORD Right
     * }
     */
    public static final OfShort Right$layout() {
        return Right$LAYOUT;
    }

    private static final long Right$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * WORD Right
     * }
     */
    public static final long Right$offset() {
        return Right$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * WORD Right
     * }
     */
    public static short Right(MemorySegment struct) {
        return struct.get(Right$LAYOUT, Right$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * WORD Right
     * }
     */
    public static void Right(MemorySegment struct, short fieldValue) {
        struct.set(Right$LAYOUT, Right$OFFSET, fieldValue);
    }

    private static final OfInt Value$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Value
     * }
     */
    public static final OfInt Value$layout() {
        return Value$LAYOUT;
    }

    private static final long Value$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Value
     * }
     */
    public static final long Value$offset() {
        return Value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Value
     * }
     */
    public static int Value(MemorySegment struct) {
        return struct.get(Value$LAYOUT, Value$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Value
     * }
     */
    public static void Value(MemorySegment struct, int fieldValue) {
        struct.set(Value$LAYOUT, Value$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

