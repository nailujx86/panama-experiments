// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class winapi_13 extends winapi_14 {

    winapi_13() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFW {
     *     DWORD dwStyle;
     *     WCHAR szDescription[32];
     * } *NPSTYLEBUFW
     * }
     */
    public static final AddressLayout NPSTYLEBUFW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagSTYLEBUFW {
     *     DWORD dwStyle;
     *     WCHAR szDescription[32];
     * } *LPSTYLEBUFW
     * }
     */
    public static final AddressLayout LPSTYLEBUFW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSTYLEBUFA PSTYLEBUF
     * }
     */
    public static final AddressLayout PSTYLEBUF = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPSTYLEBUFA NPSTYLEBUF
     * }
     */
    public static final AddressLayout NPSTYLEBUF = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSTYLEBUFA LPSTYLEBUF
     * }
     */
    public static final AddressLayout LPSTYLEBUF = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOA {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     CHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *PIMEMENUITEMINFOA
     * }
     */
    public static final AddressLayout PIMEMENUITEMINFOA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOA {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     CHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *NPIMEMENUITEMINFOA
     * }
     */
    public static final AddressLayout NPIMEMENUITEMINFOA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOA {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     CHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *LPIMEMENUITEMINFOA
     * }
     */
    public static final AddressLayout LPIMEMENUITEMINFOA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOW {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     WCHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *PIMEMENUITEMINFOW
     * }
     */
    public static final AddressLayout PIMEMENUITEMINFOW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOW {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     WCHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *NPIMEMENUITEMINFOW
     * }
     */
    public static final AddressLayout NPIMEMENUITEMINFOW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMEMENUITEMINFOW {
     *     UINT cbSize;
     *     UINT fType;
     *     UINT fState;
     *     UINT wID;
     *     HBITMAP hbmpChecked;
     *     HBITMAP hbmpUnchecked;
     *     DWORD dwItemData;
     *     WCHAR szString[80];
     *     HBITMAP hbmpItem;
     * } *LPIMEMENUITEMINFOW
     * }
     */
    public static final AddressLayout LPIMEMENUITEMINFOW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO
     * }
     */
    public static final AddressLayout PIMEMENUITEMINFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO
     * }
     */
    public static final AddressLayout NPIMEMENUITEMINFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO
     * }
     */
    public static final AddressLayout LPIMEMENUITEMINFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMECHARPOSITION {
     *     DWORD dwSize;
     *     DWORD dwCharPos;
     *     POINT pt;
     *     UINT cLineHeight;
     *     RECT rcDocument;
     * } *PIMECHARPOSITION
     * }
     */
    public static final AddressLayout PIMECHARPOSITION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMECHARPOSITION {
     *     DWORD dwSize;
     *     DWORD dwCharPos;
     *     POINT pt;
     *     UINT cLineHeight;
     *     RECT rcDocument;
     * } *NPIMECHARPOSITION
     * }
     */
    public static final AddressLayout NPIMECHARPOSITION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct tagIMECHARPOSITION {
     *     DWORD dwSize;
     *     DWORD dwCharPos;
     *     POINT pt;
     *     UINT cLineHeight;
     *     RECT rcDocument;
     * } *LPIMECHARPOSITION
     * }
     */
    public static final AddressLayout LPIMECHARPOSITION = winapi.C_POINTER;

    private static class ImmInstallIMEA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmInstallIMEA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText)
     * }
     */
    public static FunctionDescriptor ImmInstallIMEA$descriptor() {
        return ImmInstallIMEA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText)
     * }
     */
    public static MethodHandle ImmInstallIMEA$handle() {
        return ImmInstallIMEA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText)
     * }
     */
    public static MemorySegment ImmInstallIMEA$address() {
        return ImmInstallIMEA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HKL ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText)
     * }
     */
    public static MemorySegment ImmInstallIMEA(MemorySegment lpszIMEFileName, MemorySegment lpszLayoutText) {
        var mh$ = ImmInstallIMEA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmInstallIMEA", lpszIMEFileName, lpszLayoutText);
            }
            return (MemorySegment)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmInstallIMEW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmInstallIMEW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText)
     * }
     */
    public static FunctionDescriptor ImmInstallIMEW$descriptor() {
        return ImmInstallIMEW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText)
     * }
     */
    public static MethodHandle ImmInstallIMEW$handle() {
        return ImmInstallIMEW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText)
     * }
     */
    public static MemorySegment ImmInstallIMEW$address() {
        return ImmInstallIMEW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText)
     * }
     */
    public static MemorySegment ImmInstallIMEW(MemorySegment lpszIMEFileName, MemorySegment lpszLayoutText) {
        var mh$ = ImmInstallIMEW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmInstallIMEW", lpszIMEFileName, lpszLayoutText);
            }
            return (MemorySegment)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetDefaultIMEWnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetDefaultIMEWnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HWND ImmGetDefaultIMEWnd(HWND)
     * }
     */
    public static FunctionDescriptor ImmGetDefaultIMEWnd$descriptor() {
        return ImmGetDefaultIMEWnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HWND ImmGetDefaultIMEWnd(HWND)
     * }
     */
    public static MethodHandle ImmGetDefaultIMEWnd$handle() {
        return ImmGetDefaultIMEWnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HWND ImmGetDefaultIMEWnd(HWND)
     * }
     */
    public static MemorySegment ImmGetDefaultIMEWnd$address() {
        return ImmGetDefaultIMEWnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HWND ImmGetDefaultIMEWnd(HWND)
     * }
     */
    public static MemorySegment ImmGetDefaultIMEWnd(MemorySegment x0) {
        var mh$ = ImmGetDefaultIMEWnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetDefaultIMEWnd", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetDescriptionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetDescriptionA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetDescriptionA$descriptor() {
        return ImmGetDescriptionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static MethodHandle ImmGetDescriptionA$handle() {
        return ImmGetDescriptionA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static MemorySegment ImmGetDescriptionA$address() {
        return ImmGetDescriptionA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static int ImmGetDescriptionA(MemorySegment x0, MemorySegment lpszDescription, int uBufLen) {
        var mh$ = ImmGetDescriptionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetDescriptionA", x0, lpszDescription, uBufLen);
            }
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetDescriptionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetDescriptionW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetDescriptionW$descriptor() {
        return ImmGetDescriptionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static MethodHandle ImmGetDescriptionW$handle() {
        return ImmGetDescriptionW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static MemorySegment ImmGetDescriptionW$address() {
        return ImmGetDescriptionW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen)
     * }
     */
    public static int ImmGetDescriptionW(MemorySegment x0, MemorySegment lpszDescription, int uBufLen) {
        var mh$ = ImmGetDescriptionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetDescriptionW", x0, lpszDescription, uBufLen);
            }
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetIMEFileNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetIMEFileNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetIMEFileNameA$descriptor() {
        return ImmGetIMEFileNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static MethodHandle ImmGetIMEFileNameA$handle() {
        return ImmGetIMEFileNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static MemorySegment ImmGetIMEFileNameA$address() {
        return ImmGetIMEFileNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static int ImmGetIMEFileNameA(MemorySegment x0, MemorySegment lpszFileName, int uBufLen) {
        var mh$ = ImmGetIMEFileNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetIMEFileNameA", x0, lpszFileName, uBufLen);
            }
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetIMEFileNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetIMEFileNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetIMEFileNameW$descriptor() {
        return ImmGetIMEFileNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static MethodHandle ImmGetIMEFileNameW$handle() {
        return ImmGetIMEFileNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static MemorySegment ImmGetIMEFileNameW$address() {
        return ImmGetIMEFileNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen)
     * }
     */
    public static int ImmGetIMEFileNameW(MemorySegment x0, MemorySegment lpszFileName, int uBufLen) {
        var mh$ = ImmGetIMEFileNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetIMEFileNameW", x0, lpszFileName, uBufLen);
            }
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetProperty(HKL, DWORD)
     * }
     */
    public static FunctionDescriptor ImmGetProperty$descriptor() {
        return ImmGetProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetProperty(HKL, DWORD)
     * }
     */
    public static MethodHandle ImmGetProperty$handle() {
        return ImmGetProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetProperty(HKL, DWORD)
     * }
     */
    public static MemorySegment ImmGetProperty$address() {
        return ImmGetProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetProperty(HKL, DWORD)
     * }
     */
    public static int ImmGetProperty(MemorySegment x0, int x1) {
        var mh$ = ImmGetProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetProperty", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmIsIME {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmIsIME");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmIsIME(HKL)
     * }
     */
    public static FunctionDescriptor ImmIsIME$descriptor() {
        return ImmIsIME.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmIsIME(HKL)
     * }
     */
    public static MethodHandle ImmIsIME$handle() {
        return ImmIsIME.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmIsIME(HKL)
     * }
     */
    public static MemorySegment ImmIsIME$address() {
        return ImmIsIME.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmIsIME(HKL)
     * }
     */
    public static int ImmIsIME(MemorySegment x0) {
        var mh$ = ImmIsIME.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmIsIME", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSimulateHotKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSimulateHotKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSimulateHotKey(HWND, DWORD)
     * }
     */
    public static FunctionDescriptor ImmSimulateHotKey$descriptor() {
        return ImmSimulateHotKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSimulateHotKey(HWND, DWORD)
     * }
     */
    public static MethodHandle ImmSimulateHotKey$handle() {
        return ImmSimulateHotKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSimulateHotKey(HWND, DWORD)
     * }
     */
    public static MemorySegment ImmSimulateHotKey$address() {
        return ImmSimulateHotKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSimulateHotKey(HWND, DWORD)
     * }
     */
    public static int ImmSimulateHotKey(MemorySegment x0, int x1) {
        var mh$ = ImmSimulateHotKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSimulateHotKey", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmCreateContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmCreateContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HIMC ImmCreateContext()
     * }
     */
    public static FunctionDescriptor ImmCreateContext$descriptor() {
        return ImmCreateContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HIMC ImmCreateContext()
     * }
     */
    public static MethodHandle ImmCreateContext$handle() {
        return ImmCreateContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HIMC ImmCreateContext()
     * }
     */
    public static MemorySegment ImmCreateContext$address() {
        return ImmCreateContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HIMC ImmCreateContext()
     * }
     */
    public static MemorySegment ImmCreateContext() {
        var mh$ = ImmCreateContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmCreateContext");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmDestroyContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmDestroyContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmDestroyContext(HIMC)
     * }
     */
    public static FunctionDescriptor ImmDestroyContext$descriptor() {
        return ImmDestroyContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmDestroyContext(HIMC)
     * }
     */
    public static MethodHandle ImmDestroyContext$handle() {
        return ImmDestroyContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmDestroyContext(HIMC)
     * }
     */
    public static MemorySegment ImmDestroyContext$address() {
        return ImmDestroyContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmDestroyContext(HIMC)
     * }
     */
    public static int ImmDestroyContext(MemorySegment x0) {
        var mh$ = ImmDestroyContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmDestroyContext", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HIMC ImmGetContext(HWND)
     * }
     */
    public static FunctionDescriptor ImmGetContext$descriptor() {
        return ImmGetContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HIMC ImmGetContext(HWND)
     * }
     */
    public static MethodHandle ImmGetContext$handle() {
        return ImmGetContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HIMC ImmGetContext(HWND)
     * }
     */
    public static MemorySegment ImmGetContext$address() {
        return ImmGetContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HIMC ImmGetContext(HWND)
     * }
     */
    public static MemorySegment ImmGetContext(MemorySegment x0) {
        var mh$ = ImmGetContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetContext", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmReleaseContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmReleaseContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmReleaseContext(HWND, HIMC)
     * }
     */
    public static FunctionDescriptor ImmReleaseContext$descriptor() {
        return ImmReleaseContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmReleaseContext(HWND, HIMC)
     * }
     */
    public static MethodHandle ImmReleaseContext$handle() {
        return ImmReleaseContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmReleaseContext(HWND, HIMC)
     * }
     */
    public static MemorySegment ImmReleaseContext$address() {
        return ImmReleaseContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmReleaseContext(HWND, HIMC)
     * }
     */
    public static int ImmReleaseContext(MemorySegment x0, MemorySegment x1) {
        var mh$ = ImmReleaseContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmReleaseContext", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmAssociateContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmAssociateContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HIMC ImmAssociateContext(HWND, HIMC)
     * }
     */
    public static FunctionDescriptor ImmAssociateContext$descriptor() {
        return ImmAssociateContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HIMC ImmAssociateContext(HWND, HIMC)
     * }
     */
    public static MethodHandle ImmAssociateContext$handle() {
        return ImmAssociateContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HIMC ImmAssociateContext(HWND, HIMC)
     * }
     */
    public static MemorySegment ImmAssociateContext$address() {
        return ImmAssociateContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HIMC ImmAssociateContext(HWND, HIMC)
     * }
     */
    public static MemorySegment ImmAssociateContext(MemorySegment x0, MemorySegment x1) {
        var mh$ = ImmAssociateContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmAssociateContext", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmAssociateContextEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmAssociateContextEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmAssociateContextEx(HWND, HIMC, DWORD)
     * }
     */
    public static FunctionDescriptor ImmAssociateContextEx$descriptor() {
        return ImmAssociateContextEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmAssociateContextEx(HWND, HIMC, DWORD)
     * }
     */
    public static MethodHandle ImmAssociateContextEx$handle() {
        return ImmAssociateContextEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmAssociateContextEx(HWND, HIMC, DWORD)
     * }
     */
    public static MemorySegment ImmAssociateContextEx$address() {
        return ImmAssociateContextEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmAssociateContextEx(HWND, HIMC, DWORD)
     * }
     */
    public static int ImmAssociateContextEx(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = ImmAssociateContextEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmAssociateContextEx", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCompositionStringA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionStringA$descriptor() {
        return ImmGetCompositionStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetCompositionStringA$handle() {
        return ImmGetCompositionStringA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static MemorySegment ImmGetCompositionStringA$address() {
        return ImmGetCompositionStringA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static int ImmGetCompositionStringA(MemorySegment x0, int x1, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetCompositionStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionStringA", x0, x1, lpBuf, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCompositionStringW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionStringW$descriptor() {
        return ImmGetCompositionStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetCompositionStringW$handle() {
        return ImmGetCompositionStringW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static MemorySegment ImmGetCompositionStringW$address() {
        return ImmGetCompositionStringW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen)
     * }
     */
    public static int ImmGetCompositionStringW(MemorySegment x0, int x1, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetCompositionStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionStringW", x0, x1, lpBuf, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionStringA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetCompositionStringA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionStringA$descriptor() {
        return ImmSetCompositionStringA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static MethodHandle ImmSetCompositionStringA$handle() {
        return ImmSetCompositionStringA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static MemorySegment ImmSetCompositionStringA$address() {
        return ImmSetCompositionStringA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static int ImmSetCompositionStringA(MemorySegment x0, int dwIndex, MemorySegment lpComp, int dwCompLen, MemorySegment lpRead, int dwReadLen) {
        var mh$ = ImmSetCompositionStringA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionStringA", x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
            }
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionStringW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetCompositionStringW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionStringW$descriptor() {
        return ImmSetCompositionStringW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static MethodHandle ImmSetCompositionStringW$handle() {
        return ImmSetCompositionStringW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static MemorySegment ImmSetCompositionStringW$address() {
        return ImmSetCompositionStringW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen)
     * }
     */
    public static int ImmSetCompositionStringW(MemorySegment x0, int dwIndex, MemorySegment lpComp, int dwCompLen, MemorySegment lpRead, int dwReadLen) {
        var mh$ = ImmSetCompositionStringW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionStringW", x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
            }
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateListCountA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCandidateListCountA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateListCountA$descriptor() {
        return ImmGetCandidateListCountA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static MethodHandle ImmGetCandidateListCountA$handle() {
        return ImmGetCandidateListCountA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static MemorySegment ImmGetCandidateListCountA$address() {
        return ImmGetCandidateListCountA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static int ImmGetCandidateListCountA(MemorySegment x0, MemorySegment lpdwListCount) {
        var mh$ = ImmGetCandidateListCountA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateListCountA", x0, lpdwListCount);
            }
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateListCountW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCandidateListCountW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateListCountW$descriptor() {
        return ImmGetCandidateListCountW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static MethodHandle ImmGetCandidateListCountW$handle() {
        return ImmGetCandidateListCountW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static MemorySegment ImmGetCandidateListCountW$address() {
        return ImmGetCandidateListCountW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount)
     * }
     */
    public static int ImmGetCandidateListCountW(MemorySegment x0, MemorySegment lpdwListCount) {
        var mh$ = ImmGetCandidateListCountW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateListCountW", x0, lpdwListCount);
            }
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateListA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCandidateListA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateListA$descriptor() {
        return ImmGetCandidateListA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetCandidateListA$handle() {
        return ImmGetCandidateListA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static MemorySegment ImmGetCandidateListA$address() {
        return ImmGetCandidateListA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static int ImmGetCandidateListA(MemorySegment x0, int deIndex, MemorySegment lpCandList, int dwBufLen) {
        var mh$ = ImmGetCandidateListA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateListA", x0, deIndex, lpCandList, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateListW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCandidateListW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateListW$descriptor() {
        return ImmGetCandidateListW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetCandidateListW$handle() {
        return ImmGetCandidateListW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static MemorySegment ImmGetCandidateListW$address() {
        return ImmGetCandidateListW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen)
     * }
     */
    public static int ImmGetCandidateListW(MemorySegment x0, int deIndex, MemorySegment lpCandList, int dwBufLen) {
        var mh$ = ImmGetCandidateListW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateListW", x0, deIndex, lpCandList, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetGuideLineA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetGuideLineA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetGuideLineA$descriptor() {
        return ImmGetGuideLineA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetGuideLineA$handle() {
        return ImmGetGuideLineA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static MemorySegment ImmGetGuideLineA$address() {
        return ImmGetGuideLineA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static int ImmGetGuideLineA(MemorySegment x0, int dwIndex, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetGuideLineA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetGuideLineA", x0, dwIndex, lpBuf, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetGuideLineW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetGuideLineW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static FunctionDescriptor ImmGetGuideLineW$descriptor() {
        return ImmGetGuideLineW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static MethodHandle ImmGetGuideLineW$handle() {
        return ImmGetGuideLineW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static MemorySegment ImmGetGuideLineW$address() {
        return ImmGetGuideLineW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen)
     * }
     */
    public static int ImmGetGuideLineW(MemorySegment x0, int dwIndex, MemorySegment lpBuf, int dwBufLen) {
        var mh$ = ImmGetGuideLineW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetGuideLineW", x0, dwIndex, lpBuf, dwBufLen);
            }
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetConversionStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetConversionStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence)
     * }
     */
    public static FunctionDescriptor ImmGetConversionStatus$descriptor() {
        return ImmGetConversionStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence)
     * }
     */
    public static MethodHandle ImmGetConversionStatus$handle() {
        return ImmGetConversionStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence)
     * }
     */
    public static MemorySegment ImmGetConversionStatus$address() {
        return ImmGetConversionStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence)
     * }
     */
    public static int ImmGetConversionStatus(MemorySegment x0, MemorySegment lpfdwConversion, MemorySegment lpfdwSentence) {
        var mh$ = ImmGetConversionStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetConversionStatus", x0, lpfdwConversion, lpfdwSentence);
            }
            return (int)mh$.invokeExact(x0, lpfdwConversion, lpfdwSentence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetConversionStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetConversionStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD)
     * }
     */
    public static FunctionDescriptor ImmSetConversionStatus$descriptor() {
        return ImmSetConversionStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD)
     * }
     */
    public static MethodHandle ImmSetConversionStatus$handle() {
        return ImmSetConversionStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD)
     * }
     */
    public static MemorySegment ImmSetConversionStatus$address() {
        return ImmSetConversionStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD)
     * }
     */
    public static int ImmSetConversionStatus(MemorySegment x0, int x1, int x2) {
        var mh$ = ImmSetConversionStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetConversionStatus", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetOpenStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetOpenStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetOpenStatus(HIMC)
     * }
     */
    public static FunctionDescriptor ImmGetOpenStatus$descriptor() {
        return ImmGetOpenStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetOpenStatus(HIMC)
     * }
     */
    public static MethodHandle ImmGetOpenStatus$handle() {
        return ImmGetOpenStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmGetOpenStatus(HIMC)
     * }
     */
    public static MemorySegment ImmGetOpenStatus$address() {
        return ImmGetOpenStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmGetOpenStatus(HIMC)
     * }
     */
    public static int ImmGetOpenStatus(MemorySegment x0) {
        var mh$ = ImmGetOpenStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetOpenStatus", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetOpenStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetOpenStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetOpenStatus(HIMC, BOOL)
     * }
     */
    public static FunctionDescriptor ImmSetOpenStatus$descriptor() {
        return ImmSetOpenStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetOpenStatus(HIMC, BOOL)
     * }
     */
    public static MethodHandle ImmSetOpenStatus$handle() {
        return ImmSetOpenStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetOpenStatus(HIMC, BOOL)
     * }
     */
    public static MemorySegment ImmSetOpenStatus$address() {
        return ImmSetOpenStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetOpenStatus(HIMC, BOOL)
     * }
     */
    public static int ImmSetOpenStatus(MemorySegment x0, int x1) {
        var mh$ = ImmSetOpenStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetOpenStatus", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionFontA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCompositionFontA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionFontA$descriptor() {
        return ImmGetCompositionFontA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static MethodHandle ImmGetCompositionFontA$handle() {
        return ImmGetCompositionFontA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static MemorySegment ImmGetCompositionFontA$address() {
        return ImmGetCompositionFontA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static int ImmGetCompositionFontA(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmGetCompositionFontA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionFontA", x0, lplf);
            }
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionFontW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCompositionFontW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionFontW$descriptor() {
        return ImmGetCompositionFontW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static MethodHandle ImmGetCompositionFontW$handle() {
        return ImmGetCompositionFontW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static MemorySegment ImmGetCompositionFontW$address() {
        return ImmGetCompositionFontW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static int ImmGetCompositionFontW(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmGetCompositionFontW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionFontW", x0, lplf);
            }
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionFontA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetCompositionFontA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionFontA$descriptor() {
        return ImmSetCompositionFontA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static MethodHandle ImmSetCompositionFontA$handle() {
        return ImmSetCompositionFontA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static MemorySegment ImmSetCompositionFontA$address() {
        return ImmSetCompositionFontA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf)
     * }
     */
    public static int ImmSetCompositionFontA(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmSetCompositionFontA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionFontA", x0, lplf);
            }
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionFontW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetCompositionFontW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionFontW$descriptor() {
        return ImmSetCompositionFontW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static MethodHandle ImmSetCompositionFontW$handle() {
        return ImmSetCompositionFontW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static MemorySegment ImmSetCompositionFontW$address() {
        return ImmSetCompositionFontW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf)
     * }
     */
    public static int ImmSetCompositionFontW(MemorySegment x0, MemorySegment lplf) {
        var mh$ = ImmSetCompositionFontW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionFontW", x0, lplf);
            }
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmConfigureIMEA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmConfigureIMEA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmConfigureIMEA$descriptor() {
        return ImmConfigureIMEA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static MethodHandle ImmConfigureIMEA$handle() {
        return ImmConfigureIMEA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static MemorySegment ImmConfigureIMEA$address() {
        return ImmConfigureIMEA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static int ImmConfigureIMEA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmConfigureIMEA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmConfigureIMEA", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmConfigureIMEW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmConfigureIMEW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmConfigureIMEW$descriptor() {
        return ImmConfigureIMEW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static MethodHandle ImmConfigureIMEW$handle() {
        return ImmConfigureIMEW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static MemorySegment ImmConfigureIMEW$address() {
        return ImmConfigureIMEW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID)
     * }
     */
    public static int ImmConfigureIMEW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmConfigureIMEW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmConfigureIMEW", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEscapeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmEscapeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeA(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmEscapeA$descriptor() {
        return ImmEscapeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeA(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static MethodHandle ImmEscapeA$handle() {
        return ImmEscapeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeA(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static MemorySegment ImmEscapeA$address() {
        return ImmEscapeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LRESULT ImmEscapeA(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static long ImmEscapeA(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmEscapeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEscapeA", x0, x1, x2, x3);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEscapeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmEscapeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmEscapeW$descriptor() {
        return ImmEscapeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static MethodHandle ImmEscapeW$handle() {
        return ImmEscapeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static MemorySegment ImmEscapeW$address() {
        return ImmEscapeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID)
     * }
     */
    public static long ImmEscapeW(MemorySegment x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = ImmEscapeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEscapeW", x0, x1, x2, x3);
            }
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetConversionListA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetConversionListA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static FunctionDescriptor ImmGetConversionListA$descriptor() {
        return ImmGetConversionListA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static MethodHandle ImmGetConversionListA$handle() {
        return ImmGetConversionListA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static MemorySegment ImmGetConversionListA$address() {
        return ImmGetConversionListA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static int ImmGetConversionListA(MemorySegment x0, MemorySegment x1, MemorySegment lpSrc, MemorySegment lpDst, int dwBufLen, int uFlag) {
        var mh$ = ImmGetConversionListA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetConversionListA", x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
            }
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetConversionListW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetConversionListW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static FunctionDescriptor ImmGetConversionListW$descriptor() {
        return ImmGetConversionListW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static MethodHandle ImmGetConversionListW$handle() {
        return ImmGetConversionListW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static MemorySegment ImmGetConversionListW$address() {
        return ImmGetConversionListW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag)
     * }
     */
    public static int ImmGetConversionListW(MemorySegment x0, MemorySegment x1, MemorySegment lpSrc, MemorySegment lpDst, int dwBufLen, int uFlag) {
        var mh$ = ImmGetConversionListW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetConversionListW", x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
            }
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmNotifyIME {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmNotifyIME");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue)
     * }
     */
    public static FunctionDescriptor ImmNotifyIME$descriptor() {
        return ImmNotifyIME.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue)
     * }
     */
    public static MethodHandle ImmNotifyIME$handle() {
        return ImmNotifyIME.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue)
     * }
     */
    public static MemorySegment ImmNotifyIME$address() {
        return ImmNotifyIME.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue)
     * }
     */
    public static int ImmNotifyIME(MemorySegment x0, int dwAction, int dwIndex, int dwValue) {
        var mh$ = ImmNotifyIME.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmNotifyIME", x0, dwAction, dwIndex, dwValue);
            }
            return (int)mh$.invokeExact(x0, dwAction, dwIndex, dwValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetStatusWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetStatusWindowPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static FunctionDescriptor ImmGetStatusWindowPos$descriptor() {
        return ImmGetStatusWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static MethodHandle ImmGetStatusWindowPos$handle() {
        return ImmGetStatusWindowPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static MemorySegment ImmGetStatusWindowPos$address() {
        return ImmGetStatusWindowPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static int ImmGetStatusWindowPos(MemorySegment x0, MemorySegment lpptPos) {
        var mh$ = ImmGetStatusWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetStatusWindowPos", x0, lpptPos);
            }
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetStatusWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetStatusWindowPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static FunctionDescriptor ImmSetStatusWindowPos$descriptor() {
        return ImmSetStatusWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static MethodHandle ImmSetStatusWindowPos$handle() {
        return ImmSetStatusWindowPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static MemorySegment ImmSetStatusWindowPos$address() {
        return ImmSetStatusWindowPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos)
     * }
     */
    public static int ImmSetStatusWindowPos(MemorySegment x0, MemorySegment lpptPos) {
        var mh$ = ImmSetStatusWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetStatusWindowPos", x0, lpptPos);
            }
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCompositionWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCompositionWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static FunctionDescriptor ImmGetCompositionWindow$descriptor() {
        return ImmGetCompositionWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static MethodHandle ImmGetCompositionWindow$handle() {
        return ImmGetCompositionWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static MemorySegment ImmGetCompositionWindow$address() {
        return ImmGetCompositionWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static int ImmGetCompositionWindow(MemorySegment x0, MemorySegment lpCompForm) {
        var mh$ = ImmGetCompositionWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCompositionWindow", x0, lpCompForm);
            }
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCompositionWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetCompositionWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static FunctionDescriptor ImmSetCompositionWindow$descriptor() {
        return ImmSetCompositionWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static MethodHandle ImmSetCompositionWindow$handle() {
        return ImmSetCompositionWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static MemorySegment ImmSetCompositionWindow$address() {
        return ImmSetCompositionWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm)
     * }
     */
    public static int ImmSetCompositionWindow(MemorySegment x0, MemorySegment lpCompForm) {
        var mh$ = ImmSetCompositionWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCompositionWindow", x0, lpCompForm);
            }
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetCandidateWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetCandidateWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static FunctionDescriptor ImmGetCandidateWindow$descriptor() {
        return ImmGetCandidateWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static MethodHandle ImmGetCandidateWindow$handle() {
        return ImmGetCandidateWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static MemorySegment ImmGetCandidateWindow$address() {
        return ImmGetCandidateWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static int ImmGetCandidateWindow(MemorySegment x0, int x1, MemorySegment lpCandidate) {
        var mh$ = ImmGetCandidateWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetCandidateWindow", x0, x1, lpCandidate);
            }
            return (int)mh$.invokeExact(x0, x1, lpCandidate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmSetCandidateWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmSetCandidateWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static FunctionDescriptor ImmSetCandidateWindow$descriptor() {
        return ImmSetCandidateWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static MethodHandle ImmSetCandidateWindow$handle() {
        return ImmSetCandidateWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static MemorySegment ImmSetCandidateWindow$address() {
        return ImmSetCandidateWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate)
     * }
     */
    public static int ImmSetCandidateWindow(MemorySegment x0, MemorySegment lpCandidate) {
        var mh$ = ImmSetCandidateWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmSetCandidateWindow", x0, lpCandidate);
            }
            return (int)mh$.invokeExact(x0, lpCandidate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmIsUIMessageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmIsUIMessageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static FunctionDescriptor ImmIsUIMessageA$descriptor() {
        return ImmIsUIMessageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static MethodHandle ImmIsUIMessageA$handle() {
        return ImmIsUIMessageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static MemorySegment ImmIsUIMessageA$address() {
        return ImmIsUIMessageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static int ImmIsUIMessageA(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = ImmIsUIMessageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmIsUIMessageA", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmIsUIMessageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmIsUIMessageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static FunctionDescriptor ImmIsUIMessageW$descriptor() {
        return ImmIsUIMessageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static MethodHandle ImmIsUIMessageW$handle() {
        return ImmIsUIMessageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static MemorySegment ImmIsUIMessageW$address() {
        return ImmIsUIMessageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM)
     * }
     */
    public static int ImmIsUIMessageW(MemorySegment x0, int x1, long x2, long x3) {
        var mh$ = ImmIsUIMessageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmIsUIMessageW", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetVirtualKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetVirtualKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetVirtualKey(HWND)
     * }
     */
    public static FunctionDescriptor ImmGetVirtualKey$descriptor() {
        return ImmGetVirtualKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetVirtualKey(HWND)
     * }
     */
    public static MethodHandle ImmGetVirtualKey$handle() {
        return ImmGetVirtualKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmGetVirtualKey(HWND)
     * }
     */
    public static MemorySegment ImmGetVirtualKey$address() {
        return ImmGetVirtualKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmGetVirtualKey(HWND)
     * }
     */
    public static int ImmGetVirtualKey(MemorySegment x0) {
        var mh$ = ImmGetVirtualKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetVirtualKey", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmRegisterWordA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmRegisterWordA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister)
     * }
     */
    public static FunctionDescriptor ImmRegisterWordA$descriptor() {
        return ImmRegisterWordA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister)
     * }
     */
    public static MethodHandle ImmRegisterWordA$handle() {
        return ImmRegisterWordA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister)
     * }
     */
    public static MemorySegment ImmRegisterWordA$address() {
        return ImmRegisterWordA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister)
     * }
     */
    public static int ImmRegisterWordA(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszRegister) {
        var mh$ = ImmRegisterWordA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmRegisterWordA", x0, lpszReading, x2, lpszRegister);
            }
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmRegisterWordW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmRegisterWordW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister)
     * }
     */
    public static FunctionDescriptor ImmRegisterWordW$descriptor() {
        return ImmRegisterWordW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister)
     * }
     */
    public static MethodHandle ImmRegisterWordW$handle() {
        return ImmRegisterWordW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister)
     * }
     */
    public static MemorySegment ImmRegisterWordW$address() {
        return ImmRegisterWordW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister)
     * }
     */
    public static int ImmRegisterWordW(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszRegister) {
        var mh$ = ImmRegisterWordW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmRegisterWordW", x0, lpszReading, x2, lpszRegister);
            }
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmUnregisterWordA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmUnregisterWordA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister)
     * }
     */
    public static FunctionDescriptor ImmUnregisterWordA$descriptor() {
        return ImmUnregisterWordA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister)
     * }
     */
    public static MethodHandle ImmUnregisterWordA$handle() {
        return ImmUnregisterWordA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister)
     * }
     */
    public static MemorySegment ImmUnregisterWordA$address() {
        return ImmUnregisterWordA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister)
     * }
     */
    public static int ImmUnregisterWordA(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszUnregister) {
        var mh$ = ImmUnregisterWordA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmUnregisterWordA", x0, lpszReading, x2, lpszUnregister);
            }
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmUnregisterWordW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmUnregisterWordW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister)
     * }
     */
    public static FunctionDescriptor ImmUnregisterWordW$descriptor() {
        return ImmUnregisterWordW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister)
     * }
     */
    public static MethodHandle ImmUnregisterWordW$handle() {
        return ImmUnregisterWordW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister)
     * }
     */
    public static MemorySegment ImmUnregisterWordW$address() {
        return ImmUnregisterWordW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister)
     * }
     */
    public static int ImmUnregisterWordW(MemorySegment x0, MemorySegment lpszReading, int x2, MemorySegment lpszUnregister) {
        var mh$ = ImmUnregisterWordW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmUnregisterWordW", x0, lpszReading, x2, lpszUnregister);
            }
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetRegisterWordStyleA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetRegisterWordStyleA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf)
     * }
     */
    public static FunctionDescriptor ImmGetRegisterWordStyleA$descriptor() {
        return ImmGetRegisterWordStyleA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf)
     * }
     */
    public static MethodHandle ImmGetRegisterWordStyleA$handle() {
        return ImmGetRegisterWordStyleA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf)
     * }
     */
    public static MemorySegment ImmGetRegisterWordStyleA$address() {
        return ImmGetRegisterWordStyleA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf)
     * }
     */
    public static int ImmGetRegisterWordStyleA(MemorySegment x0, int nItem, MemorySegment lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetRegisterWordStyleA", x0, nItem, lpStyleBuf);
            }
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetRegisterWordStyleW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetRegisterWordStyleW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf)
     * }
     */
    public static FunctionDescriptor ImmGetRegisterWordStyleW$descriptor() {
        return ImmGetRegisterWordStyleW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf)
     * }
     */
    public static MethodHandle ImmGetRegisterWordStyleW$handle() {
        return ImmGetRegisterWordStyleW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf)
     * }
     */
    public static MemorySegment ImmGetRegisterWordStyleW$address() {
        return ImmGetRegisterWordStyleW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf)
     * }
     */
    public static int ImmGetRegisterWordStyleW(MemorySegment x0, int nItem, MemorySegment lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetRegisterWordStyleW", x0, nItem, lpStyleBuf);
            }
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEnumRegisterWordA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmEnumRegisterWordA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmEnumRegisterWordA$descriptor() {
        return ImmEnumRegisterWordA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID)
     * }
     */
    public static MethodHandle ImmEnumRegisterWordA$handle() {
        return ImmEnumRegisterWordA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID)
     * }
     */
    public static MemorySegment ImmEnumRegisterWordA$address() {
        return ImmEnumRegisterWordA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID)
     * }
     */
    public static int ImmEnumRegisterWordA(MemorySegment x0, MemorySegment x1, MemorySegment lpszReading, int x3, MemorySegment lpszRegister, MemorySegment x5) {
        var mh$ = ImmEnumRegisterWordA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEnumRegisterWordA", x0, x1, lpszReading, x3, lpszRegister, x5);
            }
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEnumRegisterWordW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmEnumRegisterWordW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID)
     * }
     */
    public static FunctionDescriptor ImmEnumRegisterWordW$descriptor() {
        return ImmEnumRegisterWordW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID)
     * }
     */
    public static MethodHandle ImmEnumRegisterWordW$handle() {
        return ImmEnumRegisterWordW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID)
     * }
     */
    public static MemorySegment ImmEnumRegisterWordW$address() {
        return ImmEnumRegisterWordW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID)
     * }
     */
    public static int ImmEnumRegisterWordW(MemorySegment x0, MemorySegment x1, MemorySegment lpszReading, int x3, MemorySegment lpszRegister, MemorySegment x5) {
        var mh$ = ImmEnumRegisterWordW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEnumRegisterWordW", x0, x1, lpszReading, x3, lpszRegister, x5);
            }
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmDisableIME {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmDisableIME");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmDisableIME(DWORD)
     * }
     */
    public static FunctionDescriptor ImmDisableIME$descriptor() {
        return ImmDisableIME.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmDisableIME(DWORD)
     * }
     */
    public static MethodHandle ImmDisableIME$handle() {
        return ImmDisableIME.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmDisableIME(DWORD)
     * }
     */
    public static MemorySegment ImmDisableIME$address() {
        return ImmDisableIME.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmDisableIME(DWORD)
     * }
     */
    public static int ImmDisableIME(int x0) {
        var mh$ = ImmDisableIME.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmDisableIME", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmEnumInputContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmEnumInputContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam)
     * }
     */
    public static FunctionDescriptor ImmEnumInputContext$descriptor() {
        return ImmEnumInputContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam)
     * }
     */
    public static MethodHandle ImmEnumInputContext$handle() {
        return ImmEnumInputContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam)
     * }
     */
    public static MemorySegment ImmEnumInputContext$address() {
        return ImmEnumInputContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam)
     * }
     */
    public static int ImmEnumInputContext(int idThread, MemorySegment lpfn, long lParam) {
        var mh$ = ImmEnumInputContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmEnumInputContext", idThread, lpfn, lParam);
            }
            return (int)mh$.invokeExact(idThread, lpfn, lParam);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetImeMenuItemsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetImeMenuItemsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize)
     * }
     */
    public static FunctionDescriptor ImmGetImeMenuItemsA$descriptor() {
        return ImmGetImeMenuItemsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize)
     * }
     */
    public static MethodHandle ImmGetImeMenuItemsA$handle() {
        return ImmGetImeMenuItemsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize)
     * }
     */
    public static MemorySegment ImmGetImeMenuItemsA$address() {
        return ImmGetImeMenuItemsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize)
     * }
     */
    public static int ImmGetImeMenuItemsA(MemorySegment x0, int x1, int x2, MemorySegment lpImeParentMenu, MemorySegment lpImeMenu, int dwSize) {
        var mh$ = ImmGetImeMenuItemsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetImeMenuItemsA", x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
            }
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmGetImeMenuItemsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmGetImeMenuItemsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize)
     * }
     */
    public static FunctionDescriptor ImmGetImeMenuItemsW$descriptor() {
        return ImmGetImeMenuItemsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize)
     * }
     */
    public static MethodHandle ImmGetImeMenuItemsW$handle() {
        return ImmGetImeMenuItemsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize)
     * }
     */
    public static MemorySegment ImmGetImeMenuItemsW$address() {
        return ImmGetImeMenuItemsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize)
     * }
     */
    public static int ImmGetImeMenuItemsW(MemorySegment x0, int x1, int x2, MemorySegment lpImeParentMenu, MemorySegment lpImeMenu, int dwSize) {
        var mh$ = ImmGetImeMenuItemsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmGetImeMenuItemsW", x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
            }
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmDisableTextFrameService {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmDisableTextFrameService");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmDisableTextFrameService(DWORD idThread)
     * }
     */
    public static FunctionDescriptor ImmDisableTextFrameService$descriptor() {
        return ImmDisableTextFrameService.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmDisableTextFrameService(DWORD idThread)
     * }
     */
    public static MethodHandle ImmDisableTextFrameService$handle() {
        return ImmDisableTextFrameService.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmDisableTextFrameService(DWORD idThread)
     * }
     */
    public static MemorySegment ImmDisableTextFrameService$address() {
        return ImmDisableTextFrameService.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmDisableTextFrameService(DWORD idThread)
     * }
     */
    public static int ImmDisableTextFrameService(int idThread) {
        var mh$ = ImmDisableTextFrameService.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmDisableTextFrameService", idThread);
            }
            return (int)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImmDisableLegacyIME {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("ImmDisableLegacyIME");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ImmDisableLegacyIME()
     * }
     */
    public static FunctionDescriptor ImmDisableLegacyIME$descriptor() {
        return ImmDisableLegacyIME.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ImmDisableLegacyIME()
     * }
     */
    public static MethodHandle ImmDisableLegacyIME$handle() {
        return ImmDisableLegacyIME.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ImmDisableLegacyIME()
     * }
     */
    public static MemorySegment ImmDisableLegacyIME$address() {
        return ImmDisableLegacyIME.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ImmDisableLegacyIME()
     * }
     */
    public static int ImmDisableLegacyIME() {
        var mh$ = ImmDisableLegacyIME.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImmDisableLegacyIME");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int WINAPI_PARTITION_SERVER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_SERVER 0
     * }
     */
    public static int WINAPI_PARTITION_SERVER() {
        return WINAPI_PARTITION_SERVER;
    }
    private static final int WINAPI_PARTITION_PKG_WINTRUST = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WINTRUST 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WINTRUST() {
        return WINAPI_PARTITION_PKG_WINTRUST;
    }
    private static final int WINAPI_PARTITION_PKG_WEBSERVICES = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WEBSERVICES 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WEBSERVICES() {
        return WINAPI_PARTITION_PKG_WEBSERVICES;
    }
    private static final int WINAPI_PARTITION_PKG_EVENTLOGSERVICE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_EVENTLOGSERVICE 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_EVENTLOGSERVICE() {
        return WINAPI_PARTITION_PKG_EVENTLOGSERVICE;
    }
    private static final int WINAPI_PARTITION_PKG_VHD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_VHD 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_VHD() {
        return WINAPI_PARTITION_PKG_VHD;
    }
    private static final int WINAPI_PARTITION_PKG_PERFCOUNTER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_PERFCOUNTER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_PERFCOUNTER() {
        return WINAPI_PARTITION_PKG_PERFCOUNTER;
    }
    private static final int WINAPI_PARTITION_PKG_SECURESTARTUP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_SECURESTARTUP 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_SECURESTARTUP() {
        return WINAPI_PARTITION_PKG_SECURESTARTUP;
    }
    private static final int WINAPI_PARTITION_PKG_REMOTEFS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_REMOTEFS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_REMOTEFS() {
        return WINAPI_PARTITION_PKG_REMOTEFS;
    }
    private static final int WINAPI_PARTITION_PKG_BOOTABLESKU = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_BOOTABLESKU 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_BOOTABLESKU() {
        return WINAPI_PARTITION_PKG_BOOTABLESKU;
    }
    private static final int WINAPI_PARTITION_PKG_CMDTOOLS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_CMDTOOLS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CMDTOOLS() {
        return WINAPI_PARTITION_PKG_CMDTOOLS;
    }
    private static final int WINAPI_PARTITION_PKG_DISM = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_DISM 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_DISM() {
        return WINAPI_PARTITION_PKG_DISM;
    }
    private static final int WINAPI_PARTITION_PKG_CORESETUP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_CORESETUP 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CORESETUP() {
        return WINAPI_PARTITION_PKG_CORESETUP;
    }
    private static final int WINAPI_PARTITION_PKG_APPRUNTIME = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_APPRUNTIME 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_APPRUNTIME() {
        return WINAPI_PARTITION_PKG_APPRUNTIME;
    }
    private static final int WINAPI_PARTITION_PKG_ESENT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_ESENT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_ESENT() {
        return WINAPI_PARTITION_PKG_ESENT;
    }
    private static final int WINAPI_PARTITION_PKG_WINMGMT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WINMGMT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WINMGMT() {
        return WINAPI_PARTITION_PKG_WINMGMT;
    }
    private static final int WINAPI_PARTITION_PKG_WNV = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WNV 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WNV() {
        return WINAPI_PARTITION_PKG_WNV;
    }
    private static final int WINAPI_PARTITION_PKG_CLUSTER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_CLUSTER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_CLUSTER() {
        return WINAPI_PARTITION_PKG_CLUSTER;
    }
    private static final int WINAPI_PARTITION_PKG_VSS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_VSS 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_VSS() {
        return WINAPI_PARTITION_PKG_VSS;
    }
    private static final int WINAPI_PARTITION_PKG_TRAFFIC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_TRAFFIC 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_TRAFFIC() {
        return WINAPI_PARTITION_PKG_TRAFFIC;
    }
    private static final int WINAPI_PARTITION_PKG_ISCSI = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_ISCSI 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_ISCSI() {
        return WINAPI_PARTITION_PKG_ISCSI;
    }
    private static final int WINAPI_PARTITION_PKG_STORAGE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_STORAGE 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_STORAGE() {
        return WINAPI_PARTITION_PKG_STORAGE;
    }
    private static final int WINAPI_PARTITION_PKG_MPSSVC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_MPSSVC 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_MPSSVC() {
        return WINAPI_PARTITION_PKG_MPSSVC;
    }
    private static final int WINAPI_PARTITION_PKG_APPXDEPLOYMENT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_APPXDEPLOYMENT 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_APPXDEPLOYMENT() {
        return WINAPI_PARTITION_PKG_APPXDEPLOYMENT;
    }
    private static final int WINAPI_PARTITION_PKG_WER = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PKG_WER 0
     * }
     */
    public static int WINAPI_PARTITION_PKG_WER() {
        return WINAPI_PARTITION_PKG_WER;
    }
    private static final int WINAPI_FAMILY_APP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_FAMILY_APP 2
     * }
     */
    public static int WINAPI_FAMILY_APP() {
        return WINAPI_FAMILY_APP;
    }
    private static final int WINAPI_FAMILY = (int)100L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_FAMILY 100
     * }
     */
    public static int WINAPI_FAMILY() {
        return WINAPI_FAMILY;
    }
    private static final int WINAPI_PARTITION_DESKTOP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_DESKTOP 1
     * }
     */
    public static int WINAPI_PARTITION_DESKTOP() {
        return WINAPI_PARTITION_DESKTOP;
    }
    private static final int WINAPI_PARTITION_APP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_APP 1
     * }
     */
    public static int WINAPI_PARTITION_APP() {
        return WINAPI_PARTITION_APP;
    }
    private static final int WINAPI_PARTITION_PC_APP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PC_APP 1
     * }
     */
    public static int WINAPI_PARTITION_PC_APP() {
        return WINAPI_PARTITION_PC_APP;
    }
    private static final int WINAPI_PARTITION_PHONE_APP = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PHONE_APP 0
     * }
     */
    public static int WINAPI_PARTITION_PHONE_APP() {
        return WINAPI_PARTITION_PHONE_APP;
    }
    private static final int WINAPI_PARTITION_GAMES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_GAMES 1
     * }
     */
    public static int WINAPI_PARTITION_GAMES() {
        return WINAPI_PARTITION_GAMES;
    }
    private static final int WINAPI_PARTITION_SYSTEM = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_SYSTEM 0
     * }
     */
    public static int WINAPI_PARTITION_SYSTEM() {
        return WINAPI_PARTITION_SYSTEM;
    }
    private static final int WINAPI_PARTITION_PHONE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINAPI_PARTITION_PHONE 0
     * }
     */
    public static int WINAPI_PARTITION_PHONE() {
        return WINAPI_PARTITION_PHONE;
    }
    private static final int _WIN32_IE_NT4 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4 512
     * }
     */
    public static int _WIN32_IE_NT4() {
        return _WIN32_IE_NT4;
    }
    private static final int _WIN32_IE_NT4SP1 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP1 512
     * }
     */
    public static int _WIN32_IE_NT4SP1() {
        return _WIN32_IE_NT4SP1;
    }
    private static final int _WIN32_IE_NT4SP2 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP2 512
     * }
     */
    public static int _WIN32_IE_NT4SP2() {
        return _WIN32_IE_NT4SP2;
    }
    private static final int _WIN32_IE_NT4SP3 = (int)770L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP3 770
     * }
     */
    public static int _WIN32_IE_NT4SP3() {
        return _WIN32_IE_NT4SP3;
    }
    private static final int _WIN32_IE_NT4SP4 = (int)1025L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP4 1025
     * }
     */
    public static int _WIN32_IE_NT4SP4() {
        return _WIN32_IE_NT4SP4;
    }
    private static final int _WIN32_IE_NT4SP5 = (int)1025L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP5 1025
     * }
     */
    public static int _WIN32_IE_NT4SP5() {
        return _WIN32_IE_NT4SP5;
    }
    private static final int _WIN32_IE_NT4SP6 = (int)1280L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_NT4SP6 1280
     * }
     */
    public static int _WIN32_IE_NT4SP6() {
        return _WIN32_IE_NT4SP6;
    }
    private static final int _WIN32_IE_WIN98 = (int)1025L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN98 1025
     * }
     */
    public static int _WIN32_IE_WIN98() {
        return _WIN32_IE_WIN98;
    }
    private static final int _WIN32_IE_WIN98SE = (int)1280L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN98SE 1280
     * }
     */
    public static int _WIN32_IE_WIN98SE() {
        return _WIN32_IE_WIN98SE;
    }
    private static final int _WIN32_IE_WINME = (int)1360L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WINME 1360
     * }
     */
    public static int _WIN32_IE_WINME() {
        return _WIN32_IE_WINME;
    }
    private static final int _WIN32_IE_WIN2K = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2K 1281
     * }
     */
    public static int _WIN32_IE_WIN2K() {
        return _WIN32_IE_WIN2K;
    }
    private static final int _WIN32_IE_WIN2KSP1 = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2KSP1 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP1() {
        return _WIN32_IE_WIN2KSP1;
    }
    private static final int _WIN32_IE_WIN2KSP2 = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2KSP2 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP2() {
        return _WIN32_IE_WIN2KSP2;
    }
    private static final int _WIN32_IE_WIN2KSP3 = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2KSP3 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP3() {
        return _WIN32_IE_WIN2KSP3;
    }
    private static final int _WIN32_IE_WIN2KSP4 = (int)1281L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN2KSP4 1281
     * }
     */
    public static int _WIN32_IE_WIN2KSP4() {
        return _WIN32_IE_WIN2KSP4;
    }
    private static final int _WIN32_IE_XP = (int)1536L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_XP 1536
     * }
     */
    public static int _WIN32_IE_XP() {
        return _WIN32_IE_XP;
    }
    private static final int _WIN32_IE_XPSP1 = (int)1537L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_XPSP1 1537
     * }
     */
    public static int _WIN32_IE_XPSP1() {
        return _WIN32_IE_XPSP1;
    }
    private static final int _WIN32_IE_XPSP2 = (int)1539L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_XPSP2 1539
     * }
     */
    public static int _WIN32_IE_XPSP2() {
        return _WIN32_IE_XPSP2;
    }
    private static final int _WIN32_IE_WS03SP1 = (int)1539L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WS03SP1 1539
     * }
     */
    public static int _WIN32_IE_WS03SP1() {
        return _WIN32_IE_WS03SP1;
    }
    private static final int _WIN32_IE_WIN6 = (int)1792L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN6 1792
     * }
     */
    public static int _WIN32_IE_WIN6() {
        return _WIN32_IE_WIN6;
    }
    private static final int _WIN32_IE_LONGHORN = (int)1792L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_LONGHORN 1792
     * }
     */
    public static int _WIN32_IE_LONGHORN() {
        return _WIN32_IE_LONGHORN;
    }
    private static final int _WIN32_IE_WIN7 = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN7 2048
     * }
     */
    public static int _WIN32_IE_WIN7() {
        return _WIN32_IE_WIN7;
    }
    private static final int _WIN32_IE_WIN8 = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN8 2560
     * }
     */
    public static int _WIN32_IE_WIN8() {
        return _WIN32_IE_WIN8;
    }
    private static final int _WIN32_IE_WINBLUE = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WINBLUE 2560
     * }
     */
    public static int _WIN32_IE_WINBLUE() {
        return _WIN32_IE_WINBLUE;
    }
    private static final int _WIN32_IE_WINTHRESHOLD = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WINTHRESHOLD 2560
     * }
     */
    public static int _WIN32_IE_WINTHRESHOLD() {
        return _WIN32_IE_WINTHRESHOLD;
    }
    private static final int _WIN32_IE_WIN10 = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define _WIN32_IE_WIN10 2560
     * }
     */
    public static int _WIN32_IE_WIN10() {
        return _WIN32_IE_WIN10;
    }
    private static final int NTDDI_VISTA = (int)100663296L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTA 100663296
     * }
     */
    public static int NTDDI_VISTA() {
        return NTDDI_VISTA;
    }
    private static final int NTDDI_VISTASP1 = (int)100663552L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTASP1 100663552
     * }
     */
    public static int NTDDI_VISTASP1() {
        return NTDDI_VISTASP1;
    }
    private static final int NTDDI_VISTASP2 = (int)100663808L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTASP2 100663808
     * }
     */
    public static int NTDDI_VISTASP2() {
        return NTDDI_VISTASP2;
    }
    private static final int NTDDI_VISTASP3 = (int)100664064L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTASP3 100664064
     * }
     */
    public static int NTDDI_VISTASP3() {
        return NTDDI_VISTASP3;
    }
    private static final int NTDDI_VISTASP4 = (int)100664320L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VISTASP4 100664320
     * }
     */
    public static int NTDDI_VISTASP4() {
        return NTDDI_VISTASP4;
    }
    private static final int NTDDI_LONGHORN = (int)100663296L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_LONGHORN 100663296
     * }
     */
    public static int NTDDI_LONGHORN() {
        return NTDDI_LONGHORN;
    }
    private static final int NTDDI_WS08 = (int)100663552L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_WS08 100663552
     * }
     */
    public static int NTDDI_WS08() {
        return NTDDI_WS08;
    }
    private static final int NTDDI_WS08SP2 = (int)100663808L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_WS08SP2 100663808
     * }
     */
    public static int NTDDI_WS08SP2() {
        return NTDDI_WS08SP2;
    }
    private static final int NTDDI_WS08SP3 = (int)100664064L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_WS08SP3 100664064
     * }
     */
    public static int NTDDI_WS08SP3() {
        return NTDDI_WS08SP3;
    }
    private static final int NTDDI_WS08SP4 = (int)100664320L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_WS08SP4 100664320
     * }
     */
    public static int NTDDI_WS08SP4() {
        return NTDDI_WS08SP4;
    }
    private static final int WDK_NTDDI_VERSION = (int)167772176L;
    /**
     * {@snippet lang=c :
     * #define WDK_NTDDI_VERSION 167772176
     * }
     */
    public static int WDK_NTDDI_VERSION() {
        return WDK_NTDDI_VERSION;
    }
    private static final int OSVERSION_MASK = (int)4294901760L;
    /**
     * {@snippet lang=c :
     * #define OSVERSION_MASK 4294901760
     * }
     */
    public static int OSVERSION_MASK() {
        return OSVERSION_MASK;
    }
    private static final int NTDDI_VERSION = (int)167772176L;
    /**
     * {@snippet lang=c :
     * #define NTDDI_VERSION 167772176
     * }
     */
    public static int NTDDI_VERSION() {
        return NTDDI_VERSION;
    }
    private static final int WINVER = (int)2560L;
    /**
     * {@snippet lang=c :
     * #define WINVER 2560
     * }
     */
    public static int WINVER() {
        return WINVER;
    }
    private static final int _VCRUNTIME_DISABLED_WARNINGS = (int)4514L;
    /**
     * {@snippet lang=c :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return _VCRUNTIME_DISABLED_WARNINGS;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int EXCEPTION_CONTINUE_EXECUTION = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define EXCEPTION_CONTINUE_EXECUTION -1
     * }
     */
    public static int EXCEPTION_CONTINUE_EXECUTION() {
        return EXCEPTION_CONTINUE_EXECUTION;
    }
    private static final int _UCRT_DISABLED_WARNINGS = (int)4324L;
    /**
     * {@snippet lang=c :
     * #define _UCRT_DISABLED_WARNINGS 4324
     * }
     */
    public static int _UCRT_DISABLED_WARNINGS() {
        return _UCRT_DISABLED_WARNINGS;
    }
    private static final long _TRUNCATE = -1L;
    /**
     * {@snippet lang=c :
     * #define _TRUNCATE -1
     * }
     */
    public static long _TRUNCATE() {
        return _TRUNCATE;
    }
    private static final long _CRT_SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SIZE_MAX -1
     * }
     */
    public static long _CRT_SIZE_MAX() {
        return _CRT_SIZE_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define __FILEW__ "j"
     * }
     */
    public static MemorySegment __FILEW__() {
        class Holder {
            static final MemorySegment __FILEW__
                = winapi.LIBRARY_ARENA.allocateFrom("j");
        }
        return Holder.__FILEW__;
    }
    private static final int __STDC_SECURE_LIB__ = (int)200411L;
    /**
     * {@snippet lang=c :
     * #define __STDC_SECURE_LIB__ 200411
     * }
     */
    public static int __STDC_SECURE_LIB__() {
        return __STDC_SECURE_LIB__;
    }
    private static final int __GOT_SECURE_LIB__ = (int)200411L;
    /**
     * {@snippet lang=c :
     * #define __GOT_SECURE_LIB__ 200411
     * }
     */
    public static int __GOT_SECURE_LIB__() {
        return __GOT_SECURE_LIB__;
    }
    private static final short WEOF = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define WEOF 65535
     * }
     */
    public static short WEOF() {
        return WEOF;
    }
    private static final int _ALPHA = (int)259L;
    /**
     * {@snippet lang=c :
     * #define _ALPHA 259
     * }
     */
    public static int _ALPHA() {
        return _ALPHA;
    }
    private static final long MAX_NATURAL_ALIGNMENT = 8L;
    /**
     * {@snippet lang=c :
     * #define MAX_NATURAL_ALIGNMENT 8
     * }
     */
    public static long MAX_NATURAL_ALIGNMENT() {
        return MAX_NATURAL_ALIGNMENT;
    }
    private static final long ADDRESS_TAG_BIT = 4398046511104L;
    /**
     * {@snippet lang=c :
     * #define ADDRESS_TAG_BIT 4398046511104
     * }
     */
    public static long ADDRESS_TAG_BIT() {
        return ADDRESS_TAG_BIT;
    }
    private static final long MAXUINT_PTR = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT_PTR -1
     * }
     */
    public static long MAXUINT_PTR() {
        return MAXUINT_PTR;
    }
    private static final long MAXINT_PTR = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXINT_PTR 9223372036854775807
     * }
     */
    public static long MAXINT_PTR() {
        return MAXINT_PTR;
    }
    private static final long MININT_PTR = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MININT_PTR -9223372036854775808
     * }
     */
    public static long MININT_PTR() {
        return MININT_PTR;
    }
    private static final long MAXULONG_PTR = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXULONG_PTR -1
     * }
     */
    public static long MAXULONG_PTR() {
        return MAXULONG_PTR;
    }
    private static final long MAXLONG_PTR = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXLONG_PTR 9223372036854775807
     * }
     */
    public static long MAXLONG_PTR() {
        return MAXLONG_PTR;
    }
    private static final long MINLONG_PTR = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MINLONG_PTR -9223372036854775808
     * }
     */
    public static long MINLONG_PTR() {
        return MINLONG_PTR;
    }
    private static final int MAXUHALF_PTR = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXUHALF_PTR 4294967295
     * }
     */
    public static int MAXUHALF_PTR() {
        return MAXUHALF_PTR;
    }
    private static final int MAXHALF_PTR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define MAXHALF_PTR 2147483647
     * }
     */
    public static int MAXHALF_PTR() {
        return MAXHALF_PTR;
    }
    private static final int MINHALF_PTR = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define MINHALF_PTR -2147483648
     * }
     */
    public static int MINHALF_PTR() {
        return MINHALF_PTR;
    }
    private static final byte MAXUINT8 = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT8 255
     * }
     */
    public static byte MAXUINT8() {
        return MAXUINT8;
    }
    private static final byte MAXINT8 = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define MAXINT8 127
     * }
     */
    public static byte MAXINT8() {
        return MAXINT8;
    }
    private static final byte MININT8 = (byte)-128L;
    /**
     * {@snippet lang=c :
     * #define MININT8 -128
     * }
     */
    public static byte MININT8() {
        return MININT8;
    }
    private static final short MAXUINT16 = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT16 65535
     * }
     */
    public static short MAXUINT16() {
        return MAXUINT16;
    }
    private static final short MAXINT16 = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define MAXINT16 32767
     * }
     */
    public static short MAXINT16() {
        return MAXINT16;
    }
    private static final short MININT16 = (short)-32768L;
    /**
     * {@snippet lang=c :
     * #define MININT16 -32768
     * }
     */
    public static short MININT16() {
        return MININT16;
    }
    private static final int MAXUINT32 = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT32 4294967295
     * }
     */
    public static int MAXUINT32() {
        return MAXUINT32;
    }
    private static final int MAXINT32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define MAXINT32 2147483647
     * }
     */
    public static int MAXINT32() {
        return MAXINT32;
    }
    private static final int MININT32 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define MININT32 -2147483648
     * }
     */
    public static int MININT32() {
        return MININT32;
    }
    private static final long MAXUINT64 = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT64 -1
     * }
     */
    public static long MAXUINT64() {
        return MAXUINT64;
    }
    private static final long MAXINT64 = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXINT64 9223372036854775807
     * }
     */
    public static long MAXINT64() {
        return MAXINT64;
    }
    private static final long MININT64 = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MININT64 -9223372036854775808
     * }
     */
    public static long MININT64() {
        return MININT64;
    }
    private static final int MAXULONG32 = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXULONG32 4294967295
     * }
     */
    public static int MAXULONG32() {
        return MAXULONG32;
    }
    private static final int MAXLONG32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define MAXLONG32 2147483647
     * }
     */
    public static int MAXLONG32() {
        return MAXLONG32;
    }
    private static final int MINLONG32 = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define MINLONG32 -2147483648
     * }
     */
    public static int MINLONG32() {
        return MINLONG32;
    }
    private static final long MAXULONG64 = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXULONG64 -1
     * }
     */
    public static long MAXULONG64() {
        return MAXULONG64;
    }
    private static final long MAXLONG64 = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXLONG64 9223372036854775807
     * }
     */
    public static long MAXLONG64() {
        return MAXLONG64;
    }
    private static final long MINLONG64 = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MINLONG64 -9223372036854775808
     * }
     */
    public static long MINLONG64() {
        return MINLONG64;
    }
    private static final long MAXULONGLONG = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXULONGLONG -1
     * }
     */
    public static long MAXULONGLONG() {
        return MAXULONGLONG;
    }
    private static final long MINLONGLONG = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MINLONGLONG -9223372036854775808
     * }
     */
    public static long MINLONGLONG() {
        return MINLONGLONG;
    }
    private static final long MAXSIZE_T = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXSIZE_T -1
     * }
     */
    public static long MAXSIZE_T() {
        return MAXSIZE_T;
    }
    private static final long MAXSSIZE_T = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXSSIZE_T 9223372036854775807
     * }
     */
    public static long MAXSSIZE_T() {
        return MAXSSIZE_T;
    }
    private static final long MINSSIZE_T = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MINSSIZE_T -9223372036854775808
     * }
     */
    public static long MINSSIZE_T() {
        return MINSSIZE_T;
    }
    private static final int MAXUINT = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXUINT 4294967295
     * }
     */
    public static int MAXUINT() {
        return MAXUINT;
    }
    private static final int MAXINT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define MAXINT 2147483647
     * }
     */
    public static int MAXINT() {
        return MAXINT;
    }
    private static final int MININT = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define MININT -2147483648
     * }
     */
    public static int MININT() {
        return MININT;
    }
    private static final int MAXDWORD32 = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXDWORD32 4294967295
     * }
     */
    public static int MAXDWORD32() {
        return MAXDWORD32;
    }
    private static final long MAXDWORD64 = -1L;
    /**
     * {@snippet lang=c :
     * #define MAXDWORD64 -1
     * }
     */
    public static long MAXDWORD64() {
        return MAXDWORD64;
    }
    private static final int SYSTEM_CACHE_ALIGNMENT_SIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_CACHE_ALIGNMENT_SIZE 64
     * }
     */
    public static int SYSTEM_CACHE_ALIGNMENT_SIZE() {
        return SYSTEM_CACHE_ALIGNMENT_SIZE;
    }
    private static final int UCSCHAR_INVALID_CHARACTER = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UCSCHAR_INVALID_CHARACTER 4294967295
     * }
     */
    public static int UCSCHAR_INVALID_CHARACTER() {
        return UCSCHAR_INVALID_CHARACTER;
    }
    private static final int MIN_UCSCHAR = (int)0L;
    /**
     * {@snippet lang=c :
     * #define MIN_UCSCHAR 0
     * }
     */
    public static int MIN_UCSCHAR() {
        return MIN_UCSCHAR;
    }
    private static final int MAX_UCSCHAR = (int)1114111L;
    /**
     * {@snippet lang=c :
     * #define MAX_UCSCHAR 1114111
     * }
     */
    public static int MAX_UCSCHAR() {
        return MAX_UCSCHAR;
    }
    private static final int MAXIMUM_PROCESSORS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define MAXIMUM_PROCESSORS 64
     * }
     */
    public static int MAXIMUM_PROCESSORS() {
        return MAXIMUM_PROCESSORS;
    }
    private static final int ERROR_SEVERITY_WARNING = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define ERROR_SEVERITY_WARNING 2147483648
     * }
     */
    public static int ERROR_SEVERITY_WARNING() {
        return ERROR_SEVERITY_WARNING;
    }
    private static final int ERROR_SEVERITY_ERROR = (int)3221225472L;
    /**
     * {@snippet lang=c :
     * #define ERROR_SEVERITY_ERROR 3221225472
     * }
     */
    public static int ERROR_SEVERITY_ERROR() {
        return ERROR_SEVERITY_ERROR;
    }
    private static final long MAXLONGLONG = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define MAXLONGLONG 9223372036854775807
     * }
     */
    public static long MAXLONGLONG() {
        return MAXLONGLONG;
    }
    private static final byte ANSI_NULL = (byte)0L;
    /**
     * {@snippet lang=c :
     * #define ANSI_NULL 0
     * }
     */
    public static byte ANSI_NULL() {
        return ANSI_NULL;
    }
    private static final short UNICODE_NULL = (short)0L;
    /**
     * {@snippet lang=c :
     * #define UNICODE_NULL 0
     * }
     */
    public static short UNICODE_NULL() {
        return UNICODE_NULL;
    }
    private static final short UNICODE_STRING_MAX_BYTES = (short)65534L;
    /**
     * {@snippet lang=c :
     * #define UNICODE_STRING_MAX_BYTES 65534
     * }
     */
    public static short UNICODE_STRING_MAX_BYTES() {
        return UNICODE_STRING_MAX_BYTES;
    }
    private static final int UNICODE_STRING_MAX_CHARS = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define UNICODE_STRING_MAX_CHARS 32767
     * }
     */
    public static int UNICODE_STRING_MAX_CHARS() {
        return UNICODE_STRING_MAX_CHARS;
    }
    private static final int EDEADLOCK = (int)36L;
    /**
     * {@snippet lang=c :
     * #define EDEADLOCK 36
     * }
     */
    public static int EDEADLOCK() {
        return EDEADLOCK;
    }
    private static final int _NLSCMPERROR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define _NLSCMPERROR 2147483647
     * }
     */
    public static int _NLSCMPERROR() {
        return _NLSCMPERROR;
    }
    private static final int MINLONG = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define MINLONG 2147483648
     * }
     */
    public static int MINLONG() {
        return MINLONG;
    }
    private static final int MAXDWORD = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAXDWORD 4294967295
     * }
     */
    public static int MAXDWORD() {
        return MAXDWORD;
    }
    private static final int VER_SERVER_NT = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define VER_SERVER_NT 2147483648
     * }
     */
    public static int VER_SERVER_NT() {
        return VER_SERVER_NT;
    }
    private static final int PRODUCT_UNLICENSED = (int)2882382797L;
    /**
     * {@snippet lang=c :
     * #define PRODUCT_UNLICENSED 2882382797
     * }
     */
    public static int PRODUCT_UNLICENSED() {
        return PRODUCT_UNLICENSED;
    }
    private static final int LANG_SYSTEM_DEFAULT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LANG_SYSTEM_DEFAULT 2048
     * }
     */
    public static int LANG_SYSTEM_DEFAULT() {
        return LANG_SYSTEM_DEFAULT;
    }
    private static final int LANG_USER_DEFAULT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define LANG_USER_DEFAULT 1024
     * }
     */
    public static int LANG_USER_DEFAULT() {
        return LANG_USER_DEFAULT;
    }
    private static final int LOCALE_SYSTEM_DEFAULT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_SYSTEM_DEFAULT 2048
     * }
     */
    public static int LOCALE_SYSTEM_DEFAULT() {
        return LOCALE_SYSTEM_DEFAULT;
    }
    private static final int LOCALE_USER_DEFAULT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_USER_DEFAULT 1024
     * }
     */
    public static int LOCALE_USER_DEFAULT() {
        return LOCALE_USER_DEFAULT;
    }
    private static final int LOCALE_CUSTOM_DEFAULT = (int)3072L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_CUSTOM_DEFAULT 3072
     * }
     */
    public static int LOCALE_CUSTOM_DEFAULT() {
        return LOCALE_CUSTOM_DEFAULT;
    }
    private static final int LOCALE_CUSTOM_UNSPECIFIED = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_CUSTOM_UNSPECIFIED 4096
     * }
     */
    public static int LOCALE_CUSTOM_UNSPECIFIED() {
        return LOCALE_CUSTOM_UNSPECIFIED;
    }
    private static final int LOCALE_CUSTOM_UI_DEFAULT = (int)5120L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_CUSTOM_UI_DEFAULT 5120
     * }
     */
    public static int LOCALE_CUSTOM_UI_DEFAULT() {
        return LOCALE_CUSTOM_UI_DEFAULT;
    }
    private static final int LOCALE_NEUTRAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_NEUTRAL 0
     * }
     */
    public static int LOCALE_NEUTRAL() {
        return LOCALE_NEUTRAL;
    }
    private static final int LOCALE_INVARIANT = (int)127L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_INVARIANT 127
     * }
     */
    public static int LOCALE_INVARIANT() {
        return LOCALE_INVARIANT;
    }
    private static final int LOCALE_UNASSIGNED_LCID = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define LOCALE_UNASSIGNED_LCID 4096
     * }
     */
    public static int LOCALE_UNASSIGNED_LCID() {
        return LOCALE_UNASSIGNED_LCID;
    }
    private static final int STATUS_WAIT_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define STATUS_WAIT_0 0
     * }
     */
    public static int STATUS_WAIT_0() {
        return STATUS_WAIT_0;
    }
    private static final int STATUS_ABANDONED_WAIT_0 = (int)128L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ABANDONED_WAIT_0 128
     * }
     */
    public static int STATUS_ABANDONED_WAIT_0() {
        return STATUS_ABANDONED_WAIT_0;
    }
    private static final int STATUS_USER_APC = (int)192L;
    /**
     * {@snippet lang=c :
     * #define STATUS_USER_APC 192
     * }
     */
    public static int STATUS_USER_APC() {
        return STATUS_USER_APC;
    }
    private static final int STATUS_TIMEOUT = (int)258L;
    /**
     * {@snippet lang=c :
     * #define STATUS_TIMEOUT 258
     * }
     */
    public static int STATUS_TIMEOUT() {
        return STATUS_TIMEOUT;
    }
    private static final int STATUS_PENDING = (int)259L;
    /**
     * {@snippet lang=c :
     * #define STATUS_PENDING 259
     * }
     */
    public static int STATUS_PENDING() {
        return STATUS_PENDING;
    }
    private static final int DBG_EXCEPTION_HANDLED = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define DBG_EXCEPTION_HANDLED 65537
     * }
     */
    public static int DBG_EXCEPTION_HANDLED() {
        return DBG_EXCEPTION_HANDLED;
    }
    private static final int DBG_CONTINUE = (int)65538L;
    /**
     * {@snippet lang=c :
     * #define DBG_CONTINUE 65538
     * }
     */
    public static int DBG_CONTINUE() {
        return DBG_CONTINUE;
    }
    private static final int STATUS_SEGMENT_NOTIFICATION = (int)1073741829L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SEGMENT_NOTIFICATION 1073741829
     * }
     */
    public static int STATUS_SEGMENT_NOTIFICATION() {
        return STATUS_SEGMENT_NOTIFICATION;
    }
    private static final int STATUS_FATAL_APP_EXIT = (int)1073741845L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FATAL_APP_EXIT 1073741845
     * }
     */
    public static int STATUS_FATAL_APP_EXIT() {
        return STATUS_FATAL_APP_EXIT;
    }
    private static final int DBG_REPLY_LATER = (int)1073807361L;
    /**
     * {@snippet lang=c :
     * #define DBG_REPLY_LATER 1073807361
     * }
     */
    public static int DBG_REPLY_LATER() {
        return DBG_REPLY_LATER;
    }
    private static final int DBG_TERMINATE_THREAD = (int)1073807363L;
    /**
     * {@snippet lang=c :
     * #define DBG_TERMINATE_THREAD 1073807363
     * }
     */
    public static int DBG_TERMINATE_THREAD() {
        return DBG_TERMINATE_THREAD;
    }
    private static final int DBG_TERMINATE_PROCESS = (int)1073807364L;
    /**
     * {@snippet lang=c :
     * #define DBG_TERMINATE_PROCESS 1073807364
     * }
     */
    public static int DBG_TERMINATE_PROCESS() {
        return DBG_TERMINATE_PROCESS;
    }
    private static final int DBG_CONTROL_C = (int)1073807365L;
    /**
     * {@snippet lang=c :
     * #define DBG_CONTROL_C 1073807365
     * }
     */
    public static int DBG_CONTROL_C() {
        return DBG_CONTROL_C;
    }
    private static final int DBG_PRINTEXCEPTION_C = (int)1073807366L;
    /**
     * {@snippet lang=c :
     * #define DBG_PRINTEXCEPTION_C 1073807366
     * }
     */
    public static int DBG_PRINTEXCEPTION_C() {
        return DBG_PRINTEXCEPTION_C;
    }
    private static final int DBG_RIPEXCEPTION = (int)1073807367L;
    /**
     * {@snippet lang=c :
     * #define DBG_RIPEXCEPTION 1073807367
     * }
     */
    public static int DBG_RIPEXCEPTION() {
        return DBG_RIPEXCEPTION;
    }
    private static final int DBG_CONTROL_BREAK = (int)1073807368L;
    /**
     * {@snippet lang=c :
     * #define DBG_CONTROL_BREAK 1073807368
     * }
     */
    public static int DBG_CONTROL_BREAK() {
        return DBG_CONTROL_BREAK;
    }
    private static final int DBG_COMMAND_EXCEPTION = (int)1073807369L;
    /**
     * {@snippet lang=c :
     * #define DBG_COMMAND_EXCEPTION 1073807369
     * }
     */
    public static int DBG_COMMAND_EXCEPTION() {
        return DBG_COMMAND_EXCEPTION;
    }
    private static final int DBG_PRINTEXCEPTION_WIDE_C = (int)1073807370L;
    /**
     * {@snippet lang=c :
     * #define DBG_PRINTEXCEPTION_WIDE_C 1073807370
     * }
     */
    public static int DBG_PRINTEXCEPTION_WIDE_C() {
        return DBG_PRINTEXCEPTION_WIDE_C;
    }
    private static final int STATUS_GUARD_PAGE_VIOLATION = (int)2147483649L;
    /**
     * {@snippet lang=c :
     * #define STATUS_GUARD_PAGE_VIOLATION 2147483649
     * }
     */
    public static int STATUS_GUARD_PAGE_VIOLATION() {
        return STATUS_GUARD_PAGE_VIOLATION;
    }
    private static final int STATUS_DATATYPE_MISALIGNMENT = (int)2147483650L;
    /**
     * {@snippet lang=c :
     * #define STATUS_DATATYPE_MISALIGNMENT 2147483650
     * }
     */
    public static int STATUS_DATATYPE_MISALIGNMENT() {
        return STATUS_DATATYPE_MISALIGNMENT;
    }
    private static final int STATUS_BREAKPOINT = (int)2147483651L;
    /**
     * {@snippet lang=c :
     * #define STATUS_BREAKPOINT 2147483651
     * }
     */
    public static int STATUS_BREAKPOINT() {
        return STATUS_BREAKPOINT;
    }
    private static final int STATUS_SINGLE_STEP = (int)2147483652L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SINGLE_STEP 2147483652
     * }
     */
    public static int STATUS_SINGLE_STEP() {
        return STATUS_SINGLE_STEP;
    }
    private static final int STATUS_LONGJUMP = (int)2147483686L;
    /**
     * {@snippet lang=c :
     * #define STATUS_LONGJUMP 2147483686
     * }
     */
    public static int STATUS_LONGJUMP() {
        return STATUS_LONGJUMP;
    }
    private static final int STATUS_UNWIND_CONSOLIDATE = (int)2147483689L;
    /**
     * {@snippet lang=c :
     * #define STATUS_UNWIND_CONSOLIDATE 2147483689
     * }
     */
    public static int STATUS_UNWIND_CONSOLIDATE() {
        return STATUS_UNWIND_CONSOLIDATE;
    }
    private static final int DBG_EXCEPTION_NOT_HANDLED = (int)2147549185L;
    /**
     * {@snippet lang=c :
     * #define DBG_EXCEPTION_NOT_HANDLED 2147549185
     * }
     */
    public static int DBG_EXCEPTION_NOT_HANDLED() {
        return DBG_EXCEPTION_NOT_HANDLED;
    }
    private static final int STATUS_ACCESS_VIOLATION = (int)3221225477L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ACCESS_VIOLATION 3221225477
     * }
     */
    public static int STATUS_ACCESS_VIOLATION() {
        return STATUS_ACCESS_VIOLATION;
    }
    private static final int STATUS_IN_PAGE_ERROR = (int)3221225478L;
    /**
     * {@snippet lang=c :
     * #define STATUS_IN_PAGE_ERROR 3221225478
     * }
     */
    public static int STATUS_IN_PAGE_ERROR() {
        return STATUS_IN_PAGE_ERROR;
    }
    private static final int STATUS_INVALID_HANDLE = (int)3221225480L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INVALID_HANDLE 3221225480
     * }
     */
    public static int STATUS_INVALID_HANDLE() {
        return STATUS_INVALID_HANDLE;
    }
    private static final int STATUS_INVALID_PARAMETER = (int)3221225485L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INVALID_PARAMETER 3221225485
     * }
     */
    public static int STATUS_INVALID_PARAMETER() {
        return STATUS_INVALID_PARAMETER;
    }
    private static final int STATUS_NO_MEMORY = (int)3221225495L;
    /**
     * {@snippet lang=c :
     * #define STATUS_NO_MEMORY 3221225495
     * }
     */
    public static int STATUS_NO_MEMORY() {
        return STATUS_NO_MEMORY;
    }
    private static final int STATUS_ILLEGAL_INSTRUCTION = (int)3221225501L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ILLEGAL_INSTRUCTION 3221225501
     * }
     */
    public static int STATUS_ILLEGAL_INSTRUCTION() {
        return STATUS_ILLEGAL_INSTRUCTION;
    }
    private static final int STATUS_NONCONTINUABLE_EXCEPTION = (int)3221225509L;
    /**
     * {@snippet lang=c :
     * #define STATUS_NONCONTINUABLE_EXCEPTION 3221225509
     * }
     */
    public static int STATUS_NONCONTINUABLE_EXCEPTION() {
        return STATUS_NONCONTINUABLE_EXCEPTION;
    }
    private static final int STATUS_INVALID_DISPOSITION = (int)3221225510L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INVALID_DISPOSITION 3221225510
     * }
     */
    public static int STATUS_INVALID_DISPOSITION() {
        return STATUS_INVALID_DISPOSITION;
    }
    private static final int STATUS_ARRAY_BOUNDS_EXCEEDED = (int)3221225612L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ARRAY_BOUNDS_EXCEEDED 3221225612
     * }
     */
    public static int STATUS_ARRAY_BOUNDS_EXCEEDED() {
        return STATUS_ARRAY_BOUNDS_EXCEEDED;
    }
    private static final int STATUS_FLOAT_DENORMAL_OPERAND = (int)3221225613L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_DENORMAL_OPERAND 3221225613
     * }
     */
    public static int STATUS_FLOAT_DENORMAL_OPERAND() {
        return STATUS_FLOAT_DENORMAL_OPERAND;
    }
    private static final int STATUS_FLOAT_DIVIDE_BY_ZERO = (int)3221225614L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_DIVIDE_BY_ZERO 3221225614
     * }
     */
    public static int STATUS_FLOAT_DIVIDE_BY_ZERO() {
        return STATUS_FLOAT_DIVIDE_BY_ZERO;
    }
    private static final int STATUS_FLOAT_INEXACT_RESULT = (int)3221225615L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_INEXACT_RESULT 3221225615
     * }
     */
    public static int STATUS_FLOAT_INEXACT_RESULT() {
        return STATUS_FLOAT_INEXACT_RESULT;
    }
    private static final int STATUS_FLOAT_INVALID_OPERATION = (int)3221225616L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_INVALID_OPERATION 3221225616
     * }
     */
    public static int STATUS_FLOAT_INVALID_OPERATION() {
        return STATUS_FLOAT_INVALID_OPERATION;
    }
    private static final int STATUS_FLOAT_OVERFLOW = (int)3221225617L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_OVERFLOW 3221225617
     * }
     */
    public static int STATUS_FLOAT_OVERFLOW() {
        return STATUS_FLOAT_OVERFLOW;
    }
    private static final int STATUS_FLOAT_STACK_CHECK = (int)3221225618L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_STACK_CHECK 3221225618
     * }
     */
    public static int STATUS_FLOAT_STACK_CHECK() {
        return STATUS_FLOAT_STACK_CHECK;
    }
    private static final int STATUS_FLOAT_UNDERFLOW = (int)3221225619L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_UNDERFLOW 3221225619
     * }
     */
    public static int STATUS_FLOAT_UNDERFLOW() {
        return STATUS_FLOAT_UNDERFLOW;
    }
    private static final int STATUS_INTEGER_DIVIDE_BY_ZERO = (int)3221225620L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INTEGER_DIVIDE_BY_ZERO 3221225620
     * }
     */
    public static int STATUS_INTEGER_DIVIDE_BY_ZERO() {
        return STATUS_INTEGER_DIVIDE_BY_ZERO;
    }
    private static final int STATUS_INTEGER_OVERFLOW = (int)3221225621L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INTEGER_OVERFLOW 3221225621
     * }
     */
    public static int STATUS_INTEGER_OVERFLOW() {
        return STATUS_INTEGER_OVERFLOW;
    }
    private static final int STATUS_PRIVILEGED_INSTRUCTION = (int)3221225622L;
    /**
     * {@snippet lang=c :
     * #define STATUS_PRIVILEGED_INSTRUCTION 3221225622
     * }
     */
    public static int STATUS_PRIVILEGED_INSTRUCTION() {
        return STATUS_PRIVILEGED_INSTRUCTION;
    }
    private static final int STATUS_STACK_OVERFLOW = (int)3221225725L;
    /**
     * {@snippet lang=c :
     * #define STATUS_STACK_OVERFLOW 3221225725
     * }
     */
    public static int STATUS_STACK_OVERFLOW() {
        return STATUS_STACK_OVERFLOW;
    }
    private static final int STATUS_DLL_NOT_FOUND = (int)3221225781L;
    /**
     * {@snippet lang=c :
     * #define STATUS_DLL_NOT_FOUND 3221225781
     * }
     */
    public static int STATUS_DLL_NOT_FOUND() {
        return STATUS_DLL_NOT_FOUND;
    }
    private static final int STATUS_ORDINAL_NOT_FOUND = (int)3221225784L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ORDINAL_NOT_FOUND 3221225784
     * }
     */
    public static int STATUS_ORDINAL_NOT_FOUND() {
        return STATUS_ORDINAL_NOT_FOUND;
    }
    private static final int STATUS_ENTRYPOINT_NOT_FOUND = (int)3221225785L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ENTRYPOINT_NOT_FOUND 3221225785
     * }
     */
    public static int STATUS_ENTRYPOINT_NOT_FOUND() {
        return STATUS_ENTRYPOINT_NOT_FOUND;
    }
    private static final int STATUS_CONTROL_C_EXIT = (int)3221225786L;
    /**
     * {@snippet lang=c :
     * #define STATUS_CONTROL_C_EXIT 3221225786
     * }
     */
    public static int STATUS_CONTROL_C_EXIT() {
        return STATUS_CONTROL_C_EXIT;
    }
    private static final int STATUS_DLL_INIT_FAILED = (int)3221225794L;
    /**
     * {@snippet lang=c :
     * #define STATUS_DLL_INIT_FAILED 3221225794
     * }
     */
    public static int STATUS_DLL_INIT_FAILED() {
        return STATUS_DLL_INIT_FAILED;
    }
    private static final int STATUS_CONTROL_STACK_VIOLATION = (int)3221225906L;
    /**
     * {@snippet lang=c :
     * #define STATUS_CONTROL_STACK_VIOLATION 3221225906
     * }
     */
    public static int STATUS_CONTROL_STACK_VIOLATION() {
        return STATUS_CONTROL_STACK_VIOLATION;
    }
    private static final int STATUS_FLOAT_MULTIPLE_FAULTS = (int)3221226164L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_MULTIPLE_FAULTS 3221226164
     * }
     */
    public static int STATUS_FLOAT_MULTIPLE_FAULTS() {
        return STATUS_FLOAT_MULTIPLE_FAULTS;
    }
    private static final int STATUS_FLOAT_MULTIPLE_TRAPS = (int)3221226165L;
    /**
     * {@snippet lang=c :
     * #define STATUS_FLOAT_MULTIPLE_TRAPS 3221226165
     * }
     */
    public static int STATUS_FLOAT_MULTIPLE_TRAPS() {
        return STATUS_FLOAT_MULTIPLE_TRAPS;
    }
    private static final int STATUS_REG_NAT_CONSUMPTION = (int)3221226185L;
    /**
     * {@snippet lang=c :
     * #define STATUS_REG_NAT_CONSUMPTION 3221226185
     * }
     */
    public static int STATUS_REG_NAT_CONSUMPTION() {
        return STATUS_REG_NAT_CONSUMPTION;
    }
    private static final int STATUS_HEAP_CORRUPTION = (int)3221226356L;
    /**
     * {@snippet lang=c :
     * #define STATUS_HEAP_CORRUPTION 3221226356
     * }
     */
    public static int STATUS_HEAP_CORRUPTION() {
        return STATUS_HEAP_CORRUPTION;
    }
    private static final int STATUS_STACK_BUFFER_OVERRUN = (int)3221226505L;
    /**
     * {@snippet lang=c :
     * #define STATUS_STACK_BUFFER_OVERRUN 3221226505
     * }
     */
    public static int STATUS_STACK_BUFFER_OVERRUN() {
        return STATUS_STACK_BUFFER_OVERRUN;
    }
    private static final int STATUS_INVALID_CRUNTIME_PARAMETER = (int)3221226519L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INVALID_CRUNTIME_PARAMETER 3221226519
     * }
     */
    public static int STATUS_INVALID_CRUNTIME_PARAMETER() {
        return STATUS_INVALID_CRUNTIME_PARAMETER;
    }
    private static final int STATUS_ASSERTION_FAILURE = (int)3221226528L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ASSERTION_FAILURE 3221226528
     * }
     */
    public static int STATUS_ASSERTION_FAILURE() {
        return STATUS_ASSERTION_FAILURE;
    }
    private static final int STATUS_ENCLAVE_VIOLATION = (int)3221226658L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ENCLAVE_VIOLATION 3221226658
     * }
     */
    public static int STATUS_ENCLAVE_VIOLATION() {
        return STATUS_ENCLAVE_VIOLATION;
    }
    private static final int STATUS_INTERRUPTED = (int)3221226773L;
    /**
     * {@snippet lang=c :
     * #define STATUS_INTERRUPTED 3221226773
     * }
     */
    public static int STATUS_INTERRUPTED() {
        return STATUS_INTERRUPTED;
    }
    private static final int STATUS_THREAD_NOT_RUNNING = (int)3221226774L;
    /**
     * {@snippet lang=c :
     * #define STATUS_THREAD_NOT_RUNNING 3221226774
     * }
     */
    public static int STATUS_THREAD_NOT_RUNNING() {
        return STATUS_THREAD_NOT_RUNNING;
    }
    private static final int STATUS_ALREADY_REGISTERED = (int)3221227288L;
    /**
     * {@snippet lang=c :
     * #define STATUS_ALREADY_REGISTERED 3221227288
     * }
     */
    public static int STATUS_ALREADY_REGISTERED() {
        return STATUS_ALREADY_REGISTERED;
    }
    private static final int STATUS_SXS_EARLY_DEACTIVATION = (int)3222601743L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SXS_EARLY_DEACTIVATION 3222601743
     * }
     */
    public static int STATUS_SXS_EARLY_DEACTIVATION() {
        return STATUS_SXS_EARLY_DEACTIVATION;
    }
    private static final int STATUS_SXS_INVALID_DEACTIVATION = (int)3222601744L;
    /**
     * {@snippet lang=c :
     * #define STATUS_SXS_INVALID_DEACTIVATION 3222601744
     * }
     */
    public static int STATUS_SXS_INVALID_DEACTIVATION() {
        return STATUS_SXS_INVALID_DEACTIVATION;
    }
    private static final int MAXIMUM_SUSPEND_COUNT = (int)127L;
    /**
     * {@snippet lang=c :
     * #define MAXIMUM_SUSPEND_COUNT 127
     * }
     */
    public static int MAXIMUM_SUSPEND_COUNT() {
        return MAXIMUM_SUSPEND_COUNT;
    }
    private static final int PF_TEMPORAL_LEVEL_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PF_TEMPORAL_LEVEL_1 1
     * }
     */
    public static int PF_TEMPORAL_LEVEL_1() {
        return PF_TEMPORAL_LEVEL_1;
    }
    private static final int PF_TEMPORAL_LEVEL_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PF_TEMPORAL_LEVEL_2 2
     * }
     */
    public static int PF_TEMPORAL_LEVEL_2() {
        return PF_TEMPORAL_LEVEL_2;
    }
    private static final int PF_TEMPORAL_LEVEL_3 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PF_TEMPORAL_LEVEL_3 3
     * }
     */
    public static int PF_TEMPORAL_LEVEL_3() {
        return PF_TEMPORAL_LEVEL_3;
    }
    private static final int PF_NON_TEMPORAL_LEVEL_ALL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define PF_NON_TEMPORAL_LEVEL_ALL 0
     * }
     */
    public static int PF_NON_TEMPORAL_LEVEL_ALL() {
        return PF_NON_TEMPORAL_LEVEL_ALL;
    }
    private static final int CONTEXT_AMD64 = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_AMD64 1048576
     * }
     */
    public static int CONTEXT_AMD64() {
        return CONTEXT_AMD64;
    }
    private static final int CONTEXT_CONTROL = (int)1048577L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_CONTROL 1048577
     * }
     */
    public static int CONTEXT_CONTROL() {
        return CONTEXT_CONTROL;
    }
    private static final int CONTEXT_INTEGER = (int)1048578L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_INTEGER 1048578
     * }
     */
    public static int CONTEXT_INTEGER() {
        return CONTEXT_INTEGER;
    }
    private static final int CONTEXT_SEGMENTS = (int)1048580L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_SEGMENTS 1048580
     * }
     */
    public static int CONTEXT_SEGMENTS() {
        return CONTEXT_SEGMENTS;
    }
    private static final int CONTEXT_FLOATING_POINT = (int)1048584L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_FLOATING_POINT 1048584
     * }
     */
    public static int CONTEXT_FLOATING_POINT() {
        return CONTEXT_FLOATING_POINT;
    }
    private static final int CONTEXT_DEBUG_REGISTERS = (int)1048592L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_DEBUG_REGISTERS 1048592
     * }
     */
    public static int CONTEXT_DEBUG_REGISTERS() {
        return CONTEXT_DEBUG_REGISTERS;
    }
    private static final int CONTEXT_FULL = (int)1048587L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_FULL 1048587
     * }
     */
    public static int CONTEXT_FULL() {
        return CONTEXT_FULL;
    }
    private static final int CONTEXT_ALL = (int)1048607L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ALL 1048607
     * }
     */
    public static int CONTEXT_ALL() {
        return CONTEXT_ALL;
    }
    private static final int CONTEXT_XSTATE = (int)1048640L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_XSTATE 1048640
     * }
     */
    public static int CONTEXT_XSTATE() {
        return CONTEXT_XSTATE;
    }
    private static final int CONTEXT_KERNEL_CET = (int)1048704L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_KERNEL_CET 1048704
     * }
     */
    public static int CONTEXT_KERNEL_CET() {
        return CONTEXT_KERNEL_CET;
    }
    private static final int CONTEXT_EXCEPTION_ACTIVE = (int)134217728L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_EXCEPTION_ACTIVE 134217728
     * }
     */
    public static int CONTEXT_EXCEPTION_ACTIVE() {
        return CONTEXT_EXCEPTION_ACTIVE;
    }
    private static final int CONTEXT_SERVICE_ACTIVE = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_SERVICE_ACTIVE 268435456
     * }
     */
    public static int CONTEXT_SERVICE_ACTIVE() {
        return CONTEXT_SERVICE_ACTIVE;
    }
    private static final int CONTEXT_EXCEPTION_REQUEST = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_EXCEPTION_REQUEST 1073741824
     * }
     */
    public static int CONTEXT_EXCEPTION_REQUEST() {
        return CONTEXT_EXCEPTION_REQUEST;
    }
    private static final int CONTEXT_EXCEPTION_REPORTING = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_EXCEPTION_REPORTING 2147483648
     * }
     */
    public static int CONTEXT_EXCEPTION_REPORTING() {
        return CONTEXT_EXCEPTION_REPORTING;
    }
    private static final int UNW_FLAG_NO_EPILOGUE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define UNW_FLAG_NO_EPILOGUE 2147483648
     * }
     */
    public static int UNW_FLAG_NO_EPILOGUE() {
        return UNW_FLAG_NO_EPILOGUE;
    }
    /**
     * {@snippet lang=c :
     * #define OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME "OutOfProcessFunctionTableCallback"
     * }
     */
    public static MemorySegment OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME() {
        class Holder {
            static final MemorySegment OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("OutOfProcessFunctionTableCallback");
        }
        return Holder.OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME;
    }
    private static final int CONTEXT_ARM64 = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64 4194304
     * }
     */
    public static int CONTEXT_ARM64() {
        return CONTEXT_ARM64;
    }
    private static final int CONTEXT_ARM64_CONTROL = (int)4194305L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_CONTROL 4194305
     * }
     */
    public static int CONTEXT_ARM64_CONTROL() {
        return CONTEXT_ARM64_CONTROL;
    }
    private static final int CONTEXT_ARM64_INTEGER = (int)4194306L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_INTEGER 4194306
     * }
     */
    public static int CONTEXT_ARM64_INTEGER() {
        return CONTEXT_ARM64_INTEGER;
    }
    private static final int CONTEXT_ARM64_FLOATING_POINT = (int)4194308L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_FLOATING_POINT 4194308
     * }
     */
    public static int CONTEXT_ARM64_FLOATING_POINT() {
        return CONTEXT_ARM64_FLOATING_POINT;
    }
    private static final int CONTEXT_ARM64_DEBUG_REGISTERS = (int)4194312L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_DEBUG_REGISTERS 4194312
     * }
     */
    public static int CONTEXT_ARM64_DEBUG_REGISTERS() {
        return CONTEXT_ARM64_DEBUG_REGISTERS;
    }
    private static final int CONTEXT_ARM64_X18 = (int)4194320L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_X18 4194320
     * }
     */
    public static int CONTEXT_ARM64_X18() {
        return CONTEXT_ARM64_X18;
    }
    private static final int CONTEXT_ARM64_XSTATE = (int)4194336L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_XSTATE 4194336
     * }
     */
    public static int CONTEXT_ARM64_XSTATE() {
        return CONTEXT_ARM64_XSTATE;
    }
    private static final int CONTEXT_ARM64_FULL = (int)4194311L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_FULL 4194311
     * }
     */
    public static int CONTEXT_ARM64_FULL() {
        return CONTEXT_ARM64_FULL;
    }
    private static final int CONTEXT_ARM64_ALL = (int)4194335L;
    /**
     * {@snippet lang=c :
     * #define CONTEXT_ARM64_ALL 4194335
     * }
     */
    public static int CONTEXT_ARM64_ALL() {
        return CONTEXT_ARM64_ALL;
    }
    private static final int NONVOL_INT_NUMREG_ARM64 = (int)11L;
    /**
     * {@snippet lang=c :
     * #define NONVOL_INT_NUMREG_ARM64 11
     * }
     */
    public static int NONVOL_INT_NUMREG_ARM64() {
        return NONVOL_INT_NUMREG_ARM64;
    }
    private static final int NONVOL_FP_NUMREG_ARM64 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define NONVOL_FP_NUMREG_ARM64 8
     * }
     */
    public static int NONVOL_FP_NUMREG_ARM64() {
        return NONVOL_FP_NUMREG_ARM64;
    }
    private static final long NONVOL_INT_SIZE_ARM64 = 88L;
    /**
     * {@snippet lang=c :
     * #define NONVOL_INT_SIZE_ARM64 88
     * }
     */
    public static long NONVOL_INT_SIZE_ARM64() {
        return NONVOL_INT_SIZE_ARM64;
    }
    private static final long NONVOL_FP_SIZE_ARM64 = 64L;
    /**
     * {@snippet lang=c :
     * #define NONVOL_FP_SIZE_ARM64 64
     * }
     */
    public static long NONVOL_FP_SIZE_ARM64() {
        return NONVOL_FP_SIZE_ARM64;
    }
    private static final int WOW64_CONTEXT_CONTROL = (int)65537L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_CONTROL 65537
     * }
     */
    public static int WOW64_CONTEXT_CONTROL() {
        return WOW64_CONTEXT_CONTROL;
    }
    private static final int WOW64_CONTEXT_INTEGER = (int)65538L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_INTEGER 65538
     * }
     */
    public static int WOW64_CONTEXT_INTEGER() {
        return WOW64_CONTEXT_INTEGER;
    }
    private static final int WOW64_CONTEXT_SEGMENTS = (int)65540L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_SEGMENTS 65540
     * }
     */
    public static int WOW64_CONTEXT_SEGMENTS() {
        return WOW64_CONTEXT_SEGMENTS;
    }
    private static final int WOW64_CONTEXT_FLOATING_POINT = (int)65544L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_FLOATING_POINT 65544
     * }
     */
    public static int WOW64_CONTEXT_FLOATING_POINT() {
        return WOW64_CONTEXT_FLOATING_POINT;
    }
    private static final int WOW64_CONTEXT_DEBUG_REGISTERS = (int)65552L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_DEBUG_REGISTERS 65552
     * }
     */
    public static int WOW64_CONTEXT_DEBUG_REGISTERS() {
        return WOW64_CONTEXT_DEBUG_REGISTERS;
    }
    private static final int WOW64_CONTEXT_EXTENDED_REGISTERS = (int)65568L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_EXTENDED_REGISTERS 65568
     * }
     */
    public static int WOW64_CONTEXT_EXTENDED_REGISTERS() {
        return WOW64_CONTEXT_EXTENDED_REGISTERS;
    }
    private static final int WOW64_CONTEXT_FULL = (int)65543L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_FULL 65543
     * }
     */
    public static int WOW64_CONTEXT_FULL() {
        return WOW64_CONTEXT_FULL;
    }
    private static final int WOW64_CONTEXT_ALL = (int)65599L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_ALL 65599
     * }
     */
    public static int WOW64_CONTEXT_ALL() {
        return WOW64_CONTEXT_ALL;
    }
    private static final int WOW64_CONTEXT_XSTATE = (int)65600L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_XSTATE 65600
     * }
     */
    public static int WOW64_CONTEXT_XSTATE() {
        return WOW64_CONTEXT_XSTATE;
    }
    private static final int WOW64_CONTEXT_EXCEPTION_REPORTING = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define WOW64_CONTEXT_EXCEPTION_REPORTING 2147483648
     * }
     */
    public static int WOW64_CONTEXT_EXCEPTION_REPORTING() {
        return WOW64_CONTEXT_EXCEPTION_REPORTING;
    }
    private static final int EXCEPTION_UNWIND = (int)102L;
    /**
     * {@snippet lang=c :
     * #define EXCEPTION_UNWIND 102
     * }
     */
    public static int EXCEPTION_UNWIND() {
        return EXCEPTION_UNWIND;
    }
    private static final int DELETE = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define DELETE 65536
     * }
     */
    public static int DELETE() {
        return DELETE;
    }
    private static final int READ_CONTROL = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define READ_CONTROL 131072
     * }
     */
    public static int READ_CONTROL() {
        return READ_CONTROL;
    }
    private static final int WRITE_DAC = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define WRITE_DAC 262144
     * }
     */
    public static int WRITE_DAC() {
        return WRITE_DAC;
    }
    private static final int WRITE_OWNER = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define WRITE_OWNER 524288
     * }
     */
    public static int WRITE_OWNER() {
        return WRITE_OWNER;
    }
    private static final int SYNCHRONIZE = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define SYNCHRONIZE 1048576
     * }
     */
    public static int SYNCHRONIZE() {
        return SYNCHRONIZE;
    }
    private static final int STANDARD_RIGHTS_REQUIRED = (int)983040L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_REQUIRED 983040
     * }
     */
    public static int STANDARD_RIGHTS_REQUIRED() {
        return STANDARD_RIGHTS_REQUIRED;
    }
    private static final int STANDARD_RIGHTS_READ = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_READ 131072
     * }
     */
    public static int STANDARD_RIGHTS_READ() {
        return STANDARD_RIGHTS_READ;
    }
    private static final int STANDARD_RIGHTS_WRITE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_WRITE 131072
     * }
     */
    public static int STANDARD_RIGHTS_WRITE() {
        return STANDARD_RIGHTS_WRITE;
    }
    private static final int STANDARD_RIGHTS_EXECUTE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_EXECUTE 131072
     * }
     */
    public static int STANDARD_RIGHTS_EXECUTE() {
        return STANDARD_RIGHTS_EXECUTE;
    }
    private static final int STANDARD_RIGHTS_ALL = (int)2031616L;
    /**
     * {@snippet lang=c :
     * #define STANDARD_RIGHTS_ALL 2031616
     * }
     */
    public static int STANDARD_RIGHTS_ALL() {
        return STANDARD_RIGHTS_ALL;
    }
    private static final int SPECIFIC_RIGHTS_ALL = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define SPECIFIC_RIGHTS_ALL 65535
     * }
     */
    public static int SPECIFIC_RIGHTS_ALL() {
        return SPECIFIC_RIGHTS_ALL;
    }
    private static final int ACCESS_SYSTEM_SECURITY = (int)16777216L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_SYSTEM_SECURITY 16777216
     * }
     */
    public static int ACCESS_SYSTEM_SECURITY() {
        return ACCESS_SYSTEM_SECURITY;
    }
    private static final int MAXIMUM_ALLOWED = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define MAXIMUM_ALLOWED 33554432
     * }
     */
    public static int MAXIMUM_ALLOWED() {
        return MAXIMUM_ALLOWED;
    }
    private static final int GENERIC_READ = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define GENERIC_READ 2147483648
     * }
     */
    public static int GENERIC_READ() {
        return GENERIC_READ;
    }
    private static final int GENERIC_WRITE = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define GENERIC_WRITE 1073741824
     * }
     */
    public static int GENERIC_WRITE() {
        return GENERIC_WRITE;
    }
    private static final int GENERIC_EXECUTE = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define GENERIC_EXECUTE 536870912
     * }
     */
    public static int GENERIC_EXECUTE() {
        return GENERIC_EXECUTE;
    }
    private static final int GENERIC_ALL = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define GENERIC_ALL 268435456
     * }
     */
    public static int GENERIC_ALL() {
        return GENERIC_ALL;
    }
    private static final int SID_REVISION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SID_REVISION 1
     * }
     */
    public static int SID_REVISION() {
        return SID_REVISION;
    }
    private static final int SID_MAX_SUB_AUTHORITIES = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SID_MAX_SUB_AUTHORITIES 15
     * }
     */
    public static int SID_MAX_SUB_AUTHORITIES() {
        return SID_MAX_SUB_AUTHORITIES;
    }
    private static final int SID_RECOMMENDED_SUB_AUTHORITIES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SID_RECOMMENDED_SUB_AUTHORITIES 1
     * }
     */
    public static int SID_RECOMMENDED_SUB_AUTHORITIES() {
        return SID_RECOMMENDED_SUB_AUTHORITIES;
    }
    private static final long SECURITY_MAX_SID_SIZE = 68L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MAX_SID_SIZE 68
     * }
     */
    public static long SECURITY_MAX_SID_SIZE() {
        return SECURITY_MAX_SID_SIZE;
    }
    private static final int SECURITY_MAX_SID_STRING_CHARACTERS = (int)187L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MAX_SID_STRING_CHARACTERS 187
     * }
     */
    public static int SECURITY_MAX_SID_STRING_CHARACTERS() {
        return SECURITY_MAX_SID_STRING_CHARACTERS;
    }
    private static final int SECURITY_NULL_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NULL_RID 0
     * }
     */
    public static int SECURITY_NULL_RID() {
        return SECURITY_NULL_RID;
    }
    private static final int SECURITY_WORLD_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WORLD_RID 0
     * }
     */
    public static int SECURITY_WORLD_RID() {
        return SECURITY_WORLD_RID;
    }
    private static final int SECURITY_LOCAL_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_RID 0
     * }
     */
    public static int SECURITY_LOCAL_RID() {
        return SECURITY_LOCAL_RID;
    }
    private static final int SECURITY_LOCAL_LOGON_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_LOGON_RID 1
     * }
     */
    public static int SECURITY_LOCAL_LOGON_RID() {
        return SECURITY_LOCAL_LOGON_RID;
    }
    private static final int SECURITY_CREATOR_OWNER_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_OWNER_RID 0
     * }
     */
    public static int SECURITY_CREATOR_OWNER_RID() {
        return SECURITY_CREATOR_OWNER_RID;
    }
    private static final int SECURITY_CREATOR_GROUP_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_GROUP_RID 1
     * }
     */
    public static int SECURITY_CREATOR_GROUP_RID() {
        return SECURITY_CREATOR_GROUP_RID;
    }
    private static final int SECURITY_CREATOR_OWNER_SERVER_RID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_OWNER_SERVER_RID 2
     * }
     */
    public static int SECURITY_CREATOR_OWNER_SERVER_RID() {
        return SECURITY_CREATOR_OWNER_SERVER_RID;
    }
    private static final int SECURITY_CREATOR_GROUP_SERVER_RID = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_GROUP_SERVER_RID 3
     * }
     */
    public static int SECURITY_CREATOR_GROUP_SERVER_RID() {
        return SECURITY_CREATOR_GROUP_SERVER_RID;
    }
    private static final int SECURITY_CREATOR_OWNER_RIGHTS_RID = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CREATOR_OWNER_RIGHTS_RID 4
     * }
     */
    public static int SECURITY_CREATOR_OWNER_RIGHTS_RID() {
        return SECURITY_CREATOR_OWNER_RIGHTS_RID;
    }
    private static final int SECURITY_DIALUP_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_DIALUP_RID 1
     * }
     */
    public static int SECURITY_DIALUP_RID() {
        return SECURITY_DIALUP_RID;
    }
    private static final int SECURITY_NETWORK_RID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NETWORK_RID 2
     * }
     */
    public static int SECURITY_NETWORK_RID() {
        return SECURITY_NETWORK_RID;
    }
    private static final int SECURITY_BATCH_RID = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_BATCH_RID 3
     * }
     */
    public static int SECURITY_BATCH_RID() {
        return SECURITY_BATCH_RID;
    }
    private static final int SECURITY_INTERACTIVE_RID = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_INTERACTIVE_RID 4
     * }
     */
    public static int SECURITY_INTERACTIVE_RID() {
        return SECURITY_INTERACTIVE_RID;
    }
    private static final int SECURITY_LOGON_IDS_RID = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOGON_IDS_RID 5
     * }
     */
    public static int SECURITY_LOGON_IDS_RID() {
        return SECURITY_LOGON_IDS_RID;
    }
    private static final int SECURITY_LOGON_IDS_RID_COUNT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOGON_IDS_RID_COUNT 3
     * }
     */
    public static int SECURITY_LOGON_IDS_RID_COUNT() {
        return SECURITY_LOGON_IDS_RID_COUNT;
    }
    private static final int SECURITY_SERVICE_RID = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_SERVICE_RID 6
     * }
     */
    public static int SECURITY_SERVICE_RID() {
        return SECURITY_SERVICE_RID;
    }
    private static final int SECURITY_ANONYMOUS_LOGON_RID = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_ANONYMOUS_LOGON_RID 7
     * }
     */
    public static int SECURITY_ANONYMOUS_LOGON_RID() {
        return SECURITY_ANONYMOUS_LOGON_RID;
    }
    private static final int SECURITY_PROXY_RID = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROXY_RID 8
     * }
     */
    public static int SECURITY_PROXY_RID() {
        return SECURITY_PROXY_RID;
    }
    private static final int SECURITY_ENTERPRISE_CONTROLLERS_RID = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_ENTERPRISE_CONTROLLERS_RID 9
     * }
     */
    public static int SECURITY_ENTERPRISE_CONTROLLERS_RID() {
        return SECURITY_ENTERPRISE_CONTROLLERS_RID;
    }
    private static final int SECURITY_SERVER_LOGON_RID = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_SERVER_LOGON_RID 9
     * }
     */
    public static int SECURITY_SERVER_LOGON_RID() {
        return SECURITY_SERVER_LOGON_RID;
    }
    private static final int SECURITY_PRINCIPAL_SELF_RID = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PRINCIPAL_SELF_RID 10
     * }
     */
    public static int SECURITY_PRINCIPAL_SELF_RID() {
        return SECURITY_PRINCIPAL_SELF_RID;
    }
    private static final int SECURITY_AUTHENTICATED_USER_RID = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATED_USER_RID 11
     * }
     */
    public static int SECURITY_AUTHENTICATED_USER_RID() {
        return SECURITY_AUTHENTICATED_USER_RID;
    }
    private static final int SECURITY_RESTRICTED_CODE_RID = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_RESTRICTED_CODE_RID 12
     * }
     */
    public static int SECURITY_RESTRICTED_CODE_RID() {
        return SECURITY_RESTRICTED_CODE_RID;
    }
    private static final int SECURITY_TERMINAL_SERVER_RID = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_TERMINAL_SERVER_RID 13
     * }
     */
    public static int SECURITY_TERMINAL_SERVER_RID() {
        return SECURITY_TERMINAL_SERVER_RID;
    }
    private static final int SECURITY_REMOTE_LOGON_RID = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_REMOTE_LOGON_RID 14
     * }
     */
    public static int SECURITY_REMOTE_LOGON_RID() {
        return SECURITY_REMOTE_LOGON_RID;
    }
    private static final int SECURITY_THIS_ORGANIZATION_RID = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_THIS_ORGANIZATION_RID 15
     * }
     */
    public static int SECURITY_THIS_ORGANIZATION_RID() {
        return SECURITY_THIS_ORGANIZATION_RID;
    }
    private static final int SECURITY_IUSER_RID = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_IUSER_RID 17
     * }
     */
    public static int SECURITY_IUSER_RID() {
        return SECURITY_IUSER_RID;
    }
    private static final int SECURITY_LOCAL_SYSTEM_RID = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_SYSTEM_RID 18
     * }
     */
    public static int SECURITY_LOCAL_SYSTEM_RID() {
        return SECURITY_LOCAL_SYSTEM_RID;
    }
    private static final int SECURITY_LOCAL_SERVICE_RID = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_SERVICE_RID 19
     * }
     */
    public static int SECURITY_LOCAL_SERVICE_RID() {
        return SECURITY_LOCAL_SERVICE_RID;
    }
    private static final int SECURITY_NETWORK_SERVICE_RID = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NETWORK_SERVICE_RID 20
     * }
     */
    public static int SECURITY_NETWORK_SERVICE_RID() {
        return SECURITY_NETWORK_SERVICE_RID;
    }
    private static final int SECURITY_NT_NON_UNIQUE = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NT_NON_UNIQUE 21
     * }
     */
    public static int SECURITY_NT_NON_UNIQUE() {
        return SECURITY_NT_NON_UNIQUE;
    }
    private static final int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT 3
     * }
     */
    public static int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT() {
        return SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT;
    }
    private static final int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = (int)22L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID 22
     * }
     */
    public static int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID() {
        return SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID;
    }
    private static final int SECURITY_BUILTIN_DOMAIN_RID = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_BUILTIN_DOMAIN_RID 32
     * }
     */
    public static int SECURITY_BUILTIN_DOMAIN_RID() {
        return SECURITY_BUILTIN_DOMAIN_RID;
    }
    private static final int SECURITY_WRITE_RESTRICTED_CODE_RID = (int)33L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WRITE_RESTRICTED_CODE_RID 33
     * }
     */
    public static int SECURITY_WRITE_RESTRICTED_CODE_RID() {
        return SECURITY_WRITE_RESTRICTED_CODE_RID;
    }
    private static final int SECURITY_PACKAGE_BASE_RID = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_BASE_RID 64
     * }
     */
    public static int SECURITY_PACKAGE_BASE_RID() {
        return SECURITY_PACKAGE_BASE_RID;
    }
    private static final int SECURITY_PACKAGE_RID_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_RID_COUNT 2
     * }
     */
    public static int SECURITY_PACKAGE_RID_COUNT() {
        return SECURITY_PACKAGE_RID_COUNT;
    }
    private static final int SECURITY_PACKAGE_NTLM_RID = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_NTLM_RID 10
     * }
     */
    public static int SECURITY_PACKAGE_NTLM_RID() {
        return SECURITY_PACKAGE_NTLM_RID;
    }
    private static final int SECURITY_PACKAGE_SCHANNEL_RID = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_SCHANNEL_RID 14
     * }
     */
    public static int SECURITY_PACKAGE_SCHANNEL_RID() {
        return SECURITY_PACKAGE_SCHANNEL_RID;
    }
    private static final int SECURITY_PACKAGE_DIGEST_RID = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PACKAGE_DIGEST_RID 21
     * }
     */
    public static int SECURITY_PACKAGE_DIGEST_RID() {
        return SECURITY_PACKAGE_DIGEST_RID;
    }
    private static final int SECURITY_CRED_TYPE_BASE_RID = (int)65L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CRED_TYPE_BASE_RID 65
     * }
     */
    public static int SECURITY_CRED_TYPE_BASE_RID() {
        return SECURITY_CRED_TYPE_BASE_RID;
    }
    private static final int SECURITY_CRED_TYPE_RID_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CRED_TYPE_RID_COUNT 2
     * }
     */
    public static int SECURITY_CRED_TYPE_RID_COUNT() {
        return SECURITY_CRED_TYPE_RID_COUNT;
    }
    private static final int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CRED_TYPE_THIS_ORG_CERT_RID 1
     * }
     */
    public static int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID() {
        return SECURITY_CRED_TYPE_THIS_ORG_CERT_RID;
    }
    private static final int SECURITY_MIN_BASE_RID = (int)80L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MIN_BASE_RID 80
     * }
     */
    public static int SECURITY_MIN_BASE_RID() {
        return SECURITY_MIN_BASE_RID;
    }
    private static final int SECURITY_SERVICE_ID_BASE_RID = (int)80L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_SERVICE_ID_BASE_RID 80
     * }
     */
    public static int SECURITY_SERVICE_ID_BASE_RID() {
        return SECURITY_SERVICE_ID_BASE_RID;
    }
    private static final int SECURITY_SERVICE_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_SERVICE_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_SERVICE_ID_RID_COUNT() {
        return SECURITY_SERVICE_ID_RID_COUNT;
    }
    private static final int SECURITY_RESERVED_ID_BASE_RID = (int)81L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_RESERVED_ID_BASE_RID 81
     * }
     */
    public static int SECURITY_RESERVED_ID_BASE_RID() {
        return SECURITY_RESERVED_ID_BASE_RID;
    }
    private static final int SECURITY_APPPOOL_ID_BASE_RID = (int)82L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_APPPOOL_ID_BASE_RID 82
     * }
     */
    public static int SECURITY_APPPOOL_ID_BASE_RID() {
        return SECURITY_APPPOOL_ID_BASE_RID;
    }
    private static final int SECURITY_APPPOOL_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_APPPOOL_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_APPPOOL_ID_RID_COUNT() {
        return SECURITY_APPPOOL_ID_RID_COUNT;
    }
    private static final int SECURITY_VIRTUALSERVER_ID_BASE_RID = (int)83L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_VIRTUALSERVER_ID_BASE_RID 83
     * }
     */
    public static int SECURITY_VIRTUALSERVER_ID_BASE_RID() {
        return SECURITY_VIRTUALSERVER_ID_BASE_RID;
    }
    private static final int SECURITY_VIRTUALSERVER_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_VIRTUALSERVER_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_VIRTUALSERVER_ID_RID_COUNT() {
        return SECURITY_VIRTUALSERVER_ID_RID_COUNT;
    }
    private static final int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = (int)84L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_USERMODEDRIVERHOST_ID_BASE_RID 84
     * }
     */
    public static int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID() {
        return SECURITY_USERMODEDRIVERHOST_ID_BASE_RID;
    }
    private static final int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT() {
        return SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT;
    }
    private static final int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = (int)85L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID 85
     * }
     */
    public static int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID() {
        return SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID;
    }
    private static final int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT() {
        return SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT;
    }
    private static final int SECURITY_WMIHOST_ID_BASE_RID = (int)86L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WMIHOST_ID_BASE_RID 86
     * }
     */
    public static int SECURITY_WMIHOST_ID_BASE_RID() {
        return SECURITY_WMIHOST_ID_BASE_RID;
    }
    private static final int SECURITY_WMIHOST_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WMIHOST_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_WMIHOST_ID_RID_COUNT() {
        return SECURITY_WMIHOST_ID_RID_COUNT;
    }
    private static final int SECURITY_TASK_ID_BASE_RID = (int)87L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_TASK_ID_BASE_RID 87
     * }
     */
    public static int SECURITY_TASK_ID_BASE_RID() {
        return SECURITY_TASK_ID_BASE_RID;
    }
    private static final int SECURITY_NFS_ID_BASE_RID = (int)88L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_NFS_ID_BASE_RID 88
     * }
     */
    public static int SECURITY_NFS_ID_BASE_RID() {
        return SECURITY_NFS_ID_BASE_RID;
    }
    private static final int SECURITY_COM_ID_BASE_RID = (int)89L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_COM_ID_BASE_RID 89
     * }
     */
    public static int SECURITY_COM_ID_BASE_RID() {
        return SECURITY_COM_ID_BASE_RID;
    }
    private static final int SECURITY_WINDOW_MANAGER_BASE_RID = (int)90L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WINDOW_MANAGER_BASE_RID 90
     * }
     */
    public static int SECURITY_WINDOW_MANAGER_BASE_RID() {
        return SECURITY_WINDOW_MANAGER_BASE_RID;
    }
    private static final int SECURITY_RDV_GFX_BASE_RID = (int)91L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_RDV_GFX_BASE_RID 91
     * }
     */
    public static int SECURITY_RDV_GFX_BASE_RID() {
        return SECURITY_RDV_GFX_BASE_RID;
    }
    private static final int SECURITY_DASHOST_ID_BASE_RID = (int)92L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_DASHOST_ID_BASE_RID 92
     * }
     */
    public static int SECURITY_DASHOST_ID_BASE_RID() {
        return SECURITY_DASHOST_ID_BASE_RID;
    }
    private static final int SECURITY_DASHOST_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_DASHOST_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_DASHOST_ID_RID_COUNT() {
        return SECURITY_DASHOST_ID_RID_COUNT;
    }
    private static final int SECURITY_USERMANAGER_ID_BASE_RID = (int)93L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_USERMANAGER_ID_BASE_RID 93
     * }
     */
    public static int SECURITY_USERMANAGER_ID_BASE_RID() {
        return SECURITY_USERMANAGER_ID_BASE_RID;
    }
    private static final int SECURITY_USERMANAGER_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_USERMANAGER_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_USERMANAGER_ID_RID_COUNT() {
        return SECURITY_USERMANAGER_ID_RID_COUNT;
    }
    private static final int SECURITY_WINRM_ID_BASE_RID = (int)94L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WINRM_ID_BASE_RID 94
     * }
     */
    public static int SECURITY_WINRM_ID_BASE_RID() {
        return SECURITY_WINRM_ID_BASE_RID;
    }
    private static final int SECURITY_WINRM_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WINRM_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_WINRM_ID_RID_COUNT() {
        return SECURITY_WINRM_ID_RID_COUNT;
    }
    private static final int SECURITY_CCG_ID_BASE_RID = (int)95L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CCG_ID_BASE_RID 95
     * }
     */
    public static int SECURITY_CCG_ID_BASE_RID() {
        return SECURITY_CCG_ID_BASE_RID;
    }
    private static final int SECURITY_UMFD_BASE_RID = (int)96L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_UMFD_BASE_RID 96
     * }
     */
    public static int SECURITY_UMFD_BASE_RID() {
        return SECURITY_UMFD_BASE_RID;
    }
    private static final int SECURITY_UNIQUIFIED_SERVICE_BASE_RID = (int)97L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_UNIQUIFIED_SERVICE_BASE_RID 97
     * }
     */
    public static int SECURITY_UNIQUIFIED_SERVICE_BASE_RID() {
        return SECURITY_UNIQUIFIED_SERVICE_BASE_RID;
    }
    private static final int SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_VIRTUALACCOUNT_ID_RID_COUNT 6
     * }
     */
    public static int SECURITY_VIRTUALACCOUNT_ID_RID_COUNT() {
        return SECURITY_VIRTUALACCOUNT_ID_RID_COUNT;
    }
    private static final int SECURITY_EDGE_CLOUD_INFRASTRUCTURE_SERVICE_ID_BASE_RID = (int)98L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_EDGE_CLOUD_INFRASTRUCTURE_SERVICE_ID_BASE_RID 98
     * }
     */
    public static int SECURITY_EDGE_CLOUD_INFRASTRUCTURE_SERVICE_ID_BASE_RID() {
        return SECURITY_EDGE_CLOUD_INFRASTRUCTURE_SERVICE_ID_BASE_RID;
    }
    private static final int SECURITY_RESTRICTED_SERVICES_BASE_RID = (int)99L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_RESTRICTED_SERVICES_BASE_RID 99
     * }
     */
    public static int SECURITY_RESTRICTED_SERVICES_BASE_RID() {
        return SECURITY_RESTRICTED_SERVICES_BASE_RID;
    }
    private static final int SECURITY_RESTRICTED_SERVICES_RID_COUNT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_RESTRICTED_SERVICES_RID_COUNT 6
     * }
     */
    public static int SECURITY_RESTRICTED_SERVICES_RID_COUNT() {
        return SECURITY_RESTRICTED_SERVICES_RID_COUNT;
    }
    private static final int SECURITY_MAX_BASE_RID = (int)111L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MAX_BASE_RID 111
     * }
     */
    public static int SECURITY_MAX_BASE_RID() {
        return SECURITY_MAX_BASE_RID;
    }
    private static final int SECURITY_MAX_ALWAYS_FILTERED = (int)999L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MAX_ALWAYS_FILTERED 999
     * }
     */
    public static int SECURITY_MAX_ALWAYS_FILTERED() {
        return SECURITY_MAX_ALWAYS_FILTERED;
    }
    private static final int SECURITY_MIN_NEVER_FILTERED = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MIN_NEVER_FILTERED 1000
     * }
     */
    public static int SECURITY_MIN_NEVER_FILTERED() {
        return SECURITY_MIN_NEVER_FILTERED;
    }
    private static final int SECURITY_OTHER_ORGANIZATION_RID = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_OTHER_ORGANIZATION_RID 1000
     * }
     */
    public static int SECURITY_OTHER_ORGANIZATION_RID() {
        return SECURITY_OTHER_ORGANIZATION_RID;
    }
    private static final int SECURITY_WINDOWSMOBILE_ID_BASE_RID = (int)112L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_WINDOWSMOBILE_ID_BASE_RID 112
     * }
     */
    public static int SECURITY_WINDOWSMOBILE_ID_BASE_RID() {
        return SECURITY_WINDOWSMOBILE_ID_BASE_RID;
    }
    private static final int SECURITY_INSTALLER_GROUP_CAPABILITY_BASE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_INSTALLER_GROUP_CAPABILITY_BASE 32
     * }
     */
    public static int SECURITY_INSTALLER_GROUP_CAPABILITY_BASE() {
        return SECURITY_INSTALLER_GROUP_CAPABILITY_BASE;
    }
    private static final int SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT 9
     * }
     */
    public static int SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT() {
        return SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT;
    }
    private static final int SECURITY_INSTALLER_CAPABILITY_RID_COUNT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_INSTALLER_CAPABILITY_RID_COUNT 10
     * }
     */
    public static int SECURITY_INSTALLER_CAPABILITY_RID_COUNT() {
        return SECURITY_INSTALLER_CAPABILITY_RID_COUNT;
    }
    private static final int SECURITY_LOCAL_ACCOUNT_RID = (int)113L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_ACCOUNT_RID 113
     * }
     */
    public static int SECURITY_LOCAL_ACCOUNT_RID() {
        return SECURITY_LOCAL_ACCOUNT_RID;
    }
    private static final int SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID = (int)114L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID 114
     * }
     */
    public static int SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID() {
        return SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID;
    }
    private static final int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = (int)496L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED 496
     * }
     */
    public static int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED() {
        return DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED;
    }
    private static final int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = (int)497L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS 497
     * }
     */
    public static int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS() {
        return DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS;
    }
    private static final int DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = (int)498L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS 498
     * }
     */
    public static int DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS() {
        return DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS;
    }
    private static final int FOREST_USER_RID_MAX = (int)499L;
    /**
     * {@snippet lang=c :
     * #define FOREST_USER_RID_MAX 499
     * }
     */
    public static int FOREST_USER_RID_MAX() {
        return FOREST_USER_RID_MAX;
    }
    private static final int DOMAIN_USER_RID_ADMIN = (int)500L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_USER_RID_ADMIN 500
     * }
     */
    public static int DOMAIN_USER_RID_ADMIN() {
        return DOMAIN_USER_RID_ADMIN;
    }
    private static final int DOMAIN_USER_RID_GUEST = (int)501L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_USER_RID_GUEST 501
     * }
     */
    public static int DOMAIN_USER_RID_GUEST() {
        return DOMAIN_USER_RID_GUEST;
    }
    private static final int DOMAIN_USER_RID_KRBTGT = (int)502L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_USER_RID_KRBTGT 502
     * }
     */
    public static int DOMAIN_USER_RID_KRBTGT() {
        return DOMAIN_USER_RID_KRBTGT;
    }
    private static final int DOMAIN_USER_RID_DEFAULT_ACCOUNT = (int)503L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_USER_RID_DEFAULT_ACCOUNT 503
     * }
     */
    public static int DOMAIN_USER_RID_DEFAULT_ACCOUNT() {
        return DOMAIN_USER_RID_DEFAULT_ACCOUNT;
    }
    private static final int DOMAIN_USER_RID_WDAG_ACCOUNT = (int)504L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_USER_RID_WDAG_ACCOUNT 504
     * }
     */
    public static int DOMAIN_USER_RID_WDAG_ACCOUNT() {
        return DOMAIN_USER_RID_WDAG_ACCOUNT;
    }
    private static final int DOMAIN_USER_RID_MAX = (int)999L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_USER_RID_MAX 999
     * }
     */
    public static int DOMAIN_USER_RID_MAX() {
        return DOMAIN_USER_RID_MAX;
    }
    private static final int DOMAIN_GROUP_RID_ADMINS = (int)512L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_ADMINS 512
     * }
     */
    public static int DOMAIN_GROUP_RID_ADMINS() {
        return DOMAIN_GROUP_RID_ADMINS;
    }
    private static final int DOMAIN_GROUP_RID_USERS = (int)513L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_USERS 513
     * }
     */
    public static int DOMAIN_GROUP_RID_USERS() {
        return DOMAIN_GROUP_RID_USERS;
    }
    private static final int DOMAIN_GROUP_RID_GUESTS = (int)514L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_GUESTS 514
     * }
     */
    public static int DOMAIN_GROUP_RID_GUESTS() {
        return DOMAIN_GROUP_RID_GUESTS;
    }
    private static final int DOMAIN_GROUP_RID_COMPUTERS = (int)515L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_COMPUTERS 515
     * }
     */
    public static int DOMAIN_GROUP_RID_COMPUTERS() {
        return DOMAIN_GROUP_RID_COMPUTERS;
    }
    private static final int DOMAIN_GROUP_RID_CONTROLLERS = (int)516L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_CONTROLLERS 516
     * }
     */
    public static int DOMAIN_GROUP_RID_CONTROLLERS() {
        return DOMAIN_GROUP_RID_CONTROLLERS;
    }
    private static final int DOMAIN_GROUP_RID_CERT_ADMINS = (int)517L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_CERT_ADMINS 517
     * }
     */
    public static int DOMAIN_GROUP_RID_CERT_ADMINS() {
        return DOMAIN_GROUP_RID_CERT_ADMINS;
    }
    private static final int DOMAIN_GROUP_RID_SCHEMA_ADMINS = (int)518L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_SCHEMA_ADMINS 518
     * }
     */
    public static int DOMAIN_GROUP_RID_SCHEMA_ADMINS() {
        return DOMAIN_GROUP_RID_SCHEMA_ADMINS;
    }
    private static final int DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = (int)519L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_ENTERPRISE_ADMINS 519
     * }
     */
    public static int DOMAIN_GROUP_RID_ENTERPRISE_ADMINS() {
        return DOMAIN_GROUP_RID_ENTERPRISE_ADMINS;
    }
    private static final int DOMAIN_GROUP_RID_POLICY_ADMINS = (int)520L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_POLICY_ADMINS 520
     * }
     */
    public static int DOMAIN_GROUP_RID_POLICY_ADMINS() {
        return DOMAIN_GROUP_RID_POLICY_ADMINS;
    }
    private static final int DOMAIN_GROUP_RID_READONLY_CONTROLLERS = (int)521L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_READONLY_CONTROLLERS 521
     * }
     */
    public static int DOMAIN_GROUP_RID_READONLY_CONTROLLERS() {
        return DOMAIN_GROUP_RID_READONLY_CONTROLLERS;
    }
    private static final int DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = (int)522L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS 522
     * }
     */
    public static int DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS() {
        return DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS;
    }
    private static final int DOMAIN_GROUP_RID_CDC_RESERVED = (int)524L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_CDC_RESERVED 524
     * }
     */
    public static int DOMAIN_GROUP_RID_CDC_RESERVED() {
        return DOMAIN_GROUP_RID_CDC_RESERVED;
    }
    private static final int DOMAIN_GROUP_RID_PROTECTED_USERS = (int)525L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_PROTECTED_USERS 525
     * }
     */
    public static int DOMAIN_GROUP_RID_PROTECTED_USERS() {
        return DOMAIN_GROUP_RID_PROTECTED_USERS;
    }
    private static final int DOMAIN_GROUP_RID_KEY_ADMINS = (int)526L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_KEY_ADMINS 526
     * }
     */
    public static int DOMAIN_GROUP_RID_KEY_ADMINS() {
        return DOMAIN_GROUP_RID_KEY_ADMINS;
    }
    private static final int DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS = (int)527L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS 527
     * }
     */
    public static int DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS() {
        return DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS;
    }
    private static final int DOMAIN_GROUP_RID_FOREST_TRUSTS = (int)528L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_FOREST_TRUSTS 528
     * }
     */
    public static int DOMAIN_GROUP_RID_FOREST_TRUSTS() {
        return DOMAIN_GROUP_RID_FOREST_TRUSTS;
    }
    private static final int DOMAIN_GROUP_RID_EXTERNAL_TRUSTS = (int)529L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_GROUP_RID_EXTERNAL_TRUSTS 529
     * }
     */
    public static int DOMAIN_GROUP_RID_EXTERNAL_TRUSTS() {
        return DOMAIN_GROUP_RID_EXTERNAL_TRUSTS;
    }
    private static final int DOMAIN_ALIAS_RID_ADMINS = (int)544L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_ADMINS 544
     * }
     */
    public static int DOMAIN_ALIAS_RID_ADMINS() {
        return DOMAIN_ALIAS_RID_ADMINS;
    }
    private static final int DOMAIN_ALIAS_RID_USERS = (int)545L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_USERS 545
     * }
     */
    public static int DOMAIN_ALIAS_RID_USERS() {
        return DOMAIN_ALIAS_RID_USERS;
    }
    private static final int DOMAIN_ALIAS_RID_GUESTS = (int)546L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_GUESTS 546
     * }
     */
    public static int DOMAIN_ALIAS_RID_GUESTS() {
        return DOMAIN_ALIAS_RID_GUESTS;
    }
    private static final int DOMAIN_ALIAS_RID_POWER_USERS = (int)547L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_POWER_USERS 547
     * }
     */
    public static int DOMAIN_ALIAS_RID_POWER_USERS() {
        return DOMAIN_ALIAS_RID_POWER_USERS;
    }
    private static final int DOMAIN_ALIAS_RID_ACCOUNT_OPS = (int)548L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_ACCOUNT_OPS 548
     * }
     */
    public static int DOMAIN_ALIAS_RID_ACCOUNT_OPS() {
        return DOMAIN_ALIAS_RID_ACCOUNT_OPS;
    }
    private static final int DOMAIN_ALIAS_RID_SYSTEM_OPS = (int)549L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_SYSTEM_OPS 549
     * }
     */
    public static int DOMAIN_ALIAS_RID_SYSTEM_OPS() {
        return DOMAIN_ALIAS_RID_SYSTEM_OPS;
    }
    private static final int DOMAIN_ALIAS_RID_PRINT_OPS = (int)550L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_PRINT_OPS 550
     * }
     */
    public static int DOMAIN_ALIAS_RID_PRINT_OPS() {
        return DOMAIN_ALIAS_RID_PRINT_OPS;
    }
    private static final int DOMAIN_ALIAS_RID_BACKUP_OPS = (int)551L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_BACKUP_OPS 551
     * }
     */
    public static int DOMAIN_ALIAS_RID_BACKUP_OPS() {
        return DOMAIN_ALIAS_RID_BACKUP_OPS;
    }
    private static final int DOMAIN_ALIAS_RID_REPLICATOR = (int)552L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_REPLICATOR 552
     * }
     */
    public static int DOMAIN_ALIAS_RID_REPLICATOR() {
        return DOMAIN_ALIAS_RID_REPLICATOR;
    }
    private static final int DOMAIN_ALIAS_RID_RAS_SERVERS = (int)553L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_RAS_SERVERS 553
     * }
     */
    public static int DOMAIN_ALIAS_RID_RAS_SERVERS() {
        return DOMAIN_ALIAS_RID_RAS_SERVERS;
    }
    private static final int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = (int)554L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_PREW2KCOMPACCESS 554
     * }
     */
    public static int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS() {
        return DOMAIN_ALIAS_RID_PREW2KCOMPACCESS;
    }
    private static final int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = (int)555L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS 555
     * }
     */
    public static int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS() {
        return DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS;
    }
    private static final int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = (int)556L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS 556
     * }
     */
    public static int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS() {
        return DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS;
    }
    private static final int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = (int)557L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS 557
     * }
     */
    public static int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS() {
        return DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS;
    }
    private static final int DOMAIN_ALIAS_RID_MONITORING_USERS = (int)558L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_MONITORING_USERS 558
     * }
     */
    public static int DOMAIN_ALIAS_RID_MONITORING_USERS() {
        return DOMAIN_ALIAS_RID_MONITORING_USERS;
    }
    private static final int DOMAIN_ALIAS_RID_LOGGING_USERS = (int)559L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_LOGGING_USERS 559
     * }
     */
    public static int DOMAIN_ALIAS_RID_LOGGING_USERS() {
        return DOMAIN_ALIAS_RID_LOGGING_USERS;
    }
    private static final int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = (int)560L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS 560
     * }
     */
    public static int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS() {
        return DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS;
    }
    private static final int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = (int)561L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS 561
     * }
     */
    public static int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS() {
        return DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS;
    }
    private static final int DOMAIN_ALIAS_RID_DCOM_USERS = (int)562L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_DCOM_USERS 562
     * }
     */
    public static int DOMAIN_ALIAS_RID_DCOM_USERS() {
        return DOMAIN_ALIAS_RID_DCOM_USERS;
    }
    private static final int DOMAIN_ALIAS_RID_IUSERS = (int)568L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_IUSERS 568
     * }
     */
    public static int DOMAIN_ALIAS_RID_IUSERS() {
        return DOMAIN_ALIAS_RID_IUSERS;
    }
    private static final int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = (int)569L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_CRYPTO_OPERATORS 569
     * }
     */
    public static int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS() {
        return DOMAIN_ALIAS_RID_CRYPTO_OPERATORS;
    }
    private static final int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = (int)571L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP 571
     * }
     */
    public static int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP() {
        return DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP;
    }
    private static final int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = (int)572L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP 572
     * }
     */
    public static int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP() {
        return DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP;
    }
    private static final int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = (int)573L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP 573
     * }
     */
    public static int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP() {
        return DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP;
    }
    private static final int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = (int)574L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP 574
     * }
     */
    public static int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP() {
        return DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP;
    }
    private static final int DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = (int)575L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS 575
     * }
     */
    public static int DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS() {
        return DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS;
    }
    private static final int DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = (int)576L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS 576
     * }
     */
    public static int DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS() {
        return DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS;
    }
    private static final int DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = (int)577L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS 577
     * }
     */
    public static int DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS() {
        return DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS;
    }
    private static final int DOMAIN_ALIAS_RID_HYPER_V_ADMINS = (int)578L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_HYPER_V_ADMINS 578
     * }
     */
    public static int DOMAIN_ALIAS_RID_HYPER_V_ADMINS() {
        return DOMAIN_ALIAS_RID_HYPER_V_ADMINS;
    }
    private static final int DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = (int)579L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS 579
     * }
     */
    public static int DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS() {
        return DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS;
    }
    private static final int DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = (int)580L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS 580
     * }
     */
    public static int DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS() {
        return DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS;
    }
    private static final int DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT = (int)581L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT 581
     * }
     */
    public static int DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT() {
        return DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT;
    }
    private static final int DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS = (int)582L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS 582
     * }
     */
    public static int DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS() {
        return DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS;
    }
    private static final int DOMAIN_ALIAS_RID_DEVICE_OWNERS = (int)583L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_DEVICE_OWNERS 583
     * }
     */
    public static int DOMAIN_ALIAS_RID_DEVICE_OWNERS() {
        return DOMAIN_ALIAS_RID_DEVICE_OWNERS;
    }
    private static final int DOMAIN_ALIAS_RID_USER_MODE_HARDWARE_OPERATORS = (int)584L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_USER_MODE_HARDWARE_OPERATORS 584
     * }
     */
    public static int DOMAIN_ALIAS_RID_USER_MODE_HARDWARE_OPERATORS() {
        return DOMAIN_ALIAS_RID_USER_MODE_HARDWARE_OPERATORS;
    }
    private static final int DOMAIN_ALIAS_RID_OPENSSH_USERS = (int)585L;
    /**
     * {@snippet lang=c :
     * #define DOMAIN_ALIAS_RID_OPENSSH_USERS 585
     * }
     */
    public static int DOMAIN_ALIAS_RID_OPENSSH_USERS() {
        return DOMAIN_ALIAS_RID_OPENSSH_USERS;
    }
    private static final int SECURITY_APP_PACKAGE_BASE_RID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_APP_PACKAGE_BASE_RID 2
     * }
     */
    public static int SECURITY_APP_PACKAGE_BASE_RID() {
        return SECURITY_APP_PACKAGE_BASE_RID;
    }
    private static final int SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT 2
     * }
     */
    public static int SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT() {
        return SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT;
    }
    private static final int SECURITY_APP_PACKAGE_RID_COUNT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_APP_PACKAGE_RID_COUNT 8
     * }
     */
    public static int SECURITY_APP_PACKAGE_RID_COUNT() {
        return SECURITY_APP_PACKAGE_RID_COUNT;
    }
    private static final int SECURITY_CAPABILITY_BASE_RID = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_BASE_RID 3
     * }
     */
    public static int SECURITY_CAPABILITY_BASE_RID() {
        return SECURITY_CAPABILITY_BASE_RID;
    }
    private static final int SECURITY_CAPABILITY_APP_RID = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_APP_RID 1024
     * }
     */
    public static int SECURITY_CAPABILITY_APP_RID() {
        return SECURITY_CAPABILITY_APP_RID;
    }
    private static final int SECURITY_CAPABILITY_APP_SILO_RID = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_APP_SILO_RID 65536
     * }
     */
    public static int SECURITY_CAPABILITY_APP_SILO_RID() {
        return SECURITY_CAPABILITY_APP_SILO_RID;
    }
    private static final int SECURITY_BUILTIN_CAPABILITY_RID_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_BUILTIN_CAPABILITY_RID_COUNT 2
     * }
     */
    public static int SECURITY_BUILTIN_CAPABILITY_RID_COUNT() {
        return SECURITY_BUILTIN_CAPABILITY_RID_COUNT;
    }
    private static final int SECURITY_CAPABILITY_RID_COUNT = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_RID_COUNT 5
     * }
     */
    public static int SECURITY_CAPABILITY_RID_COUNT() {
        return SECURITY_CAPABILITY_RID_COUNT;
    }
    private static final int SECURITY_PARENT_PACKAGE_RID_COUNT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PARENT_PACKAGE_RID_COUNT 8
     * }
     */
    public static int SECURITY_PARENT_PACKAGE_RID_COUNT() {
        return SECURITY_PARENT_PACKAGE_RID_COUNT;
    }
    private static final int SECURITY_CHILD_PACKAGE_RID_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CHILD_PACKAGE_RID_COUNT 12
     * }
     */
    public static int SECURITY_CHILD_PACKAGE_RID_COUNT() {
        return SECURITY_CHILD_PACKAGE_RID_COUNT;
    }
    private static final int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE 1
     * }
     */
    public static int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE() {
        return SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE;
    }
    private static final int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE 2
     * }
     */
    public static int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE() {
        return SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE;
    }
    private static final int SECURITY_CAPABILITY_INTERNET_CLIENT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_INTERNET_CLIENT 1
     * }
     */
    public static int SECURITY_CAPABILITY_INTERNET_CLIENT() {
        return SECURITY_CAPABILITY_INTERNET_CLIENT;
    }
    private static final int SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER 2
     * }
     */
    public static int SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER() {
        return SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER;
    }
    private static final int SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER 3
     * }
     */
    public static int SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER() {
        return SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER;
    }
    private static final int SECURITY_CAPABILITY_PICTURES_LIBRARY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_PICTURES_LIBRARY 4
     * }
     */
    public static int SECURITY_CAPABILITY_PICTURES_LIBRARY() {
        return SECURITY_CAPABILITY_PICTURES_LIBRARY;
    }
    private static final int SECURITY_CAPABILITY_VIDEOS_LIBRARY = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_VIDEOS_LIBRARY 5
     * }
     */
    public static int SECURITY_CAPABILITY_VIDEOS_LIBRARY() {
        return SECURITY_CAPABILITY_VIDEOS_LIBRARY;
    }
    private static final int SECURITY_CAPABILITY_MUSIC_LIBRARY = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_MUSIC_LIBRARY 6
     * }
     */
    public static int SECURITY_CAPABILITY_MUSIC_LIBRARY() {
        return SECURITY_CAPABILITY_MUSIC_LIBRARY;
    }
    private static final int SECURITY_CAPABILITY_DOCUMENTS_LIBRARY = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_DOCUMENTS_LIBRARY 7
     * }
     */
    public static int SECURITY_CAPABILITY_DOCUMENTS_LIBRARY() {
        return SECURITY_CAPABILITY_DOCUMENTS_LIBRARY;
    }
    private static final int SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION 8
     * }
     */
    public static int SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION() {
        return SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION;
    }
    private static final int SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES = (int)9L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES 9
     * }
     */
    public static int SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES() {
        return SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES;
    }
    private static final int SECURITY_CAPABILITY_REMOVABLE_STORAGE = (int)10L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_REMOVABLE_STORAGE 10
     * }
     */
    public static int SECURITY_CAPABILITY_REMOVABLE_STORAGE() {
        return SECURITY_CAPABILITY_REMOVABLE_STORAGE;
    }
    private static final int SECURITY_CAPABILITY_APPOINTMENTS = (int)11L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_APPOINTMENTS 11
     * }
     */
    public static int SECURITY_CAPABILITY_APPOINTMENTS() {
        return SECURITY_CAPABILITY_APPOINTMENTS;
    }
    private static final int SECURITY_CAPABILITY_CONTACTS = (int)12L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_CONTACTS 12
     * }
     */
    public static int SECURITY_CAPABILITY_CONTACTS() {
        return SECURITY_CAPABILITY_CONTACTS;
    }
    private static final int SECURITY_CAPABILITY_INTERNET_EXPLORER = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_CAPABILITY_INTERNET_EXPLORER 4096
     * }
     */
    public static int SECURITY_CAPABILITY_INTERNET_EXPLORER() {
        return SECURITY_CAPABILITY_INTERNET_EXPLORER;
    }
    private static final int SECURITY_MANDATORY_UNTRUSTED_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MANDATORY_UNTRUSTED_RID 0
     * }
     */
    public static int SECURITY_MANDATORY_UNTRUSTED_RID() {
        return SECURITY_MANDATORY_UNTRUSTED_RID;
    }
    private static final int SECURITY_MANDATORY_LOW_RID = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MANDATORY_LOW_RID 4096
     * }
     */
    public static int SECURITY_MANDATORY_LOW_RID() {
        return SECURITY_MANDATORY_LOW_RID;
    }
    private static final int SECURITY_MANDATORY_MEDIUM_RID = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MANDATORY_MEDIUM_RID 8192
     * }
     */
    public static int SECURITY_MANDATORY_MEDIUM_RID() {
        return SECURITY_MANDATORY_MEDIUM_RID;
    }
    private static final int SECURITY_MANDATORY_MEDIUM_PLUS_RID = (int)8448L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MANDATORY_MEDIUM_PLUS_RID 8448
     * }
     */
    public static int SECURITY_MANDATORY_MEDIUM_PLUS_RID() {
        return SECURITY_MANDATORY_MEDIUM_PLUS_RID;
    }
    private static final int SECURITY_MANDATORY_HIGH_RID = (int)12288L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MANDATORY_HIGH_RID 12288
     * }
     */
    public static int SECURITY_MANDATORY_HIGH_RID() {
        return SECURITY_MANDATORY_HIGH_RID;
    }
    private static final int SECURITY_MANDATORY_SYSTEM_RID = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MANDATORY_SYSTEM_RID 16384
     * }
     */
    public static int SECURITY_MANDATORY_SYSTEM_RID() {
        return SECURITY_MANDATORY_SYSTEM_RID;
    }
    private static final int SECURITY_MANDATORY_PROTECTED_PROCESS_RID = (int)20480L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MANDATORY_PROTECTED_PROCESS_RID 20480
     * }
     */
    public static int SECURITY_MANDATORY_PROTECTED_PROCESS_RID() {
        return SECURITY_MANDATORY_PROTECTED_PROCESS_RID;
    }
    private static final int SECURITY_MANDATORY_MAXIMUM_USER_RID = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MANDATORY_MAXIMUM_USER_RID 16384
     * }
     */
    public static int SECURITY_MANDATORY_MAXIMUM_USER_RID() {
        return SECURITY_MANDATORY_MAXIMUM_USER_RID;
    }
    private static final int SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT 1
     * }
     */
    public static int SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT() {
        return SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT;
    }
    private static final int SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID 1
     * }
     */
    public static int SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID() {
        return SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID;
    }
    private static final int SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID 2
     * }
     */
    public static int SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID() {
        return SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID;
    }
    private static final int SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID 3
     * }
     */
    public static int SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID() {
        return SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID;
    }
    private static final int SECURITY_AUTHENTICATION_KEY_TRUST_RID = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATION_KEY_TRUST_RID 4
     * }
     */
    public static int SECURITY_AUTHENTICATION_KEY_TRUST_RID() {
        return SECURITY_AUTHENTICATION_KEY_TRUST_RID;
    }
    private static final int SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID = (int)5L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID 5
     * }
     */
    public static int SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID() {
        return SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID;
    }
    private static final int SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID 6
     * }
     */
    public static int SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID() {
        return SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID;
    }
    private static final int SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT 2
     * }
     */
    public static int SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT() {
        return SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT;
    }
    private static final int SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID 1024
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID() {
        return SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID;
    }
    private static final int SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID = (int)512L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID 512
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID() {
        return SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID;
    }
    private static final int SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID 0
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID() {
        return SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID;
    }
    private static final int SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID 8192
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID() {
        return SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID;
    }
    private static final int SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID 4096
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID() {
        return SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID;
    }
    private static final int SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID 2048
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID() {
        return SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID;
    }
    private static final int SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID = (int)1536L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID 1536
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID() {
        return SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID;
    }
    private static final int SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID 1024
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID() {
        return SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID;
    }
    private static final int SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID 0
     * }
     */
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID() {
        return SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID;
    }
    private static final long SECURITY_TRUSTED_INSTALLER_RID2 = 3418522649L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_TRUSTED_INSTALLER_RID2 3418522649
     * }
     */
    public static long SECURITY_TRUSTED_INSTALLER_RID2() {
        return SECURITY_TRUSTED_INSTALLER_RID2;
    }
    private static final long SECURITY_TRUSTED_INSTALLER_RID5 = 2271478464L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_TRUSTED_INSTALLER_RID5 2271478464
     * }
     */
    public static long SECURITY_TRUSTED_INSTALLER_RID5() {
        return SECURITY_TRUSTED_INSTALLER_RID5;
    }
    private static final int SE_GROUP_MANDATORY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_MANDATORY 1
     * }
     */
    public static int SE_GROUP_MANDATORY() {
        return SE_GROUP_MANDATORY;
    }
    private static final int SE_GROUP_ENABLED_BY_DEFAULT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_ENABLED_BY_DEFAULT 2
     * }
     */
    public static int SE_GROUP_ENABLED_BY_DEFAULT() {
        return SE_GROUP_ENABLED_BY_DEFAULT;
    }
    private static final int SE_GROUP_ENABLED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_ENABLED 4
     * }
     */
    public static int SE_GROUP_ENABLED() {
        return SE_GROUP_ENABLED;
    }
    private static final int SE_GROUP_OWNER = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_OWNER 8
     * }
     */
    public static int SE_GROUP_OWNER() {
        return SE_GROUP_OWNER;
    }
    private static final int SE_GROUP_USE_FOR_DENY_ONLY = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_USE_FOR_DENY_ONLY 16
     * }
     */
    public static int SE_GROUP_USE_FOR_DENY_ONLY() {
        return SE_GROUP_USE_FOR_DENY_ONLY;
    }
    private static final int SE_GROUP_INTEGRITY = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_INTEGRITY 32
     * }
     */
    public static int SE_GROUP_INTEGRITY() {
        return SE_GROUP_INTEGRITY;
    }
    private static final int SE_GROUP_INTEGRITY_ENABLED = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_INTEGRITY_ENABLED 64
     * }
     */
    public static int SE_GROUP_INTEGRITY_ENABLED() {
        return SE_GROUP_INTEGRITY_ENABLED;
    }
    private static final int SE_GROUP_LOGON_ID = (int)3221225472L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_LOGON_ID 3221225472
     * }
     */
    public static int SE_GROUP_LOGON_ID() {
        return SE_GROUP_LOGON_ID;
    }
    private static final int SE_GROUP_RESOURCE = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_RESOURCE 536870912
     * }
     */
    public static int SE_GROUP_RESOURCE() {
        return SE_GROUP_RESOURCE;
    }
    private static final int SE_GROUP_VALID_ATTRIBUTES = (int)3758096511L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_VALID_ATTRIBUTES 3758096511
     * }
     */
    public static int SE_GROUP_VALID_ATTRIBUTES() {
        return SE_GROUP_VALID_ATTRIBUTES;
    }
    private static final int ACL_REVISION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ACL_REVISION 2
     * }
     */
    public static int ACL_REVISION() {
        return ACL_REVISION;
    }
    private static final int ACL_REVISION_DS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ACL_REVISION_DS 4
     * }
     */
    public static int ACL_REVISION_DS() {
        return ACL_REVISION_DS;
    }
    private static final int ACL_REVISION1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ACL_REVISION1 1
     * }
     */
    public static int ACL_REVISION1() {
        return ACL_REVISION1;
    }
    private static final int MIN_ACL_REVISION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define MIN_ACL_REVISION 2
     * }
     */
    public static int MIN_ACL_REVISION() {
        return MIN_ACL_REVISION;
    }
    private static final int ACL_REVISION2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ACL_REVISION2 2
     * }
     */
    public static int ACL_REVISION2() {
        return ACL_REVISION2;
    }
    private static final int ACL_REVISION3 = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ACL_REVISION3 3
     * }
     */
    public static int ACL_REVISION3() {
        return ACL_REVISION3;
    }
    private static final int ACL_REVISION4 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ACL_REVISION4 4
     * }
     */
    public static int ACL_REVISION4() {
        return ACL_REVISION4;
    }
    private static final int MAX_ACL_REVISION = (int)4L;
    /**
     * {@snippet lang=c :
     * #define MAX_ACL_REVISION 4
     * }
     */
    public static int MAX_ACL_REVISION() {
        return MAX_ACL_REVISION;
    }
    private static final int ACCESS_MIN_MS_ACE_TYPE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_MIN_MS_ACE_TYPE 0
     * }
     */
    public static int ACCESS_MIN_MS_ACE_TYPE() {
        return ACCESS_MIN_MS_ACE_TYPE;
    }
    private static final int ACCESS_ALLOWED_ACE_TYPE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_ALLOWED_ACE_TYPE 0
     * }
     */
    public static int ACCESS_ALLOWED_ACE_TYPE() {
        return ACCESS_ALLOWED_ACE_TYPE;
    }
    private static final int ACCESS_DENIED_ACE_TYPE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_DENIED_ACE_TYPE 1
     * }
     */
    public static int ACCESS_DENIED_ACE_TYPE() {
        return ACCESS_DENIED_ACE_TYPE;
    }
    private static final int SYSTEM_AUDIT_ACE_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_AUDIT_ACE_TYPE 2
     * }
     */
    public static int SYSTEM_AUDIT_ACE_TYPE() {
        return SYSTEM_AUDIT_ACE_TYPE;
    }
    private static final int SYSTEM_ALARM_ACE_TYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_ALARM_ACE_TYPE 3
     * }
     */
    public static int SYSTEM_ALARM_ACE_TYPE() {
        return SYSTEM_ALARM_ACE_TYPE;
    }
    private static final int ACCESS_MAX_MS_V2_ACE_TYPE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_MAX_MS_V2_ACE_TYPE 3
     * }
     */
    public static int ACCESS_MAX_MS_V2_ACE_TYPE() {
        return ACCESS_MAX_MS_V2_ACE_TYPE;
    }
    private static final int ACCESS_ALLOWED_COMPOUND_ACE_TYPE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_ALLOWED_COMPOUND_ACE_TYPE 4
     * }
     */
    public static int ACCESS_ALLOWED_COMPOUND_ACE_TYPE() {
        return ACCESS_ALLOWED_COMPOUND_ACE_TYPE;
    }
    private static final int ACCESS_MAX_MS_V3_ACE_TYPE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_MAX_MS_V3_ACE_TYPE 4
     * }
     */
    public static int ACCESS_MAX_MS_V3_ACE_TYPE() {
        return ACCESS_MAX_MS_V3_ACE_TYPE;
    }
    private static final int ACCESS_MIN_MS_OBJECT_ACE_TYPE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_MIN_MS_OBJECT_ACE_TYPE 5
     * }
     */
    public static int ACCESS_MIN_MS_OBJECT_ACE_TYPE() {
        return ACCESS_MIN_MS_OBJECT_ACE_TYPE;
    }
    private static final int ACCESS_ALLOWED_OBJECT_ACE_TYPE = (int)5L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_ALLOWED_OBJECT_ACE_TYPE 5
     * }
     */
    public static int ACCESS_ALLOWED_OBJECT_ACE_TYPE() {
        return ACCESS_ALLOWED_OBJECT_ACE_TYPE;
    }
    private static final int ACCESS_DENIED_OBJECT_ACE_TYPE = (int)6L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_DENIED_OBJECT_ACE_TYPE 6
     * }
     */
    public static int ACCESS_DENIED_OBJECT_ACE_TYPE() {
        return ACCESS_DENIED_OBJECT_ACE_TYPE;
    }
    private static final int SYSTEM_AUDIT_OBJECT_ACE_TYPE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_AUDIT_OBJECT_ACE_TYPE 7
     * }
     */
    public static int SYSTEM_AUDIT_OBJECT_ACE_TYPE() {
        return SYSTEM_AUDIT_OBJECT_ACE_TYPE;
    }
    private static final int SYSTEM_ALARM_OBJECT_ACE_TYPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_ALARM_OBJECT_ACE_TYPE 8
     * }
     */
    public static int SYSTEM_ALARM_OBJECT_ACE_TYPE() {
        return SYSTEM_ALARM_OBJECT_ACE_TYPE;
    }
    private static final int ACCESS_MAX_MS_OBJECT_ACE_TYPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_MAX_MS_OBJECT_ACE_TYPE 8
     * }
     */
    public static int ACCESS_MAX_MS_OBJECT_ACE_TYPE() {
        return ACCESS_MAX_MS_OBJECT_ACE_TYPE;
    }
    private static final int ACCESS_MAX_MS_V4_ACE_TYPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_MAX_MS_V4_ACE_TYPE 8
     * }
     */
    public static int ACCESS_MAX_MS_V4_ACE_TYPE() {
        return ACCESS_MAX_MS_V4_ACE_TYPE;
    }
    private static final int ACCESS_MAX_MS_ACE_TYPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_MAX_MS_ACE_TYPE 8
     * }
     */
    public static int ACCESS_MAX_MS_ACE_TYPE() {
        return ACCESS_MAX_MS_ACE_TYPE;
    }
    private static final int ACCESS_ALLOWED_CALLBACK_ACE_TYPE = (int)9L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_ALLOWED_CALLBACK_ACE_TYPE 9
     * }
     */
    public static int ACCESS_ALLOWED_CALLBACK_ACE_TYPE() {
        return ACCESS_ALLOWED_CALLBACK_ACE_TYPE;
    }
    private static final int ACCESS_DENIED_CALLBACK_ACE_TYPE = (int)10L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_DENIED_CALLBACK_ACE_TYPE 10
     * }
     */
    public static int ACCESS_DENIED_CALLBACK_ACE_TYPE() {
        return ACCESS_DENIED_CALLBACK_ACE_TYPE;
    }
    private static final int ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = (int)11L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE 11
     * }
     */
    public static int ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE() {
        return ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE;
    }
    private static final int ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = (int)12L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE 12
     * }
     */
    public static int ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE() {
        return ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE;
    }
    private static final int SYSTEM_AUDIT_CALLBACK_ACE_TYPE = (int)13L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_AUDIT_CALLBACK_ACE_TYPE 13
     * }
     */
    public static int SYSTEM_AUDIT_CALLBACK_ACE_TYPE() {
        return SYSTEM_AUDIT_CALLBACK_ACE_TYPE;
    }
    private static final int SYSTEM_ALARM_CALLBACK_ACE_TYPE = (int)14L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_ALARM_CALLBACK_ACE_TYPE 14
     * }
     */
    public static int SYSTEM_ALARM_CALLBACK_ACE_TYPE() {
        return SYSTEM_ALARM_CALLBACK_ACE_TYPE;
    }
    private static final int SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = (int)15L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE 15
     * }
     */
    public static int SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE() {
        return SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE;
    }
    private static final int SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE 16
     * }
     */
    public static int SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE() {
        return SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE;
    }
    private static final int SYSTEM_MANDATORY_LABEL_ACE_TYPE = (int)17L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_MANDATORY_LABEL_ACE_TYPE 17
     * }
     */
    public static int SYSTEM_MANDATORY_LABEL_ACE_TYPE() {
        return SYSTEM_MANDATORY_LABEL_ACE_TYPE;
    }
    private static final int SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE = (int)18L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE 18
     * }
     */
    public static int SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE() {
        return SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE;
    }
    private static final int SYSTEM_SCOPED_POLICY_ID_ACE_TYPE = (int)19L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_SCOPED_POLICY_ID_ACE_TYPE 19
     * }
     */
    public static int SYSTEM_SCOPED_POLICY_ID_ACE_TYPE() {
        return SYSTEM_SCOPED_POLICY_ID_ACE_TYPE;
    }
    private static final int SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE = (int)20L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE 20
     * }
     */
    public static int SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE() {
        return SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE;
    }
    private static final int SYSTEM_ACCESS_FILTER_ACE_TYPE = (int)21L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_ACCESS_FILTER_ACE_TYPE 21
     * }
     */
    public static int SYSTEM_ACCESS_FILTER_ACE_TYPE() {
        return SYSTEM_ACCESS_FILTER_ACE_TYPE;
    }
    private static final int ACCESS_MAX_MS_V5_ACE_TYPE = (int)21L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_MAX_MS_V5_ACE_TYPE 21
     * }
     */
    public static int ACCESS_MAX_MS_V5_ACE_TYPE() {
        return ACCESS_MAX_MS_V5_ACE_TYPE;
    }
    private static final int OBJECT_INHERIT_ACE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OBJECT_INHERIT_ACE 1
     * }
     */
    public static int OBJECT_INHERIT_ACE() {
        return OBJECT_INHERIT_ACE;
    }
    private static final int CONTAINER_INHERIT_ACE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CONTAINER_INHERIT_ACE 2
     * }
     */
    public static int CONTAINER_INHERIT_ACE() {
        return CONTAINER_INHERIT_ACE;
    }
    private static final int NO_PROPAGATE_INHERIT_ACE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define NO_PROPAGATE_INHERIT_ACE 4
     * }
     */
    public static int NO_PROPAGATE_INHERIT_ACE() {
        return NO_PROPAGATE_INHERIT_ACE;
    }
    private static final int INHERIT_ONLY_ACE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define INHERIT_ONLY_ACE 8
     * }
     */
    public static int INHERIT_ONLY_ACE() {
        return INHERIT_ONLY_ACE;
    }
    private static final int INHERITED_ACE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define INHERITED_ACE 16
     * }
     */
    public static int INHERITED_ACE() {
        return INHERITED_ACE;
    }
    private static final int VALID_INHERIT_FLAGS = (int)31L;
    /**
     * {@snippet lang=c :
     * #define VALID_INHERIT_FLAGS 31
     * }
     */
    public static int VALID_INHERIT_FLAGS() {
        return VALID_INHERIT_FLAGS;
    }
    private static final int CRITICAL_ACE_FLAG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define CRITICAL_ACE_FLAG 32
     * }
     */
    public static int CRITICAL_ACE_FLAG() {
        return CRITICAL_ACE_FLAG;
    }
    private static final int SUCCESSFUL_ACCESS_ACE_FLAG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SUCCESSFUL_ACCESS_ACE_FLAG 64
     * }
     */
    public static int SUCCESSFUL_ACCESS_ACE_FLAG() {
        return SUCCESSFUL_ACCESS_ACE_FLAG;
    }
    private static final int FAILED_ACCESS_ACE_FLAG = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FAILED_ACCESS_ACE_FLAG 128
     * }
     */
    public static int FAILED_ACCESS_ACE_FLAG() {
        return FAILED_ACCESS_ACE_FLAG;
    }
    private static final int TRUST_PROTECTED_FILTER_ACE_FLAG = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TRUST_PROTECTED_FILTER_ACE_FLAG 64
     * }
     */
    public static int TRUST_PROTECTED_FILTER_ACE_FLAG() {
        return TRUST_PROTECTED_FILTER_ACE_FLAG;
    }
    private static final int SYSTEM_MANDATORY_LABEL_VALID_MASK = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_MANDATORY_LABEL_VALID_MASK 7
     * }
     */
    public static int SYSTEM_MANDATORY_LABEL_VALID_MASK() {
        return SYSTEM_MANDATORY_LABEL_VALID_MASK;
    }
    private static final int SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK 4294967295
     * }
     */
    public static int SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK() {
        return SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK;
    }
    private static final int SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK 4294967295
     * }
     */
    public static int SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK() {
        return SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK;
    }
    private static final int SECURITY_DESCRIPTOR_REVISION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_DESCRIPTOR_REVISION 1
     * }
     */
    public static int SECURITY_DESCRIPTOR_REVISION() {
        return SECURITY_DESCRIPTOR_REVISION;
    }
    private static final int SECURITY_DESCRIPTOR_REVISION1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_DESCRIPTOR_REVISION1 1
     * }
     */
    public static int SECURITY_DESCRIPTOR_REVISION1() {
        return SECURITY_DESCRIPTOR_REVISION1;
    }
    private static final long SECURITY_DESCRIPTOR_MIN_LENGTH = 40L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_DESCRIPTOR_MIN_LENGTH 40
     * }
     */
    public static long SECURITY_DESCRIPTOR_MIN_LENGTH() {
        return SECURITY_DESCRIPTOR_MIN_LENGTH;
    }
    private static final int SE_OWNER_DEFAULTED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SE_OWNER_DEFAULTED 1
     * }
     */
    public static int SE_OWNER_DEFAULTED() {
        return SE_OWNER_DEFAULTED;
    }
    private static final int SE_GROUP_DEFAULTED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SE_GROUP_DEFAULTED 2
     * }
     */
    public static int SE_GROUP_DEFAULTED() {
        return SE_GROUP_DEFAULTED;
    }
    private static final int SE_DACL_PRESENT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SE_DACL_PRESENT 4
     * }
     */
    public static int SE_DACL_PRESENT() {
        return SE_DACL_PRESENT;
    }
    private static final int SE_DACL_DEFAULTED = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SE_DACL_DEFAULTED 8
     * }
     */
    public static int SE_DACL_DEFAULTED() {
        return SE_DACL_DEFAULTED;
    }
    private static final int SE_SACL_PRESENT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SE_SACL_PRESENT 16
     * }
     */
    public static int SE_SACL_PRESENT() {
        return SE_SACL_PRESENT;
    }
    private static final int SE_SACL_DEFAULTED = (int)32L;
    /**
     * {@snippet lang=c :
     * #define SE_SACL_DEFAULTED 32
     * }
     */
    public static int SE_SACL_DEFAULTED() {
        return SE_SACL_DEFAULTED;
    }
    private static final int SE_DACL_AUTO_INHERIT_REQ = (int)256L;
    /**
     * {@snippet lang=c :
     * #define SE_DACL_AUTO_INHERIT_REQ 256
     * }
     */
    public static int SE_DACL_AUTO_INHERIT_REQ() {
        return SE_DACL_AUTO_INHERIT_REQ;
    }
    private static final int SE_SACL_AUTO_INHERIT_REQ = (int)512L;
    /**
     * {@snippet lang=c :
     * #define SE_SACL_AUTO_INHERIT_REQ 512
     * }
     */
    public static int SE_SACL_AUTO_INHERIT_REQ() {
        return SE_SACL_AUTO_INHERIT_REQ;
    }
    private static final int SE_DACL_AUTO_INHERITED = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define SE_DACL_AUTO_INHERITED 1024
     * }
     */
    public static int SE_DACL_AUTO_INHERITED() {
        return SE_DACL_AUTO_INHERITED;
    }
    private static final int SE_SACL_AUTO_INHERITED = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define SE_SACL_AUTO_INHERITED 2048
     * }
     */
    public static int SE_SACL_AUTO_INHERITED() {
        return SE_SACL_AUTO_INHERITED;
    }
    private static final int SE_DACL_PROTECTED = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define SE_DACL_PROTECTED 4096
     * }
     */
    public static int SE_DACL_PROTECTED() {
        return SE_DACL_PROTECTED;
    }
    private static final int SE_SACL_PROTECTED = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define SE_SACL_PROTECTED 8192
     * }
     */
    public static int SE_SACL_PROTECTED() {
        return SE_SACL_PROTECTED;
    }
    private static final int SE_RM_CONTROL_VALID = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define SE_RM_CONTROL_VALID 16384
     * }
     */
    public static int SE_RM_CONTROL_VALID() {
        return SE_RM_CONTROL_VALID;
    }
    private static final int SE_SELF_RELATIVE = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define SE_SELF_RELATIVE 32768
     * }
     */
    public static int SE_SELF_RELATIVE() {
        return SE_SELF_RELATIVE;
    }
    /**
     * {@snippet lang=c :
     * #define ACCESS_DS_SOURCE_A "DS"
     * }
     */
    public static MemorySegment ACCESS_DS_SOURCE_A() {
        class Holder {
            static final MemorySegment ACCESS_DS_SOURCE_A
                = winapi.LIBRARY_ARENA.allocateFrom("DS");
        }
        return Holder.ACCESS_DS_SOURCE_A;
    }
    /**
     * {@snippet lang=c :
     * #define ACCESS_DS_SOURCE_W "D"
     * }
     */
    public static MemorySegment ACCESS_DS_SOURCE_W() {
        class Holder {
            static final MemorySegment ACCESS_DS_SOURCE_W
                = winapi.LIBRARY_ARENA.allocateFrom("D");
        }
        return Holder.ACCESS_DS_SOURCE_W;
    }
    /**
     * {@snippet lang=c :
     * #define ACCESS_DS_OBJECT_TYPE_NAME_A "Directory Service Object"
     * }
     */
    public static MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_A() {
        class Holder {
            static final MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_A
                = winapi.LIBRARY_ARENA.allocateFrom("Directory Service Object");
        }
        return Holder.ACCESS_DS_OBJECT_TYPE_NAME_A;
    }
    /**
     * {@snippet lang=c :
     * #define ACCESS_DS_OBJECT_TYPE_NAME_W "D"
     * }
     */
    public static MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_W() {
        class Holder {
            static final MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_W
                = winapi.LIBRARY_ARENA.allocateFrom("D");
        }
        return Holder.ACCESS_DS_OBJECT_TYPE_NAME_W;
    }
    private static final int SE_PRIVILEGE_ENABLED_BY_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SE_PRIVILEGE_ENABLED_BY_DEFAULT 1
     * }
     */
    public static int SE_PRIVILEGE_ENABLED_BY_DEFAULT() {
        return SE_PRIVILEGE_ENABLED_BY_DEFAULT;
    }
    private static final int SE_PRIVILEGE_ENABLED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SE_PRIVILEGE_ENABLED 2
     * }
     */
    public static int SE_PRIVILEGE_ENABLED() {
        return SE_PRIVILEGE_ENABLED;
    }
    private static final int SE_PRIVILEGE_REMOVED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SE_PRIVILEGE_REMOVED 4
     * }
     */
    public static int SE_PRIVILEGE_REMOVED() {
        return SE_PRIVILEGE_REMOVED;
    }
    private static final int SE_PRIVILEGE_USED_FOR_ACCESS = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define SE_PRIVILEGE_USED_FOR_ACCESS 2147483648
     * }
     */
    public static int SE_PRIVILEGE_USED_FOR_ACCESS() {
        return SE_PRIVILEGE_USED_FOR_ACCESS;
    }
    private static final int SE_PRIVILEGE_VALID_ATTRIBUTES = (int)2147483655L;
    /**
     * {@snippet lang=c :
     * #define SE_PRIVILEGE_VALID_ATTRIBUTES 2147483655
     * }
     */
    public static int SE_PRIVILEGE_VALID_ATTRIBUTES() {
        return SE_PRIVILEGE_VALID_ATTRIBUTES;
    }
    private static final int PRIVILEGE_SET_ALL_NECESSARY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PRIVILEGE_SET_ALL_NECESSARY 1
     * }
     */
    public static int PRIVILEGE_SET_ALL_NECESSARY() {
        return PRIVILEGE_SET_ALL_NECESSARY;
    }
    private static final int ACCESS_REASON_STAGING_MASK = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_REASON_STAGING_MASK 2147483648
     * }
     */
    public static int ACCESS_REASON_STAGING_MASK() {
        return ACCESS_REASON_STAGING_MASK;
    }
    /**
     * {@snippet lang=c :
     * #define SE_CREATE_TOKEN_NAME "SeCreateTokenPrivilege"
     * }
     */
    public static MemorySegment SE_CREATE_TOKEN_NAME() {
        class Holder {
            static final MemorySegment SE_CREATE_TOKEN_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeCreateTokenPrivilege");
        }
        return Holder.SE_CREATE_TOKEN_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_ASSIGNPRIMARYTOKEN_NAME "SeAssignPrimaryTokenPrivilege"
     * }
     */
    public static MemorySegment SE_ASSIGNPRIMARYTOKEN_NAME() {
        class Holder {
            static final MemorySegment SE_ASSIGNPRIMARYTOKEN_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeAssignPrimaryTokenPrivilege");
        }
        return Holder.SE_ASSIGNPRIMARYTOKEN_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_LOCK_MEMORY_NAME "SeLockMemoryPrivilege"
     * }
     */
    public static MemorySegment SE_LOCK_MEMORY_NAME() {
        class Holder {
            static final MemorySegment SE_LOCK_MEMORY_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeLockMemoryPrivilege");
        }
        return Holder.SE_LOCK_MEMORY_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_INCREASE_QUOTA_NAME "SeIncreaseQuotaPrivilege"
     * }
     */
    public static MemorySegment SE_INCREASE_QUOTA_NAME() {
        class Holder {
            static final MemorySegment SE_INCREASE_QUOTA_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeIncreaseQuotaPrivilege");
        }
        return Holder.SE_INCREASE_QUOTA_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_UNSOLICITED_INPUT_NAME "SeUnsolicitedInputPrivilege"
     * }
     */
    public static MemorySegment SE_UNSOLICITED_INPUT_NAME() {
        class Holder {
            static final MemorySegment SE_UNSOLICITED_INPUT_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeUnsolicitedInputPrivilege");
        }
        return Holder.SE_UNSOLICITED_INPUT_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_MACHINE_ACCOUNT_NAME "SeMachineAccountPrivilege"
     * }
     */
    public static MemorySegment SE_MACHINE_ACCOUNT_NAME() {
        class Holder {
            static final MemorySegment SE_MACHINE_ACCOUNT_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeMachineAccountPrivilege");
        }
        return Holder.SE_MACHINE_ACCOUNT_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_TCB_NAME "SeTcbPrivilege"
     * }
     */
    public static MemorySegment SE_TCB_NAME() {
        class Holder {
            static final MemorySegment SE_TCB_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeTcbPrivilege");
        }
        return Holder.SE_TCB_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_SECURITY_NAME "SeSecurityPrivilege"
     * }
     */
    public static MemorySegment SE_SECURITY_NAME() {
        class Holder {
            static final MemorySegment SE_SECURITY_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeSecurityPrivilege");
        }
        return Holder.SE_SECURITY_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_TAKE_OWNERSHIP_NAME "SeTakeOwnershipPrivilege"
     * }
     */
    public static MemorySegment SE_TAKE_OWNERSHIP_NAME() {
        class Holder {
            static final MemorySegment SE_TAKE_OWNERSHIP_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeTakeOwnershipPrivilege");
        }
        return Holder.SE_TAKE_OWNERSHIP_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_LOAD_DRIVER_NAME "SeLoadDriverPrivilege"
     * }
     */
    public static MemorySegment SE_LOAD_DRIVER_NAME() {
        class Holder {
            static final MemorySegment SE_LOAD_DRIVER_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeLoadDriverPrivilege");
        }
        return Holder.SE_LOAD_DRIVER_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_SYSTEM_PROFILE_NAME "SeSystemProfilePrivilege"
     * }
     */
    public static MemorySegment SE_SYSTEM_PROFILE_NAME() {
        class Holder {
            static final MemorySegment SE_SYSTEM_PROFILE_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeSystemProfilePrivilege");
        }
        return Holder.SE_SYSTEM_PROFILE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_SYSTEMTIME_NAME "SeSystemtimePrivilege"
     * }
     */
    public static MemorySegment SE_SYSTEMTIME_NAME() {
        class Holder {
            static final MemorySegment SE_SYSTEMTIME_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeSystemtimePrivilege");
        }
        return Holder.SE_SYSTEMTIME_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_PROF_SINGLE_PROCESS_NAME "SeProfileSingleProcessPrivilege"
     * }
     */
    public static MemorySegment SE_PROF_SINGLE_PROCESS_NAME() {
        class Holder {
            static final MemorySegment SE_PROF_SINGLE_PROCESS_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeProfileSingleProcessPrivilege");
        }
        return Holder.SE_PROF_SINGLE_PROCESS_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_INC_BASE_PRIORITY_NAME "SeIncreaseBasePriorityPrivilege"
     * }
     */
    public static MemorySegment SE_INC_BASE_PRIORITY_NAME() {
        class Holder {
            static final MemorySegment SE_INC_BASE_PRIORITY_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeIncreaseBasePriorityPrivilege");
        }
        return Holder.SE_INC_BASE_PRIORITY_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_CREATE_PAGEFILE_NAME "SeCreatePagefilePrivilege"
     * }
     */
    public static MemorySegment SE_CREATE_PAGEFILE_NAME() {
        class Holder {
            static final MemorySegment SE_CREATE_PAGEFILE_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeCreatePagefilePrivilege");
        }
        return Holder.SE_CREATE_PAGEFILE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_CREATE_PERMANENT_NAME "SeCreatePermanentPrivilege"
     * }
     */
    public static MemorySegment SE_CREATE_PERMANENT_NAME() {
        class Holder {
            static final MemorySegment SE_CREATE_PERMANENT_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeCreatePermanentPrivilege");
        }
        return Holder.SE_CREATE_PERMANENT_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_BACKUP_NAME "SeBackupPrivilege"
     * }
     */
    public static MemorySegment SE_BACKUP_NAME() {
        class Holder {
            static final MemorySegment SE_BACKUP_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeBackupPrivilege");
        }
        return Holder.SE_BACKUP_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_RESTORE_NAME "SeRestorePrivilege"
     * }
     */
    public static MemorySegment SE_RESTORE_NAME() {
        class Holder {
            static final MemorySegment SE_RESTORE_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeRestorePrivilege");
        }
        return Holder.SE_RESTORE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_SHUTDOWN_NAME "SeShutdownPrivilege"
     * }
     */
    public static MemorySegment SE_SHUTDOWN_NAME() {
        class Holder {
            static final MemorySegment SE_SHUTDOWN_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeShutdownPrivilege");
        }
        return Holder.SE_SHUTDOWN_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_DEBUG_NAME "SeDebugPrivilege"
     * }
     */
    public static MemorySegment SE_DEBUG_NAME() {
        class Holder {
            static final MemorySegment SE_DEBUG_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeDebugPrivilege");
        }
        return Holder.SE_DEBUG_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_AUDIT_NAME "SeAuditPrivilege"
     * }
     */
    public static MemorySegment SE_AUDIT_NAME() {
        class Holder {
            static final MemorySegment SE_AUDIT_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeAuditPrivilege");
        }
        return Holder.SE_AUDIT_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_SYSTEM_ENVIRONMENT_NAME "SeSystemEnvironmentPrivilege"
     * }
     */
    public static MemorySegment SE_SYSTEM_ENVIRONMENT_NAME() {
        class Holder {
            static final MemorySegment SE_SYSTEM_ENVIRONMENT_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeSystemEnvironmentPrivilege");
        }
        return Holder.SE_SYSTEM_ENVIRONMENT_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_CHANGE_NOTIFY_NAME "SeChangeNotifyPrivilege"
     * }
     */
    public static MemorySegment SE_CHANGE_NOTIFY_NAME() {
        class Holder {
            static final MemorySegment SE_CHANGE_NOTIFY_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeChangeNotifyPrivilege");
        }
        return Holder.SE_CHANGE_NOTIFY_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_REMOTE_SHUTDOWN_NAME "SeRemoteShutdownPrivilege"
     * }
     */
    public static MemorySegment SE_REMOTE_SHUTDOWN_NAME() {
        class Holder {
            static final MemorySegment SE_REMOTE_SHUTDOWN_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeRemoteShutdownPrivilege");
        }
        return Holder.SE_REMOTE_SHUTDOWN_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_UNDOCK_NAME "SeUndockPrivilege"
     * }
     */
    public static MemorySegment SE_UNDOCK_NAME() {
        class Holder {
            static final MemorySegment SE_UNDOCK_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeUndockPrivilege");
        }
        return Holder.SE_UNDOCK_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_SYNC_AGENT_NAME "SeSyncAgentPrivilege"
     * }
     */
    public static MemorySegment SE_SYNC_AGENT_NAME() {
        class Holder {
            static final MemorySegment SE_SYNC_AGENT_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeSyncAgentPrivilege");
        }
        return Holder.SE_SYNC_AGENT_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_ENABLE_DELEGATION_NAME "SeEnableDelegationPrivilege"
     * }
     */
    public static MemorySegment SE_ENABLE_DELEGATION_NAME() {
        class Holder {
            static final MemorySegment SE_ENABLE_DELEGATION_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeEnableDelegationPrivilege");
        }
        return Holder.SE_ENABLE_DELEGATION_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_MANAGE_VOLUME_NAME "SeManageVolumePrivilege"
     * }
     */
    public static MemorySegment SE_MANAGE_VOLUME_NAME() {
        class Holder {
            static final MemorySegment SE_MANAGE_VOLUME_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeManageVolumePrivilege");
        }
        return Holder.SE_MANAGE_VOLUME_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_IMPERSONATE_NAME "SeImpersonatePrivilege"
     * }
     */
    public static MemorySegment SE_IMPERSONATE_NAME() {
        class Holder {
            static final MemorySegment SE_IMPERSONATE_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeImpersonatePrivilege");
        }
        return Holder.SE_IMPERSONATE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_CREATE_GLOBAL_NAME "SeCreateGlobalPrivilege"
     * }
     */
    public static MemorySegment SE_CREATE_GLOBAL_NAME() {
        class Holder {
            static final MemorySegment SE_CREATE_GLOBAL_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeCreateGlobalPrivilege");
        }
        return Holder.SE_CREATE_GLOBAL_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_TRUSTED_CREDMAN_ACCESS_NAME "SeTrustedCredManAccessPrivilege"
     * }
     */
    public static MemorySegment SE_TRUSTED_CREDMAN_ACCESS_NAME() {
        class Holder {
            static final MemorySegment SE_TRUSTED_CREDMAN_ACCESS_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeTrustedCredManAccessPrivilege");
        }
        return Holder.SE_TRUSTED_CREDMAN_ACCESS_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_RELABEL_NAME "SeRelabelPrivilege"
     * }
     */
    public static MemorySegment SE_RELABEL_NAME() {
        class Holder {
            static final MemorySegment SE_RELABEL_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeRelabelPrivilege");
        }
        return Holder.SE_RELABEL_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_INC_WORKING_SET_NAME "SeIncreaseWorkingSetPrivilege"
     * }
     */
    public static MemorySegment SE_INC_WORKING_SET_NAME() {
        class Holder {
            static final MemorySegment SE_INC_WORKING_SET_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeIncreaseWorkingSetPrivilege");
        }
        return Holder.SE_INC_WORKING_SET_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_TIME_ZONE_NAME "SeTimeZonePrivilege"
     * }
     */
    public static MemorySegment SE_TIME_ZONE_NAME() {
        class Holder {
            static final MemorySegment SE_TIME_ZONE_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeTimeZonePrivilege");
        }
        return Holder.SE_TIME_ZONE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_CREATE_SYMBOLIC_LINK_NAME "SeCreateSymbolicLinkPrivilege"
     * }
     */
    public static MemorySegment SE_CREATE_SYMBOLIC_LINK_NAME() {
        class Holder {
            static final MemorySegment SE_CREATE_SYMBOLIC_LINK_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeCreateSymbolicLinkPrivilege");
        }
        return Holder.SE_CREATE_SYMBOLIC_LINK_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME "SeDelegateSessionUserImpersonatePrivilege"
     * }
     */
    public static MemorySegment SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME() {
        class Holder {
            static final MemorySegment SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("SeDelegateSessionUserImpersonatePrivilege");
        }
        return Holder.SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME;
    }
    /**
     * {@snippet lang=c :
     * #define SE_ACTIVATE_AS_USER_CAPABILITY "a"
     * }
     */
    public static MemorySegment SE_ACTIVATE_AS_USER_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_ACTIVATE_AS_USER_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("a");
        }
        return Holder.SE_ACTIVATE_AS_USER_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_CONSTRAINED_IMPERSONATION_CAPABILITY "c"
     * }
     */
    public static MemorySegment SE_CONSTRAINED_IMPERSONATION_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_CONSTRAINED_IMPERSONATION_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("c");
        }
        return Holder.SE_CONSTRAINED_IMPERSONATION_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_SESSION_IMPERSONATION_CAPABILITY "s"
     * }
     */
    public static MemorySegment SE_SESSION_IMPERSONATION_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_SESSION_IMPERSONATION_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("s");
        }
        return Holder.SE_SESSION_IMPERSONATION_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_MUMA_CAPABILITY "m"
     * }
     */
    public static MemorySegment SE_MUMA_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_MUMA_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("m");
        }
        return Holder.SE_MUMA_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY "d"
     * }
     */
    public static MemorySegment SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("d");
        }
        return Holder.SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_LEARNING_MODE_LOGGING_CAPABILITY "l"
     * }
     */
    public static MemorySegment SE_LEARNING_MODE_LOGGING_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_LEARNING_MODE_LOGGING_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("l");
        }
        return Holder.SE_LEARNING_MODE_LOGGING_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_PERMISSIVE_LEARNING_MODE_CAPABILITY "p"
     * }
     */
    public static MemorySegment SE_PERMISSIVE_LEARNING_MODE_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_PERMISSIVE_LEARNING_MODE_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("p");
        }
        return Holder.SE_PERMISSIVE_LEARNING_MODE_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_APP_SILO_VOLUME_ROOT_MINIMAL_CAPABILITY "i"
     * }
     */
    public static MemorySegment SE_APP_SILO_VOLUME_ROOT_MINIMAL_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_APP_SILO_VOLUME_ROOT_MINIMAL_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SE_APP_SILO_VOLUME_ROOT_MINIMAL_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_APP_SILO_PROFILES_ROOT_MINIMAL_CAPABILITY "i"
     * }
     */
    public static MemorySegment SE_APP_SILO_PROFILES_ROOT_MINIMAL_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_APP_SILO_PROFILES_ROOT_MINIMAL_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SE_APP_SILO_PROFILES_ROOT_MINIMAL_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_APP_SILO_USER_PROFILE_MINIMAL_CAPABILITY "i"
     * }
     */
    public static MemorySegment SE_APP_SILO_USER_PROFILE_MINIMAL_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_APP_SILO_USER_PROFILE_MINIMAL_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SE_APP_SILO_USER_PROFILE_MINIMAL_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_APP_SILO_PROMPT_FOR_ACCESS_CAPABILITY "i"
     * }
     */
    public static MemorySegment SE_APP_SILO_PROMPT_FOR_ACCESS_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_APP_SILO_PROMPT_FOR_ACCESS_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SE_APP_SILO_PROMPT_FOR_ACCESS_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_APP_SILO_ACCESS_TO_PUBLISHER_DIRECTORY_CAPABILITY "i"
     * }
     */
    public static MemorySegment SE_APP_SILO_ACCESS_TO_PUBLISHER_DIRECTORY_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_APP_SILO_ACCESS_TO_PUBLISHER_DIRECTORY_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SE_APP_SILO_ACCESS_TO_PUBLISHER_DIRECTORY_CAPABILITY;
    }
    /**
     * {@snippet lang=c :
     * #define SE_APP_SILO_PRINT_CAPABILITY "i"
     * }
     */
    public static MemorySegment SE_APP_SILO_PRINT_CAPABILITY() {
        class Holder {
            static final MemorySegment SE_APP_SILO_PRINT_CAPABILITY
                = winapi.LIBRARY_ARENA.allocateFrom("i");
        }
        return Holder.SE_APP_SILO_PRINT_CAPABILITY;
    }
    private static final int SECURITY_MAX_IMPERSONATION_LEVEL = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MAX_IMPERSONATION_LEVEL 3
     * }
     */
    public static int SECURITY_MAX_IMPERSONATION_LEVEL() {
        return SECURITY_MAX_IMPERSONATION_LEVEL;
    }
    private static final int SECURITY_MIN_IMPERSONATION_LEVEL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_MIN_IMPERSONATION_LEVEL 0
     * }
     */
    public static int SECURITY_MIN_IMPERSONATION_LEVEL() {
        return SECURITY_MIN_IMPERSONATION_LEVEL;
    }
    private static final int DEFAULT_IMPERSONATION_LEVEL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define DEFAULT_IMPERSONATION_LEVEL 2
     * }
     */
    public static int DEFAULT_IMPERSONATION_LEVEL() {
        return DEFAULT_IMPERSONATION_LEVEL;
    }
    private static final int TOKEN_ASSIGN_PRIMARY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ASSIGN_PRIMARY 1
     * }
     */
    public static int TOKEN_ASSIGN_PRIMARY() {
        return TOKEN_ASSIGN_PRIMARY;
    }
    private static final int TOKEN_DUPLICATE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_DUPLICATE 2
     * }
     */
    public static int TOKEN_DUPLICATE() {
        return TOKEN_DUPLICATE;
    }
    private static final int TOKEN_IMPERSONATE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_IMPERSONATE 4
     * }
     */
    public static int TOKEN_IMPERSONATE() {
        return TOKEN_IMPERSONATE;
    }
    private static final int TOKEN_QUERY = (int)8L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_QUERY 8
     * }
     */
    public static int TOKEN_QUERY() {
        return TOKEN_QUERY;
    }
    private static final int TOKEN_QUERY_SOURCE = (int)16L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_QUERY_SOURCE 16
     * }
     */
    public static int TOKEN_QUERY_SOURCE() {
        return TOKEN_QUERY_SOURCE;
    }
    private static final int TOKEN_ADJUST_PRIVILEGES = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ADJUST_PRIVILEGES 32
     * }
     */
    public static int TOKEN_ADJUST_PRIVILEGES() {
        return TOKEN_ADJUST_PRIVILEGES;
    }
    private static final int TOKEN_ADJUST_GROUPS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ADJUST_GROUPS 64
     * }
     */
    public static int TOKEN_ADJUST_GROUPS() {
        return TOKEN_ADJUST_GROUPS;
    }
    private static final int TOKEN_ADJUST_DEFAULT = (int)128L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ADJUST_DEFAULT 128
     * }
     */
    public static int TOKEN_ADJUST_DEFAULT() {
        return TOKEN_ADJUST_DEFAULT;
    }
    private static final int TOKEN_ADJUST_SESSIONID = (int)256L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ADJUST_SESSIONID 256
     * }
     */
    public static int TOKEN_ADJUST_SESSIONID() {
        return TOKEN_ADJUST_SESSIONID;
    }
    private static final int TOKEN_ALL_ACCESS_P = (int)983295L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ALL_ACCESS_P 983295
     * }
     */
    public static int TOKEN_ALL_ACCESS_P() {
        return TOKEN_ALL_ACCESS_P;
    }
    private static final int TOKEN_ALL_ACCESS = (int)983551L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ALL_ACCESS 983551
     * }
     */
    public static int TOKEN_ALL_ACCESS() {
        return TOKEN_ALL_ACCESS;
    }
    private static final int TOKEN_READ = (int)131080L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_READ 131080
     * }
     */
    public static int TOKEN_READ() {
        return TOKEN_READ;
    }
    private static final int TOKEN_WRITE = (int)131296L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_WRITE 131296
     * }
     */
    public static int TOKEN_WRITE() {
        return TOKEN_WRITE;
    }
    private static final int TOKEN_EXECUTE = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_EXECUTE 131072
     * }
     */
    public static int TOKEN_EXECUTE() {
        return TOKEN_EXECUTE;
    }
    private static final int TOKEN_TRUST_CONSTRAINT_MASK = (int)131096L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_TRUST_CONSTRAINT_MASK 131096
     * }
     */
    public static int TOKEN_TRUST_CONSTRAINT_MASK() {
        return TOKEN_TRUST_CONSTRAINT_MASK;
    }
    private static final int TOKEN_TRUST_ALLOWED_MASK = (int)131102L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_TRUST_ALLOWED_MASK 131102
     * }
     */
    public static int TOKEN_TRUST_ALLOWED_MASK() {
        return TOKEN_TRUST_ALLOWED_MASK;
    }
    private static final int TOKEN_ACCESS_PSEUDO_HANDLE_WIN8 = (int)24L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ACCESS_PSEUDO_HANDLE_WIN8 24
     * }
     */
    public static int TOKEN_ACCESS_PSEUDO_HANDLE_WIN8() {
        return TOKEN_ACCESS_PSEUDO_HANDLE_WIN8;
    }
    private static final int TOKEN_ACCESS_PSEUDO_HANDLE = (int)24L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_ACCESS_PSEUDO_HANDLE 24
     * }
     */
    public static int TOKEN_ACCESS_PSEUDO_HANDLE() {
        return TOKEN_ACCESS_PSEUDO_HANDLE;
    }
    private static final long TOKEN_USER_MAX_SIZE = 84L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_USER_MAX_SIZE 84
     * }
     */
    public static long TOKEN_USER_MAX_SIZE() {
        return TOKEN_USER_MAX_SIZE;
    }
    private static final long TOKEN_OWNER_MAX_SIZE = 76L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_OWNER_MAX_SIZE 76
     * }
     */
    public static long TOKEN_OWNER_MAX_SIZE() {
        return TOKEN_OWNER_MAX_SIZE;
    }
    private static final int TOKEN_MANDATORY_POLICY_VALID_MASK = (int)3L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_MANDATORY_POLICY_VALID_MASK 3
     * }
     */
    public static int TOKEN_MANDATORY_POLICY_VALID_MASK() {
        return TOKEN_MANDATORY_POLICY_VALID_MASK;
    }
    private static final long TOKEN_INTEGRITY_LEVEL_MAX_SIZE = 84L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_INTEGRITY_LEVEL_MAX_SIZE 84
     * }
     */
    public static long TOKEN_INTEGRITY_LEVEL_MAX_SIZE() {
        return TOKEN_INTEGRITY_LEVEL_MAX_SIZE;
    }
    private static final int POLICY_AUDIT_SUBCATEGORY_COUNT = (int)59L;
    /**
     * {@snippet lang=c :
     * #define POLICY_AUDIT_SUBCATEGORY_COUNT 59
     * }
     */
    public static int POLICY_AUDIT_SUBCATEGORY_COUNT() {
        return POLICY_AUDIT_SUBCATEGORY_COUNT;
    }
    private static final long TOKEN_APPCONTAINER_SID_MAX_SIZE = 76L;
    /**
     * {@snippet lang=c :
     * #define TOKEN_APPCONTAINER_SID_MAX_SIZE 76
     * }
     */
    public static long TOKEN_APPCONTAINER_SID_MAX_SIZE() {
        return TOKEN_APPCONTAINER_SID_MAX_SIZE;
    }
    private static final int CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS = (int)63L;
    /**
     * {@snippet lang=c :
     * #define CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS 63
     * }
     */
    public static int CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS() {
        return CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS;
    }
    private static final int CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS = (int)4294901760L;
    /**
     * {@snippet lang=c :
     * #define CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS 4294901760
     * }
     */
    public static int CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS() {
        return CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS;
    }
    private static final int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION 1
     * }
     */
    public static int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION() {
        return CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION;
    }
    private static final int SECURITY_DYNAMIC_TRACKING = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_DYNAMIC_TRACKING 1
     * }
     */
    public static int SECURITY_DYNAMIC_TRACKING() {
        return SECURITY_DYNAMIC_TRACKING;
    }
    private static final int SECURITY_STATIC_TRACKING = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SECURITY_STATIC_TRACKING 0
     * }
     */
    public static int SECURITY_STATIC_TRACKING() {
        return SECURITY_STATIC_TRACKING;
    }
    private static final int OWNER_SECURITY_INFORMATION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OWNER_SECURITY_INFORMATION 1
     * }
     */
    public static int OWNER_SECURITY_INFORMATION() {
        return OWNER_SECURITY_INFORMATION;
    }
    private static final int GROUP_SECURITY_INFORMATION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GROUP_SECURITY_INFORMATION 2
     * }
     */
    public static int GROUP_SECURITY_INFORMATION() {
        return GROUP_SECURITY_INFORMATION;
    }
    private static final int DACL_SECURITY_INFORMATION = (int)4L;
    /**
     * {@snippet lang=c :
     * #define DACL_SECURITY_INFORMATION 4
     * }
     */
    public static int DACL_SECURITY_INFORMATION() {
        return DACL_SECURITY_INFORMATION;
    }
    private static final int SACL_SECURITY_INFORMATION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SACL_SECURITY_INFORMATION 8
     * }
     */
    public static int SACL_SECURITY_INFORMATION() {
        return SACL_SECURITY_INFORMATION;
    }
    private static final int LABEL_SECURITY_INFORMATION = (int)16L;
    /**
     * {@snippet lang=c :
     * #define LABEL_SECURITY_INFORMATION 16
     * }
     */
    public static int LABEL_SECURITY_INFORMATION() {
        return LABEL_SECURITY_INFORMATION;
    }
    private static final int ATTRIBUTE_SECURITY_INFORMATION = (int)32L;
    /**
     * {@snippet lang=c :
     * #define ATTRIBUTE_SECURITY_INFORMATION 32
     * }
     */
    public static int ATTRIBUTE_SECURITY_INFORMATION() {
        return ATTRIBUTE_SECURITY_INFORMATION;
    }
    private static final int SCOPE_SECURITY_INFORMATION = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SCOPE_SECURITY_INFORMATION 64
     * }
     */
    public static int SCOPE_SECURITY_INFORMATION() {
        return SCOPE_SECURITY_INFORMATION;
    }
    private static final int PROCESS_TRUST_LABEL_SECURITY_INFORMATION = (int)128L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_TRUST_LABEL_SECURITY_INFORMATION 128
     * }
     */
    public static int PROCESS_TRUST_LABEL_SECURITY_INFORMATION() {
        return PROCESS_TRUST_LABEL_SECURITY_INFORMATION;
    }
    private static final int ACCESS_FILTER_SECURITY_INFORMATION = (int)256L;
    /**
     * {@snippet lang=c :
     * #define ACCESS_FILTER_SECURITY_INFORMATION 256
     * }
     */
    public static int ACCESS_FILTER_SECURITY_INFORMATION() {
        return ACCESS_FILTER_SECURITY_INFORMATION;
    }
    private static final int BACKUP_SECURITY_INFORMATION = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define BACKUP_SECURITY_INFORMATION 65536
     * }
     */
    public static int BACKUP_SECURITY_INFORMATION() {
        return BACKUP_SECURITY_INFORMATION;
    }
    private static final int PROTECTED_DACL_SECURITY_INFORMATION = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define PROTECTED_DACL_SECURITY_INFORMATION 2147483648
     * }
     */
    public static int PROTECTED_DACL_SECURITY_INFORMATION() {
        return PROTECTED_DACL_SECURITY_INFORMATION;
    }
    private static final int PROTECTED_SACL_SECURITY_INFORMATION = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define PROTECTED_SACL_SECURITY_INFORMATION 1073741824
     * }
     */
    public static int PROTECTED_SACL_SECURITY_INFORMATION() {
        return PROTECTED_SACL_SECURITY_INFORMATION;
    }
    private static final int UNPROTECTED_DACL_SECURITY_INFORMATION = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define UNPROTECTED_DACL_SECURITY_INFORMATION 536870912
     * }
     */
    public static int UNPROTECTED_DACL_SECURITY_INFORMATION() {
        return UNPROTECTED_DACL_SECURITY_INFORMATION;
    }
    private static final int UNPROTECTED_SACL_SECURITY_INFORMATION = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define UNPROTECTED_SACL_SECURITY_INFORMATION 268435456
     * }
     */
    public static int UNPROTECTED_SACL_SECURITY_INFORMATION() {
        return UNPROTECTED_SACL_SECURITY_INFORMATION;
    }
    private static final int SE_SIGNING_LEVEL_DEVELOPER = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SE_SIGNING_LEVEL_DEVELOPER 3
     * }
     */
    public static int SE_SIGNING_LEVEL_DEVELOPER() {
        return SE_SIGNING_LEVEL_DEVELOPER;
    }
    private static final int SE_SIGNING_LEVEL_ANTIMALWARE = (int)7L;
    /**
     * {@snippet lang=c :
     * #define SE_SIGNING_LEVEL_ANTIMALWARE 7
     * }
     */
    public static int SE_SIGNING_LEVEL_ANTIMALWARE() {
        return SE_SIGNING_LEVEL_ANTIMALWARE;
    }
    private static final int PROCESS_TERMINATE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_TERMINATE 1
     * }
     */
    public static int PROCESS_TERMINATE() {
        return PROCESS_TERMINATE;
    }
    private static final int PROCESS_CREATE_THREAD = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_CREATE_THREAD 2
     * }
     */
    public static int PROCESS_CREATE_THREAD() {
        return PROCESS_CREATE_THREAD;
    }
    private static final int PROCESS_SET_SESSIONID = (int)4L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_SET_SESSIONID 4
     * }
     */
    public static int PROCESS_SET_SESSIONID() {
        return PROCESS_SET_SESSIONID;
    }
    private static final int PROCESS_VM_OPERATION = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_VM_OPERATION 8
     * }
     */
    public static int PROCESS_VM_OPERATION() {
        return PROCESS_VM_OPERATION;
    }
    private static final int PROCESS_VM_READ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_VM_READ 16
     * }
     */
    public static int PROCESS_VM_READ() {
        return PROCESS_VM_READ;
    }
    private static final int PROCESS_VM_WRITE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_VM_WRITE 32
     * }
     */
    public static int PROCESS_VM_WRITE() {
        return PROCESS_VM_WRITE;
    }
    private static final int PROCESS_DUP_HANDLE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_DUP_HANDLE 64
     * }
     */
    public static int PROCESS_DUP_HANDLE() {
        return PROCESS_DUP_HANDLE;
    }
    private static final int PROCESS_CREATE_PROCESS = (int)128L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_CREATE_PROCESS 128
     * }
     */
    public static int PROCESS_CREATE_PROCESS() {
        return PROCESS_CREATE_PROCESS;
    }
    private static final int PROCESS_SET_QUOTA = (int)256L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_SET_QUOTA 256
     * }
     */
    public static int PROCESS_SET_QUOTA() {
        return PROCESS_SET_QUOTA;
    }
    private static final int PROCESS_SET_INFORMATION = (int)512L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_SET_INFORMATION 512
     * }
     */
    public static int PROCESS_SET_INFORMATION() {
        return PROCESS_SET_INFORMATION;
    }
    private static final int PROCESS_QUERY_INFORMATION = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_QUERY_INFORMATION 1024
     * }
     */
    public static int PROCESS_QUERY_INFORMATION() {
        return PROCESS_QUERY_INFORMATION;
    }
    private static final int PROCESS_SUSPEND_RESUME = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_SUSPEND_RESUME 2048
     * }
     */
    public static int PROCESS_SUSPEND_RESUME() {
        return PROCESS_SUSPEND_RESUME;
    }
    private static final int PROCESS_QUERY_LIMITED_INFORMATION = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_QUERY_LIMITED_INFORMATION 4096
     * }
     */
    public static int PROCESS_QUERY_LIMITED_INFORMATION() {
        return PROCESS_QUERY_LIMITED_INFORMATION;
    }
    private static final int PROCESS_SET_LIMITED_INFORMATION = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_SET_LIMITED_INFORMATION 8192
     * }
     */
    public static int PROCESS_SET_LIMITED_INFORMATION() {
        return PROCESS_SET_LIMITED_INFORMATION;
    }
    private static final int PROCESS_ALL_ACCESS = (int)2097151L;
    /**
     * {@snippet lang=c :
     * #define PROCESS_ALL_ACCESS 2097151
     * }
     */
    public static int PROCESS_ALL_ACCESS() {
        return PROCESS_ALL_ACCESS;
    }
    private static final int THREAD_TERMINATE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define THREAD_TERMINATE 1
     * }
     */
    public static int THREAD_TERMINATE() {
        return THREAD_TERMINATE;
    }
    private static final int THREAD_SUSPEND_RESUME = (int)2L;
    /**
     * {@snippet lang=c :
     * #define THREAD_SUSPEND_RESUME 2
     * }
     */
    public static int THREAD_SUSPEND_RESUME() {
        return THREAD_SUSPEND_RESUME;
    }
    private static final int THREAD_GET_CONTEXT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define THREAD_GET_CONTEXT 8
     * }
     */
    public static int THREAD_GET_CONTEXT() {
        return THREAD_GET_CONTEXT;
    }
    private static final int THREAD_SET_CONTEXT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define THREAD_SET_CONTEXT 16
     * }
     */
    public static int THREAD_SET_CONTEXT() {
        return THREAD_SET_CONTEXT;
    }
    private static final int THREAD_QUERY_INFORMATION = (int)64L;
    /**
     * {@snippet lang=c :
     * #define THREAD_QUERY_INFORMATION 64
     * }
     */
    public static int THREAD_QUERY_INFORMATION() {
        return THREAD_QUERY_INFORMATION;
    }
    private static final int THREAD_SET_INFORMATION = (int)32L;
    /**
     * {@snippet lang=c :
     * #define THREAD_SET_INFORMATION 32
     * }
     */
    public static int THREAD_SET_INFORMATION() {
        return THREAD_SET_INFORMATION;
    }
    private static final int THREAD_SET_THREAD_TOKEN = (int)128L;
    /**
     * {@snippet lang=c :
     * #define THREAD_SET_THREAD_TOKEN 128
     * }
     */
    public static int THREAD_SET_THREAD_TOKEN() {
        return THREAD_SET_THREAD_TOKEN;
    }
    private static final int THREAD_IMPERSONATE = (int)256L;
    /**
     * {@snippet lang=c :
     * #define THREAD_IMPERSONATE 256
     * }
     */
    public static int THREAD_IMPERSONATE() {
        return THREAD_IMPERSONATE;
    }
    private static final int THREAD_DIRECT_IMPERSONATION = (int)512L;
    /**
     * {@snippet lang=c :
     * #define THREAD_DIRECT_IMPERSONATION 512
     * }
     */
    public static int THREAD_DIRECT_IMPERSONATION() {
        return THREAD_DIRECT_IMPERSONATION;
    }
    private static final int THREAD_SET_LIMITED_INFORMATION = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define THREAD_SET_LIMITED_INFORMATION 1024
     * }
     */
    public static int THREAD_SET_LIMITED_INFORMATION() {
        return THREAD_SET_LIMITED_INFORMATION;
    }
    private static final int THREAD_QUERY_LIMITED_INFORMATION = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define THREAD_QUERY_LIMITED_INFORMATION 2048
     * }
     */
    public static int THREAD_QUERY_LIMITED_INFORMATION() {
        return THREAD_QUERY_LIMITED_INFORMATION;
    }
    private static final int THREAD_RESUME = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define THREAD_RESUME 4096
     * }
     */
    public static int THREAD_RESUME() {
        return THREAD_RESUME;
    }
    private static final int THREAD_ALL_ACCESS = (int)2097151L;
    /**
     * {@snippet lang=c :
     * #define THREAD_ALL_ACCESS 2097151
     * }
     */
    public static int THREAD_ALL_ACCESS() {
        return THREAD_ALL_ACCESS;
    }
    private static final int JOB_OBJECT_ASSIGN_PROCESS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_ASSIGN_PROCESS 1
     * }
     */
    public static int JOB_OBJECT_ASSIGN_PROCESS() {
        return JOB_OBJECT_ASSIGN_PROCESS;
    }
    private static final int JOB_OBJECT_SET_ATTRIBUTES = (int)2L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_SET_ATTRIBUTES 2
     * }
     */
    public static int JOB_OBJECT_SET_ATTRIBUTES() {
        return JOB_OBJECT_SET_ATTRIBUTES;
    }
    private static final int JOB_OBJECT_QUERY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_QUERY 4
     * }
     */
    public static int JOB_OBJECT_QUERY() {
        return JOB_OBJECT_QUERY;
    }
    private static final int JOB_OBJECT_TERMINATE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_TERMINATE 8
     * }
     */
    public static int JOB_OBJECT_TERMINATE() {
        return JOB_OBJECT_TERMINATE;
    }
    private static final int JOB_OBJECT_SET_SECURITY_ATTRIBUTES = (int)16L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_SET_SECURITY_ATTRIBUTES 16
     * }
     */
    public static int JOB_OBJECT_SET_SECURITY_ATTRIBUTES() {
        return JOB_OBJECT_SET_SECURITY_ATTRIBUTES;
    }
    private static final int JOB_OBJECT_IMPERSONATE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_IMPERSONATE 32
     * }
     */
    public static int JOB_OBJECT_IMPERSONATE() {
        return JOB_OBJECT_IMPERSONATE;
    }
    private static final int JOB_OBJECT_ALL_ACCESS = (int)2031679L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_ALL_ACCESS 2031679
     * }
     */
    public static int JOB_OBJECT_ALL_ACCESS() {
        return JOB_OBJECT_ALL_ACCESS;
    }
    private static final int THREAD_BASE_PRIORITY_MIN = (int)-2L;
    /**
     * {@snippet lang=c :
     * #define THREAD_BASE_PRIORITY_MIN -2
     * }
     */
    public static int THREAD_BASE_PRIORITY_MIN() {
        return THREAD_BASE_PRIORITY_MIN;
    }
    private static final int THREAD_BASE_PRIORITY_IDLE = (int)-15L;
    /**
     * {@snippet lang=c :
     * #define THREAD_BASE_PRIORITY_IDLE -15
     * }
     */
    public static int THREAD_BASE_PRIORITY_IDLE() {
        return THREAD_BASE_PRIORITY_IDLE;
    }
    private static final int COMPONENT_VALID_FLAGS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define COMPONENT_VALID_FLAGS 1
     * }
     */
    public static int COMPONENT_VALID_FLAGS() {
        return COMPONENT_VALID_FLAGS;
    }
    private static final int DYNAMIC_EH_CONTINUATION_TARGET_ADD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define DYNAMIC_EH_CONTINUATION_TARGET_ADD 1
     * }
     */
    public static int DYNAMIC_EH_CONTINUATION_TARGET_ADD() {
        return DYNAMIC_EH_CONTINUATION_TARGET_ADD;
    }
    private static final int DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED 2
     * }
     */
    public static int DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED() {
        return DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED;
    }
    private static final int DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD 1
     * }
     */
    public static int DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD() {
        return DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD;
    }
    private static final int DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED 2
     * }
     */
    public static int DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED() {
        return DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED;
    }
    private static final int JOB_OBJECT_VALID_COMPLETION_FILTER = (int)16382L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_VALID_COMPLETION_FILTER 16382
     * }
     */
    public static int JOB_OBJECT_VALID_COMPLETION_FILTER() {
        return JOB_OBJECT_VALID_COMPLETION_FILTER;
    }
    private static final int JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH = (int)512L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH 512
     * }
     */
    public static int JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH() {
        return JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH;
    }
    private static final int JOB_OBJECT_LIMIT_CPU_RATE_CONTROL = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_LIMIT_CPU_RATE_CONTROL 262144
     * }
     */
    public static int JOB_OBJECT_LIMIT_CPU_RATE_CONTROL() {
        return JOB_OBJECT_LIMIT_CPU_RATE_CONTROL;
    }
    private static final int JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS = (int)2064900L;
    /**
     * {@snippet lang=c :
     * #define JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS 2064900
     * }
     */
    public static int JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS() {
        return JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS;
    }
    private static final int MEMORY_PARTITION_ALL_ACCESS = (int)2031619L;
    /**
     * {@snippet lang=c :
     * #define MEMORY_PARTITION_ALL_ACCESS 2031619
     * }
     */
    public static int MEMORY_PARTITION_ALL_ACCESS() {
        return MEMORY_PARTITION_ALL_ACCESS;
    }
    private static final int EVENT_ALL_ACCESS = (int)2031619L;
    /**
     * {@snippet lang=c :
     * #define EVENT_ALL_ACCESS 2031619
     * }
     */
    public static int EVENT_ALL_ACCESS() {
        return EVENT_ALL_ACCESS;
    }
    private static final int MUTANT_ALL_ACCESS = (int)2031617L;
    /**
     * {@snippet lang=c :
     * #define MUTANT_ALL_ACCESS 2031617
     * }
     */
    public static int MUTANT_ALL_ACCESS() {
        return MUTANT_ALL_ACCESS;
    }
    private static final int SEMAPHORE_ALL_ACCESS = (int)2031619L;
    /**
     * {@snippet lang=c :
     * #define SEMAPHORE_ALL_ACCESS 2031619
     * }
     */
    public static int SEMAPHORE_ALL_ACCESS() {
        return SEMAPHORE_ALL_ACCESS;
    }
    private static final int TIMER_ALL_ACCESS = (int)2031619L;
    /**
     * {@snippet lang=c :
     * #define TIMER_ALL_ACCESS 2031619
     * }
     */
    public static int TIMER_ALL_ACCESS() {
        return TIMER_ALL_ACCESS;
    }
    private static final int XSTATE_LEGACY_FLOATING_POINT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_LEGACY_FLOATING_POINT 0
     * }
     */
    public static int XSTATE_LEGACY_FLOATING_POINT() {
        return XSTATE_LEGACY_FLOATING_POINT;
    }
    private static final int XSTATE_LEGACY_SSE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_LEGACY_SSE 1
     * }
     */
    public static int XSTATE_LEGACY_SSE() {
        return XSTATE_LEGACY_SSE;
    }
    private static final int XSTATE_GSSE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_GSSE 2
     * }
     */
    public static int XSTATE_GSSE() {
        return XSTATE_GSSE;
    }
    private static final int XSTATE_AVX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_AVX 2
     * }
     */
    public static int XSTATE_AVX() {
        return XSTATE_AVX;
    }
    private static final int XSTATE_MPX_BNDREGS = (int)3L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MPX_BNDREGS 3
     * }
     */
    public static int XSTATE_MPX_BNDREGS() {
        return XSTATE_MPX_BNDREGS;
    }
    private static final int XSTATE_MPX_BNDCSR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MPX_BNDCSR 4
     * }
     */
    public static int XSTATE_MPX_BNDCSR() {
        return XSTATE_MPX_BNDCSR;
    }
    private static final int XSTATE_AVX512_KMASK = (int)5L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_AVX512_KMASK 5
     * }
     */
    public static int XSTATE_AVX512_KMASK() {
        return XSTATE_AVX512_KMASK;
    }
    private static final int XSTATE_AVX512_ZMM_H = (int)6L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_AVX512_ZMM_H 6
     * }
     */
    public static int XSTATE_AVX512_ZMM_H() {
        return XSTATE_AVX512_ZMM_H;
    }
    private static final int XSTATE_AVX512_ZMM = (int)7L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_AVX512_ZMM 7
     * }
     */
    public static int XSTATE_AVX512_ZMM() {
        return XSTATE_AVX512_ZMM;
    }
    private static final int XSTATE_IPT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_IPT 8
     * }
     */
    public static int XSTATE_IPT() {
        return XSTATE_IPT;
    }
    private static final int XSTATE_PASID = (int)10L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_PASID 10
     * }
     */
    public static int XSTATE_PASID() {
        return XSTATE_PASID;
    }
    private static final int XSTATE_CET_U = (int)11L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_CET_U 11
     * }
     */
    public static int XSTATE_CET_U() {
        return XSTATE_CET_U;
    }
    private static final int XSTATE_CET_S = (int)12L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_CET_S 12
     * }
     */
    public static int XSTATE_CET_S() {
        return XSTATE_CET_S;
    }
    private static final int XSTATE_AMX_TILE_CONFIG = (int)17L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_AMX_TILE_CONFIG 17
     * }
     */
    public static int XSTATE_AMX_TILE_CONFIG() {
        return XSTATE_AMX_TILE_CONFIG;
    }
    private static final int XSTATE_AMX_TILE_DATA = (int)18L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_AMX_TILE_DATA 18
     * }
     */
    public static int XSTATE_AMX_TILE_DATA() {
        return XSTATE_AMX_TILE_DATA;
    }
    private static final int XSTATE_LWP = (int)62L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_LWP 62
     * }
     */
    public static int XSTATE_LWP() {
        return XSTATE_LWP;
    }
    private static final int MAXIMUM_XSTATE_FEATURES = (int)64L;
    /**
     * {@snippet lang=c :
     * #define MAXIMUM_XSTATE_FEATURES 64
     * }
     */
    public static int MAXIMUM_XSTATE_FEATURES() {
        return MAXIMUM_XSTATE_FEATURES;
    }
    private static final long XSTATE_MASK_LEGACY_FLOATING_POINT = 1L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_LEGACY_FLOATING_POINT 1
     * }
     */
    public static long XSTATE_MASK_LEGACY_FLOATING_POINT() {
        return XSTATE_MASK_LEGACY_FLOATING_POINT;
    }
    private static final long XSTATE_MASK_LEGACY_SSE = 2L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_LEGACY_SSE 2
     * }
     */
    public static long XSTATE_MASK_LEGACY_SSE() {
        return XSTATE_MASK_LEGACY_SSE;
    }
    private static final long XSTATE_MASK_GSSE = 4L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_GSSE 4
     * }
     */
    public static long XSTATE_MASK_GSSE() {
        return XSTATE_MASK_GSSE;
    }
    private static final long XSTATE_MASK_AVX = 4L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_AVX 4
     * }
     */
    public static long XSTATE_MASK_AVX() {
        return XSTATE_MASK_AVX;
    }
    private static final long XSTATE_MASK_MPX = 24L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_MPX 24
     * }
     */
    public static long XSTATE_MASK_MPX() {
        return XSTATE_MASK_MPX;
    }
    private static final long XSTATE_MASK_AVX512 = 224L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_AVX512 224
     * }
     */
    public static long XSTATE_MASK_AVX512() {
        return XSTATE_MASK_AVX512;
    }
    private static final long XSTATE_MASK_IPT = 256L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_IPT 256
     * }
     */
    public static long XSTATE_MASK_IPT() {
        return XSTATE_MASK_IPT;
    }
    private static final long XSTATE_MASK_PASID = 1024L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_PASID 1024
     * }
     */
    public static long XSTATE_MASK_PASID() {
        return XSTATE_MASK_PASID;
    }
    private static final long XSTATE_MASK_CET_U = 2048L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_CET_U 2048
     * }
     */
    public static long XSTATE_MASK_CET_U() {
        return XSTATE_MASK_CET_U;
    }
    private static final long XSTATE_MASK_CET_S = 4096L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_CET_S 4096
     * }
     */
    public static long XSTATE_MASK_CET_S() {
        return XSTATE_MASK_CET_S;
    }
    private static final long XSTATE_MASK_AMX_TILE_CONFIG = 131072L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_AMX_TILE_CONFIG 131072
     * }
     */
    public static long XSTATE_MASK_AMX_TILE_CONFIG() {
        return XSTATE_MASK_AMX_TILE_CONFIG;
    }
    private static final long XSTATE_MASK_AMX_TILE_DATA = 262144L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_AMX_TILE_DATA 262144
     * }
     */
    public static long XSTATE_MASK_AMX_TILE_DATA() {
        return XSTATE_MASK_AMX_TILE_DATA;
    }
    private static final long XSTATE_MASK_LWP = 4611686018427387904L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_LWP 4611686018427387904
     * }
     */
    public static long XSTATE_MASK_LWP() {
        return XSTATE_MASK_LWP;
    }
    private static final int XSTATE_ARM64_SVE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_ARM64_SVE 2
     * }
     */
    public static int XSTATE_ARM64_SVE() {
        return XSTATE_ARM64_SVE;
    }
    private static final long XSTATE_MASK_ARM64_SVE = 4L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_ARM64_SVE 4
     * }
     */
    public static long XSTATE_MASK_ARM64_SVE() {
        return XSTATE_MASK_ARM64_SVE;
    }
    private static final long XSTATE_MASK_LEGACY = 3L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_LEGACY 3
     * }
     */
    public static long XSTATE_MASK_LEGACY() {
        return XSTATE_MASK_LEGACY;
    }
    private static final long XSTATE_MASK_ALLOWED = 4611686018427784703L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_ALLOWED 4611686018427784703
     * }
     */
    public static long XSTATE_MASK_ALLOWED() {
        return XSTATE_MASK_ALLOWED;
    }
    private static final long XSTATE_MASK_PERSISTENT = 4611686018427387920L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_PERSISTENT 4611686018427387920
     * }
     */
    public static long XSTATE_MASK_PERSISTENT() {
        return XSTATE_MASK_PERSISTENT;
    }
    private static final long XSTATE_MASK_USER_VISIBLE_SUPERVISOR = 2048L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_USER_VISIBLE_SUPERVISOR 2048
     * }
     */
    public static long XSTATE_MASK_USER_VISIBLE_SUPERVISOR() {
        return XSTATE_MASK_USER_VISIBLE_SUPERVISOR;
    }
    private static final long XSTATE_MASK_LARGE_FEATURES = 262144L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_LARGE_FEATURES 262144
     * }
     */
    public static long XSTATE_MASK_LARGE_FEATURES() {
        return XSTATE_MASK_LARGE_FEATURES;
    }
    private static final int XSTATE_FIRST_NON_LEGACY_FEATURE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_FIRST_NON_LEGACY_FEATURE 2
     * }
     */
    public static int XSTATE_FIRST_NON_LEGACY_FEATURE() {
        return XSTATE_FIRST_NON_LEGACY_FEATURE;
    }
    private static final long XSTATE_MASK_AMD64_LEGACY = 3L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_MASK_AMD64_LEGACY 3
     * }
     */
    public static long XSTATE_MASK_AMD64_LEGACY() {
        return XSTATE_MASK_AMD64_LEGACY;
    }
    private static final int XSTATE_COMPACTION_ENABLE = (int)63L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_COMPACTION_ENABLE 63
     * }
     */
    public static int XSTATE_COMPACTION_ENABLE() {
        return XSTATE_COMPACTION_ENABLE;
    }
    private static final long XSTATE_COMPACTION_ENABLE_MASK = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_COMPACTION_ENABLE_MASK -9223372036854775808
     * }
     */
    public static long XSTATE_COMPACTION_ENABLE_MASK() {
        return XSTATE_COMPACTION_ENABLE_MASK;
    }
    private static final int XSTATE_ALIGN_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_ALIGN_BIT 1
     * }
     */
    public static int XSTATE_ALIGN_BIT() {
        return XSTATE_ALIGN_BIT;
    }
    private static final long XSTATE_ALIGN_MASK = 2L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_ALIGN_MASK 2
     * }
     */
    public static long XSTATE_ALIGN_MASK() {
        return XSTATE_ALIGN_MASK;
    }
    private static final int XSTATE_XFD_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_XFD_BIT 2
     * }
     */
    public static int XSTATE_XFD_BIT() {
        return XSTATE_XFD_BIT;
    }
    private static final long XSTATE_XFD_MASK = 4L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_XFD_MASK 4
     * }
     */
    public static long XSTATE_XFD_MASK() {
        return XSTATE_XFD_MASK;
    }
    private static final int XSTATE_CONTROLFLAG_XSAVEOPT_MASK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_CONTROLFLAG_XSAVEOPT_MASK 1
     * }
     */
    public static int XSTATE_CONTROLFLAG_XSAVEOPT_MASK() {
        return XSTATE_CONTROLFLAG_XSAVEOPT_MASK;
    }
    private static final int XSTATE_CONTROLFLAG_XSAVEC_MASK = (int)2L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_CONTROLFLAG_XSAVEC_MASK 2
     * }
     */
    public static int XSTATE_CONTROLFLAG_XSAVEC_MASK() {
        return XSTATE_CONTROLFLAG_XSAVEC_MASK;
    }
    private static final int XSTATE_CONTROLFLAG_XFD_MASK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_CONTROLFLAG_XFD_MASK 4
     * }
     */
    public static int XSTATE_CONTROLFLAG_XFD_MASK() {
        return XSTATE_CONTROLFLAG_XFD_MASK;
    }
    private static final int XSTATE_CONTROLFLAG_VALID_MASK = (int)7L;
    /**
     * {@snippet lang=c :
     * #define XSTATE_CONTROLFLAG_VALID_MASK 7
     * }
     */
    public static int XSTATE_CONTROLFLAG_VALID_MASK() {
        return XSTATE_CONTROLFLAG_VALID_MASK;
    }
    private static final int CFG_CALL_TARGET_VALID = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CFG_CALL_TARGET_VALID 1
     * }
     */
    public static int CFG_CALL_TARGET_VALID() {
        return CFG_CALL_TARGET_VALID;
    }
    private static final int CFG_CALL_TARGET_PROCESSED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define CFG_CALL_TARGET_PROCESSED 2
     * }
     */
    public static int CFG_CALL_TARGET_PROCESSED() {
        return CFG_CALL_TARGET_PROCESSED;
    }
    private static final int CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID 4
     * }
     */
    public static int CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID() {
        return CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID;
    }
    private static final int CFG_CALL_TARGET_VALID_XFG = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CFG_CALL_TARGET_VALID_XFG 8
     * }
     */
    public static int CFG_CALL_TARGET_VALID_XFG() {
        return CFG_CALL_TARGET_VALID_XFG;
    }
    private static final int CFG_CALL_TARGET_CONVERT_XFG_TO_CFG = (int)16L;
    /**
     * {@snippet lang=c :
     * #define CFG_CALL_TARGET_CONVERT_XFG_TO_CFG 16
     * }
     */
    public static int CFG_CALL_TARGET_CONVERT_XFG_TO_CFG() {
        return CFG_CALL_TARGET_CONVERT_XFG_TO_CFG;
    }
    private static final int SECTION_ALL_ACCESS = (int)983071L;
    /**
     * {@snippet lang=c :
     * #define SECTION_ALL_ACCESS 983071
     * }
     */
    public static int SECTION_ALL_ACCESS() {
        return SECTION_ALL_ACCESS;
    }
    private static final int SESSION_ALL_ACCESS = (int)983043L;
    /**
     * {@snippet lang=c :
     * #define SESSION_ALL_ACCESS 983043
     * }
     */
    public static int SESSION_ALL_ACCESS() {
        return SESSION_ALL_ACCESS;
    }
    private static final int PAGE_ENCLAVE_THREAD_CONTROL = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define PAGE_ENCLAVE_THREAD_CONTROL 2147483648
     * }
     */
    public static int PAGE_ENCLAVE_THREAD_CONTROL() {
        return PAGE_ENCLAVE_THREAD_CONTROL;
    }
    private static final int PAGE_REVERT_TO_FILE_MAP = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define PAGE_REVERT_TO_FILE_MAP 2147483648
     * }
     */
    public static int PAGE_REVERT_TO_FILE_MAP() {
        return PAGE_REVERT_TO_FILE_MAP;
    }
    private static final int PAGE_ENCLAVE_DECOMMIT = (int)268435456L;
    /**
     * {@snippet lang=c :
     * #define PAGE_ENCLAVE_DECOMMIT 268435456
     * }
     */
    public static int PAGE_ENCLAVE_DECOMMIT() {
        return PAGE_ENCLAVE_DECOMMIT;
    }
    private static final int PAGE_ENCLAVE_SS_FIRST = (int)268435457L;
    /**
     * {@snippet lang=c :
     * #define PAGE_ENCLAVE_SS_FIRST 268435457
     * }
     */
    public static int PAGE_ENCLAVE_SS_FIRST() {
        return PAGE_ENCLAVE_SS_FIRST;
    }
    private static final int PAGE_ENCLAVE_SS_REST = (int)268435458L;
    /**
     * {@snippet lang=c :
     * #define PAGE_ENCLAVE_SS_REST 268435458
     * }
     */
    public static int PAGE_ENCLAVE_SS_REST() {
        return PAGE_ENCLAVE_SS_REST;
    }
    private static final int MEM_4MB_PAGES = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define MEM_4MB_PAGES 2147483648
     * }
     */
    public static int MEM_4MB_PAGES() {
        return MEM_4MB_PAGES;
    }
    private static final int MEM_64K_PAGES = (int)541065216L;
    /**
     * {@snippet lang=c :
     * #define MEM_64K_PAGES 541065216
     * }
     */
    public static int MEM_64K_PAGES() {
        return MEM_64K_PAGES;
    }
    private static final long MEM_EXTENDED_PARAMETER_NUMA_NODE_MANDATORY = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define MEM_EXTENDED_PARAMETER_NUMA_NODE_MANDATORY -9223372036854775808
     * }
     */
    public static long MEM_EXTENDED_PARAMETER_NUMA_NODE_MANDATORY() {
        return MEM_EXTENDED_PARAMETER_NUMA_NODE_MANDATORY;
    }
    private static final MemorySegment MEMORY_CURRENT_PARTITION_HANDLE = MemorySegment.ofAddress(-1L);
    /**
     * {@snippet lang=c :
     * #define MEMORY_CURRENT_PARTITION_HANDLE (void*) -1
     * }
     */
    public static MemorySegment MEMORY_CURRENT_PARTITION_HANDLE() {
        return MEMORY_CURRENT_PARTITION_HANDLE;
    }
    private static final MemorySegment MEMORY_SYSTEM_PARTITION_HANDLE = MemorySegment.ofAddress(-2L);
    /**
     * {@snippet lang=c :
     * #define MEMORY_SYSTEM_PARTITION_HANDLE (void*) -2
     * }
     */
    public static MemorySegment MEMORY_SYSTEM_PARTITION_HANDLE() {
        return MEMORY_SYSTEM_PARTITION_HANDLE;
    }
    private static final MemorySegment MEMORY_EXISTING_VAD_PARTITION_HANDLE = MemorySegment.ofAddress(-3L);
    /**
     * {@snippet lang=c :
     * #define MEMORY_EXISTING_VAD_PARTITION_HANDLE (void*) -3
     * }
     */
    public static MemorySegment MEMORY_EXISTING_VAD_PARTITION_HANDLE() {
        return MEMORY_EXISTING_VAD_PARTITION_HANDLE;
    }
    private static final long MEM_DEDICATED_ATTRIBUTE_NOT_SPECIFIED = -1L;
    /**
     * {@snippet lang=c :
     * #define MEM_DEDICATED_ATTRIBUTE_NOT_SPECIFIED -1
     * }
     */
    public static long MEM_DEDICATED_ATTRIBUTE_NOT_SPECIFIED() {
        return MEM_DEDICATED_ATTRIBUTE_NOT_SPECIFIED;
    }
    private static final int SEC_LARGE_PAGES = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define SEC_LARGE_PAGES 2147483648
     * }
     */
    public static int SEC_LARGE_PAGES() {
        return SEC_LARGE_PAGES;
    }
    private static final int SEC_IMAGE_NO_EXECUTE = (int)285212672L;
    /**
     * {@snippet lang=c :
     * #define SEC_IMAGE_NO_EXECUTE 285212672
     * }
     */
    public static int SEC_IMAGE_NO_EXECUTE() {
        return SEC_IMAGE_NO_EXECUTE;
    }
    private static final int FILE_READ_DATA = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FILE_READ_DATA 1
     * }
     */
    public static int FILE_READ_DATA() {
        return FILE_READ_DATA;
    }
    private static final int FILE_LIST_DIRECTORY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define FILE_LIST_DIRECTORY 1
     * }
     */
    public static int FILE_LIST_DIRECTORY() {
        return FILE_LIST_DIRECTORY;
    }
    private static final int FILE_WRITE_DATA = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FILE_WRITE_DATA 2
     * }
     */
    public static int FILE_WRITE_DATA() {
        return FILE_WRITE_DATA;
    }
    private static final int FILE_ADD_FILE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FILE_ADD_FILE 2
     * }
     */
    public static int FILE_ADD_FILE() {
        return FILE_ADD_FILE;
    }
    private static final int FILE_APPEND_DATA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FILE_APPEND_DATA 4
     * }
     */
    public static int FILE_APPEND_DATA() {
        return FILE_APPEND_DATA;
    }
    private static final int FILE_ADD_SUBDIRECTORY = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FILE_ADD_SUBDIRECTORY 4
     * }
     */
    public static int FILE_ADD_SUBDIRECTORY() {
        return FILE_ADD_SUBDIRECTORY;
    }
    private static final int FILE_CREATE_PIPE_INSTANCE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define FILE_CREATE_PIPE_INSTANCE 4
     * }
     */
    public static int FILE_CREATE_PIPE_INSTANCE() {
        return FILE_CREATE_PIPE_INSTANCE;
    }
    private static final int FILE_READ_EA = (int)8L;
    /**
     * {@snippet lang=c :
     * #define FILE_READ_EA 8
     * }
     */
    public static int FILE_READ_EA() {
        return FILE_READ_EA;
    }
    private static final int FILE_WRITE_EA = (int)16L;
    /**
     * {@snippet lang=c :
     * #define FILE_WRITE_EA 16
     * }
     */
    public static int FILE_WRITE_EA() {
        return FILE_WRITE_EA;
    }
    private static final int FILE_EXECUTE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FILE_EXECUTE 32
     * }
     */
    public static int FILE_EXECUTE() {
        return FILE_EXECUTE;
    }
    private static final int FILE_TRAVERSE = (int)32L;
    /**
     * {@snippet lang=c :
     * #define FILE_TRAVERSE 32
     * }
     */
    public static int FILE_TRAVERSE() {
        return FILE_TRAVERSE;
    }
    private static final int FILE_DELETE_CHILD = (int)64L;
    /**
     * {@snippet lang=c :
     * #define FILE_DELETE_CHILD 64
     * }
     */
    public static int FILE_DELETE_CHILD() {
        return FILE_DELETE_CHILD;
    }
    private static final int FILE_READ_ATTRIBUTES = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FILE_READ_ATTRIBUTES 128
     * }
     */
    public static int FILE_READ_ATTRIBUTES() {
        return FILE_READ_ATTRIBUTES;
    }
    private static final int FILE_WRITE_ATTRIBUTES = (int)256L;
    /**
     * {@snippet lang=c :
     * #define FILE_WRITE_ATTRIBUTES 256
     * }
     */
    public static int FILE_WRITE_ATTRIBUTES() {
        return FILE_WRITE_ATTRIBUTES;
    }
    private static final int FILE_ALL_ACCESS = (int)2032127L;
    /**
     * {@snippet lang=c :
     * #define FILE_ALL_ACCESS 2032127
     * }
     */
    public static int FILE_ALL_ACCESS() {
        return FILE_ALL_ACCESS;
    }
    private static final int FILE_GENERIC_READ = (int)1179785L;
    /**
     * {@snippet lang=c :
     * #define FILE_GENERIC_READ 1179785
     * }
     */
    public static int FILE_GENERIC_READ() {
        return FILE_GENERIC_READ;
    }
    private static final int FILE_GENERIC_WRITE = (int)1179926L;
    /**
     * {@snippet lang=c :
     * #define FILE_GENERIC_WRITE 1179926
     * }
     */
    public static int FILE_GENERIC_WRITE() {
        return FILE_GENERIC_WRITE;
    }
    private static final int FILE_GENERIC_EXECUTE = (int)1179808L;
    /**
     * {@snippet lang=c :
     * #define FILE_GENERIC_EXECUTE 1179808
     * }
     */
    public static int FILE_GENERIC_EXECUTE() {
        return FILE_GENERIC_EXECUTE;
    }
    private static final int MAILSLOT_NO_MESSAGE = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAILSLOT_NO_MESSAGE 4294967295
     * }
     */
    public static int MAILSLOT_NO_MESSAGE() {
        return MAILSLOT_NO_MESSAGE;
    }
    private static final int MAILSLOT_WAIT_FOREVER = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define MAILSLOT_WAIT_FOREVER 4294967295
     * }
     */
    public static int MAILSLOT_WAIT_FOREVER() {
        return MAILSLOT_WAIT_FOREVER;
    }
    private static final long FILE_INVALID_FILE_ID = -1L;
    /**
     * {@snippet lang=c :
     * #define FILE_INVALID_FILE_ID -1
     * }
     */
    public static long FILE_INVALID_FILE_ID() {
        return FILE_INVALID_FILE_ID;
    }
    private static final int REPARSE_GUID_DATA_BUFFER_HEADER_SIZE = (int)24L;
    /**
     * {@snippet lang=c :
     * #define REPARSE_GUID_DATA_BUFFER_HEADER_SIZE 24
     * }
     */
    public static int REPARSE_GUID_DATA_BUFFER_HEADER_SIZE() {
        return REPARSE_GUID_DATA_BUFFER_HEADER_SIZE;
    }
    private static final int MAXIMUM_REPARSE_DATA_BUFFER_SIZE = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define MAXIMUM_REPARSE_DATA_BUFFER_SIZE 16384
     * }
     */
    public static int MAXIMUM_REPARSE_DATA_BUFFER_SIZE() {
        return MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
    }
    private static final int IO_REPARSE_TAG_RESERVED_ZERO = (int)0L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_RESERVED_ZERO 0
     * }
     */
    public static int IO_REPARSE_TAG_RESERVED_ZERO() {
        return IO_REPARSE_TAG_RESERVED_ZERO;
    }
    private static final int IO_REPARSE_TAG_RESERVED_ONE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_RESERVED_ONE 1
     * }
     */
    public static int IO_REPARSE_TAG_RESERVED_ONE() {
        return IO_REPARSE_TAG_RESERVED_ONE;
    }
    private static final int IO_REPARSE_TAG_RESERVED_TWO = (int)2L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_RESERVED_TWO 2
     * }
     */
    public static int IO_REPARSE_TAG_RESERVED_TWO() {
        return IO_REPARSE_TAG_RESERVED_TWO;
    }
    private static final int IO_REPARSE_TAG_RESERVED_RANGE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_RESERVED_RANGE 2
     * }
     */
    public static int IO_REPARSE_TAG_RESERVED_RANGE() {
        return IO_REPARSE_TAG_RESERVED_RANGE;
    }
    private static final int IO_REPARSE_TAG_RESERVED_INVALID = (int)3221258240L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_RESERVED_INVALID 3221258240
     * }
     */
    public static int IO_REPARSE_TAG_RESERVED_INVALID() {
        return IO_REPARSE_TAG_RESERVED_INVALID;
    }
    private static final int IO_REPARSE_TAG_MOUNT_POINT = (int)2684354563L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_MOUNT_POINT 2684354563
     * }
     */
    public static int IO_REPARSE_TAG_MOUNT_POINT() {
        return IO_REPARSE_TAG_MOUNT_POINT;
    }
    private static final int IO_REPARSE_TAG_HSM = (int)3221225476L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_HSM 3221225476
     * }
     */
    public static int IO_REPARSE_TAG_HSM() {
        return IO_REPARSE_TAG_HSM;
    }
    private static final int IO_REPARSE_TAG_HSM2 = (int)2147483654L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_HSM2 2147483654
     * }
     */
    public static int IO_REPARSE_TAG_HSM2() {
        return IO_REPARSE_TAG_HSM2;
    }
    private static final int IO_REPARSE_TAG_SIS = (int)2147483655L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_SIS 2147483655
     * }
     */
    public static int IO_REPARSE_TAG_SIS() {
        return IO_REPARSE_TAG_SIS;
    }
    private static final int IO_REPARSE_TAG_WIM = (int)2147483656L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_WIM 2147483656
     * }
     */
    public static int IO_REPARSE_TAG_WIM() {
        return IO_REPARSE_TAG_WIM;
    }
    private static final int IO_REPARSE_TAG_CSV = (int)2147483657L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CSV 2147483657
     * }
     */
    public static int IO_REPARSE_TAG_CSV() {
        return IO_REPARSE_TAG_CSV;
    }
    private static final int IO_REPARSE_TAG_DFS = (int)2147483658L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_DFS 2147483658
     * }
     */
    public static int IO_REPARSE_TAG_DFS() {
        return IO_REPARSE_TAG_DFS;
    }
    private static final int IO_REPARSE_TAG_SYMLINK = (int)2684354572L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_SYMLINK 2684354572
     * }
     */
    public static int IO_REPARSE_TAG_SYMLINK() {
        return IO_REPARSE_TAG_SYMLINK;
    }
    private static final int IO_REPARSE_TAG_DFSR = (int)2147483666L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_DFSR 2147483666
     * }
     */
    public static int IO_REPARSE_TAG_DFSR() {
        return IO_REPARSE_TAG_DFSR;
    }
    private static final int IO_REPARSE_TAG_DEDUP = (int)2147483667L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_DEDUP 2147483667
     * }
     */
    public static int IO_REPARSE_TAG_DEDUP() {
        return IO_REPARSE_TAG_DEDUP;
    }
    private static final int IO_REPARSE_TAG_NFS = (int)2147483668L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_NFS 2147483668
     * }
     */
    public static int IO_REPARSE_TAG_NFS() {
        return IO_REPARSE_TAG_NFS;
    }
    private static final int IO_REPARSE_TAG_FILE_PLACEHOLDER = (int)2147483669L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_FILE_PLACEHOLDER 2147483669
     * }
     */
    public static int IO_REPARSE_TAG_FILE_PLACEHOLDER() {
        return IO_REPARSE_TAG_FILE_PLACEHOLDER;
    }
    private static final int IO_REPARSE_TAG_WOF = (int)2147483671L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_WOF 2147483671
     * }
     */
    public static int IO_REPARSE_TAG_WOF() {
        return IO_REPARSE_TAG_WOF;
    }
    private static final int IO_REPARSE_TAG_WCI = (int)2147483672L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_WCI 2147483672
     * }
     */
    public static int IO_REPARSE_TAG_WCI() {
        return IO_REPARSE_TAG_WCI;
    }
    private static final int IO_REPARSE_TAG_WCI_1 = (int)2415923224L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_WCI_1 2415923224
     * }
     */
    public static int IO_REPARSE_TAG_WCI_1() {
        return IO_REPARSE_TAG_WCI_1;
    }
    private static final int IO_REPARSE_TAG_GLOBAL_REPARSE = (int)2684354585L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_GLOBAL_REPARSE 2684354585
     * }
     */
    public static int IO_REPARSE_TAG_GLOBAL_REPARSE() {
        return IO_REPARSE_TAG_GLOBAL_REPARSE;
    }
    private static final int IO_REPARSE_TAG_CLOUD = (int)2415919130L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD 2415919130
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD() {
        return IO_REPARSE_TAG_CLOUD;
    }
    private static final int IO_REPARSE_TAG_CLOUD_1 = (int)2415923226L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_1 2415923226
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_1() {
        return IO_REPARSE_TAG_CLOUD_1;
    }
    private static final int IO_REPARSE_TAG_CLOUD_2 = (int)2415927322L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_2 2415927322
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_2() {
        return IO_REPARSE_TAG_CLOUD_2;
    }
    private static final int IO_REPARSE_TAG_CLOUD_3 = (int)2415931418L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_3 2415931418
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_3() {
        return IO_REPARSE_TAG_CLOUD_3;
    }
    private static final int IO_REPARSE_TAG_CLOUD_4 = (int)2415935514L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_4 2415935514
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_4() {
        return IO_REPARSE_TAG_CLOUD_4;
    }
    private static final int IO_REPARSE_TAG_CLOUD_5 = (int)2415939610L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_5 2415939610
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_5() {
        return IO_REPARSE_TAG_CLOUD_5;
    }
    private static final int IO_REPARSE_TAG_CLOUD_6 = (int)2415943706L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_6 2415943706
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_6() {
        return IO_REPARSE_TAG_CLOUD_6;
    }
    private static final int IO_REPARSE_TAG_CLOUD_7 = (int)2415947802L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_7 2415947802
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_7() {
        return IO_REPARSE_TAG_CLOUD_7;
    }
    private static final int IO_REPARSE_TAG_CLOUD_8 = (int)2415951898L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_8 2415951898
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_8() {
        return IO_REPARSE_TAG_CLOUD_8;
    }
    private static final int IO_REPARSE_TAG_CLOUD_9 = (int)2415955994L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_9 2415955994
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_9() {
        return IO_REPARSE_TAG_CLOUD_9;
    }
    private static final int IO_REPARSE_TAG_CLOUD_A = (int)2415960090L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_A 2415960090
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_A() {
        return IO_REPARSE_TAG_CLOUD_A;
    }
    private static final int IO_REPARSE_TAG_CLOUD_B = (int)2415964186L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_B 2415964186
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_B() {
        return IO_REPARSE_TAG_CLOUD_B;
    }
    private static final int IO_REPARSE_TAG_CLOUD_C = (int)2415968282L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_C 2415968282
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_C() {
        return IO_REPARSE_TAG_CLOUD_C;
    }
    private static final int IO_REPARSE_TAG_CLOUD_D = (int)2415972378L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_D 2415972378
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_D() {
        return IO_REPARSE_TAG_CLOUD_D;
    }
    private static final int IO_REPARSE_TAG_CLOUD_E = (int)2415976474L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_E 2415976474
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_E() {
        return IO_REPARSE_TAG_CLOUD_E;
    }
    private static final int IO_REPARSE_TAG_CLOUD_F = (int)2415980570L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_F 2415980570
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_F() {
        return IO_REPARSE_TAG_CLOUD_F;
    }
    private static final int IO_REPARSE_TAG_CLOUD_MASK = (int)61440L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_CLOUD_MASK 61440
     * }
     */
    public static int IO_REPARSE_TAG_CLOUD_MASK() {
        return IO_REPARSE_TAG_CLOUD_MASK;
    }
    private static final int IO_REPARSE_TAG_APPEXECLINK = (int)2147483675L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_APPEXECLINK 2147483675
     * }
     */
    public static int IO_REPARSE_TAG_APPEXECLINK() {
        return IO_REPARSE_TAG_APPEXECLINK;
    }
    private static final int IO_REPARSE_TAG_PROJFS = (int)2415919132L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_PROJFS 2415919132
     * }
     */
    public static int IO_REPARSE_TAG_PROJFS() {
        return IO_REPARSE_TAG_PROJFS;
    }
    private static final int IO_REPARSE_TAG_STORAGE_SYNC = (int)2147483678L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_STORAGE_SYNC 2147483678
     * }
     */
    public static int IO_REPARSE_TAG_STORAGE_SYNC() {
        return IO_REPARSE_TAG_STORAGE_SYNC;
    }
    private static final int IO_REPARSE_TAG_WCI_TOMBSTONE = (int)2684354591L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_WCI_TOMBSTONE 2684354591
     * }
     */
    public static int IO_REPARSE_TAG_WCI_TOMBSTONE() {
        return IO_REPARSE_TAG_WCI_TOMBSTONE;
    }
    private static final int IO_REPARSE_TAG_UNHANDLED = (int)2147483680L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_UNHANDLED 2147483680
     * }
     */
    public static int IO_REPARSE_TAG_UNHANDLED() {
        return IO_REPARSE_TAG_UNHANDLED;
    }
    private static final int IO_REPARSE_TAG_ONEDRIVE = (int)2147483681L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_ONEDRIVE 2147483681
     * }
     */
    public static int IO_REPARSE_TAG_ONEDRIVE() {
        return IO_REPARSE_TAG_ONEDRIVE;
    }
    private static final int IO_REPARSE_TAG_PROJFS_TOMBSTONE = (int)2684354594L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_PROJFS_TOMBSTONE 2684354594
     * }
     */
    public static int IO_REPARSE_TAG_PROJFS_TOMBSTONE() {
        return IO_REPARSE_TAG_PROJFS_TOMBSTONE;
    }
    private static final int IO_REPARSE_TAG_AF_UNIX = (int)2147483683L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_AF_UNIX 2147483683
     * }
     */
    public static int IO_REPARSE_TAG_AF_UNIX() {
        return IO_REPARSE_TAG_AF_UNIX;
    }
    private static final int IO_REPARSE_TAG_STORAGE_SYNC_FOLDER = (int)2415919143L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_STORAGE_SYNC_FOLDER 2415919143
     * }
     */
    public static int IO_REPARSE_TAG_STORAGE_SYNC_FOLDER() {
        return IO_REPARSE_TAG_STORAGE_SYNC_FOLDER;
    }
    private static final int IO_REPARSE_TAG_WCI_LINK = (int)2684354599L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_WCI_LINK 2684354599
     * }
     */
    public static int IO_REPARSE_TAG_WCI_LINK() {
        return IO_REPARSE_TAG_WCI_LINK;
    }
    private static final int IO_REPARSE_TAG_WCI_LINK_1 = (int)2684358695L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_WCI_LINK_1 2684358695
     * }
     */
    public static int IO_REPARSE_TAG_WCI_LINK_1() {
        return IO_REPARSE_TAG_WCI_LINK_1;
    }
    private static final int IO_REPARSE_TAG_DATALESS_CIM = (int)2684354600L;
    /**
     * {@snippet lang=c :
     * #define IO_REPARSE_TAG_DATALESS_CIM 2684354600
     * }
     */
    public static int IO_REPARSE_TAG_DATALESS_CIM() {
        return IO_REPARSE_TAG_DATALESS_CIM;
    }
    private static final int SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS 1
     * }
     */
    public static int SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS() {
        return SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS;
    }
    private static final int IO_COMPLETION_ALL_ACCESS = (int)2031619L;
    /**
     * {@snippet lang=c :
     * #define IO_COMPLETION_ALL_ACCESS 2031619
     * }
     */
    public static int IO_COMPLETION_ALL_ACCESS() {
        return IO_COMPLETION_ALL_ACCESS;
    }
    private static final long IO_QOS_MAX_RESERVATION = 1000000000L;
    /**
     * {@snippet lang=c :
     * #define IO_QOS_MAX_RESERVATION 1000000000
     * }
     */
    public static long IO_QOS_MAX_RESERVATION() {
        return IO_QOS_MAX_RESERVATION;
    }
    /**
     * {@snippet lang=c :
     * #define SMB_CCF_APP_INSTANCE_EA_NAME "ClusteredApplicationInstance"
     * }
     */
    public static MemorySegment SMB_CCF_APP_INSTANCE_EA_NAME() {
        class Holder {
            static final MemorySegment SMB_CCF_APP_INSTANCE_EA_NAME
                = winapi.LIBRARY_ARENA.allocateFrom("ClusteredApplicationInstance");
        }
        return Holder.SMB_CCF_APP_INSTANCE_EA_NAME;
    }
    private static final int PERFSTATE_POLICY_CHANGE_DECREASE_MAX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define PERFSTATE_POLICY_CHANGE_DECREASE_MAX 2
     * }
     */
    public static int PERFSTATE_POLICY_CHANGE_DECREASE_MAX() {
        return PERFSTATE_POLICY_CHANGE_DECREASE_MAX;
    }
    private static final int PERFSTATE_POLICY_CHANGE_INCREASE_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * #define PERFSTATE_POLICY_CHANGE_INCREASE_MAX 3
     * }
     */
    public static int PERFSTATE_POLICY_CHANGE_INCREASE_MAX() {
        return PERFSTATE_POLICY_CHANGE_INCREASE_MAX;
    }
    private static final int PROCESSOR_PERF_BOOST_MODE_MAX = (int)6L;
    /**
     * {@snippet lang=c :
     * #define PROCESSOR_PERF_BOOST_MODE_MAX 6
     * }
     */
    public static int PROCESSOR_PERF_BOOST_MODE_MAX() {
        return PROCESSOR_PERF_BOOST_MODE_MAX;
    }
    private static final int CORE_PARKING_POLICY_CHANGE_MAX = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CORE_PARKING_POLICY_CHANGE_MAX 3
     * }
     */
    public static int CORE_PARKING_POLICY_CHANGE_MAX() {
        return CORE_PARKING_POLICY_CHANGE_MAX;
    }
    private static final int ES_SYSTEM_REQUIRED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ES_SYSTEM_REQUIRED 1
     * }
     */
    public static int ES_SYSTEM_REQUIRED() {
        return ES_SYSTEM_REQUIRED;
    }
    private static final int ES_DISPLAY_REQUIRED = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ES_DISPLAY_REQUIRED 2
     * }
     */
    public static int ES_DISPLAY_REQUIRED() {
        return ES_DISPLAY_REQUIRED;
    }
    private static final int ES_USER_PRESENT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ES_USER_PRESENT 4
     * }
     */
    public static int ES_USER_PRESENT() {
        return ES_USER_PRESENT;
    }
    private static final int ES_AWAYMODE_REQUIRED = (int)64L;
    /**
     * {@snippet lang=c :
     * #define ES_AWAYMODE_REQUIRED 64
     * }
     */
    public static int ES_AWAYMODE_REQUIRED() {
        return ES_AWAYMODE_REQUIRED;
    }
    private static final int ES_CONTINUOUS = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define ES_CONTINUOUS 2147483648
     * }
     */
    public static int ES_CONTINUOUS() {
        return ES_CONTINUOUS;
    }
    private static final int DIAGNOSTIC_REASON_NOT_SPECIFIED = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define DIAGNOSTIC_REASON_NOT_SPECIFIED 2147483648
     * }
     */
    public static int DIAGNOSTIC_REASON_NOT_SPECIFIED() {
        return DIAGNOSTIC_REASON_NOT_SPECIFIED;
    }
    private static final int DIAGNOSTIC_REASON_INVALID_FLAGS = (int)2147483640L;
    /**
     * {@snippet lang=c :
     * #define DIAGNOSTIC_REASON_INVALID_FLAGS 2147483640
     * }
     */
    public static int DIAGNOSTIC_REASON_INVALID_FLAGS() {
        return DIAGNOSTIC_REASON_INVALID_FLAGS;
    }
    private static final int POWER_REQUEST_CONTEXT_VERSION = (int)0L;
    /**
     * {@snippet lang=c :
     * #define POWER_REQUEST_CONTEXT_VERSION 0
     * }
     */
    public static int POWER_REQUEST_CONTEXT_VERSION() {
        return POWER_REQUEST_CONTEXT_VERSION;
    }
    private static final int POWER_REQUEST_CONTEXT_SIMPLE_STRING = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POWER_REQUEST_CONTEXT_SIMPLE_STRING 1
     * }
     */
    public static int POWER_REQUEST_CONTEXT_SIMPLE_STRING() {
        return POWER_REQUEST_CONTEXT_SIMPLE_STRING;
    }
    private static final int POWER_REQUEST_CONTEXT_DETAILED_STRING = (int)2L;
    /**
     * {@snippet lang=c :
     * #define POWER_REQUEST_CONTEXT_DETAILED_STRING 2
     * }
     */
    public static int POWER_REQUEST_CONTEXT_DETAILED_STRING() {
        return POWER_REQUEST_CONTEXT_DETAILED_STRING;
    }
    private static final int POWER_SETTING_VALUE_VERSION = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POWER_SETTING_VALUE_VERSION 1
     * }
     */
    public static int POWER_SETTING_VALUE_VERSION() {
        return POWER_SETTING_VALUE_VERSION;
    }
    private static final int POWER_PLATFORM_ROLE_V1 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define POWER_PLATFORM_ROLE_V1 1
     * }
     */
    public static int POWER_PLATFORM_ROLE_V1() {
        return POWER_PLATFORM_ROLE_V1;
    }
    private static final int POWER_PLATFORM_ROLE_V1_MAX = (int)8L;
    /**
     * {@snippet lang=c :
     * #define POWER_PLATFORM_ROLE_V1_MAX 8
     * }
     */
    public static int POWER_PLATFORM_ROLE_V1_MAX() {
        return POWER_PLATFORM_ROLE_V1_MAX;
    }
    private static final int POWER_PLATFORM_ROLE_V2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define POWER_PLATFORM_ROLE_V2 2
     * }
     */
    public static int POWER_PLATFORM_ROLE_V2() {
        return POWER_PLATFORM_ROLE_V2;
    }
    private static final int POWER_PLATFORM_ROLE_V2_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * #define POWER_PLATFORM_ROLE_V2_MAX 9
     * }
     */
    public static int POWER_PLATFORM_ROLE_V2_MAX() {
        return POWER_PLATFORM_ROLE_V2_MAX;
    }
    private static final int POWER_PLATFORM_ROLE_VERSION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define POWER_PLATFORM_ROLE_VERSION 2
     * }
     */
    public static int POWER_PLATFORM_ROLE_VERSION() {
        return POWER_PLATFORM_ROLE_VERSION;
    }
    private static final int POWER_PLATFORM_ROLE_VERSION_MAX = (int)9L;
    /**
     * {@snippet lang=c :
     * #define POWER_PLATFORM_ROLE_VERSION_MAX 9
     * }
     */
    public static int POWER_PLATFORM_ROLE_VERSION_MAX() {
        return POWER_PLATFORM_ROLE_VERSION_MAX;
    }
    private static final int POWER_ACTION_CRITICAL = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define POWER_ACTION_CRITICAL 2147483648
     * }
     */
    public static int POWER_ACTION_CRITICAL() {
        return POWER_ACTION_CRITICAL;
    }
    private static final int POWER_FORCE_TRIGGER_RESET = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define POWER_FORCE_TRIGGER_RESET 2147483648
     * }
     */
    public static int POWER_FORCE_TRIGGER_RESET() {
        return POWER_FORCE_TRIGGER_RESET;
    }
    private static final int BATTERY_DISCHARGE_FLAGS_ENABLE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define BATTERY_DISCHARGE_FLAGS_ENABLE 2147483648
     * }
     */
    public static int BATTERY_DISCHARGE_FLAGS_ENABLE() {
        return BATTERY_DISCHARGE_FLAGS_ENABLE;
    }
    private static final int IMAGE_FILE_MACHINE_AXP64 = (int)644L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_FILE_MACHINE_AXP64 644
     * }
     */
    public static int IMAGE_FILE_MACHINE_AXP64() {
        return IMAGE_FILE_MACHINE_AXP64;
    }
    private static final int IMAGE_NT_OPTIONAL_HDR_MAGIC = (int)523L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_NT_OPTIONAL_HDR_MAGIC 523
     * }
     */
    public static int IMAGE_NT_OPTIONAL_HDR_MAGIC() {
        return IMAGE_NT_OPTIONAL_HDR_MAGIC;
    }
    private static final int IMAGE_SCN_MEM_WRITE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_SCN_MEM_WRITE 2147483648
     * }
     */
    public static int IMAGE_SCN_MEM_WRITE() {
        return IMAGE_SCN_MEM_WRITE;
    }
    private static final short IMAGE_SYM_UNDEFINED = (short)0L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_SYM_UNDEFINED 0
     * }
     */
    public static short IMAGE_SYM_UNDEFINED() {
        return IMAGE_SYM_UNDEFINED;
    }
    private static final short IMAGE_SYM_ABSOLUTE = (short)-1L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_SYM_ABSOLUTE -1
     * }
     */
    public static short IMAGE_SYM_ABSOLUTE() {
        return IMAGE_SYM_ABSOLUTE;
    }
    private static final short IMAGE_SYM_DEBUG = (short)-2L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_SYM_DEBUG -2
     * }
     */
    public static short IMAGE_SYM_DEBUG() {
        return IMAGE_SYM_DEBUG;
    }
    private static final int IMAGE_SYM_SECTION_MAX_EX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_SYM_SECTION_MAX_EX 2147483647
     * }
     */
    public static int IMAGE_SYM_SECTION_MAX_EX() {
        return IMAGE_SYM_SECTION_MAX_EX;
    }
    private static final byte IMAGE_SYM_CLASS_END_OF_FUNCTION = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_SYM_CLASS_END_OF_FUNCTION 255
     * }
     */
    public static byte IMAGE_SYM_CLASS_END_OF_FUNCTION() {
        return IMAGE_SYM_CLASS_END_OF_FUNCTION;
    }
    /**
     * {@snippet lang=c :
     * #define IMAGE_ARCHIVE_START "!<arch>
     * "
     * }
     */
    public static MemorySegment IMAGE_ARCHIVE_START() {
        class Holder {
            static final MemorySegment IMAGE_ARCHIVE_START
                = winapi.LIBRARY_ARENA.allocateFrom("!<arch>\n");
        }
        return Holder.IMAGE_ARCHIVE_START;
    }
    /**
     * {@snippet lang=c :
     * #define IMAGE_ARCHIVE_END "`
     * "
     * }
     */
    public static MemorySegment IMAGE_ARCHIVE_END() {
        class Holder {
            static final MemorySegment IMAGE_ARCHIVE_END
                = winapi.LIBRARY_ARENA.allocateFrom("`\n");
        }
        return Holder.IMAGE_ARCHIVE_END;
    }
    /**
     * {@snippet lang=c :
     * #define IMAGE_ARCHIVE_PAD "
     * "
     * }
     */
    public static MemorySegment IMAGE_ARCHIVE_PAD() {
        class Holder {
            static final MemorySegment IMAGE_ARCHIVE_PAD
                = winapi.LIBRARY_ARENA.allocateFrom("\n");
        }
        return Holder.IMAGE_ARCHIVE_PAD;
    }
    /**
     * {@snippet lang=c :
     * #define IMAGE_ARCHIVE_LINKER_MEMBER "/               "
     * }
     */
    public static MemorySegment IMAGE_ARCHIVE_LINKER_MEMBER() {
        class Holder {
            static final MemorySegment IMAGE_ARCHIVE_LINKER_MEMBER
                = winapi.LIBRARY_ARENA.allocateFrom("/               ");
        }
        return Holder.IMAGE_ARCHIVE_LINKER_MEMBER;
    }
    /**
     * {@snippet lang=c :
     * #define IMAGE_ARCHIVE_LONGNAMES_MEMBER "//              "
     * }
     */
    public static MemorySegment IMAGE_ARCHIVE_LONGNAMES_MEMBER() {
        class Holder {
            static final MemorySegment IMAGE_ARCHIVE_LONGNAMES_MEMBER
                = winapi.LIBRARY_ARENA.allocateFrom("//              ");
        }
        return Holder.IMAGE_ARCHIVE_LONGNAMES_MEMBER;
    }
    /**
     * {@snippet lang=c :
     * #define IMAGE_ARCHIVE_HYBRIDMAP_MEMBER "/<HYBRIDMAP>/   "
     * }
     */
    public static MemorySegment IMAGE_ARCHIVE_HYBRIDMAP_MEMBER() {
        class Holder {
            static final MemorySegment IMAGE_ARCHIVE_HYBRIDMAP_MEMBER
                = winapi.LIBRARY_ARENA.allocateFrom("/<HYBRIDMAP>/   ");
        }
        return Holder.IMAGE_ARCHIVE_HYBRIDMAP_MEMBER;
    }
    private static final long IMAGE_ORDINAL_FLAG64 = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_ORDINAL_FLAG64 -9223372036854775808
     * }
     */
    public static long IMAGE_ORDINAL_FLAG64() {
        return IMAGE_ORDINAL_FLAG64;
    }
    private static final int IMAGE_ORDINAL_FLAG32 = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_ORDINAL_FLAG32 2147483648
     * }
     */
    public static int IMAGE_ORDINAL_FLAG32() {
        return IMAGE_ORDINAL_FLAG32;
    }
    private static final long IMAGE_ORDINAL_FLAG = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_ORDINAL_FLAG -9223372036854775808
     * }
     */
    public static long IMAGE_ORDINAL_FLAG() {
        return IMAGE_ORDINAL_FLAG;
    }
    private static final int IMAGE_RESOURCE_NAME_IS_STRING = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_RESOURCE_NAME_IS_STRING 2147483648
     * }
     */
    public static int IMAGE_RESOURCE_NAME_IS_STRING() {
        return IMAGE_RESOURCE_NAME_IS_STRING;
    }
    private static final int IMAGE_RESOURCE_DATA_IS_DIRECTORY = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_RESOURCE_DATA_IS_DIRECTORY 2147483648
     * }
     */
    public static int IMAGE_RESOURCE_DATA_IS_DIRECTORY() {
        return IMAGE_RESOURCE_DATA_IS_DIRECTORY;
    }
    private static final int IMAGE_DYNAMIC_RELOCATION_IMPORT_CONTROL_TRANSFER = (int)3L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_DYNAMIC_RELOCATION_IMPORT_CONTROL_TRANSFER 3
     * }
     */
    public static int IMAGE_DYNAMIC_RELOCATION_IMPORT_CONTROL_TRANSFER() {
        return IMAGE_DYNAMIC_RELOCATION_IMPORT_CONTROL_TRANSFER;
    }
    private static final int IMAGE_HOT_PATCH_CHUNK_INVERSE = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_HOT_PATCH_CHUNK_INVERSE 2147483648
     * }
     */
    public static int IMAGE_HOT_PATCH_CHUNK_INVERSE() {
        return IMAGE_HOT_PATCH_CHUNK_INVERSE;
    }
    private static final int IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK = (int)4026531840L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK 4026531840
     * }
     */
    public static int IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK() {
        return IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK;
    }
    private static final int IMAGE_ENCLAVE_LONG_ID_LENGTH = (int)32L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_ENCLAVE_LONG_ID_LENGTH 32
     * }
     */
    public static int IMAGE_ENCLAVE_LONG_ID_LENGTH() {
        return IMAGE_ENCLAVE_LONG_ID_LENGTH;
    }
    private static final int IMAGE_ENCLAVE_SHORT_ID_LENGTH = (int)16L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_ENCLAVE_SHORT_ID_LENGTH 16
     * }
     */
    public static int IMAGE_ENCLAVE_SHORT_ID_LENGTH() {
        return IMAGE_ENCLAVE_SHORT_ID_LENGTH;
    }
    private static final int IMAGE_ENCLAVE_MINIMUM_CONFIG_SIZE = (int)76L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_ENCLAVE_MINIMUM_CONFIG_SIZE 76
     * }
     */
    public static int IMAGE_ENCLAVE_MINIMUM_CONFIG_SIZE() {
        return IMAGE_ENCLAVE_MINIMUM_CONFIG_SIZE;
    }
    private static final int IMAGE_DEBUG_TYPE_BBT = (int)10L;
    /**
     * {@snippet lang=c :
     * #define IMAGE_DEBUG_TYPE_BBT 10
     * }
     */
    public static int IMAGE_DEBUG_TYPE_BBT() {
        return IMAGE_DEBUG_TYPE_BBT;
    }
    private static final int RTL_RUN_ONCE_CHECK_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RTL_RUN_ONCE_CHECK_ONLY 1
     * }
     */
    public static int RTL_RUN_ONCE_CHECK_ONLY() {
        return RTL_RUN_ONCE_CHECK_ONLY;
    }
    private static final int RTL_RUN_ONCE_ASYNC = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RTL_RUN_ONCE_ASYNC 2
     * }
     */
    public static int RTL_RUN_ONCE_ASYNC() {
        return RTL_RUN_ONCE_ASYNC;
    }
    private static final int RTL_RUN_ONCE_INIT_FAILED = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RTL_RUN_ONCE_INIT_FAILED 4
     * }
     */
    public static int RTL_RUN_ONCE_INIT_FAILED() {
        return RTL_RUN_ONCE_INIT_FAILED;
    }
}

