// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER {
 *     ULONG Magic;
 *     ULONG Version;
 *     ULONG cbAttributes;
 *     ULONG cbNonce;
 *     ULONG cbHashAlg;
 *     ULONG cbPadding;
 *     ULONG cbSignatureAlg;
 *     ULONG cbSignature;
 * }
 * }
 */
public class _NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER {

    _NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("Magic"),
        winapi.C_LONG.withName("Version"),
        winapi.C_LONG.withName("cbAttributes"),
        winapi.C_LONG.withName("cbNonce"),
        winapi.C_LONG.withName("cbHashAlg"),
        winapi.C_LONG.withName("cbPadding"),
        winapi.C_LONG.withName("cbSignatureAlg"),
        winapi.C_LONG.withName("cbSignature")
    ).withName("_NCRYPT_VBS_IDENTITY_ATTESTATION_HEADER");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Magic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Magic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Magic
     * }
     */
    public static final OfInt Magic$layout() {
        return Magic$LAYOUT;
    }

    private static final long Magic$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Magic
     * }
     */
    public static final long Magic$offset() {
        return Magic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Magic
     * }
     */
    public static int Magic(MemorySegment struct) {
        return struct.get(Magic$LAYOUT, Magic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Magic
     * }
     */
    public static void Magic(MemorySegment struct, int fieldValue) {
        struct.set(Magic$LAYOUT, Magic$OFFSET, fieldValue);
    }

    private static final OfInt Version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG Version
     * }
     */
    public static final OfInt Version$layout() {
        return Version$LAYOUT;
    }

    private static final long Version$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG Version
     * }
     */
    public static final long Version$offset() {
        return Version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG Version
     * }
     */
    public static int Version(MemorySegment struct) {
        return struct.get(Version$LAYOUT, Version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG Version
     * }
     */
    public static void Version(MemorySegment struct, int fieldValue) {
        struct.set(Version$LAYOUT, Version$OFFSET, fieldValue);
    }

    private static final OfInt cbAttributes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbAttributes
     * }
     */
    public static final OfInt cbAttributes$layout() {
        return cbAttributes$LAYOUT;
    }

    private static final long cbAttributes$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbAttributes
     * }
     */
    public static final long cbAttributes$offset() {
        return cbAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbAttributes
     * }
     */
    public static int cbAttributes(MemorySegment struct) {
        return struct.get(cbAttributes$LAYOUT, cbAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbAttributes
     * }
     */
    public static void cbAttributes(MemorySegment struct, int fieldValue) {
        struct.set(cbAttributes$LAYOUT, cbAttributes$OFFSET, fieldValue);
    }

    private static final OfInt cbNonce$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbNonce"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbNonce
     * }
     */
    public static final OfInt cbNonce$layout() {
        return cbNonce$LAYOUT;
    }

    private static final long cbNonce$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbNonce
     * }
     */
    public static final long cbNonce$offset() {
        return cbNonce$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbNonce
     * }
     */
    public static int cbNonce(MemorySegment struct) {
        return struct.get(cbNonce$LAYOUT, cbNonce$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbNonce
     * }
     */
    public static void cbNonce(MemorySegment struct, int fieldValue) {
        struct.set(cbNonce$LAYOUT, cbNonce$OFFSET, fieldValue);
    }

    private static final OfInt cbHashAlg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbHashAlg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbHashAlg
     * }
     */
    public static final OfInt cbHashAlg$layout() {
        return cbHashAlg$LAYOUT;
    }

    private static final long cbHashAlg$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbHashAlg
     * }
     */
    public static final long cbHashAlg$offset() {
        return cbHashAlg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbHashAlg
     * }
     */
    public static int cbHashAlg(MemorySegment struct) {
        return struct.get(cbHashAlg$LAYOUT, cbHashAlg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbHashAlg
     * }
     */
    public static void cbHashAlg(MemorySegment struct, int fieldValue) {
        struct.set(cbHashAlg$LAYOUT, cbHashAlg$OFFSET, fieldValue);
    }

    private static final OfInt cbPadding$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbPadding
     * }
     */
    public static final OfInt cbPadding$layout() {
        return cbPadding$LAYOUT;
    }

    private static final long cbPadding$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbPadding
     * }
     */
    public static final long cbPadding$offset() {
        return cbPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbPadding
     * }
     */
    public static int cbPadding(MemorySegment struct) {
        return struct.get(cbPadding$LAYOUT, cbPadding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbPadding
     * }
     */
    public static void cbPadding(MemorySegment struct, int fieldValue) {
        struct.set(cbPadding$LAYOUT, cbPadding$OFFSET, fieldValue);
    }

    private static final OfInt cbSignatureAlg$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSignatureAlg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbSignatureAlg
     * }
     */
    public static final OfInt cbSignatureAlg$layout() {
        return cbSignatureAlg$LAYOUT;
    }

    private static final long cbSignatureAlg$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbSignatureAlg
     * }
     */
    public static final long cbSignatureAlg$offset() {
        return cbSignatureAlg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbSignatureAlg
     * }
     */
    public static int cbSignatureAlg(MemorySegment struct) {
        return struct.get(cbSignatureAlg$LAYOUT, cbSignatureAlg$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbSignatureAlg
     * }
     */
    public static void cbSignatureAlg(MemorySegment struct, int fieldValue) {
        struct.set(cbSignatureAlg$LAYOUT, cbSignatureAlg$OFFSET, fieldValue);
    }

    private static final OfInt cbSignature$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSignature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ULONG cbSignature
     * }
     */
    public static final OfInt cbSignature$layout() {
        return cbSignature$LAYOUT;
    }

    private static final long cbSignature$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ULONG cbSignature
     * }
     */
    public static final long cbSignature$offset() {
        return cbSignature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ULONG cbSignature
     * }
     */
    public static int cbSignature(MemorySegment struct) {
        return struct.get(cbSignature$LAYOUT, cbSignature$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ULONG cbSignature
     * }
     */
    public static void cbSignature(MemorySegment struct, int fieldValue) {
        struct.set(cbSignature$LAYOUT, cbSignature$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

