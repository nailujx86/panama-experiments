// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _POWER_LIMIT_ATTRIBUTES {
 *     POWER_LIMIT_TYPES Type;
 *     DWORD DomainId;
 *     DWORD MaxValue;
 *     DWORD MinValue;
 *     DWORD MinTimeParameter;
 *     DWORD MaxTimeParameter;
 *     DWORD DefaultACValue;
 *     DWORD DefaultDCValue;
 *     union {
 *         struct {
 *             DWORD SupportTimeParameter : 1;
 *             DWORD Reserved : 31;
 *         };
 *         DWORD AsUlong;
 *     } Flags;
 * }
 * }
 */
public class _POWER_LIMIT_ATTRIBUTES {

    _POWER_LIMIT_ATTRIBUTES() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_INT.withName("Type"),
        winapi.C_LONG.withName("DomainId"),
        winapi.C_LONG.withName("MaxValue"),
        winapi.C_LONG.withName("MinValue"),
        winapi.C_LONG.withName("MinTimeParameter"),
        winapi.C_LONG.withName("MaxTimeParameter"),
        winapi.C_LONG.withName("DefaultACValue"),
        winapi.C_LONG.withName("DefaultDCValue"),
        _POWER_LIMIT_ATTRIBUTES.Flags.layout().withName("Flags")
    ).withName("_POWER_LIMIT_ATTRIBUTES");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * POWER_LIMIT_TYPES Type
     * }
     */
    public static final OfInt Type$layout() {
        return Type$LAYOUT;
    }

    private static final long Type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * POWER_LIMIT_TYPES Type
     * }
     */
    public static final long Type$offset() {
        return Type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * POWER_LIMIT_TYPES Type
     * }
     */
    public static int Type(MemorySegment struct) {
        return struct.get(Type$LAYOUT, Type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * POWER_LIMIT_TYPES Type
     * }
     */
    public static void Type(MemorySegment struct, int fieldValue) {
        struct.set(Type$LAYOUT, Type$OFFSET, fieldValue);
    }

    private static final OfInt DomainId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DomainId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DomainId
     * }
     */
    public static final OfInt DomainId$layout() {
        return DomainId$LAYOUT;
    }

    private static final long DomainId$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DomainId
     * }
     */
    public static final long DomainId$offset() {
        return DomainId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DomainId
     * }
     */
    public static int DomainId(MemorySegment struct) {
        return struct.get(DomainId$LAYOUT, DomainId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DomainId
     * }
     */
    public static void DomainId(MemorySegment struct, int fieldValue) {
        struct.set(DomainId$LAYOUT, DomainId$OFFSET, fieldValue);
    }

    private static final OfInt MaxValue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MaxValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MaxValue
     * }
     */
    public static final OfInt MaxValue$layout() {
        return MaxValue$LAYOUT;
    }

    private static final long MaxValue$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MaxValue
     * }
     */
    public static final long MaxValue$offset() {
        return MaxValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MaxValue
     * }
     */
    public static int MaxValue(MemorySegment struct) {
        return struct.get(MaxValue$LAYOUT, MaxValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MaxValue
     * }
     */
    public static void MaxValue(MemorySegment struct, int fieldValue) {
        struct.set(MaxValue$LAYOUT, MaxValue$OFFSET, fieldValue);
    }

    private static final OfInt MinValue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MinValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MinValue
     * }
     */
    public static final OfInt MinValue$layout() {
        return MinValue$LAYOUT;
    }

    private static final long MinValue$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MinValue
     * }
     */
    public static final long MinValue$offset() {
        return MinValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MinValue
     * }
     */
    public static int MinValue(MemorySegment struct) {
        return struct.get(MinValue$LAYOUT, MinValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MinValue
     * }
     */
    public static void MinValue(MemorySegment struct, int fieldValue) {
        struct.set(MinValue$LAYOUT, MinValue$OFFSET, fieldValue);
    }

    private static final OfInt MinTimeParameter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MinTimeParameter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MinTimeParameter
     * }
     */
    public static final OfInt MinTimeParameter$layout() {
        return MinTimeParameter$LAYOUT;
    }

    private static final long MinTimeParameter$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MinTimeParameter
     * }
     */
    public static final long MinTimeParameter$offset() {
        return MinTimeParameter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MinTimeParameter
     * }
     */
    public static int MinTimeParameter(MemorySegment struct) {
        return struct.get(MinTimeParameter$LAYOUT, MinTimeParameter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MinTimeParameter
     * }
     */
    public static void MinTimeParameter(MemorySegment struct, int fieldValue) {
        struct.set(MinTimeParameter$LAYOUT, MinTimeParameter$OFFSET, fieldValue);
    }

    private static final OfInt MaxTimeParameter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MaxTimeParameter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD MaxTimeParameter
     * }
     */
    public static final OfInt MaxTimeParameter$layout() {
        return MaxTimeParameter$LAYOUT;
    }

    private static final long MaxTimeParameter$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD MaxTimeParameter
     * }
     */
    public static final long MaxTimeParameter$offset() {
        return MaxTimeParameter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD MaxTimeParameter
     * }
     */
    public static int MaxTimeParameter(MemorySegment struct) {
        return struct.get(MaxTimeParameter$LAYOUT, MaxTimeParameter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD MaxTimeParameter
     * }
     */
    public static void MaxTimeParameter(MemorySegment struct, int fieldValue) {
        struct.set(MaxTimeParameter$LAYOUT, MaxTimeParameter$OFFSET, fieldValue);
    }

    private static final OfInt DefaultACValue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DefaultACValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DefaultACValue
     * }
     */
    public static final OfInt DefaultACValue$layout() {
        return DefaultACValue$LAYOUT;
    }

    private static final long DefaultACValue$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DefaultACValue
     * }
     */
    public static final long DefaultACValue$offset() {
        return DefaultACValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DefaultACValue
     * }
     */
    public static int DefaultACValue(MemorySegment struct) {
        return struct.get(DefaultACValue$LAYOUT, DefaultACValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DefaultACValue
     * }
     */
    public static void DefaultACValue(MemorySegment struct, int fieldValue) {
        struct.set(DefaultACValue$LAYOUT, DefaultACValue$OFFSET, fieldValue);
    }

    private static final OfInt DefaultDCValue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DefaultDCValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD DefaultDCValue
     * }
     */
    public static final OfInt DefaultDCValue$layout() {
        return DefaultDCValue$LAYOUT;
    }

    private static final long DefaultDCValue$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD DefaultDCValue
     * }
     */
    public static final long DefaultDCValue$offset() {
        return DefaultDCValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD DefaultDCValue
     * }
     */
    public static int DefaultDCValue(MemorySegment struct) {
        return struct.get(DefaultDCValue$LAYOUT, DefaultDCValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD DefaultDCValue
     * }
     */
    public static void DefaultDCValue(MemorySegment struct, int fieldValue) {
        struct.set(DefaultDCValue$LAYOUT, DefaultDCValue$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         DWORD SupportTimeParameter : 1;
     *         DWORD Reserved : 31;
     *     };
     *     DWORD AsUlong;
     * }
     * }
     */
    public static class Flags {

        Flags() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(4)
            ).withName("$anon$18403:9"),
            winapi.C_LONG.withName("AsUlong")
        ).withName("$anon$18402:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt AsUlong$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AsUlong"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * DWORD AsUlong
         * }
         */
        public static final OfInt AsUlong$layout() {
            return AsUlong$LAYOUT;
        }

        private static final long AsUlong$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * DWORD AsUlong
         * }
         */
        public static final long AsUlong$offset() {
            return AsUlong$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * DWORD AsUlong
         * }
         */
        public static int AsUlong(MemorySegment union) {
            return union.get(AsUlong$LAYOUT, AsUlong$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * DWORD AsUlong
         * }
         */
        public static void AsUlong(MemorySegment union, int fieldValue) {
            union.set(AsUlong$LAYOUT, AsUlong$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout Flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         DWORD SupportTimeParameter : 1;
     *         DWORD Reserved : 31;
     *     };
     *     DWORD AsUlong;
     * } Flags
     * }
     */
    public static final GroupLayout Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         DWORD SupportTimeParameter : 1;
     *         DWORD Reserved : 31;
     *     };
     *     DWORD AsUlong;
     * } Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         DWORD SupportTimeParameter : 1;
     *         DWORD Reserved : 31;
     *     };
     *     DWORD AsUlong;
     * } Flags
     * }
     */
    public static MemorySegment Flags(MemorySegment struct) {
        return struct.asSlice(Flags$OFFSET, Flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         DWORD SupportTimeParameter : 1;
     *         DWORD Reserved : 31;
     *     };
     *     DWORD AsUlong;
     * } Flags
     * }
     */
    public static void Flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Flags$OFFSET, Flags$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

