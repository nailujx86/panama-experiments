// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class winapi_17 extends winapi_18 {

    winapi_17() {
        // Should not be called directly
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
     *     DWORDLONG VetoedFromAltitudeIntegral;
     *     DWORDLONG VetoedFromAltitudeDecimal;
     *     WCHAR Reason[256];
     * } *PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
     * }
     */
    public static final AddressLayout PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT = winapi.C_POINTER;
    private static final int StorageReserveIdNone = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdNone = 0
     * }
     */
    public static int StorageReserveIdNone() {
        return StorageReserveIdNone;
    }
    private static final int StorageReserveIdHard = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdHard = 1
     * }
     */
    public static int StorageReserveIdHard() {
        return StorageReserveIdHard;
    }
    private static final int StorageReserveIdSoft = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdSoft = 2
     * }
     */
    public static int StorageReserveIdSoft() {
        return StorageReserveIdSoft;
    }
    private static final int StorageReserveIdUpdateScratch = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdUpdateScratch = 3
     * }
     */
    public static int StorageReserveIdUpdateScratch() {
        return StorageReserveIdUpdateScratch;
    }
    private static final int StorageReserveIdMax = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _STORAGE_RESERVE_ID.StorageReserveIdMax = 4
     * }
     */
    public static int StorageReserveIdMax() {
        return StorageReserveIdMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _STORAGE_RESERVE_ID {
     *     StorageReserveIdNone = 0,
     *     StorageReserveIdHard,
     *     StorageReserveIdSoft,
     *     StorageReserveIdUpdateScratch,
     *     StorageReserveIdMax
     * } *PSTORAGE_RESERVE_ID
     * }
     */
    public static final AddressLayout PSTORAGE_RESERVE_ID = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CSV_IS_OWNED_BY_CSVFS {
     *     BOOLEAN OwnedByCSVFS;
     * } *PCSV_IS_OWNED_BY_CSVFS
     * }
     */
    public static final AddressLayout PCSV_IS_OWNED_BY_CSVFS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM_RANGE {
     *     DWORDLONG Offset;
     *     DWORDLONG Length;
     * } *PFILE_LEVEL_TRIM_RANGE
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM_RANGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM {
     *     DWORD Key;
     *     DWORD NumRanges;
     *     FILE_LEVEL_TRIM_RANGE Ranges[1];
     * } *PFILE_LEVEL_TRIM
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LEVEL_TRIM_OUTPUT {
     *     DWORD NumRangesProcessed;
     * } *PFILE_LEVEL_TRIM_OUTPUT
     * }
     */
    public static final AddressLayout PFILE_LEVEL_TRIM_OUTPUT = winapi.C_POINTER;
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_NONE() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_NONE;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID;
    }
    private static final int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3
     * }
     */
    public static int QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID() {
        return QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID;
    }
    private static final int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _QUERY_FILE_LAYOUT_FILTER_TYPE.QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4
     * }
     */
    public static int QUERY_FILE_LAYOUT_NUM_FILTER_TYPES() {
        return QUERY_FILE_LAYOUT_NUM_FILTER_TYPES;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CLUSTER_RANGE {
     *     LARGE_INTEGER StartingCluster;
     *     LARGE_INTEGER ClusterCount;
     * } *PCLUSTER_RANGE
     * }
     */
    public static final AddressLayout PCLUSTER_RANGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REFERENCE_RANGE {
     *     DWORDLONG StartingFileReferenceNumber;
     *     DWORDLONG EndingFileReferenceNumber;
     * } *PFILE_REFERENCE_RANGE
     * }
     */
    public static final AddressLayout PFILE_REFERENCE_RANGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_FILE_LAYOUT_INPUT {
     *     union {
     *         DWORD FilterEntryCount;
     *         DWORD NumberOfPairs;
     *     };
     *     DWORD Flags;
     *     QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
     *     DWORD Reserved;
     *     union {
     *         CLUSTER_RANGE ClusterRanges[1];
     *         FILE_REFERENCE_RANGE FileReferenceRanges[1];
     *         STORAGE_RESERVE_ID StorageReserveIds[1];
     *     } Filter;
     * } *PQUERY_FILE_LAYOUT_INPUT
     * }
     */
    public static final AddressLayout PQUERY_FILE_LAYOUT_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_FILE_LAYOUT_OUTPUT {
     *     DWORD FileEntryCount;
     *     DWORD FirstFileOffset;
     *     DWORD Flags;
     *     DWORD Reserved;
     * } *PQUERY_FILE_LAYOUT_OUTPUT
     * }
     */
    public static final AddressLayout PQUERY_FILE_LAYOUT_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_ENTRY {
     *     DWORD Version;
     *     DWORD NextFileOffset;
     *     DWORD Flags;
     *     DWORD FileAttributes;
     *     DWORDLONG FileReferenceNumber;
     *     DWORD FirstNameOffset;
     *     DWORD FirstStreamOffset;
     *     DWORD ExtraInfoOffset;
     *     DWORD ExtraInfoLength;
     * } *PFILE_LAYOUT_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_NAME_ENTRY {
     *     DWORD NextNameOffset;
     *     DWORD Flags;
     *     DWORDLONG ParentFileReferenceNumber;
     *     DWORD FileNameLength;
     *     DWORD Reserved;
     *     WCHAR FileName[1];
     * } *PFILE_LAYOUT_NAME_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_NAME_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_LAYOUT_INFO_ENTRY {
     *     struct {
     *         LARGE_INTEGER CreationTime;
     *         LARGE_INTEGER LastAccessTime;
     *         LARGE_INTEGER LastWriteTime;
     *         LARGE_INTEGER ChangeTime;
     *         DWORD FileAttributes;
     *     } BasicInformation;
     *     DWORD OwnerId;
     *     DWORD SecurityId;
     *     USN Usn;
     *     STORAGE_RESERVE_ID StorageReserveId;
     * } *PFILE_LAYOUT_INFO_ENTRY
     * }
     */
    public static final AddressLayout PFILE_LAYOUT_INFO_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_LAYOUT_ENTRY {
     *     DWORD Version;
     *     DWORD NextStreamOffset;
     *     DWORD Flags;
     *     DWORD ExtentInformationOffset;
     *     LARGE_INTEGER AllocationSize;
     *     LARGE_INTEGER EndOfFile;
     *     DWORD StreamInformationOffset;
     *     DWORD AttributeTypeCode;
     *     DWORD AttributeFlags;
     *     DWORD StreamIdentifierLength;
     *     WCHAR StreamIdentifier[1];
     * } *PSTREAM_LAYOUT_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_LAYOUT_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_EXTENT_ENTRY {
     *     DWORD Flags;
     *     union {
     *         RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
     *     } ExtentInformation;
     * } *PSTREAM_EXTENT_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_EXTENT_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
     *     WORD ChecksumAlgorithm;
     *     WORD Reserved;
     *     DWORD Flags;
     *     DWORD ChecksumChunkSizeInBytes;
     *     DWORD ClusterSizeInBytes;
     * } *PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER
     * }
     */
    public static final AddressLayout PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
     *     WORD ChecksumAlgorithm;
     *     WORD Reserved;
     *     DWORD Flags;
     * } *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER
     * }
     */
    public static final AddressLayout PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
     *     BYTE EnableIntegrity;
     *     BYTE KeepIntegrityStateUnchanged;
     *     WORD Reserved;
     *     DWORD Flags;
     *     BYTE Version;
     *     BYTE Reserved2[7];
     * } *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
     * }
     */
    public static final AddressLayout PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_READ_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD TokenTimeToLive;
     *     DWORD Reserved;
     *     DWORDLONG FileOffset;
     *     DWORDLONG CopyLength;
     * } *PFSCTL_OFFLOAD_READ_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_READ_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_READ_OUTPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG TransferLength;
     *     BYTE Token[512];
     * } *PFSCTL_OFFLOAD_READ_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_READ_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_WRITE_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG FileOffset;
     *     DWORDLONG CopyLength;
     *     DWORDLONG TransferOffset;
     *     BYTE Token[512];
     * } *PFSCTL_OFFLOAD_WRITE_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_WRITE_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORDLONG LengthWritten;
     * } *PFSCTL_OFFLOAD_WRITE_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_OFFLOAD_WRITE_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_PURGE_FAILURE_MODE_INPUT {
     *     DWORD Flags;
     * } *PSET_PURGE_FAILURE_MODE_INPUT
     * }
     */
    public static final AddressLayout PSET_PURGE_FAILURE_MODE_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REPAIR_COPIES_INPUT {
     *     DWORD Size;
     *     DWORD Flags;
     *     LARGE_INTEGER FileOffset;
     *     DWORD Length;
     *     DWORD SourceCopy;
     *     DWORD NumberOfRepairCopies;
     *     DWORD RepairCopies[1];
     * } *PREPAIR_COPIES_INPUT
     * }
     */
    public static final AddressLayout PREPAIR_COPIES_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REPAIR_COPIES_OUTPUT {
     *     DWORD Size;
     *     DWORD Status;
     *     LARGE_INTEGER ResumeFileOffset;
     * } *PREPAIR_COPIES_OUTPUT
     * }
     */
    public static final AddressLayout PREPAIR_COPIES_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_INFO {
     *     LONGLONG FileOffset;
     *     LONGLONG Length;
     *     DWORD Usage;
     *     DWORD Reserved;
     * } *PFILE_REGION_INFO
     * }
     */
    public static final AddressLayout PFILE_REGION_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_OUTPUT {
     *     DWORD Flags;
     *     DWORD TotalRegionEntryCount;
     *     DWORD RegionEntryCount;
     *     DWORD Reserved;
     *     FILE_REGION_INFO Region[1];
     * } *PFILE_REGION_OUTPUT
     * }
     */
    public static final AddressLayout PFILE_REGION_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_REGION_INPUT {
     *     LONGLONG FileOffset;
     *     LONGLONG Length;
     *     DWORD DesiredUsage;
     * } *PFILE_REGION_INPUT
     * }
     */
    public static final AddressLayout PFILE_REGION_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WRITE_USN_REASON_INPUT {
     *     DWORD Flags;
     *     DWORD UsnReasonToWrite;
     * } *PWRITE_USN_REASON_INPUT
     * }
     */
    public static final AddressLayout PWRITE_USN_REASON_INPUT = winapi.C_POINTER;
    private static final int FileStorageTierMediaTypeUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeUnspecified = 0
     * }
     */
    public static int FileStorageTierMediaTypeUnspecified() {
        return FileStorageTierMediaTypeUnspecified;
    }
    private static final int FileStorageTierMediaTypeDisk = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeDisk = 1
     * }
     */
    public static int FileStorageTierMediaTypeDisk() {
        return FileStorageTierMediaTypeDisk;
    }
    private static final int FileStorageTierMediaTypeSsd = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeSsd = 2
     * }
     */
    public static int FileStorageTierMediaTypeSsd() {
        return FileStorageTierMediaTypeSsd;
    }
    private static final int FileStorageTierMediaTypeScm = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeScm = 4
     * }
     */
    public static int FileStorageTierMediaTypeScm() {
        return FileStorageTierMediaTypeScm;
    }
    private static final int FileStorageTierMediaTypeMax = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_MEDIA_TYPE.FileStorageTierMediaTypeMax = 5
     * }
     */
    public static int FileStorageTierMediaTypeMax() {
        return FileStorageTierMediaTypeMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _FILE_STORAGE_TIER_MEDIA_TYPE {
     *     FileStorageTierMediaTypeUnspecified = 0,
     *     FileStorageTierMediaTypeDisk = 1,
     *     FileStorageTierMediaTypeSsd = 2,
     *     FileStorageTierMediaTypeScm = 4,
     *     FileStorageTierMediaTypeMax
     * } *PFILE_STORAGE_TIER_MEDIA_TYPE
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_MEDIA_TYPE = winapi.C_POINTER;
    private static final int FileStorageTierClassUnspecified = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassUnspecified = 0
     * }
     */
    public static int FileStorageTierClassUnspecified() {
        return FileStorageTierClassUnspecified;
    }
    private static final int FileStorageTierClassCapacity = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassCapacity = 1
     * }
     */
    public static int FileStorageTierClassCapacity() {
        return FileStorageTierClassCapacity;
    }
    private static final int FileStorageTierClassPerformance = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassPerformance = 2
     * }
     */
    public static int FileStorageTierClassPerformance() {
        return FileStorageTierClassPerformance;
    }
    private static final int FileStorageTierClassMax = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _FILE_STORAGE_TIER_CLASS.FileStorageTierClassMax = 3
     * }
     */
    public static int FileStorageTierClassMax() {
        return FileStorageTierClassMax;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _FILE_STORAGE_TIER_CLASS {
     *     FileStorageTierClassUnspecified = 0,
     *     FileStorageTierClassCapacity,
     *     FileStorageTierClassPerformance,
     *     FileStorageTierClassMax
     * } *PFILE_STORAGE_TIER_CLASS
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_CLASS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_STORAGE_TIER {
     *     GUID Id;
     *     WCHAR Name[256];
     *     WCHAR Description[256];
     *     DWORDLONG Flags;
     *     DWORDLONG ProvisionedCapacity;
     *     FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
     *     FILE_STORAGE_TIER_CLASS Class;
     * } *PFILE_STORAGE_TIER
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD TotalNumberOfTiers;
     *     DWORD NumberOfTiersReturned;
     *     FILE_STORAGE_TIER Tiers[1];
     * } *PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAM_INFORMATION_ENTRY {
     *     DWORD Version;
     *     DWORD Flags;
     *     union _StreamInformation {
     *         struct _DesiredStorageClass {
     *             FILE_STORAGE_TIER_CLASS Class;
     *             DWORD Flags;
     *         } DesiredStorageClass;
     *         struct _DataStream {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD Reserved;
     *             DWORDLONG Vdl;
     *         } DataStream;
     *         struct _Reparse {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD ReparseDataSize;
     *             DWORD ReparseDataOffset;
     *         } Reparse;
     *         struct _Ea {
     *             WORD Length;
     *             WORD Flags;
     *             DWORD EaSize;
     *             DWORD EaInformationOffset;
     *         } Ea;
     *     } StreamInformation;
     * } *PSTREAM_INFORMATION_ENTRY
     * }
     */
    public static final AddressLayout PSTREAM_INFORMATION_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_REGION_INFO_INPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD NumberOfTierIds;
     *     GUID TierIds[1];
     * } *PFSCTL_QUERY_REGION_INFO_INPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_REGION_INFO_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_STORAGE_TIER_REGION {
     *     GUID TierId;
     *     DWORDLONG Offset;
     *     DWORDLONG Length;
     * } *PFILE_STORAGE_TIER_REGION
     * }
     */
    public static final AddressLayout PFILE_STORAGE_TIER_REGION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FSCTL_QUERY_REGION_INFO_OUTPUT {
     *     DWORD Version;
     *     DWORD Size;
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG Alignment;
     *     DWORD TotalNumberOfRegions;
     *     DWORD NumberOfRegionsReturned;
     *     FILE_STORAGE_TIER_REGION Regions[1];
     * } *PFSCTL_QUERY_REGION_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PFSCTL_QUERY_REGION_INFO_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {
     *     FILE_STORAGE_TIER_CLASS Class;
     *     DWORD Flags;
     * } *PFILE_DESIRED_STORAGE_CLASS_INFORMATION
     * }
     */
    public static final AddressLayout PFILE_DESIRED_STORAGE_CLASS_INFORMATION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA {
     *     HANDLE FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     * } *PDUPLICATE_EXTENTS_DATA
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA32 {
     *     UINT32 FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     * } *PDUPLICATE_EXTENTS_DATA32
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA32 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA_EX {
     *     SIZE_T Size;
     *     HANDLE FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     *     DWORD Flags;
     * } *PDUPLICATE_EXTENTS_DATA_EX
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA_EX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DUPLICATE_EXTENTS_DATA_EX32 {
     *     DWORD32 Size;
     *     DWORD32 FileHandle;
     *     LARGE_INTEGER SourceFileOffset;
     *     LARGE_INTEGER TargetFileOffset;
     *     LARGE_INTEGER ByteCount;
     *     DWORD Flags;
     * } *PDUPLICATE_EXTENTS_DATA_EX32
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_DATA_EX32 = winapi.C_POINTER;
    private static final int FileSnapStateInactive = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _DUPLICATE_EXTENTS_STATE.FileSnapStateInactive = 0
     * }
     */
    public static int FileSnapStateInactive() {
        return FileSnapStateInactive;
    }
    private static final int FileSnapStateSource = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _DUPLICATE_EXTENTS_STATE.FileSnapStateSource = 1
     * }
     */
    public static int FileSnapStateSource() {
        return FileSnapStateSource;
    }
    private static final int FileSnapStateTarget = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _DUPLICATE_EXTENTS_STATE.FileSnapStateTarget = 2
     * }
     */
    public static int FileSnapStateTarget() {
        return FileSnapStateTarget;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _DUPLICATE_EXTENTS_STATE {
     *     FileSnapStateInactive = 0,
     *     FileSnapStateSource,
     *     FileSnapStateTarget
     * } *PDUPLICATE_EXTENTS_STATE
     * }
     */
    public static final AddressLayout PDUPLICATE_EXTENTS_STATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ASYNC_DUPLICATE_EXTENTS_STATUS {
     *     DWORD Version;
     *     DUPLICATE_EXTENTS_STATE State;
     *     DWORDLONG SourceFileOffset;
     *     DWORDLONG TargetFileOffset;
     *     DWORDLONG ByteCount;
     *     DWORDLONG BytesDuplicated;
     * } *PASYNC_DUPLICATE_EXTENTS_STATUS
     * }
     */
    public static final AddressLayout PASYNC_DUPLICATE_EXTENTS_STATUS = winapi.C_POINTER;
    private static final int SmrGcStateInactive = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateInactive = 0
     * }
     */
    public static int SmrGcStateInactive() {
        return SmrGcStateInactive;
    }
    private static final int SmrGcStatePaused = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStatePaused = 1
     * }
     */
    public static int SmrGcStatePaused() {
        return SmrGcStatePaused;
    }
    private static final int SmrGcStateActive = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateActive = 2
     * }
     */
    public static int SmrGcStateActive() {
        return SmrGcStateActive;
    }
    private static final int SmrGcStateActiveFullSpeed = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_STATE.SmrGcStateActiveFullSpeed = 3
     * }
     */
    public static int SmrGcStateActiveFullSpeed() {
        return SmrGcStateActiveFullSpeed;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_STATE {
     *     SmrGcStateInactive = 0,
     *     SmrGcStatePaused = 1,
     *     SmrGcStateActive = 2,
     *     SmrGcStateActiveFullSpeed = 3
     * } *PREFS_SMR_VOLUME_GC_STATE
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_STATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REFS_SMR_VOLUME_INFO_OUTPUT {
     *     DWORD Version;
     *     DWORD Flags;
     *     LARGE_INTEGER SizeOfRandomlyWritableTier;
     *     LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
     *     LARGE_INTEGER SizeofSMRTier;
     *     LARGE_INTEGER FreeSpaceInSMRTier;
     *     LARGE_INTEGER UsableFreeSpaceInSMRTier;
     *     REFS_SMR_VOLUME_GC_STATE VolumeGcState;
     *     DWORD VolumeGcLastStatus;
     *     DWORD CurrentGcBandFillPercentage;
     *     DWORDLONG Unused[6];
     * } *PREFS_SMR_VOLUME_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_INFO_OUTPUT = winapi.C_POINTER;
    private static final int SmrGcActionStart = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStart = 1
     * }
     */
    public static int SmrGcActionStart() {
        return SmrGcActionStart;
    }
    private static final int SmrGcActionStartFullSpeed = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStartFullSpeed = 2
     * }
     */
    public static int SmrGcActionStartFullSpeed() {
        return SmrGcActionStartFullSpeed;
    }
    private static final int SmrGcActionPause = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionPause = 3
     * }
     */
    public static int SmrGcActionPause() {
        return SmrGcActionPause;
    }
    private static final int SmrGcActionStop = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_ACTION.SmrGcActionStop = 4
     * }
     */
    public static int SmrGcActionStop() {
        return SmrGcActionStop;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_ACTION {
     *     SmrGcActionStart = 1,
     *     SmrGcActionStartFullSpeed = 2,
     *     SmrGcActionPause = 3,
     *     SmrGcActionStop = 4
     * } *PREFS_SMR_VOLUME_GC_ACTION
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_ACTION = winapi.C_POINTER;
    private static final int SmrGcMethodCompaction = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodCompaction = 1
     * }
     */
    public static int SmrGcMethodCompaction() {
        return SmrGcMethodCompaction;
    }
    private static final int SmrGcMethodCompression = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodCompression = 2
     * }
     */
    public static int SmrGcMethodCompression() {
        return SmrGcMethodCompression;
    }
    private static final int SmrGcMethodRotation = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _REFS_SMR_VOLUME_GC_METHOD.SmrGcMethodRotation = 3
     * }
     */
    public static int SmrGcMethodRotation() {
        return SmrGcMethodRotation;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _REFS_SMR_VOLUME_GC_METHOD {
     *     SmrGcMethodCompaction = 1,
     *     SmrGcMethodCompression = 2,
     *     SmrGcMethodRotation = 3
     * } *PREFS_SMR_VOLUME_GC_METHOD
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_METHOD = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _REFS_SMR_VOLUME_GC_PARAMETERS {
     *     DWORD Version;
     *     DWORD Flags;
     *     REFS_SMR_VOLUME_GC_ACTION Action;
     *     REFS_SMR_VOLUME_GC_METHOD Method;
     *     DWORD IoGranularity;
     *     DWORD CompressionFormat;
     *     DWORDLONG Unused[8];
     * } *PREFS_SMR_VOLUME_GC_PARAMETERS
     * }
     */
    public static final AddressLayout PREFS_SMR_VOLUME_GC_PARAMETERS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
     *     DWORD OptimalWriteSize;
     *     DWORD StreamGranularitySize;
     *     DWORD StreamIdMin;
     *     DWORD StreamIdMax;
     * } *PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
     *     DWORD Flags;
     *     DWORD StreamId;
     * } *PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {
     *     DWORD StreamId;
     * } *PSTREAMS_QUERY_ID_OUTPUT_BUFFER
     * }
     */
    public static final AddressLayout PSTREAMS_QUERY_ID_OUTPUT_BUFFER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_INPUT_RANGE {
     *     DWORDLONG StartOffset;
     *     DWORDLONG LengthInBytes;
     * } *PQUERY_BAD_RANGES_INPUT_RANGE
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_INPUT_RANGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_INPUT {
     *     DWORD Flags;
     *     DWORD NumRanges;
     *     QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];
     * } *PQUERY_BAD_RANGES_INPUT
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_OUTPUT_RANGE {
     *     DWORD Flags;
     *     DWORD Reserved;
     *     DWORDLONG StartOffset;
     *     DWORDLONG LengthInBytes;
     * } *PQUERY_BAD_RANGES_OUTPUT_RANGE
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_OUTPUT_RANGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _QUERY_BAD_RANGES_OUTPUT {
     *     DWORD Flags;
     *     DWORD NumBadRanges;
     *     DWORDLONG NextOffsetToLookUp;
     *     QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];
     * } *PQUERY_BAD_RANGES_OUTPUT
     * }
     */
    public static final AddressLayout PQUERY_BAD_RANGES_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
     *     DWORD Flags;
     *     DWORD AlignmentShift;
     *     DWORDLONG FileOffsetToAlign;
     *     DWORD FallbackAlignmentShift;
     * } *PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
     * }
     */
    public static final AddressLayout PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT = winapi.C_POINTER;
    private static final int VirtualStorageBehaviorUndefined = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorUndefined = 0
     * }
     */
    public static int VirtualStorageBehaviorUndefined() {
        return VirtualStorageBehaviorUndefined;
    }
    private static final int VirtualStorageBehaviorCacheWriteThrough = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorCacheWriteThrough = 1
     * }
     */
    public static int VirtualStorageBehaviorCacheWriteThrough() {
        return VirtualStorageBehaviorCacheWriteThrough;
    }
    private static final int VirtualStorageBehaviorCacheWriteBack = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorCacheWriteBack = 2
     * }
     */
    public static int VirtualStorageBehaviorCacheWriteBack() {
        return VirtualStorageBehaviorCacheWriteBack;
    }
    private static final int VirtualStorageBehaviorStopIoProcessing = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorStopIoProcessing = 3
     * }
     */
    public static int VirtualStorageBehaviorStopIoProcessing() {
        return VirtualStorageBehaviorStopIoProcessing;
    }
    private static final int VirtualStorageBehaviorRestartIoProcessing = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _VIRTUAL_STORAGE_BEHAVIOR_CODE.VirtualStorageBehaviorRestartIoProcessing = 4
     * }
     */
    public static int VirtualStorageBehaviorRestartIoProcessing() {
        return VirtualStorageBehaviorRestartIoProcessing;
    }
    /**
     * {@snippet lang=c :
     * typedef enum _VIRTUAL_STORAGE_BEHAVIOR_CODE {
     *     VirtualStorageBehaviorUndefined = 0,
     *     VirtualStorageBehaviorCacheWriteThrough = 1,
     *     VirtualStorageBehaviorCacheWriteBack = 2,
     *     VirtualStorageBehaviorStopIoProcessing = 3,
     *     VirtualStorageBehaviorRestartIoProcessing = 4
     * } *PVIRTUAL_STORAGE_BEHAVIOR_CODE
     * }
     */
    public static final AddressLayout PVIRTUAL_STORAGE_BEHAVIOR_CODE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
     *     DWORD Size;
     *     VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
     * } *PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
     * }
     */
    public static final AddressLayout PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ENCRYPTION_KEY_CTRL_INPUT {
     *     DWORD HeaderSize;
     *     DWORD StructureSize;
     *     WORD KeyOffset;
     *     WORD KeySize;
     *     DWORD DplLock;
     *     DWORDLONG DplUserId;
     *     DWORDLONG DplCredentialId;
     * } *PENCRYPTION_KEY_CTRL_INPUT
     * }
     */
    public static final AddressLayout PENCRYPTION_KEY_CTRL_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_EXTERNAL_INFO {
     *     DWORD Version;
     *     DWORD Provider;
     * } *PWOF_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PWOF_EXTERNAL_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_EXTERNAL_FILE_ID {
     *     FILE_ID_128 FileId;
     * } *PWOF_EXTERNAL_FILE_ID
     * }
     */
    public static final AddressLayout PWOF_EXTERNAL_FILE_ID = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WOF_VERSION_INFO {
     *     DWORD WofVersion;
     * } *PWOF_VERSION_INFO
     * }
     */
    public static final AddressLayout PWOF_VERSION_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_EXTERNAL_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     LARGE_INTEGER DataSourceId;
     *     BYTE ResourceHash[20];
     * } *PWIM_PROVIDER_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_EXTERNAL_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
     *     DWORD WimType;
     *     DWORD WimIndex;
     *     DWORD WimFileNameOffset;
     *     DWORD WimFileNameLength;
     * } *PWIM_PROVIDER_ADD_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_ADD_OVERLAY_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     *     DWORD WimFileNameOffset;
     *     DWORD WimFileNameLength;
     * } *PWIM_PROVIDER_UPDATE_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_UPDATE_OVERLAY_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     * } *PWIM_PROVIDER_REMOVE_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_REMOVE_OVERLAY_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
     *     LARGE_INTEGER DataSourceId;
     * } *PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _WIM_PROVIDER_OVERLAY_ENTRY {
     *     DWORD NextEntryOffset;
     *     LARGE_INTEGER DataSourceId;
     *     GUID WimGuid;
     *     DWORD WimFileNameOffset;
     *     DWORD WimType;
     *     DWORD WimIndex;
     *     DWORD Flags;
     * } *PWIM_PROVIDER_OVERLAY_ENTRY
     * }
     */
    public static final AddressLayout PWIM_PROVIDER_OVERLAY_ENTRY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
     *     DWORD Version;
     *     DWORD Algorithm;
     * } *PFILE_PROVIDER_EXTERNAL_INFO_V0
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO_V0 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
     *     DWORD Version;
     *     DWORD Algorithm;
     *     DWORD Flags;
     * } *PFILE_PROVIDER_EXTERNAL_INFO_V1
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PFILE_PROVIDER_EXTERNAL_INFO_V1 PFILE_PROVIDER_EXTERNAL_INFO
     * }
     */
    public static final AddressLayout PFILE_PROVIDER_EXTERNAL_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_VOLUME_STATE {
     *     DWORD Flags;
     * } *PCONTAINER_VOLUME_STATE
     * }
     */
    public static final AddressLayout PCONTAINER_VOLUME_STATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_ROOT_INFO_INPUT {
     *     DWORD Flags;
     * } *PCONTAINER_ROOT_INFO_INPUT
     * }
     */
    public static final AddressLayout PCONTAINER_ROOT_INFO_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CONTAINER_ROOT_INFO_OUTPUT {
     *     WORD ContainerRootIdLength;
     *     BYTE ContainerRootId[1];
     * } *PCONTAINER_ROOT_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PCONTAINER_ROOT_INFO_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
     *     DWORD NumberOfWorkerThreads;
     *     DWORD Flags;
     * } *PVIRTUALIZATION_INSTANCE_INFO_INPUT
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
     *     WORD HeaderSize;
     *     DWORD Flags;
     *     DWORD NotificationInfoSize;
     *     WORD NotificationInfoOffset;
     *     WORD ProviderMajorVersion;
     * } *PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
     *     GUID VirtualizationInstanceID;
     * } *PVIRTUALIZATION_INSTANCE_INFO_OUTPUT
     * }
     */
    public static final AddressLayout PVIRTUALIZATION_INSTANCE_INFO_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
     *     WORD AltitudeLength;
     *     WCHAR Altitude[1];
     * } *PGET_FILTER_FILE_IDENTIFIER_INPUT
     * }
     */
    public static final AddressLayout PGET_FILTER_FILE_IDENTIFIER_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
     *     WORD FilterFileIdentifierLength;
     *     BYTE FilterFileIdentifier[1];
     * } *PGET_FILTER_FILE_IDENTIFIER_OUTPUT
     * }
     */
    public static final AddressLayout PGET_FILTER_FILE_IDENTIFIER_OUTPUT = winapi.C_POINTER;
    private static final int FS_BPIO_OP_ENABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_ENABLE = 1
     * }
     */
    public static int FS_BPIO_OP_ENABLE() {
        return FS_BPIO_OP_ENABLE;
    }
    private static final int FS_BPIO_OP_DISABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_DISABLE = 2
     * }
     */
    public static int FS_BPIO_OP_DISABLE() {
        return FS_BPIO_OP_DISABLE;
    }
    private static final int FS_BPIO_OP_QUERY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_QUERY = 3
     * }
     */
    public static int FS_BPIO_OP_QUERY() {
        return FS_BPIO_OP_QUERY;
    }
    private static final int FS_BPIO_OP_VOLUME_STACK_PAUSE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_VOLUME_STACK_PAUSE = 4
     * }
     */
    public static int FS_BPIO_OP_VOLUME_STACK_PAUSE() {
        return FS_BPIO_OP_VOLUME_STACK_PAUSE;
    }
    private static final int FS_BPIO_OP_VOLUME_STACK_RESUME = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_VOLUME_STACK_RESUME = 5
     * }
     */
    public static int FS_BPIO_OP_VOLUME_STACK_RESUME() {
        return FS_BPIO_OP_VOLUME_STACK_RESUME;
    }
    private static final int FS_BPIO_OP_STREAM_PAUSE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_STREAM_PAUSE = 6
     * }
     */
    public static int FS_BPIO_OP_STREAM_PAUSE() {
        return FS_BPIO_OP_STREAM_PAUSE;
    }
    private static final int FS_BPIO_OP_STREAM_RESUME = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_STREAM_RESUME = 7
     * }
     */
    public static int FS_BPIO_OP_STREAM_RESUME() {
        return FS_BPIO_OP_STREAM_RESUME;
    }
    private static final int FS_BPIO_OP_GET_INFO = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_GET_INFO = 8
     * }
     */
    public static int FS_BPIO_OP_GET_INFO() {
        return FS_BPIO_OP_GET_INFO;
    }
    private static final int FS_BPIO_OP_MAX_OPERATION = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OPERATIONS.FS_BPIO_OP_MAX_OPERATION = 9
     * }
     */
    public static int FS_BPIO_OP_MAX_OPERATION() {
        return FS_BPIO_OP_MAX_OPERATION;
    }
    private static final int FSBPIO_INFL_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_INFLAGS.FSBPIO_INFL_None = 0
     * }
     */
    public static int FSBPIO_INFL_None() {
        return FSBPIO_INFL_None;
    }
    private static final int FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_INFLAGS.FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = 1
     * }
     */
    public static int FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY() {
        return FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _FS_BPIO_INPUT {
     *     FS_BPIO_OPERATIONS Operation;
     *     FS_BPIO_INFLAGS InFlags;
     *     DWORDLONG Reserved1;
     *     DWORDLONG Reserved2;
     * } *PFS_BPIO_INPUT
     * }
     */
    public static final AddressLayout PFS_BPIO_INPUT = winapi.C_POINTER;
    private static final int FSBPIO_OUTFL_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_None = 0
     * }
     */
    public static int FSBPIO_OUTFL_None() {
        return FSBPIO_OUTFL_None;
    }
    private static final int FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = 1
     * }
     */
    public static int FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED() {
        return FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED;
    }
    private static final int FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = 2
     * }
     */
    public static int FSBPIO_OUTFL_STREAM_BYPASS_PAUSED() {
        return FSBPIO_OUTFL_STREAM_BYPASS_PAUSED;
    }
    private static final int FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = 4
     * }
     */
    public static int FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED() {
        return FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED;
    }
    private static final int FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _FS_BPIO_OUTFLAGS.FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = 8
     * }
     */
    public static int FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER() {
        return FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _FS_BPIO_RESULTS {
     *     DWORD OpStatus;
     *     WORD FailingDriverNameLen;
     *     WCHAR FailingDriverName[32];
     *     WORD FailureReasonLen;
     *     WCHAR FailureReason[128];
     * } *PFS_BPIO_RESULTS
     * }
     */
    public static final AddressLayout PFS_BPIO_RESULTS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FS_BPIO_INFO {
     *     DWORD ActiveBypassIoCount;
     *     WORD StorageDriverNameLen;
     *     WCHAR StorageDriverName[32];
     * } *PFS_BPIO_INFO
     * }
     */
    public static final AddressLayout PFS_BPIO_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FS_BPIO_OUTPUT {
     *     FS_BPIO_OPERATIONS Operation;
     *     FS_BPIO_OUTFLAGS OutFlags;
     *     DWORDLONG Reserved1;
     *     DWORDLONG Reserved2;
     *     union {
     *         FS_BPIO_RESULTS Enable;
     *         FS_BPIO_RESULTS Query;
     *         FS_BPIO_RESULTS VolumeStackResume;
     *         FS_BPIO_RESULTS StreamResume;
     *         FS_BPIO_INFO GetInfo;
     *     };
     * } *PFS_BPIO_OUTPUT
     * }
     */
    public static final AddressLayout PFS_BPIO_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SMB_SHARE_FLUSH_AND_PURGE_INPUT {
     *     WORD Version;
     * } *PSMB_SHARE_FLUSH_AND_PURGE_INPUT
     * }
     */
    public static final AddressLayout PSMB_SHARE_FLUSH_AND_PURGE_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _SMB_SHARE_FLUSH_AND_PURGE_INPUT {
     *     WORD Version;
     * } *PCSMB_SHARE_FLUSH_AND_PURGE_INPUT
     * }
     */
    public static final AddressLayout PCSMB_SHARE_FLUSH_AND_PURGE_INPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT {
     *     DWORD cEntriesPurged;
     * } *PSMB_SHARE_FLUSH_AND_PURGE_OUTPUT
     * }
     */
    public static final AddressLayout PSMB_SHARE_FLUSH_AND_PURGE_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const struct _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT {
     *     DWORD cEntriesPurged;
     * } *PCSMB_SHARE_FLUSH_AND_PURGE_OUTPUT
     * }
     */
    public static final AddressLayout PCSMB_SHARE_FLUSH_AND_PURGE_OUTPUT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DISK_EXTENT {
     *     DWORD DiskNumber;
     *     LARGE_INTEGER StartingOffset;
     *     LARGE_INTEGER ExtentLength;
     * } *PDISK_EXTENT
     * }
     */
    public static final AddressLayout PDISK_EXTENT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VOLUME_DISK_EXTENTS {
     *     DWORD NumberOfDiskExtents;
     *     DISK_EXTENT Extents[1];
     * } *PVOLUME_DISK_EXTENTS
     * }
     */
    public static final AddressLayout PVOLUME_DISK_EXTENTS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
     *     DWORDLONG GptAttributes;
     * } *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION
     * }
     */
    public static final AddressLayout PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
     *     WORD Validation;
     *     WORD Flags;
     *     PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;
     * } *PIO_IRP_EXT_TRACK_OFFSET_HEADER
     * }
     */
    public static final AddressLayout PIO_IRP_EXT_TRACK_OFFSET_HEADER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef WORD UWORD
     * }
     */
    public static final OfShort UWORD = winapi.C_SHORT;

    private static class GUID_DEVINTERFACE_SMARTCARD_READER$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("GUID_DEVINTERFACE_SMARTCARD_READER").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static GroupLayout GUID_DEVINTERFACE_SMARTCARD_READER$layout() {
        return GUID_DEVINTERFACE_SMARTCARD_READER$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static MemorySegment GUID_DEVINTERFACE_SMARTCARD_READER() {
        return GUID_DEVINTERFACE_SMARTCARD_READER$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GUID GUID_DEVINTERFACE_SMARTCARD_READER
     * }
     */
    public static void GUID_DEVINTERFACE_SMARTCARD_READER(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, GUID_DEVINTERFACE_SMARTCARD_READER$constants.SEGMENT, 0L, GUID_DEVINTERFACE_SMARTCARD_READER$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_IO_REQUEST {
     *     DWORD dwProtocol;
     *     DWORD cbPciLength;
     * } *PSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_IO_REQUEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_IO_REQUEST {
     *     DWORD dwProtocol;
     *     DWORD cbPciLength;
     * } *LPSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_IO_REQUEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST
     * }
     */
    public static final AddressLayout LPCSCARD_IO_REQUEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_T0_COMMAND {
     *     BYTE bCla;
     *     BYTE bIns;
     *     BYTE bP1;
     *     BYTE bP2;
     *     BYTE bP3;
     * } *LPSCARD_T0_COMMAND
     * }
     */
    public static final AddressLayout LPSCARD_T0_COMMAND = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_T0_REQUEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_T0_REQUEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST
     * }
     */
    public static final AddressLayout PSCARD_T1_REQUEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST
     * }
     */
    public static final AddressLayout LPSCARD_T1_REQUEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const BYTE *LPCBYTE
     * }
     */
    public static final AddressLayout LPCBYTE = winapi.C_POINTER;

    private static class g_rgSCardT0Pci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("g_rgSCardT0Pci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static GroupLayout g_rgSCardT0Pci$layout() {
        return g_rgSCardT0Pci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static MemorySegment g_rgSCardT0Pci() {
        return g_rgSCardT0Pci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT0Pci
     * }
     */
    public static void g_rgSCardT0Pci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardT0Pci$constants.SEGMENT, 0L, g_rgSCardT0Pci$constants.LAYOUT.byteSize());
    }

    private static class g_rgSCardT1Pci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("g_rgSCardT1Pci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static GroupLayout g_rgSCardT1Pci$layout() {
        return g_rgSCardT1Pci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static MemorySegment g_rgSCardT1Pci() {
        return g_rgSCardT1Pci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardT1Pci
     * }
     */
    public static void g_rgSCardT1Pci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardT1Pci$constants.SEGMENT, 0L, g_rgSCardT1Pci$constants.LAYOUT.byteSize());
    }

    private static class g_rgSCardRawPci$constants {
        public static final GroupLayout LAYOUT = _SCARD_IO_REQUEST.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("g_rgSCardRawPci").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static GroupLayout g_rgSCardRawPci$layout() {
        return g_rgSCardRawPci$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static MemorySegment g_rgSCardRawPci() {
        return g_rgSCardRawPci$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const SCARD_IO_REQUEST g_rgSCardRawPci
     * }
     */
    public static void g_rgSCardRawPci(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_rgSCardRawPci$constants.SEGMENT, 0L, g_rgSCardRawPci$constants.LAYOUT.byteSize());
    }
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR SCARDCONTEXT
     * }
     */
    public static final OfLong SCARDCONTEXT = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef SCARDCONTEXT *PSCARDCONTEXT
     * }
     */
    public static final AddressLayout PSCARDCONTEXT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARDCONTEXT *LPSCARDCONTEXT
     * }
     */
    public static final AddressLayout LPSCARDCONTEXT = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef ULONG_PTR SCARDHANDLE
     * }
     */
    public static final OfLong SCARDHANDLE = winapi.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef SCARDHANDLE *PSCARDHANDLE
     * }
     */
    public static final AddressLayout PSCARDHANDLE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef SCARDHANDLE *LPSCARDHANDLE
     * }
     */
    public static final AddressLayout LPSCARDHANDLE = winapi.C_POINTER;

    private static class SCardEstablishContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardEstablishContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static FunctionDescriptor SCardEstablishContext$descriptor() {
        return SCardEstablishContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static MethodHandle SCardEstablishContext$handle() {
        return SCardEstablishContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static MemorySegment SCardEstablishContext$address() {
        return SCardEstablishContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardEstablishContext(DWORD dwScope, LPCVOID pvReserved1, LPCVOID pvReserved2, LPSCARDCONTEXT phContext)
     * }
     */
    public static int SCardEstablishContext(int dwScope, MemorySegment pvReserved1, MemorySegment pvReserved2, MemorySegment phContext) {
        var mh$ = SCardEstablishContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardEstablishContext", dwScope, pvReserved1, pvReserved2, phContext);
            }
            return (int)mh$.invokeExact(dwScope, pvReserved1, pvReserved2, phContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReleaseContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardReleaseContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardReleaseContext$descriptor() {
        return SCardReleaseContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardReleaseContext$handle() {
        return SCardReleaseContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static MemorySegment SCardReleaseContext$address() {
        return SCardReleaseContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardReleaseContext(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardReleaseContext(long hContext) {
        var mh$ = SCardReleaseContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReleaseContext", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIsValidContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardIsValidContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardIsValidContext$descriptor() {
        return SCardIsValidContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardIsValidContext$handle() {
        return SCardIsValidContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static MemorySegment SCardIsValidContext$address() {
        return SCardIsValidContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIsValidContext(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardIsValidContext(long hContext) {
        var mh$ = SCardIsValidContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIsValidContext", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReaderGroupsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListReaderGroupsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static FunctionDescriptor SCardListReaderGroupsA$descriptor() {
        return SCardListReaderGroupsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MethodHandle SCardListReaderGroupsA$handle() {
        return SCardListReaderGroupsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MemorySegment SCardListReaderGroupsA$address() {
        return SCardListReaderGroupsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsA(SCARDCONTEXT hContext, LPSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static int SCardListReaderGroupsA(long hContext, MemorySegment mszGroups, MemorySegment pcchGroups) {
        var mh$ = SCardListReaderGroupsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReaderGroupsA", hContext, mszGroups, pcchGroups);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReaderGroupsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListReaderGroupsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static FunctionDescriptor SCardListReaderGroupsW$descriptor() {
        return SCardListReaderGroupsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MethodHandle SCardListReaderGroupsW$handle() {
        return SCardListReaderGroupsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static MemorySegment SCardListReaderGroupsW$address() {
        return SCardListReaderGroupsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReaderGroupsW(SCARDCONTEXT hContext, LPWSTR mszGroups, LPDWORD pcchGroups)
     * }
     */
    public static int SCardListReaderGroupsW(long hContext, MemorySegment mszGroups, MemorySegment pcchGroups) {
        var mh$ = SCardListReaderGroupsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReaderGroupsW", hContext, mszGroups, pcchGroups);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, pcchGroups);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListReadersA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersA$descriptor() {
        return SCardListReadersA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersA$handle() {
        return SCardListReadersA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MemorySegment SCardListReadersA$address() {
        return SCardListReadersA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersA(SCARDCONTEXT hContext, LPCSTR mszGroups, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersA(long hContext, MemorySegment mszGroups, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersA", hContext, mszGroups, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListReadersW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersW$descriptor() {
        return SCardListReadersW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersW$handle() {
        return SCardListReadersW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MemorySegment SCardListReadersW$address() {
        return SCardListReadersW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersW(SCARDCONTEXT hContext, LPCWSTR mszGroups, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersW(long hContext, MemorySegment mszGroups, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersW", hContext, mszGroups, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, mszGroups, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListCardsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListCardsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static FunctionDescriptor SCardListCardsA$descriptor() {
        return SCardListCardsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MethodHandle SCardListCardsA$handle() {
        return SCardListCardsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MemorySegment SCardListCardsA$address() {
        return SCardListCardsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListCardsA(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, CHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static int SCardListCardsA(long hContext, MemorySegment pbAtr, MemorySegment rgquidInterfaces, int cguidInterfaceCount, MemorySegment mszCards, MemorySegment pcchCards) {
        var mh$ = SCardListCardsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListCardsA", hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
            }
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListCardsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListCardsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static FunctionDescriptor SCardListCardsW$descriptor() {
        return SCardListCardsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MethodHandle SCardListCardsW$handle() {
        return SCardListCardsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static MemorySegment SCardListCardsW$address() {
        return SCardListCardsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListCardsW(SCARDCONTEXT hContext, LPCBYTE pbAtr, LPCGUID rgquidInterfaces, DWORD cguidInterfaceCount, WCHAR *mszCards, LPDWORD pcchCards)
     * }
     */
    public static int SCardListCardsW(long hContext, MemorySegment pbAtr, MemorySegment rgquidInterfaces, int cguidInterfaceCount, MemorySegment mszCards, MemorySegment pcchCards) {
        var mh$ = SCardListCardsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListCardsW", hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
            }
            return (int)mh$.invokeExact(hContext, pbAtr, rgquidInterfaces, cguidInterfaceCount, mszCards, pcchCards);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListInterfacesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListInterfacesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static FunctionDescriptor SCardListInterfacesA$descriptor() {
        return SCardListInterfacesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MethodHandle SCardListInterfacesA$handle() {
        return SCardListInterfacesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MemorySegment SCardListInterfacesA$address() {
        return SCardListInterfacesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static int SCardListInterfacesA(long hContext, MemorySegment szCard, MemorySegment pguidInterfaces, MemorySegment pcguidInterfaces) {
        var mh$ = SCardListInterfacesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListInterfacesA", hContext, szCard, pguidInterfaces, pcguidInterfaces);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListInterfacesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListInterfacesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static FunctionDescriptor SCardListInterfacesW$descriptor() {
        return SCardListInterfacesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MethodHandle SCardListInterfacesW$handle() {
        return SCardListInterfacesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static MemorySegment SCardListInterfacesW$address() {
        return SCardListInterfacesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListInterfacesW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidInterfaces, LPDWORD pcguidInterfaces)
     * }
     */
    public static int SCardListInterfacesW(long hContext, MemorySegment szCard, MemorySegment pguidInterfaces, MemorySegment pcguidInterfaces) {
        var mh$ = SCardListInterfacesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListInterfacesW", hContext, szCard, pguidInterfaces, pcguidInterfaces);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidInterfaces, pcguidInterfaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetProviderIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetProviderIdA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static FunctionDescriptor SCardGetProviderIdA$descriptor() {
        return SCardGetProviderIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MethodHandle SCardGetProviderIdA$handle() {
        return SCardGetProviderIdA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MemorySegment SCardGetProviderIdA$address() {
        return SCardGetProviderIdA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdA(SCARDCONTEXT hContext, LPCSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static int SCardGetProviderIdA(long hContext, MemorySegment szCard, MemorySegment pguidProviderId) {
        var mh$ = SCardGetProviderIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetProviderIdA", hContext, szCard, pguidProviderId);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetProviderIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetProviderIdW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static FunctionDescriptor SCardGetProviderIdW$descriptor() {
        return SCardGetProviderIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MethodHandle SCardGetProviderIdW$handle() {
        return SCardGetProviderIdW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static MemorySegment SCardGetProviderIdW$address() {
        return SCardGetProviderIdW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetProviderIdW(SCARDCONTEXT hContext, LPCWSTR szCard, LPGUID pguidProviderId)
     * }
     */
    public static int SCardGetProviderIdW(long hContext, MemorySegment szCard, MemorySegment pguidProviderId) {
        var mh$ = SCardGetProviderIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetProviderIdW", hContext, szCard, pguidProviderId);
            }
            return (int)mh$.invokeExact(hContext, szCard, pguidProviderId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetCardTypeProviderNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetCardTypeProviderNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static FunctionDescriptor SCardGetCardTypeProviderNameA$descriptor() {
        return SCardGetCardTypeProviderNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MethodHandle SCardGetCardTypeProviderNameA$handle() {
        return SCardGetCardTypeProviderNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MemorySegment SCardGetCardTypeProviderNameA$address() {
        return SCardGetCardTypeProviderNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, CHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static int SCardGetCardTypeProviderNameA(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider, MemorySegment pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetCardTypeProviderNameA", hContext, szCardName, dwProviderId, szProvider, pcchProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetCardTypeProviderNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetCardTypeProviderNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static FunctionDescriptor SCardGetCardTypeProviderNameW$descriptor() {
        return SCardGetCardTypeProviderNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MethodHandle SCardGetCardTypeProviderNameW$handle() {
        return SCardGetCardTypeProviderNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static MemorySegment SCardGetCardTypeProviderNameW$address() {
        return SCardGetCardTypeProviderNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, WCHAR *szProvider, LPDWORD pcchProvider)
     * }
     */
    public static int SCardGetCardTypeProviderNameW(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider, MemorySegment pcchProvider) {
        var mh$ = SCardGetCardTypeProviderNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetCardTypeProviderNameW", hContext, szCardName, dwProviderId, szProvider, pcchProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider, pcchProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardIntroduceReaderGroupA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderGroupA$descriptor() {
        return SCardIntroduceReaderGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderGroupA$handle() {
        return SCardIntroduceReaderGroupA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MemorySegment SCardIntroduceReaderGroupA$address() {
        return SCardIntroduceReaderGroupA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static int SCardIntroduceReaderGroupA(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardIntroduceReaderGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderGroupA", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardIntroduceReaderGroupW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderGroupW$descriptor() {
        return SCardIntroduceReaderGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderGroupW$handle() {
        return SCardIntroduceReaderGroupW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MemorySegment SCardIntroduceReaderGroupW$address() {
        return SCardIntroduceReaderGroupW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static int SCardIntroduceReaderGroupW(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardIntroduceReaderGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderGroupW", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardForgetReaderGroupA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderGroupA$descriptor() {
        return SCardForgetReaderGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardForgetReaderGroupA$handle() {
        return SCardForgetReaderGroupA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static MemorySegment SCardForgetReaderGroupA$address() {
        return SCardForgetReaderGroupA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupA(SCARDCONTEXT hContext, LPCSTR szGroupName)
     * }
     */
    public static int SCardForgetReaderGroupA(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardForgetReaderGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderGroupA", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardForgetReaderGroupW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderGroupW$descriptor() {
        return SCardForgetReaderGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardForgetReaderGroupW$handle() {
        return SCardForgetReaderGroupW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static MemorySegment SCardForgetReaderGroupW$address() {
        return SCardForgetReaderGroupW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderGroupW(SCARDCONTEXT hContext, LPCWSTR szGroupName)
     * }
     */
    public static int SCardForgetReaderGroupW(long hContext, MemorySegment szGroupName) {
        var mh$ = SCardForgetReaderGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderGroupW", hContext, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardIntroduceReaderA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderA$descriptor() {
        return SCardIntroduceReaderA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderA$handle() {
        return SCardIntroduceReaderA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static MemorySegment SCardIntroduceReaderA$address() {
        return SCardIntroduceReaderA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szDeviceName)
     * }
     */
    public static int SCardIntroduceReaderA(long hContext, MemorySegment szReaderName, MemorySegment szDeviceName) {
        var mh$ = SCardIntroduceReaderA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderA", hContext, szReaderName, szDeviceName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceReaderW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardIntroduceReaderW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static FunctionDescriptor SCardIntroduceReaderW$descriptor() {
        return SCardIntroduceReaderW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static MethodHandle SCardIntroduceReaderW$handle() {
        return SCardIntroduceReaderW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static MemorySegment SCardIntroduceReaderW$address() {
        return SCardIntroduceReaderW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szDeviceName)
     * }
     */
    public static int SCardIntroduceReaderW(long hContext, MemorySegment szReaderName, MemorySegment szDeviceName) {
        var mh$ = SCardIntroduceReaderW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceReaderW", hContext, szReaderName, szDeviceName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardForgetReaderA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderA$descriptor() {
        return SCardForgetReaderA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static MethodHandle SCardForgetReaderA$handle() {
        return SCardForgetReaderA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static MemorySegment SCardForgetReaderA$address() {
        return SCardForgetReaderA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderA(SCARDCONTEXT hContext, LPCSTR szReaderName)
     * }
     */
    public static int SCardForgetReaderA(long hContext, MemorySegment szReaderName) {
        var mh$ = SCardForgetReaderA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderA", hContext, szReaderName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetReaderW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardForgetReaderW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static FunctionDescriptor SCardForgetReaderW$descriptor() {
        return SCardForgetReaderW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static MethodHandle SCardForgetReaderW$handle() {
        return SCardForgetReaderW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static MemorySegment SCardForgetReaderW$address() {
        return SCardForgetReaderW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetReaderW(SCARDCONTEXT hContext, LPCWSTR szReaderName)
     * }
     */
    public static int SCardForgetReaderW(long hContext, MemorySegment szReaderName) {
        var mh$ = SCardForgetReaderW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetReaderW", hContext, szReaderName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAddReaderToGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardAddReaderToGroupA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardAddReaderToGroupA$descriptor() {
        return SCardAddReaderToGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardAddReaderToGroupA$handle() {
        return SCardAddReaderToGroupA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MemorySegment SCardAddReaderToGroupA$address() {
        return SCardAddReaderToGroupA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static int SCardAddReaderToGroupA(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardAddReaderToGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAddReaderToGroupA", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAddReaderToGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardAddReaderToGroupW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardAddReaderToGroupW$descriptor() {
        return SCardAddReaderToGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardAddReaderToGroupW$handle() {
        return SCardAddReaderToGroupW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MemorySegment SCardAddReaderToGroupW$address() {
        return SCardAddReaderToGroupW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardAddReaderToGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static int SCardAddReaderToGroupW(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardAddReaderToGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAddReaderToGroupW", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardRemoveReaderFromGroupA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardRemoveReaderFromGroupA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardRemoveReaderFromGroupA$descriptor() {
        return SCardRemoveReaderFromGroupA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MethodHandle SCardRemoveReaderFromGroupA$handle() {
        return SCardRemoveReaderFromGroupA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static MemorySegment SCardRemoveReaderFromGroupA$address() {
        return SCardRemoveReaderFromGroupA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPCSTR szGroupName)
     * }
     */
    public static int SCardRemoveReaderFromGroupA(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardRemoveReaderFromGroupA", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardRemoveReaderFromGroupW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardRemoveReaderFromGroupW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static FunctionDescriptor SCardRemoveReaderFromGroupW$descriptor() {
        return SCardRemoveReaderFromGroupW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MethodHandle SCardRemoveReaderFromGroupW$handle() {
        return SCardRemoveReaderFromGroupW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static MemorySegment SCardRemoveReaderFromGroupW$address() {
        return SCardRemoveReaderFromGroupW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardRemoveReaderFromGroupW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPCWSTR szGroupName)
     * }
     */
    public static int SCardRemoveReaderFromGroupW(long hContext, MemorySegment szReaderName, MemorySegment szGroupName) {
        var mh$ = SCardRemoveReaderFromGroupW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardRemoveReaderFromGroupW", hContext, szReaderName, szGroupName);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szGroupName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceCardTypeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardIntroduceCardTypeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardIntroduceCardTypeA$descriptor() {
        return SCardIntroduceCardTypeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MethodHandle SCardIntroduceCardTypeA$handle() {
        return SCardIntroduceCardTypeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MemorySegment SCardIntroduceCardTypeA$address() {
        return SCardIntroduceCardTypeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static int SCardIntroduceCardTypeA(long hContext, MemorySegment szCardName, MemorySegment pguidPrimaryProvider, MemorySegment rgguidInterfaces, int dwInterfaceCount, MemorySegment pbAtr, MemorySegment pbAtrMask, int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceCardTypeA", hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
            }
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardIntroduceCardTypeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardIntroduceCardTypeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardIntroduceCardTypeW$descriptor() {
        return SCardIntroduceCardTypeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MethodHandle SCardIntroduceCardTypeW$handle() {
        return SCardIntroduceCardTypeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static MemorySegment SCardIntroduceCardTypeW$address() {
        return SCardIntroduceCardTypeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardIntroduceCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName, LPCGUID pguidPrimaryProvider, LPCGUID rgguidInterfaces, DWORD dwInterfaceCount, LPCBYTE pbAtr, LPCBYTE pbAtrMask, DWORD cbAtrLen)
     * }
     */
    public static int SCardIntroduceCardTypeW(long hContext, MemorySegment szCardName, MemorySegment pguidPrimaryProvider, MemorySegment rgguidInterfaces, int dwInterfaceCount, MemorySegment pbAtr, MemorySegment pbAtrMask, int cbAtrLen) {
        var mh$ = SCardIntroduceCardTypeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardIntroduceCardTypeW", hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
            }
            return (int)mh$.invokeExact(hContext, szCardName, pguidPrimaryProvider, rgguidInterfaces, dwInterfaceCount, pbAtr, pbAtrMask, cbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetCardTypeProviderNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardSetCardTypeProviderNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static FunctionDescriptor SCardSetCardTypeProviderNameA$descriptor() {
        return SCardSetCardTypeProviderNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static MethodHandle SCardSetCardTypeProviderNameA$handle() {
        return SCardSetCardTypeProviderNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static MemorySegment SCardSetCardTypeProviderNameA$address() {
        return SCardSetCardTypeProviderNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameA(SCARDCONTEXT hContext, LPCSTR szCardName, DWORD dwProviderId, LPCSTR szProvider)
     * }
     */
    public static int SCardSetCardTypeProviderNameA(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider) {
        var mh$ = SCardSetCardTypeProviderNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetCardTypeProviderNameA", hContext, szCardName, dwProviderId, szProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetCardTypeProviderNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardSetCardTypeProviderNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static FunctionDescriptor SCardSetCardTypeProviderNameW$descriptor() {
        return SCardSetCardTypeProviderNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static MethodHandle SCardSetCardTypeProviderNameW$handle() {
        return SCardSetCardTypeProviderNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static MemorySegment SCardSetCardTypeProviderNameW$address() {
        return SCardSetCardTypeProviderNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardSetCardTypeProviderNameW(SCARDCONTEXT hContext, LPCWSTR szCardName, DWORD dwProviderId, LPCWSTR szProvider)
     * }
     */
    public static int SCardSetCardTypeProviderNameW(long hContext, MemorySegment szCardName, int dwProviderId, MemorySegment szProvider) {
        var mh$ = SCardSetCardTypeProviderNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetCardTypeProviderNameW", hContext, szCardName, dwProviderId, szProvider);
            }
            return (int)mh$.invokeExact(hContext, szCardName, dwProviderId, szProvider);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetCardTypeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardForgetCardTypeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static FunctionDescriptor SCardForgetCardTypeA$descriptor() {
        return SCardForgetCardTypeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static MethodHandle SCardForgetCardTypeA$handle() {
        return SCardForgetCardTypeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static MemorySegment SCardForgetCardTypeA$address() {
        return SCardForgetCardTypeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeA(SCARDCONTEXT hContext, LPCSTR szCardName)
     * }
     */
    public static int SCardForgetCardTypeA(long hContext, MemorySegment szCardName) {
        var mh$ = SCardForgetCardTypeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetCardTypeA", hContext, szCardName);
            }
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardForgetCardTypeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardForgetCardTypeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static FunctionDescriptor SCardForgetCardTypeW$descriptor() {
        return SCardForgetCardTypeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static MethodHandle SCardForgetCardTypeW$handle() {
        return SCardForgetCardTypeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static MemorySegment SCardForgetCardTypeW$address() {
        return SCardForgetCardTypeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardForgetCardTypeW(SCARDCONTEXT hContext, LPCWSTR szCardName)
     * }
     */
    public static int SCardForgetCardTypeW(long hContext, MemorySegment szCardName) {
        var mh$ = SCardForgetCardTypeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardForgetCardTypeW", hContext, szCardName);
            }
            return (int)mh$.invokeExact(hContext, szCardName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardFreeMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardFreeMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static FunctionDescriptor SCardFreeMemory$descriptor() {
        return SCardFreeMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static MethodHandle SCardFreeMemory$handle() {
        return SCardFreeMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static MemorySegment SCardFreeMemory$address() {
        return SCardFreeMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardFreeMemory(SCARDCONTEXT hContext, LPCVOID pvMem)
     * }
     */
    public static int SCardFreeMemory(long hContext, MemorySegment pvMem) {
        var mh$ = SCardFreeMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardFreeMemory", hContext, pvMem);
            }
            return (int)mh$.invokeExact(hContext, pvMem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAccessStartedEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardAccessStartedEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static FunctionDescriptor SCardAccessStartedEvent$descriptor() {
        return SCardAccessStartedEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static MethodHandle SCardAccessStartedEvent$handle() {
        return SCardAccessStartedEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static MemorySegment SCardAccessStartedEvent$address() {
        return SCardAccessStartedEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern HANDLE SCardAccessStartedEvent()
     * }
     */
    public static MemorySegment SCardAccessStartedEvent() {
        var mh$ = SCardAccessStartedEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAccessStartedEvent");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReleaseStartedEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardReleaseStartedEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static FunctionDescriptor SCardReleaseStartedEvent$descriptor() {
        return SCardReleaseStartedEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static MethodHandle SCardReleaseStartedEvent$handle() {
        return SCardReleaseStartedEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static MemorySegment SCardReleaseStartedEvent$address() {
        return SCardReleaseStartedEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void SCardReleaseStartedEvent()
     * }
     */
    public static void SCardReleaseStartedEvent() {
        var mh$ = SCardReleaseStartedEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReleaseStartedEvent");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *PSCARD_READERSTATEA
     * }
     */
    public static final AddressLayout PSCARD_READERSTATEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *LPSCARD_READERSTATEA
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCWSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *PSCARD_READERSTATEW
     * }
     */
    public static final AddressLayout PSCARD_READERSTATEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     LPCWSTR szReader;
     *     LPVOID pvUserData;
     *     DWORD dwCurrentState;
     *     DWORD dwEventState;
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     * } *LPSCARD_READERSTATEW
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PSCARD_READERSTATEA PSCARD_READERSTATE
     * }
     */
    public static final AddressLayout PSCARD_READERSTATE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE
     * }
     */
    public static final AddressLayout LPSCARD_READERSTATE = winapi.C_POINTER;

    private static class SCardLocateCardsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardLocateCardsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsA$descriptor() {
        return SCardLocateCardsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsA$handle() {
        return SCardLocateCardsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardLocateCardsA$address() {
        return SCardLocateCardsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsA(SCARDCONTEXT hContext, LPCSTR mszCards, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsA(long hContext, MemorySegment mszCards, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsA", hContext, mszCards, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardLocateCardsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardLocateCardsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsW$descriptor() {
        return SCardLocateCardsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsW$handle() {
        return SCardLocateCardsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardLocateCardsW$address() {
        return SCardLocateCardsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsW(SCARDCONTEXT hContext, LPCWSTR mszCards, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsW(long hContext, MemorySegment mszCards, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsW", hContext, mszCards, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, mszCards, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_ATRMASK {
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     *     BYTE rgbMask[36];
     * } *PSCARD_ATRMASK
     * }
     */
    public static final AddressLayout PSCARD_ATRMASK = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _SCARD_ATRMASK {
     *     DWORD cbAtr;
     *     BYTE rgbAtr[36];
     *     BYTE rgbMask[36];
     * } *LPSCARD_ATRMASK
     * }
     */
    public static final AddressLayout LPSCARD_ATRMASK = winapi.C_POINTER;

    private static class SCardLocateCardsByATRA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardLocateCardsByATRA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsByATRA$descriptor() {
        return SCardLocateCardsByATRA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsByATRA$handle() {
        return SCardLocateCardsByATRA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardLocateCardsByATRA$address() {
        return SCardLocateCardsByATRA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRA(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsByATRA(long hContext, MemorySegment rgAtrMasks, int cAtrs, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsByATRA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsByATRA", hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardLocateCardsByATRW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardLocateCardsByATRW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardLocateCardsByATRW$descriptor() {
        return SCardLocateCardsByATRW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardLocateCardsByATRW$handle() {
        return SCardLocateCardsByATRW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardLocateCardsByATRW$address() {
        return SCardLocateCardsByATRW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardLocateCardsByATRW(SCARDCONTEXT hContext, LPSCARD_ATRMASK rgAtrMasks, DWORD cAtrs, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardLocateCardsByATRW(long hContext, MemorySegment rgAtrMasks, int cAtrs, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardLocateCardsByATRW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardLocateCardsByATRW", hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, rgAtrMasks, cAtrs, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetStatusChangeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetStatusChangeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardGetStatusChangeA$descriptor() {
        return SCardGetStatusChangeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardGetStatusChangeA$handle() {
        return SCardGetStatusChangeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardGetStatusChangeA$address() {
        return SCardGetStatusChangeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeA(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEA rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardGetStatusChangeA(long hContext, int dwTimeout, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardGetStatusChangeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetStatusChangeA", hContext, dwTimeout, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetStatusChangeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetStatusChangeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static FunctionDescriptor SCardGetStatusChangeW$descriptor() {
        return SCardGetStatusChangeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MethodHandle SCardGetStatusChangeW$handle() {
        return SCardGetStatusChangeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static MemorySegment SCardGetStatusChangeW$address() {
        return SCardGetStatusChangeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetStatusChangeW(SCARDCONTEXT hContext, DWORD dwTimeout, LPSCARD_READERSTATEW rgReaderStates, DWORD cReaders)
     * }
     */
    public static int SCardGetStatusChangeW(long hContext, int dwTimeout, MemorySegment rgReaderStates, int cReaders) {
        var mh$ = SCardGetStatusChangeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetStatusChangeW", hContext, dwTimeout, rgReaderStates, cReaders);
            }
            return (int)mh$.invokeExact(hContext, dwTimeout, rgReaderStates, cReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static FunctionDescriptor SCardCancel$descriptor() {
        return SCardCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static MethodHandle SCardCancel$handle() {
        return SCardCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static MemorySegment SCardCancel$address() {
        return SCardCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardCancel(SCARDCONTEXT hContext)
     * }
     */
    public static int SCardCancel(long hContext) {
        var mh$ = SCardCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardCancel", hContext);
            }
            return (int)mh$.invokeExact(hContext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardConnectA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardConnectA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardConnectA$descriptor() {
        return SCardConnectA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardConnectA$handle() {
        return SCardConnectA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MemorySegment SCardConnectA$address() {
        return SCardConnectA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardConnectA(SCARDCONTEXT hContext, LPCSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardConnectA(long hContext, MemorySegment szReader, int dwShareMode, int dwPreferredProtocols, MemorySegment phCard, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardConnectA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardConnectA", hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardConnectW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardConnectW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardConnectW$descriptor() {
        return SCardConnectW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardConnectW$handle() {
        return SCardConnectW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MemorySegment SCardConnectW$address() {
        return SCardConnectW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardConnectW(SCARDCONTEXT hContext, LPCWSTR szReader, DWORD dwShareMode, DWORD dwPreferredProtocols, LPSCARDHANDLE phCard, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardConnectW(long hContext, MemorySegment szReader, int dwShareMode, int dwPreferredProtocols, MemorySegment phCard, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardConnectW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardConnectW", hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hContext, szReader, dwShareMode, dwPreferredProtocols, phCard, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardReconnect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static FunctionDescriptor SCardReconnect$descriptor() {
        return SCardReconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MethodHandle SCardReconnect$handle() {
        return SCardReconnect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static MemorySegment SCardReconnect$address() {
        return SCardReconnect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardReconnect(SCARDHANDLE hCard, DWORD dwShareMode, DWORD dwPreferredProtocols, DWORD dwInitialization, LPDWORD pdwActiveProtocol)
     * }
     */
    public static int SCardReconnect(long hCard, int dwShareMode, int dwPreferredProtocols, int dwInitialization, MemorySegment pdwActiveProtocol) {
        var mh$ = SCardReconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReconnect", hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
            }
            return (int)mh$.invokeExact(hCard, dwShareMode, dwPreferredProtocols, dwInitialization, pdwActiveProtocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardDisconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardDisconnect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static FunctionDescriptor SCardDisconnect$descriptor() {
        return SCardDisconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MethodHandle SCardDisconnect$handle() {
        return SCardDisconnect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MemorySegment SCardDisconnect$address() {
        return SCardDisconnect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardDisconnect(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static int SCardDisconnect(long hCard, int dwDisposition) {
        var mh$ = SCardDisconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardDisconnect", hCard, dwDisposition);
            }
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardBeginTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardBeginTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static FunctionDescriptor SCardBeginTransaction$descriptor() {
        return SCardBeginTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MethodHandle SCardBeginTransaction$handle() {
        return SCardBeginTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MemorySegment SCardBeginTransaction$address() {
        return SCardBeginTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardBeginTransaction(SCARDHANDLE hCard)
     * }
     */
    public static int SCardBeginTransaction(long hCard) {
        var mh$ = SCardBeginTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardBeginTransaction", hCard);
            }
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardEndTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardEndTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static FunctionDescriptor SCardEndTransaction$descriptor() {
        return SCardEndTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MethodHandle SCardEndTransaction$handle() {
        return SCardEndTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static MemorySegment SCardEndTransaction$address() {
        return SCardEndTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardEndTransaction(SCARDHANDLE hCard, DWORD dwDisposition)
     * }
     */
    public static int SCardEndTransaction(long hCard, int dwDisposition) {
        var mh$ = SCardEndTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardEndTransaction", hCard, dwDisposition);
            }
            return (int)mh$.invokeExact(hCard, dwDisposition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardCancelTransaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardCancelTransaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static FunctionDescriptor SCardCancelTransaction$descriptor() {
        return SCardCancelTransaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MethodHandle SCardCancelTransaction$handle() {
        return SCardCancelTransaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static MemorySegment SCardCancelTransaction$address() {
        return SCardCancelTransaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardCancelTransaction(SCARDHANDLE hCard)
     * }
     */
    public static int SCardCancelTransaction(long hCard) {
        var mh$ = SCardCancelTransaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardCancelTransaction", hCard);
            }
            return (int)mh$.invokeExact(hCard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardState$descriptor() {
        return SCardState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardState$handle() {
        return SCardState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MemorySegment SCardState$address() {
        return SCardState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardState(SCARDHANDLE hCard, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardState(long hCard, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardState", hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardStatusA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardStatusA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardStatusA$descriptor() {
        return SCardStatusA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardStatusA$handle() {
        return SCardStatusA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MemorySegment SCardStatusA$address() {
        return SCardStatusA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardStatusA(SCARDHANDLE hCard, LPSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardStatusA(long hCard, MemorySegment mszReaderNames, MemorySegment pcchReaderLen, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardStatusA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardStatusA", hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardStatusW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardStatusW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static FunctionDescriptor SCardStatusW$descriptor() {
        return SCardStatusW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MethodHandle SCardStatusW$handle() {
        return SCardStatusW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static MemorySegment SCardStatusW$address() {
        return SCardStatusW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardStatusW(SCARDHANDLE hCard, LPWSTR mszReaderNames, LPDWORD pcchReaderLen, LPDWORD pdwState, LPDWORD pdwProtocol, LPBYTE pbAtr, LPDWORD pcbAtrLen)
     * }
     */
    public static int SCardStatusW(long hCard, MemorySegment mszReaderNames, MemorySegment pcchReaderLen, MemorySegment pdwState, MemorySegment pdwProtocol, MemorySegment pbAtr, MemorySegment pcbAtrLen) {
        var mh$ = SCardStatusW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardStatusW", hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
            }
            return (int)mh$.invokeExact(hCard, mszReaderNames, pcchReaderLen, pdwState, pdwProtocol, pbAtr, pcbAtrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardTransmit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardTransmit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static FunctionDescriptor SCardTransmit$descriptor() {
        return SCardTransmit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static MethodHandle SCardTransmit$handle() {
        return SCardTransmit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static MemorySegment SCardTransmit$address() {
        return SCardTransmit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardTransmit(SCARDHANDLE hCard, LPCSCARD_IO_REQUEST pioSendPci, LPCBYTE pbSendBuffer, DWORD cbSendLength, LPSCARD_IO_REQUEST pioRecvPci, LPBYTE pbRecvBuffer, LPDWORD pcbRecvLength)
     * }
     */
    public static int SCardTransmit(long hCard, MemorySegment pioSendPci, MemorySegment pbSendBuffer, int cbSendLength, MemorySegment pioRecvPci, MemorySegment pbRecvBuffer, MemorySegment pcbRecvLength) {
        var mh$ = SCardTransmit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardTransmit", hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
            }
            return (int)mh$.invokeExact(hCard, pioSendPci, pbSendBuffer, cbSendLength, pioRecvPci, pbRecvBuffer, pcbRecvLength);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetTransmitCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetTransmitCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static FunctionDescriptor SCardGetTransmitCount$descriptor() {
        return SCardGetTransmitCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static MethodHandle SCardGetTransmitCount$handle() {
        return SCardGetTransmitCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static MemorySegment SCardGetTransmitCount$address() {
        return SCardGetTransmitCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetTransmitCount(SCARDHANDLE hCard, LPDWORD pcTransmitCount)
     * }
     */
    public static int SCardGetTransmitCount(long hCard, MemorySegment pcTransmitCount) {
        var mh$ = SCardGetTransmitCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetTransmitCount", hCard, pcTransmitCount);
            }
            return (int)mh$.invokeExact(hCard, pcTransmitCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardControl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardControl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static FunctionDescriptor SCardControl$descriptor() {
        return SCardControl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static MethodHandle SCardControl$handle() {
        return SCardControl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static MemorySegment SCardControl$address() {
        return SCardControl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardControl(SCARDHANDLE hCard, DWORD dwControlCode, LPCVOID lpInBuffer, DWORD cbInBufferSize, LPVOID lpOutBuffer, DWORD cbOutBufferSize, LPDWORD lpBytesReturned)
     * }
     */
    public static int SCardControl(long hCard, int dwControlCode, MemorySegment lpInBuffer, int cbInBufferSize, MemorySegment lpOutBuffer, int cbOutBufferSize, MemorySegment lpBytesReturned) {
        var mh$ = SCardControl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardControl", hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
            }
            return (int)mh$.invokeExact(hCard, dwControlCode, lpInBuffer, cbInBufferSize, lpOutBuffer, cbOutBufferSize, lpBytesReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static FunctionDescriptor SCardGetAttrib$descriptor() {
        return SCardGetAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static MethodHandle SCardGetAttrib$handle() {
        return SCardGetAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static MemorySegment SCardGetAttrib$address() {
        return SCardGetAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPBYTE pbAttr, LPDWORD pcbAttrLen)
     * }
     */
    public static int SCardGetAttrib(long hCard, int dwAttrId, MemorySegment pbAttr, MemorySegment pcbAttrLen) {
        var mh$ = SCardGetAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetAttrib", hCard, dwAttrId, pbAttr, pcbAttrLen);
            }
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, pcbAttrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardSetAttrib {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardSetAttrib");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static FunctionDescriptor SCardSetAttrib$descriptor() {
        return SCardSetAttrib.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static MethodHandle SCardSetAttrib$handle() {
        return SCardSetAttrib.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static MemorySegment SCardSetAttrib$address() {
        return SCardSetAttrib.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardSetAttrib(SCARDHANDLE hCard, DWORD dwAttrId, LPCBYTE pbAttr, DWORD cbAttrLen)
     * }
     */
    public static int SCardSetAttrib(long hCard, int dwAttrId, MemorySegment pbAttr, int cbAttrLen) {
        var mh$ = SCardSetAttrib.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardSetAttrib", hCard, dwAttrId, pbAttr, cbAttrLen);
            }
            return (int)mh$.invokeExact(hCard, dwAttrId, pbAttr, cbAttrLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *POPENCARD_SEARCH_CRITERIAA
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIAA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *LPOPENCARD_SEARCH_CRITERIAA
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIAA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *POPENCARD_SEARCH_CRITERIAW
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIAW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     * } *LPOPENCARD_SEARCH_CRITERIAW
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIAW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA
     * }
     */
    public static final AddressLayout POPENCARD_SEARCH_CRITERIA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA
     * }
     */
    public static final AddressLayout LPOPENCARD_SEARCH_CRITERIA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCSTR lpstrTitle;
     *     LPCSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAME_EXA
     * }
     */
    public static final AddressLayout POPENCARDNAME_EXA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCSTR lpstrTitle;
     *     LPCSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAME_EXA
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EXA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCWSTR lpstrTitle;
     *     LPCWSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAME_EXW
     * }
     */
    public static final AddressLayout POPENCARDNAME_EXW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     SCARDCONTEXT hSCardContext;
     *     HWND hwndOwner;
     *     DWORD dwFlags;
     *     LPCWSTR lpstrTitle;
     *     LPCWSTR lpstrSearchDesc;
     *     HICON hIcon;
     *     POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     DWORD dwActiveProtocol;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAME_EXW
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EXW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARDNAME_EXA POPENCARDNAME_EX
     * }
     */
    public static final AddressLayout POPENCARDNAME_EX = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX
     * }
     */
    public static final AddressLayout LPOPENCARDNAME_EX = winapi.C_POINTER;
    private static final int RSR_MATCH_TYPE_READER_AND_CONTAINER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_READER_AND_CONTAINER = 1
     * }
     */
    public static int RSR_MATCH_TYPE_READER_AND_CONTAINER() {
        return RSR_MATCH_TYPE_READER_AND_CONTAINER;
    }
    private static final int RSR_MATCH_TYPE_SERIAL_NUMBER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_SERIAL_NUMBER = 2
     * }
     */
    public static int RSR_MATCH_TYPE_SERIAL_NUMBER() {
        return RSR_MATCH_TYPE_SERIAL_NUMBER;
    }
    private static final int RSR_MATCH_TYPE_ALL_CARDS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.RSR_MATCH_TYPE_ALL_CARDS = 3
     * }
     */
    public static int RSR_MATCH_TYPE_ALL_CARDS() {
        return RSR_MATCH_TYPE_ALL_CARDS;
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     READER_SEL_REQUEST_MATCH_TYPE MatchType;
     *     union {
     *         struct {
     *             DWORD cbReaderNameOffset;
     *             DWORD cchReaderNameLength;
     *             DWORD cbContainerNameOffset;
     *             DWORD cchContainerNameLength;
     *             DWORD dwDesiredCardModuleVersion;
     *             DWORD dwCspFlags;
     *         } ReaderAndContainerParameter;
     *         struct {
     *             DWORD cbSerialNumberOffset;
     *             DWORD cbSerialNumberLength;
     *             DWORD dwDesiredCardModuleVersion;
     *         } SerialNumberParameter;
     *     };
     * } *PREADER_SEL_REQUEST
     * }
     */
    public static final AddressLayout PREADER_SEL_REQUEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD cbReaderNameOffset;
     *     DWORD cchReaderNameLength;
     *     DWORD cbCardNameOffset;
     *     DWORD cchCardNameLength;
     * } *PREADER_SEL_RESPONSE
     * }
     */
    public static final AddressLayout PREADER_SEL_RESPONSE = winapi.C_POINTER;

    private static class SCardUIDlgSelectCardA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardUIDlgSelectCardA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static FunctionDescriptor SCardUIDlgSelectCardA$descriptor() {
        return SCardUIDlgSelectCardA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static MethodHandle SCardUIDlgSelectCardA$handle() {
        return SCardUIDlgSelectCardA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static MemorySegment SCardUIDlgSelectCardA$address() {
        return SCardUIDlgSelectCardA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardA(LPOPENCARDNAME_EXA)
     * }
     */
    public static int SCardUIDlgSelectCardA(MemorySegment x0) {
        var mh$ = SCardUIDlgSelectCardA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardUIDlgSelectCardA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardUIDlgSelectCardW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardUIDlgSelectCardW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static FunctionDescriptor SCardUIDlgSelectCardW$descriptor() {
        return SCardUIDlgSelectCardW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static MethodHandle SCardUIDlgSelectCardW$handle() {
        return SCardUIDlgSelectCardW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static MemorySegment SCardUIDlgSelectCardW$address() {
        return SCardUIDlgSelectCardW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardUIDlgSelectCardW(LPOPENCARDNAME_EXW)
     * }
     */
    public static int SCardUIDlgSelectCardW(MemorySegment x0) {
        var mh$ = SCardUIDlgSelectCardW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardUIDlgSelectCardW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAMEA
     * }
     */
    public static final AddressLayout POPENCARDNAMEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCA lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAMEA
     * }
     */
    public static final AddressLayout LPOPENCARDNAMEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCWSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *POPENCARDNAMEW
     * }
     */
    public static final AddressLayout POPENCARDNAMEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct {
     *     DWORD dwStructSize;
     *     HWND hwndOwner;
     *     SCARDCONTEXT hSCardContext;
     *     LPWSTR lpstrGroupNames;
     *     DWORD nMaxGroupNames;
     *     LPWSTR lpstrCardNames;
     *     DWORD nMaxCardNames;
     *     LPCGUID rgguidInterfaces;
     *     DWORD cguidInterfaces;
     *     LPWSTR lpstrRdr;
     *     DWORD nMaxRdr;
     *     LPWSTR lpstrCard;
     *     DWORD nMaxCard;
     *     LPCWSTR lpstrTitle;
     *     DWORD dwFlags;
     *     LPVOID pvUserData;
     *     DWORD dwShareMode;
     *     DWORD dwPreferredProtocols;
     *     DWORD dwActiveProtocol;
     *     LPOCNCONNPROCW lpfnConnect;
     *     LPOCNCHKPROC lpfnCheck;
     *     LPOCNDSCPROC lpfnDisconnect;
     *     SCARDHANDLE hCardHandle;
     * } *LPOPENCARDNAMEW
     * }
     */
    public static final AddressLayout LPOPENCARDNAMEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef POPENCARDNAMEA POPENCARDNAME
     * }
     */
    public static final AddressLayout POPENCARDNAME = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPOPENCARDNAMEA LPOPENCARDNAME
     * }
     */
    public static final AddressLayout LPOPENCARDNAME = winapi.C_POINTER;

    private static class GetOpenCardNameA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetOpenCardNameA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static FunctionDescriptor GetOpenCardNameA$descriptor() {
        return GetOpenCardNameA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static MethodHandle GetOpenCardNameA$handle() {
        return GetOpenCardNameA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static MemorySegment GetOpenCardNameA$address() {
        return GetOpenCardNameA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameA(LPOPENCARDNAMEA)
     * }
     */
    public static int GetOpenCardNameA(MemorySegment x0) {
        var mh$ = GetOpenCardNameA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenCardNameA", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetOpenCardNameW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetOpenCardNameW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static FunctionDescriptor GetOpenCardNameW$descriptor() {
        return GetOpenCardNameW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static MethodHandle GetOpenCardNameW$handle() {
        return GetOpenCardNameW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static MemorySegment GetOpenCardNameW$address() {
        return GetOpenCardNameW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG GetOpenCardNameW(LPOPENCARDNAMEW)
     * }
     */
    public static int GetOpenCardNameW(MemorySegment x0) {
        var mh$ = GetOpenCardNameW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetOpenCardNameW", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardDlgExtendedError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG    );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardDlgExtendedError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static FunctionDescriptor SCardDlgExtendedError$descriptor() {
        return SCardDlgExtendedError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static MethodHandle SCardDlgExtendedError$handle() {
        return SCardDlgExtendedError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static MemorySegment SCardDlgExtendedError$address() {
        return SCardDlgExtendedError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardDlgExtendedError()
     * }
     */
    public static int SCardDlgExtendedError() {
        var mh$ = SCardDlgExtendedError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardDlgExtendedError");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReadCacheA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardReadCacheA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static FunctionDescriptor SCardReadCacheA$descriptor() {
        return SCardReadCacheA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MethodHandle SCardReadCacheA$handle() {
        return SCardReadCacheA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MemorySegment SCardReadCacheA$address() {
        return SCardReadCacheA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardReadCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static int SCardReadCacheA(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, MemorySegment DataLen) {
        var mh$ = SCardReadCacheA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReadCacheA", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardReadCacheW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardReadCacheW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static FunctionDescriptor SCardReadCacheW$descriptor() {
        return SCardReadCacheW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MethodHandle SCardReadCacheW$handle() {
        return SCardReadCacheW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static MemorySegment SCardReadCacheW$address() {
        return SCardReadCacheW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardReadCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD *DataLen)
     * }
     */
    public static int SCardReadCacheW(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, MemorySegment DataLen) {
        var mh$ = SCardReadCacheW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardReadCacheW", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardWriteCacheA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardWriteCacheA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static FunctionDescriptor SCardWriteCacheA$descriptor() {
        return SCardWriteCacheA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MethodHandle SCardWriteCacheA$handle() {
        return SCardWriteCacheA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MemorySegment SCardWriteCacheA$address() {
        return SCardWriteCacheA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheA(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static int SCardWriteCacheA(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, int DataLen) {
        var mh$ = SCardWriteCacheA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardWriteCacheA", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardWriteCacheW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardWriteCacheW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static FunctionDescriptor SCardWriteCacheW$descriptor() {
        return SCardWriteCacheW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MethodHandle SCardWriteCacheW$handle() {
        return SCardWriteCacheW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static MemorySegment SCardWriteCacheW$address() {
        return SCardWriteCacheW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardWriteCacheW(SCARDCONTEXT hContext, UUID *CardIdentifier, DWORD FreshnessCounter, LPWSTR LookupName, PBYTE Data, DWORD DataLen)
     * }
     */
    public static int SCardWriteCacheW(long hContext, MemorySegment CardIdentifier, int FreshnessCounter, MemorySegment LookupName, MemorySegment Data, int DataLen) {
        var mh$ = SCardWriteCacheW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardWriteCacheW", hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
            }
            return (int)mh$.invokeExact(hContext, CardIdentifier, FreshnessCounter, LookupName, Data, DataLen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderIconA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetReaderIconA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static FunctionDescriptor SCardGetReaderIconA$descriptor() {
        return SCardGetReaderIconA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MethodHandle SCardGetReaderIconA$handle() {
        return SCardGetReaderIconA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MemorySegment SCardGetReaderIconA$address() {
        return SCardGetReaderIconA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static int SCardGetReaderIconA(long hContext, MemorySegment szReaderName, MemorySegment pbIcon, MemorySegment pcbIcon) {
        var mh$ = SCardGetReaderIconA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderIconA", hContext, szReaderName, pbIcon, pcbIcon);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderIconW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetReaderIconW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static FunctionDescriptor SCardGetReaderIconW$descriptor() {
        return SCardGetReaderIconW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MethodHandle SCardGetReaderIconW$handle() {
        return SCardGetReaderIconW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static MemorySegment SCardGetReaderIconW$address() {
        return SCardGetReaderIconW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderIconW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPBYTE pbIcon, LPDWORD pcbIcon)
     * }
     */
    public static int SCardGetReaderIconW(long hContext, MemorySegment szReaderName, MemorySegment pbIcon, MemorySegment pcbIcon) {
        var mh$ = SCardGetReaderIconW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderIconW", hContext, szReaderName, pbIcon, pcbIcon);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pbIcon, pcbIcon);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetDeviceTypeIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetDeviceTypeIdA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static FunctionDescriptor SCardGetDeviceTypeIdA$descriptor() {
        return SCardGetDeviceTypeIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MethodHandle SCardGetDeviceTypeIdA$handle() {
        return SCardGetDeviceTypeIdA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MemorySegment SCardGetDeviceTypeIdA$address() {
        return SCardGetDeviceTypeIdA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static int SCardGetDeviceTypeIdA(long hContext, MemorySegment szReaderName, MemorySegment pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetDeviceTypeIdA", hContext, szReaderName, pdwDeviceTypeId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetDeviceTypeIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetDeviceTypeIdW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static FunctionDescriptor SCardGetDeviceTypeIdW$descriptor() {
        return SCardGetDeviceTypeIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MethodHandle SCardGetDeviceTypeIdW$handle() {
        return SCardGetDeviceTypeIdW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static MemorySegment SCardGetDeviceTypeIdW$address() {
        return SCardGetDeviceTypeIdW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetDeviceTypeIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPDWORD pdwDeviceTypeId)
     * }
     */
    public static int SCardGetDeviceTypeIdW(long hContext, MemorySegment szReaderName, MemorySegment pdwDeviceTypeId) {
        var mh$ = SCardGetDeviceTypeIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetDeviceTypeIdW", hContext, szReaderName, pdwDeviceTypeId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, pdwDeviceTypeId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderDeviceInstanceIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetReaderDeviceInstanceIdA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static FunctionDescriptor SCardGetReaderDeviceInstanceIdA$descriptor() {
        return SCardGetReaderDeviceInstanceIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MethodHandle SCardGetReaderDeviceInstanceIdA$handle() {
        return SCardGetReaderDeviceInstanceIdA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MemorySegment SCardGetReaderDeviceInstanceIdA$address() {
        return SCardGetReaderDeviceInstanceIdA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szReaderName, LPSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static int SCardGetReaderDeviceInstanceIdA(long hContext, MemorySegment szReaderName, MemorySegment szDeviceInstanceId, MemorySegment pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderDeviceInstanceIdA", hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardGetReaderDeviceInstanceIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardGetReaderDeviceInstanceIdW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static FunctionDescriptor SCardGetReaderDeviceInstanceIdW$descriptor() {
        return SCardGetReaderDeviceInstanceIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MethodHandle SCardGetReaderDeviceInstanceIdW$handle() {
        return SCardGetReaderDeviceInstanceIdW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static MemorySegment SCardGetReaderDeviceInstanceIdW$address() {
        return SCardGetReaderDeviceInstanceIdW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardGetReaderDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szReaderName, LPWSTR szDeviceInstanceId, LPDWORD pcchDeviceInstanceId)
     * }
     */
    public static int SCardGetReaderDeviceInstanceIdW(long hContext, MemorySegment szReaderName, MemorySegment szDeviceInstanceId, MemorySegment pcchDeviceInstanceId) {
        var mh$ = SCardGetReaderDeviceInstanceIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardGetReaderDeviceInstanceIdW", hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
            }
            return (int)mh$.invokeExact(hContext, szReaderName, szDeviceInstanceId, pcchDeviceInstanceId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersWithDeviceInstanceIdA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListReadersWithDeviceInstanceIdA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersWithDeviceInstanceIdA$descriptor() {
        return SCardListReadersWithDeviceInstanceIdA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersWithDeviceInstanceIdA$handle() {
        return SCardListReadersWithDeviceInstanceIdA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MemorySegment SCardListReadersWithDeviceInstanceIdA$address() {
        return SCardListReadersWithDeviceInstanceIdA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdA(SCARDCONTEXT hContext, LPCSTR szDeviceInstanceId, LPSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersWithDeviceInstanceIdA(long hContext, MemorySegment szDeviceInstanceId, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersWithDeviceInstanceIdA", hContext, szDeviceInstanceId, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardListReadersWithDeviceInstanceIdW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardListReadersWithDeviceInstanceIdW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static FunctionDescriptor SCardListReadersWithDeviceInstanceIdW$descriptor() {
        return SCardListReadersWithDeviceInstanceIdW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MethodHandle SCardListReadersWithDeviceInstanceIdW$handle() {
        return SCardListReadersWithDeviceInstanceIdW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static MemorySegment SCardListReadersWithDeviceInstanceIdW$address() {
        return SCardListReadersWithDeviceInstanceIdW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardListReadersWithDeviceInstanceIdW(SCARDCONTEXT hContext, LPCWSTR szDeviceInstanceId, LPWSTR mszReaders, LPDWORD pcchReaders)
     * }
     */
    public static int SCardListReadersWithDeviceInstanceIdW(long hContext, MemorySegment szDeviceInstanceId, MemorySegment mszReaders, MemorySegment pcchReaders) {
        var mh$ = SCardListReadersWithDeviceInstanceIdW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardListReadersWithDeviceInstanceIdW", hContext, szDeviceInstanceId, mszReaders, pcchReaders);
            }
            return (int)mh$.invokeExact(hContext, szDeviceInstanceId, mszReaders, pcchReaders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCardAudit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SCardAudit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static FunctionDescriptor SCardAudit$descriptor() {
        return SCardAudit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static MethodHandle SCardAudit$handle() {
        return SCardAudit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static MemorySegment SCardAudit$address() {
        return SCardAudit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern LONG SCardAudit(SCARDCONTEXT hContext, DWORD dwEvent)
     * }
     */
    public static int SCardAudit(long hContext, int dwEvent) {
        var mh$ = SCardAudit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCardAudit", hContext, dwEvent);
            }
            return (int)mh$.invokeExact(hContext, dwEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PSP *HPROPSHEETPAGE
     * }
     */
    public static final AddressLayout HPROPSHEETPAGE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE
     * }
     */
    public static final AddressLayout PROPSHEETPAGE_RESOURCE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     * } *LPPROPSHEETPAGEA_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     * } *LPPROPSHEETPAGEA_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA_V3 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     * } *LPPROPSHEETPAGEA_V3
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEA {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKA pfnCallback;
     *     UINT *pcRefParent;
     *     LPCSTR pszHeaderTitle;
     *     LPCSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETPAGEA_V4
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_V4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_V4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     * } *LPPROPSHEETPAGEW_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     * } *LPPROPSHEETPAGEW_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW_V3 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     * } *LPPROPSHEETPAGEW_V3
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETPAGEW {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HINSTANCE hInstance;
     *     union {
     *         LPCWSTR pszTemplate;
     *         PROPSHEETPAGE_RESOURCE pResource;
     *     };
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszTitle;
     *     DLGPROC pfnDlgProc;
     *     LPARAM lParam;
     *     LPFNPSPCALLBACKW pfnCallback;
     *     UINT *pcRefParent;
     *     LPCWSTR pszHeaderTitle;
     *     LPCWSTR pszHeaderSubTitle;
     *     HANDLE hActCtx;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCWSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETPAGEW_V4
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_V4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_V4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA_LATEST
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA_LATEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW_LATEST
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW_LATEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA_LATEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW_LATEST = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEA_V4 LPPROPSHEETPAGEA
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETPAGEW_V4 LPPROPSHEETPAGEW
     * }
     */
    public static final AddressLayout LPPROPSHEETPAGEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW
     * }
     */
    public static final AddressLayout LPCPROPSHEETPAGEW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERA_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEA ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     * } *LPPROPSHEETHEADERA_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERA_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCSTR pszIcon;
     *     };
     *     LPCSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEA ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     *     union {
     *         HBITMAP hbmWatermark;
     *         LPCSTR pszbmWatermark;
     *     };
     *     HPALETTE hplWatermark;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETHEADERA_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERW_V1 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCWSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEW ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     * } *LPPROPSHEETHEADERW_V1
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW_V1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROPSHEETHEADERW_V2 {
     *     DWORD dwSize;
     *     DWORD dwFlags;
     *     HWND hwndParent;
     *     HINSTANCE hInstance;
     *     union {
     *         HICON hIcon;
     *         LPCWSTR pszIcon;
     *     };
     *     LPCWSTR pszCaption;
     *     UINT nPages;
     *     union {
     *         UINT nStartPage;
     *         LPCWSTR pStartPage;
     *     };
     *     union {
     *         LPCPROPSHEETPAGEW ppsp;
     *         HPROPSHEETPAGE *phpage;
     *     };
     *     PFNPROPSHEETCALLBACK pfnCallback;
     *     union {
     *         HBITMAP hbmWatermark;
     *         LPCWSTR pszbmWatermark;
     *     };
     *     HPALETTE hplWatermark;
     *     union {
     *         HBITMAP hbmHeader;
     *         LPCWSTR pszbmHeader;
     *     };
     * } *LPPROPSHEETHEADERW_V2
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW_V2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETHEADERA_V2 LPPROPSHEETHEADERA
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROPSHEETHEADERW_V2 LPPROPSHEETHEADERW
     * }
     */
    public static final AddressLayout LPPROPSHEETHEADERW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETHEADERA_V2 LPCPROPSHEETHEADERA
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW
     * }
     */
    public static final AddressLayout LPCPROPSHEETHEADERW = winapi.C_POINTER;

    private static class CreatePropertySheetPageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreatePropertySheetPageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static FunctionDescriptor CreatePropertySheetPageA$descriptor() {
        return CreatePropertySheetPageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static MethodHandle CreatePropertySheetPageA$handle() {
        return CreatePropertySheetPageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageA$address() {
        return CreatePropertySheetPageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageA(MemorySegment constPropSheetPagePointer) {
        var mh$ = CreatePropertySheetPageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreatePropertySheetPageA", constPropSheetPagePointer);
            }
            return (MemorySegment)mh$.invokeExact(constPropSheetPagePointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CreatePropertySheetPageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CreatePropertySheetPageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static FunctionDescriptor CreatePropertySheetPageW$descriptor() {
        return CreatePropertySheetPageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static MethodHandle CreatePropertySheetPageW$handle() {
        return CreatePropertySheetPageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageW$address() {
        return CreatePropertySheetPageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HPROPSHEETPAGE CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer)
     * }
     */
    public static MemorySegment CreatePropertySheetPageW(MemorySegment constPropSheetPagePointer) {
        var mh$ = CreatePropertySheetPageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CreatePropertySheetPageW", constPropSheetPagePointer);
            }
            return (MemorySegment)mh$.invokeExact(constPropSheetPagePointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DestroyPropertySheetPage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DestroyPropertySheetPage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static FunctionDescriptor DestroyPropertySheetPage$descriptor() {
        return DestroyPropertySheetPage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static MethodHandle DestroyPropertySheetPage$handle() {
        return DestroyPropertySheetPage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static MemorySegment DestroyPropertySheetPage$address() {
        return DestroyPropertySheetPage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DestroyPropertySheetPage(HPROPSHEETPAGE)
     * }
     */
    public static int DestroyPropertySheetPage(MemorySegment x0) {
        var mh$ = DestroyPropertySheetPage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DestroyPropertySheetPage", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropertySheetA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PropertySheetA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static FunctionDescriptor PropertySheetA$descriptor() {
        return PropertySheetA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static MethodHandle PropertySheetA$handle() {
        return PropertySheetA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static MemorySegment PropertySheetA$address() {
        return PropertySheetA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * INT_PTR PropertySheetA(LPCPROPSHEETHEADERA)
     * }
     */
    public static long PropertySheetA(MemorySegment x0) {
        var mh$ = PropertySheetA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropertySheetA", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PropertySheetW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PropertySheetW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static FunctionDescriptor PropertySheetW$descriptor() {
        return PropertySheetW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static MethodHandle PropertySheetW$handle() {
        return PropertySheetW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static MemorySegment PropertySheetW$address() {
        return PropertySheetW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * INT_PTR PropertySheetW(LPCPROPSHEETHEADERW)
     * }
     */
    public static long PropertySheetW(MemorySegment x0) {
        var mh$ = PropertySheetW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PropertySheetW", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PSHNOTIFY {
     *     NMHDR hdr;
     *     LPARAM lParam;
     * } *LPPSHNOTIFY
     * }
     */
    public static final AddressLayout LPPSHNOTIFY = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pDescription;
     *     LPSTR pName;
     *     LPSTR pComment;
     * } *PPRINTER_INFO_1A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pDescription;
     *     LPSTR pName;
     *     LPSTR pComment;
     * } *LPPRINTER_INFO_1A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pDescription;
     *     LPWSTR pName;
     *     LPWSTR pComment;
     * } *PPRINTER_INFO_1W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pDescription;
     *     LPWSTR pName;
     *     LPWSTR pComment;
     * } *LPPRINTER_INFO_1W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_1A PPRINTER_INFO_1
     * }
     */
    public static final AddressLayout PPRINTER_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2A {
     *     LPSTR pServerName;
     *     LPSTR pPrinterName;
     *     LPSTR pShareName;
     *     LPSTR pPortName;
     *     LPSTR pDriverName;
     *     LPSTR pComment;
     *     LPSTR pLocation;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pSepFile;
     *     LPSTR pPrintProcessor;
     *     LPSTR pDatatype;
     *     LPSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *PPRINTER_INFO_2A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2A {
     *     LPSTR pServerName;
     *     LPSTR pPrinterName;
     *     LPSTR pShareName;
     *     LPSTR pPortName;
     *     LPSTR pDriverName;
     *     LPSTR pComment;
     *     LPSTR pLocation;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pSepFile;
     *     LPSTR pPrintProcessor;
     *     LPSTR pDatatype;
     *     LPSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *LPPRINTER_INFO_2A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2W {
     *     LPWSTR pServerName;
     *     LPWSTR pPrinterName;
     *     LPWSTR pShareName;
     *     LPWSTR pPortName;
     *     LPWSTR pDriverName;
     *     LPWSTR pComment;
     *     LPWSTR pLocation;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pSepFile;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pDatatype;
     *     LPWSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *PPRINTER_INFO_2W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_2W {
     *     LPWSTR pServerName;
     *     LPWSTR pPrinterName;
     *     LPWSTR pShareName;
     *     LPWSTR pPortName;
     *     LPWSTR pDriverName;
     *     LPWSTR pComment;
     *     LPWSTR pLocation;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pSepFile;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pDatatype;
     *     LPWSTR pParameters;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Attributes;
     *     DWORD Priority;
     *     DWORD DefaultPriority;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD Status;
     *     DWORD cJobs;
     *     DWORD AveragePPM;
     * } *LPPRINTER_INFO_2W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_2A PPRINTER_INFO_2
     * }
     */
    public static final AddressLayout PPRINTER_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_3 {
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     * } *PPRINTER_INFO_3
     * }
     */
    public static final AddressLayout PPRINTER_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_3 {
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     * } *LPPRINTER_INFO_3
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4A {
     *     LPSTR pPrinterName;
     *     LPSTR pServerName;
     *     DWORD Attributes;
     * } *PPRINTER_INFO_4A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4A {
     *     LPSTR pPrinterName;
     *     LPSTR pServerName;
     *     DWORD Attributes;
     * } *LPPRINTER_INFO_4A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pServerName;
     *     DWORD Attributes;
     * } *PPRINTER_INFO_4W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_4W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pServerName;
     *     DWORD Attributes;
     * } *LPPRINTER_INFO_4W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_4A PPRINTER_INFO_4
     * }
     */
    public static final AddressLayout PPRINTER_INFO_4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5A {
     *     LPSTR pPrinterName;
     *     LPSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *PPRINTER_INFO_5A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5A {
     *     LPSTR pPrinterName;
     *     LPSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *LPPRINTER_INFO_5A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *PPRINTER_INFO_5W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_5W {
     *     LPWSTR pPrinterName;
     *     LPWSTR pPortName;
     *     DWORD Attributes;
     *     DWORD DeviceNotSelectedTimeout;
     *     DWORD TransmissionRetryTimeout;
     * } *LPPRINTER_INFO_5W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_5A PPRINTER_INFO_5
     * }
     */
    public static final AddressLayout PPRINTER_INFO_5 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_5 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_6 {
     *     DWORD dwStatus;
     * } *PPRINTER_INFO_6
     * }
     */
    public static final AddressLayout PPRINTER_INFO_6 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_6 {
     *     DWORD dwStatus;
     * } *LPPRINTER_INFO_6
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_6 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7A {
     *     LPSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *PPRINTER_INFO_7A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7A {
     *     LPSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *LPPRINTER_INFO_7A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7W {
     *     LPWSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *PPRINTER_INFO_7W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_7W {
     *     LPWSTR pszObjectGUID;
     *     DWORD dwAction;
     * } *LPPRINTER_INFO_7W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_7A PPRINTER_INFO_7
     * }
     */
    public static final AddressLayout PPRINTER_INFO_7 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_7 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8A {
     *     LPDEVMODEA pDevMode;
     * } *PPRINTER_INFO_8A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8A {
     *     LPDEVMODEA pDevMode;
     * } *LPPRINTER_INFO_8A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8W {
     *     LPDEVMODEW pDevMode;
     * } *PPRINTER_INFO_8W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_8W {
     *     LPDEVMODEW pDevMode;
     * } *LPPRINTER_INFO_8W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_8A PPRINTER_INFO_8
     * }
     */
    public static final AddressLayout PPRINTER_INFO_8 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_8 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9A {
     *     LPDEVMODEA pDevMode;
     * } *PPRINTER_INFO_9A
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9A {
     *     LPDEVMODEA pDevMode;
     * } *LPPRINTER_INFO_9A
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9W {
     *     LPDEVMODEW pDevMode;
     * } *PPRINTER_INFO_9W
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_INFO_9W {
     *     LPDEVMODEW pDevMode;
     * } *LPPRINTER_INFO_9W
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_INFO_9A PPRINTER_INFO_9
     * }
     */
    public static final AddressLayout PPRINTER_INFO_9 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9
     * }
     */
    public static final AddressLayout LPPRINTER_INFO_9 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pDatatype;
     *     LPSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *PJOB_INFO_1A
     * }
     */
    public static final AddressLayout PJOB_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pDatatype;
     *     LPSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *LPJOB_INFO_1A
     * }
     */
    public static final AddressLayout LPJOB_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pDatatype;
     *     LPWSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *PJOB_INFO_1W
     * }
     */
    public static final AddressLayout PJOB_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_1W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pDatatype;
     *     LPWSTR pStatus;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD TotalPages;
     *     DWORD PagesPrinted;
     *     SYSTEMTIME Submitted;
     * } *LPJOB_INFO_1W
     * }
     */
    public static final AddressLayout LPJOB_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_1A PJOB_INFO_1
     * }
     */
    public static final AddressLayout PJOB_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_1A LPJOB_INFO_1
     * }
     */
    public static final AddressLayout LPJOB_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *PJOB_INFO_2A
     * }
     */
    public static final AddressLayout PJOB_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *LPJOB_INFO_2A
     * }
     */
    public static final AddressLayout LPJOB_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *PJOB_INFO_2W
     * }
     */
    public static final AddressLayout PJOB_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_2W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     * } *LPJOB_INFO_2W
     * }
     */
    public static final AddressLayout LPJOB_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_2A PJOB_INFO_2
     * }
     */
    public static final AddressLayout PJOB_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_2A LPJOB_INFO_2
     * }
     */
    public static final AddressLayout LPJOB_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_3 {
     *     DWORD JobId;
     *     DWORD NextJobId;
     *     DWORD Reserved;
     * } *PJOB_INFO_3
     * }
     */
    public static final AddressLayout PJOB_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_3 {
     *     DWORD JobId;
     *     DWORD NextJobId;
     *     DWORD Reserved;
     * } *LPJOB_INFO_3
     * }
     */
    public static final AddressLayout LPJOB_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *PJOB_INFO_4A
     * }
     */
    public static final AddressLayout PJOB_INFO_4A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4A {
     *     DWORD JobId;
     *     LPSTR pPrinterName;
     *     LPSTR pMachineName;
     *     LPSTR pUserName;
     *     LPSTR pDocument;
     *     LPSTR pNotifyName;
     *     LPSTR pDatatype;
     *     LPSTR pPrintProcessor;
     *     LPSTR pParameters;
     *     LPSTR pDriverName;
     *     LPDEVMODEA pDevMode;
     *     LPSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *LPJOB_INFO_4A
     * }
     */
    public static final AddressLayout LPJOB_INFO_4A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *PJOB_INFO_4W
     * }
     */
    public static final AddressLayout PJOB_INFO_4W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _JOB_INFO_4W {
     *     DWORD JobId;
     *     LPWSTR pPrinterName;
     *     LPWSTR pMachineName;
     *     LPWSTR pUserName;
     *     LPWSTR pDocument;
     *     LPWSTR pNotifyName;
     *     LPWSTR pDatatype;
     *     LPWSTR pPrintProcessor;
     *     LPWSTR pParameters;
     *     LPWSTR pDriverName;
     *     LPDEVMODEW pDevMode;
     *     LPWSTR pStatus;
     *     PSECURITY_DESCRIPTOR pSecurityDescriptor;
     *     DWORD Status;
     *     DWORD Priority;
     *     DWORD Position;
     *     DWORD StartTime;
     *     DWORD UntilTime;
     *     DWORD TotalPages;
     *     DWORD Size;
     *     SYSTEMTIME Submitted;
     *     DWORD Time;
     *     DWORD PagesPrinted;
     *     LONG SizeHigh;
     * } *LPJOB_INFO_4W
     * }
     */
    public static final AddressLayout LPJOB_INFO_4W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PJOB_INFO_4A PJOB_INFO_4
     * }
     */
    public static final AddressLayout PJOB_INFO_4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPJOB_INFO_4A LPJOB_INFO_4
     * }
     */
    public static final AddressLayout LPJOB_INFO_4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1A {
     *     LPSTR Path;
     *     DWORD JobId;
     * } *PADDJOB_INFO_1A
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1A {
     *     LPSTR Path;
     *     DWORD JobId;
     * } *LPADDJOB_INFO_1A
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1W {
     *     LPWSTR Path;
     *     DWORD JobId;
     * } *PADDJOB_INFO_1W
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _ADDJOB_INFO_1W {
     *     LPWSTR Path;
     *     DWORD JobId;
     * } *LPADDJOB_INFO_1W
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PADDJOB_INFO_1A PADDJOB_INFO_1
     * }
     */
    public static final AddressLayout PADDJOB_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1
     * }
     */
    public static final AddressLayout LPADDJOB_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1A {
     *     LPSTR pName;
     * } *PDRIVER_INFO_1A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1A {
     *     LPSTR pName;
     * } *LPDRIVER_INFO_1A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1W {
     *     LPWSTR pName;
     * } *PDRIVER_INFO_1W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_1W {
     *     LPWSTR pName;
     * } *LPDRIVER_INFO_1W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_1A PDRIVER_INFO_1
     * }
     */
    public static final AddressLayout PDRIVER_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     * } *PDRIVER_INFO_2A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     * } *LPDRIVER_INFO_2A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     * } *PDRIVER_INFO_2W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_2W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     * } *LPDRIVER_INFO_2W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_2A PDRIVER_INFO_2
     * }
     */
    public static final AddressLayout PDRIVER_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     * } *PDRIVER_INFO_3A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     * } *LPDRIVER_INFO_3A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     * } *PDRIVER_INFO_3W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_3W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     * } *LPDRIVER_INFO_3W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_3A PDRIVER_INFO_3
     * }
     */
    public static final AddressLayout PDRIVER_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     * } *PDRIVER_INFO_4A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     * } *LPDRIVER_INFO_4A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     * } *PDRIVER_INFO_4W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_4W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     * } *LPDRIVER_INFO_4W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_4A PDRIVER_INFO_4
     * }
     */
    public static final AddressLayout PDRIVER_INFO_4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_4 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *PDRIVER_INFO_5A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_5A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *LPDRIVER_INFO_5A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_5A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *PDRIVER_INFO_5W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_5W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_5W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     DWORD dwDriverAttributes;
     *     DWORD dwConfigVersion;
     *     DWORD dwDriverVersion;
     * } *LPDRIVER_INFO_5W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_5W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_5A PDRIVER_INFO_5
     * }
     */
    public static final AddressLayout PDRIVER_INFO_5 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_5 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_6A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPSTR pszMfgName;
     *     LPSTR pszOEMUrl;
     *     LPSTR pszHardwareID;
     *     LPSTR pszProvider;
     * } *PDRIVER_INFO_6A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_6A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_6A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPSTR pszMfgName;
     *     LPSTR pszOEMUrl;
     *     LPSTR pszHardwareID;
     *     LPSTR pszProvider;
     * } *LPDRIVER_INFO_6A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_6A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_6W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPWSTR pszMfgName;
     *     LPWSTR pszOEMUrl;
     *     LPWSTR pszHardwareID;
     *     LPWSTR pszProvider;
     * } *PDRIVER_INFO_6W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_6W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_6W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPWSTR pszMfgName;
     *     LPWSTR pszOEMUrl;
     *     LPWSTR pszHardwareID;
     *     LPWSTR pszProvider;
     * } *LPDRIVER_INFO_6W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_6W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_6A PDRIVER_INFO_6
     * }
     */
    public static final AddressLayout PDRIVER_INFO_6 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_6 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_8A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPSTR pszMfgName;
     *     LPSTR pszOEMUrl;
     *     LPSTR pszHardwareID;
     *     LPSTR pszProvider;
     *     LPSTR pszPrintProcessor;
     *     LPSTR pszVendorSetup;
     *     LPSTR pszzColorProfiles;
     *     LPSTR pszInfPath;
     *     DWORD dwPrinterDriverAttributes;
     *     LPSTR pszzCoreDriverDependencies;
     *     FILETIME ftMinInboxDriverVerDate;
     *     DWORDLONG dwlMinInboxDriverVerVersion;
     * } *PDRIVER_INFO_8A
     * }
     */
    public static final AddressLayout PDRIVER_INFO_8A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_8A {
     *     DWORD cVersion;
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDriverPath;
     *     LPSTR pDataFile;
     *     LPSTR pConfigFile;
     *     LPSTR pHelpFile;
     *     LPSTR pDependentFiles;
     *     LPSTR pMonitorName;
     *     LPSTR pDefaultDataType;
     *     LPSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPSTR pszMfgName;
     *     LPSTR pszOEMUrl;
     *     LPSTR pszHardwareID;
     *     LPSTR pszProvider;
     *     LPSTR pszPrintProcessor;
     *     LPSTR pszVendorSetup;
     *     LPSTR pszzColorProfiles;
     *     LPSTR pszInfPath;
     *     DWORD dwPrinterDriverAttributes;
     *     LPSTR pszzCoreDriverDependencies;
     *     FILETIME ftMinInboxDriverVerDate;
     *     DWORDLONG dwlMinInboxDriverVerVersion;
     * } *LPDRIVER_INFO_8A
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_8A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_8W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPWSTR pszMfgName;
     *     LPWSTR pszOEMUrl;
     *     LPWSTR pszHardwareID;
     *     LPWSTR pszProvider;
     *     LPWSTR pszPrintProcessor;
     *     LPWSTR pszVendorSetup;
     *     LPWSTR pszzColorProfiles;
     *     LPWSTR pszInfPath;
     *     DWORD dwPrinterDriverAttributes;
     *     LPWSTR pszzCoreDriverDependencies;
     *     FILETIME ftMinInboxDriverVerDate;
     *     DWORDLONG dwlMinInboxDriverVerVersion;
     * } *PDRIVER_INFO_8W
     * }
     */
    public static final AddressLayout PDRIVER_INFO_8W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DRIVER_INFO_8W {
     *     DWORD cVersion;
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDriverPath;
     *     LPWSTR pDataFile;
     *     LPWSTR pConfigFile;
     *     LPWSTR pHelpFile;
     *     LPWSTR pDependentFiles;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDefaultDataType;
     *     LPWSTR pszzPreviousNames;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     LPWSTR pszMfgName;
     *     LPWSTR pszOEMUrl;
     *     LPWSTR pszHardwareID;
     *     LPWSTR pszProvider;
     *     LPWSTR pszPrintProcessor;
     *     LPWSTR pszVendorSetup;
     *     LPWSTR pszzColorProfiles;
     *     LPWSTR pszInfPath;
     *     DWORD dwPrinterDriverAttributes;
     *     LPWSTR pszzCoreDriverDependencies;
     *     FILETIME ftMinInboxDriverVerDate;
     *     DWORDLONG dwlMinInboxDriverVerVersion;
     * } *LPDRIVER_INFO_8W
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_8W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDRIVER_INFO_8A PDRIVER_INFO_8
     * }
     */
    public static final AddressLayout PDRIVER_INFO_8 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDRIVER_INFO_8A LPDRIVER_INFO_8
     * }
     */
    public static final AddressLayout LPDRIVER_INFO_8 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_1A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     * } *PDOC_INFO_1A
     * }
     */
    public static final AddressLayout PDOC_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_1A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     * } *LPDOC_INFO_1A
     * }
     */
    public static final AddressLayout LPDOC_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_1W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     * } *PDOC_INFO_1W
     * }
     */
    public static final AddressLayout PDOC_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_1W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     * } *LPDOC_INFO_1W
     * }
     */
    public static final AddressLayout LPDOC_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDOC_INFO_1A PDOC_INFO_1
     * }
     */
    public static final AddressLayout PDOC_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDOC_INFO_1A LPDOC_INFO_1
     * }
     */
    public static final AddressLayout LPDOC_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     * } *PFORM_INFO_1A
     * }
     */
    public static final AddressLayout PFORM_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_1A {
     *     DWORD Flags;
     *     LPSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     * } *LPFORM_INFO_1A
     * }
     */
    public static final AddressLayout LPFORM_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     * } *PFORM_INFO_1W
     * }
     */
    public static final AddressLayout PFORM_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_1W {
     *     DWORD Flags;
     *     LPWSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     * } *LPFORM_INFO_1W
     * }
     */
    public static final AddressLayout LPFORM_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PFORM_INFO_1A PFORM_INFO_1
     * }
     */
    public static final AddressLayout PFORM_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPFORM_INFO_1A LPFORM_INFO_1
     * }
     */
    public static final AddressLayout LPFORM_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_2A {
     *     DWORD Flags;
     *     LPCSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     *     LPCSTR pKeyword;
     *     DWORD StringType;
     *     LPCSTR pMuiDll;
     *     DWORD dwResourceId;
     *     LPCSTR pDisplayName;
     *     LANGID wLangId;
     * } *PFORM_INFO_2A
     * }
     */
    public static final AddressLayout PFORM_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_2A {
     *     DWORD Flags;
     *     LPCSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     *     LPCSTR pKeyword;
     *     DWORD StringType;
     *     LPCSTR pMuiDll;
     *     DWORD dwResourceId;
     *     LPCSTR pDisplayName;
     *     LANGID wLangId;
     * } *LPFORM_INFO_2A
     * }
     */
    public static final AddressLayout LPFORM_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_2W {
     *     DWORD Flags;
     *     LPCWSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     *     LPCSTR pKeyword;
     *     DWORD StringType;
     *     LPCWSTR pMuiDll;
     *     DWORD dwResourceId;
     *     LPCWSTR pDisplayName;
     *     LANGID wLangId;
     * } *PFORM_INFO_2W
     * }
     */
    public static final AddressLayout PFORM_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _FORM_INFO_2W {
     *     DWORD Flags;
     *     LPCWSTR pName;
     *     SIZEL Size;
     *     RECTL ImageableArea;
     *     LPCSTR pKeyword;
     *     DWORD StringType;
     *     LPCWSTR pMuiDll;
     *     DWORD dwResourceId;
     *     LPCWSTR pDisplayName;
     *     LANGID wLangId;
     * } *LPFORM_INFO_2W
     * }
     */
    public static final AddressLayout LPFORM_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PFORM_INFO_2A PFORM_INFO_2
     * }
     */
    public static final AddressLayout PFORM_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPFORM_INFO_2A LPFORM_INFO_2
     * }
     */
    public static final AddressLayout LPFORM_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_2A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     *     DWORD dwMode;
     *     DWORD JobId;
     * } *PDOC_INFO_2A
     * }
     */
    public static final AddressLayout PDOC_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_2A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     *     DWORD dwMode;
     *     DWORD JobId;
     * } *LPDOC_INFO_2A
     * }
     */
    public static final AddressLayout LPDOC_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_2W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     *     DWORD dwMode;
     *     DWORD JobId;
     * } *PDOC_INFO_2W
     * }
     */
    public static final AddressLayout PDOC_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_2W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     *     DWORD dwMode;
     *     DWORD JobId;
     * } *LPDOC_INFO_2W
     * }
     */
    public static final AddressLayout LPDOC_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDOC_INFO_2A PDOC_INFO_2
     * }
     */
    public static final AddressLayout PDOC_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDOC_INFO_2A LPDOC_INFO_2
     * }
     */
    public static final AddressLayout LPDOC_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_3A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     *     DWORD dwFlags;
     * } *PDOC_INFO_3A
     * }
     */
    public static final AddressLayout PDOC_INFO_3A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_3A {
     *     LPSTR pDocName;
     *     LPSTR pOutputFile;
     *     LPSTR pDatatype;
     *     DWORD dwFlags;
     * } *LPDOC_INFO_3A
     * }
     */
    public static final AddressLayout LPDOC_INFO_3A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_3W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     *     DWORD dwFlags;
     * } *PDOC_INFO_3W
     * }
     */
    public static final AddressLayout PDOC_INFO_3W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DOC_INFO_3W {
     *     LPWSTR pDocName;
     *     LPWSTR pOutputFile;
     *     LPWSTR pDatatype;
     *     DWORD dwFlags;
     * } *LPDOC_INFO_3W
     * }
     */
    public static final AddressLayout LPDOC_INFO_3W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDOC_INFO_3A PDOC_INFO_3
     * }
     */
    public static final AddressLayout PDOC_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDOC_INFO_3A LPDOC_INFO_3
     * }
     */
    public static final AddressLayout LPDOC_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_INFO_1A {
     *     LPSTR pName;
     * } *PPRINTPROCESSOR_INFO_1A
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_INFO_1A {
     *     LPSTR pName;
     * } *LPPRINTPROCESSOR_INFO_1A
     * }
     */
    public static final AddressLayout LPPRINTPROCESSOR_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_INFO_1W {
     *     LPWSTR pName;
     * } *PPRINTPROCESSOR_INFO_1W
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_INFO_1W {
     *     LPWSTR pName;
     * } *LPPRINTPROCESSOR_INFO_1W
     * }
     */
    public static final AddressLayout LPPRINTPROCESSOR_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1
     * }
     */
    public static final AddressLayout LPPRINTPROCESSOR_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_CAPS_1 {
     *     DWORD dwLevel;
     *     DWORD dwNupOptions;
     *     DWORD dwPageOrderFlags;
     *     DWORD dwNumberOfCopies;
     * } *PPRINTPROCESSOR_CAPS_1
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_CAPS_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTPROCESSOR_CAPS_2 {
     *     DWORD dwLevel;
     *     DWORD dwNupOptions;
     *     DWORD dwPageOrderFlags;
     *     DWORD dwNumberOfCopies;
     *     DWORD dwDuplexHandlingCaps;
     *     DWORD dwNupDirectionCaps;
     *     DWORD dwNupBorderCaps;
     *     DWORD dwBookletHandlingCaps;
     *     DWORD dwScalingCaps;
     * } *PPRINTPROCESSOR_CAPS_2
     * }
     */
    public static final AddressLayout PPRINTPROCESSOR_CAPS_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_1A {
     *     LPSTR pName;
     * } *PPORT_INFO_1A
     * }
     */
    public static final AddressLayout PPORT_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_1A {
     *     LPSTR pName;
     * } *LPPORT_INFO_1A
     * }
     */
    public static final AddressLayout LPPORT_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_1W {
     *     LPWSTR pName;
     * } *PPORT_INFO_1W
     * }
     */
    public static final AddressLayout PPORT_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_1W {
     *     LPWSTR pName;
     * } *LPPORT_INFO_1W
     * }
     */
    public static final AddressLayout LPPORT_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPORT_INFO_1A PPORT_INFO_1
     * }
     */
    public static final AddressLayout PPORT_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPORT_INFO_1A LPPORT_INFO_1
     * }
     */
    public static final AddressLayout LPPORT_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_2A {
     *     LPSTR pPortName;
     *     LPSTR pMonitorName;
     *     LPSTR pDescription;
     *     DWORD fPortType;
     *     DWORD Reserved;
     * } *PPORT_INFO_2A
     * }
     */
    public static final AddressLayout PPORT_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_2A {
     *     LPSTR pPortName;
     *     LPSTR pMonitorName;
     *     LPSTR pDescription;
     *     DWORD fPortType;
     *     DWORD Reserved;
     * } *LPPORT_INFO_2A
     * }
     */
    public static final AddressLayout LPPORT_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_2W {
     *     LPWSTR pPortName;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDescription;
     *     DWORD fPortType;
     *     DWORD Reserved;
     * } *PPORT_INFO_2W
     * }
     */
    public static final AddressLayout PPORT_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_2W {
     *     LPWSTR pPortName;
     *     LPWSTR pMonitorName;
     *     LPWSTR pDescription;
     *     DWORD fPortType;
     *     DWORD Reserved;
     * } *LPPORT_INFO_2W
     * }
     */
    public static final AddressLayout LPPORT_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPORT_INFO_2A PPORT_INFO_2
     * }
     */
    public static final AddressLayout PPORT_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPORT_INFO_2A LPPORT_INFO_2
     * }
     */
    public static final AddressLayout LPPORT_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_3A {
     *     DWORD dwStatus;
     *     LPSTR pszStatus;
     *     DWORD dwSeverity;
     * } *PPORT_INFO_3A
     * }
     */
    public static final AddressLayout PPORT_INFO_3A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_3A {
     *     DWORD dwStatus;
     *     LPSTR pszStatus;
     *     DWORD dwSeverity;
     * } *LPPORT_INFO_3A
     * }
     */
    public static final AddressLayout LPPORT_INFO_3A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_3W {
     *     DWORD dwStatus;
     *     LPWSTR pszStatus;
     *     DWORD dwSeverity;
     * } *PPORT_INFO_3W
     * }
     */
    public static final AddressLayout PPORT_INFO_3W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PORT_INFO_3W {
     *     DWORD dwStatus;
     *     LPWSTR pszStatus;
     *     DWORD dwSeverity;
     * } *LPPORT_INFO_3W
     * }
     */
    public static final AddressLayout LPPORT_INFO_3W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPORT_INFO_3A PPORT_INFO_3
     * }
     */
    public static final AddressLayout PPORT_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPORT_INFO_3A LPPORT_INFO_3
     * }
     */
    public static final AddressLayout LPPORT_INFO_3 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_1A {
     *     LPSTR pName;
     * } *PMONITOR_INFO_1A
     * }
     */
    public static final AddressLayout PMONITOR_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_1A {
     *     LPSTR pName;
     * } *LPMONITOR_INFO_1A
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_1W {
     *     LPWSTR pName;
     * } *PMONITOR_INFO_1W
     * }
     */
    public static final AddressLayout PMONITOR_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_1W {
     *     LPWSTR pName;
     * } *LPMONITOR_INFO_1W
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMONITOR_INFO_1A PMONITOR_INFO_1
     * }
     */
    public static final AddressLayout PMONITOR_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_2A {
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDLLName;
     * } *PMONITOR_INFO_2A
     * }
     */
    public static final AddressLayout PMONITOR_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_2A {
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDLLName;
     * } *LPMONITOR_INFO_2A
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_2W {
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDLLName;
     * } *PMONITOR_INFO_2W
     * }
     */
    public static final AddressLayout PMONITOR_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _MONITOR_INFO_2W {
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDLLName;
     * } *LPMONITOR_INFO_2W
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PMONITOR_INFO_2A PMONITOR_INFO_2
     * }
     */
    public static final AddressLayout PMONITOR_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2
     * }
     */
    public static final AddressLayout LPMONITOR_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DATATYPES_INFO_1A {
     *     LPSTR pName;
     * } *PDATATYPES_INFO_1A
     * }
     */
    public static final AddressLayout PDATATYPES_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DATATYPES_INFO_1A {
     *     LPSTR pName;
     * } *LPDATATYPES_INFO_1A
     * }
     */
    public static final AddressLayout LPDATATYPES_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DATATYPES_INFO_1W {
     *     LPWSTR pName;
     * } *PDATATYPES_INFO_1W
     * }
     */
    public static final AddressLayout PDATATYPES_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _DATATYPES_INFO_1W {
     *     LPWSTR pName;
     * } *LPDATATYPES_INFO_1W
     * }
     */
    public static final AddressLayout LPDATATYPES_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1
     * }
     */
    public static final AddressLayout PDATATYPES_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1
     * }
     */
    public static final AddressLayout LPDATATYPES_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_DEFAULTSA {
     *     LPSTR pDatatype;
     *     LPDEVMODEA pDevMode;
     *     ACCESS_MASK DesiredAccess;
     * } *PPRINTER_DEFAULTSA
     * }
     */
    public static final AddressLayout PPRINTER_DEFAULTSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_DEFAULTSA {
     *     LPSTR pDatatype;
     *     LPDEVMODEA pDevMode;
     *     ACCESS_MASK DesiredAccess;
     * } *LPPRINTER_DEFAULTSA
     * }
     */
    public static final AddressLayout LPPRINTER_DEFAULTSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_DEFAULTSW {
     *     LPWSTR pDatatype;
     *     LPDEVMODEW pDevMode;
     *     ACCESS_MASK DesiredAccess;
     * } *PPRINTER_DEFAULTSW
     * }
     */
    public static final AddressLayout PPRINTER_DEFAULTSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_DEFAULTSW {
     *     LPWSTR pDatatype;
     *     LPDEVMODEW pDevMode;
     *     ACCESS_MASK DesiredAccess;
     * } *LPPRINTER_DEFAULTSW
     * }
     */
    public static final AddressLayout LPPRINTER_DEFAULTSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS
     * }
     */
    public static final AddressLayout PPRINTER_DEFAULTS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS
     * }
     */
    public static final AddressLayout LPPRINTER_DEFAULTS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_ENUM_VALUESA {
     *     LPSTR pValueName;
     *     DWORD cbValueName;
     *     DWORD dwType;
     *     LPBYTE pData;
     *     DWORD cbData;
     * } *PPRINTER_ENUM_VALUESA
     * }
     */
    public static final AddressLayout PPRINTER_ENUM_VALUESA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_ENUM_VALUESA {
     *     LPSTR pValueName;
     *     DWORD cbValueName;
     *     DWORD dwType;
     *     LPBYTE pData;
     *     DWORD cbData;
     * } *LPPRINTER_ENUM_VALUESA
     * }
     */
    public static final AddressLayout LPPRINTER_ENUM_VALUESA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_ENUM_VALUESW {
     *     LPWSTR pValueName;
     *     DWORD cbValueName;
     *     DWORD dwType;
     *     LPBYTE pData;
     *     DWORD cbData;
     * } *PPRINTER_ENUM_VALUESW
     * }
     */
    public static final AddressLayout PPRINTER_ENUM_VALUESW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_ENUM_VALUESW {
     *     LPWSTR pValueName;
     *     DWORD cbValueName;
     *     DWORD dwType;
     *     LPBYTE pData;
     *     DWORD cbData;
     * } *LPPRINTER_ENUM_VALUESW
     * }
     */
    public static final AddressLayout LPPRINTER_ENUM_VALUESW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES
     * }
     */
    public static final AddressLayout PPRINTER_ENUM_VALUES = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES
     * }
     */
    public static final AddressLayout LPPRINTER_ENUM_VALUES = winapi.C_POINTER;

    private static class EnumPrintersA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrintersA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintersA$descriptor() {
        return EnumPrintersA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintersA$handle() {
        return EnumPrintersA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintersA$address() {
        return EnumPrintersA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintersA(DWORD Flags, LPSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintersA(int Flags, MemorySegment Name, int Level, MemorySegment pPrinterEnum, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintersA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintersA", Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintersW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrintersW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintersW$descriptor() {
        return EnumPrintersW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintersW$handle() {
        return EnumPrintersW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintersW$address() {
        return EnumPrintersW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintersW(DWORD Flags, LPWSTR Name, DWORD Level, LPBYTE pPrinterEnum, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintersW(int Flags, MemorySegment Name, int Level, MemorySegment pPrinterEnum, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintersW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintersW", Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(Flags, Name, Level, pPrinterEnum, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetSpoolFileHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetSpoolFileHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE GetSpoolFileHandle(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor GetSpoolFileHandle$descriptor() {
        return GetSpoolFileHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE GetSpoolFileHandle(HANDLE hPrinter)
     * }
     */
    public static MethodHandle GetSpoolFileHandle$handle() {
        return GetSpoolFileHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE GetSpoolFileHandle(HANDLE hPrinter)
     * }
     */
    public static MemorySegment GetSpoolFileHandle$address() {
        return GetSpoolFileHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE GetSpoolFileHandle(HANDLE hPrinter)
     * }
     */
    public static MemorySegment GetSpoolFileHandle(MemorySegment hPrinter) {
        var mh$ = GetSpoolFileHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetSpoolFileHandle", hPrinter);
            }
            return (MemorySegment)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CommitSpoolData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CommitSpoolData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE CommitSpoolData(HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit)
     * }
     */
    public static FunctionDescriptor CommitSpoolData$descriptor() {
        return CommitSpoolData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE CommitSpoolData(HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit)
     * }
     */
    public static MethodHandle CommitSpoolData$handle() {
        return CommitSpoolData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE CommitSpoolData(HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit)
     * }
     */
    public static MemorySegment CommitSpoolData$address() {
        return CommitSpoolData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE CommitSpoolData(HANDLE hPrinter, HANDLE hSpoolFile, DWORD cbCommit)
     * }
     */
    public static MemorySegment CommitSpoolData(MemorySegment hPrinter, MemorySegment hSpoolFile, int cbCommit) {
        var mh$ = CommitSpoolData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CommitSpoolData", hPrinter, hSpoolFile, cbCommit);
            }
            return (MemorySegment)mh$.invokeExact(hPrinter, hSpoolFile, cbCommit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CloseSpoolFileHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CloseSpoolFileHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL CloseSpoolFileHandle(HANDLE hPrinter, HANDLE hSpoolFile)
     * }
     */
    public static FunctionDescriptor CloseSpoolFileHandle$descriptor() {
        return CloseSpoolFileHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL CloseSpoolFileHandle(HANDLE hPrinter, HANDLE hSpoolFile)
     * }
     */
    public static MethodHandle CloseSpoolFileHandle$handle() {
        return CloseSpoolFileHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL CloseSpoolFileHandle(HANDLE hPrinter, HANDLE hSpoolFile)
     * }
     */
    public static MemorySegment CloseSpoolFileHandle$address() {
        return CloseSpoolFileHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL CloseSpoolFileHandle(HANDLE hPrinter, HANDLE hSpoolFile)
     * }
     */
    public static int CloseSpoolFileHandle(MemorySegment hPrinter, MemorySegment hSpoolFile) {
        var mh$ = CloseSpoolFileHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CloseSpoolFileHandle", hPrinter, hSpoolFile);
            }
            return (int)mh$.invokeExact(hPrinter, hSpoolFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OpenPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static FunctionDescriptor OpenPrinterA$descriptor() {
        return OpenPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static MethodHandle OpenPrinterA$handle() {
        return OpenPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static MemorySegment OpenPrinterA$address() {
        return OpenPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL OpenPrinterA(LPSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static int OpenPrinterA(MemorySegment pPrinterName, MemorySegment phPrinter, MemorySegment pDefault) {
        var mh$ = OpenPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenPrinterA", pPrinterName, phPrinter, pDefault);
            }
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OpenPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static FunctionDescriptor OpenPrinterW$descriptor() {
        return OpenPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static MethodHandle OpenPrinterW$handle() {
        return OpenPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static MemorySegment OpenPrinterW$address() {
        return OpenPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL OpenPrinterW(LPWSTR pPrinterName, LPHANDLE phPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static int OpenPrinterW(MemorySegment pPrinterName, MemorySegment phPrinter, MemorySegment pDefault) {
        var mh$ = OpenPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenPrinterW", pPrinterName, phPrinter, pDefault);
            }
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ResetPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ResetPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static FunctionDescriptor ResetPrinterA$descriptor() {
        return ResetPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static MethodHandle ResetPrinterA$handle() {
        return ResetPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static MemorySegment ResetPrinterA$address() {
        return ResetPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ResetPrinterA(HANDLE hPrinter, LPPRINTER_DEFAULTSA pDefault)
     * }
     */
    public static int ResetPrinterA(MemorySegment hPrinter, MemorySegment pDefault) {
        var mh$ = ResetPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ResetPrinterA", hPrinter, pDefault);
            }
            return (int)mh$.invokeExact(hPrinter, pDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ResetPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ResetPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static FunctionDescriptor ResetPrinterW$descriptor() {
        return ResetPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static MethodHandle ResetPrinterW$handle() {
        return ResetPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static MemorySegment ResetPrinterW$address() {
        return ResetPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ResetPrinterW(HANDLE hPrinter, LPPRINTER_DEFAULTSW pDefault)
     * }
     */
    public static int ResetPrinterW(MemorySegment hPrinter, MemorySegment pDefault) {
        var mh$ = ResetPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ResetPrinterW", hPrinter, pDefault);
            }
            return (int)mh$.invokeExact(hPrinter, pDefault);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetJobA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetJobA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static FunctionDescriptor SetJobA$descriptor() {
        return SetJobA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static MethodHandle SetJobA$handle() {
        return SetJobA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static MemorySegment SetJobA$address() {
        return SetJobA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static int SetJobA(MemorySegment hPrinter, int JobId, int Level, MemorySegment pJob, int Command) {
        var mh$ = SetJobA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetJobA", hPrinter, JobId, Level, pJob, Command);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetJobW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetJobW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static FunctionDescriptor SetJobW$descriptor() {
        return SetJobW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static MethodHandle SetJobW$handle() {
        return SetJobW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static MemorySegment SetJobW$address() {
        return SetJobW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD Command)
     * }
     */
    public static int SetJobW(MemorySegment hPrinter, int JobId, int Level, MemorySegment pJob, int Command) {
        var mh$ = SetJobW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetJobW", hPrinter, JobId, Level, pJob, Command);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetJobA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetJobA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetJobA$descriptor() {
        return GetJobA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetJobA$handle() {
        return GetJobA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetJobA$address() {
        return GetJobA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetJobA(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetJobA(MemorySegment hPrinter, int JobId, int Level, MemorySegment pJob, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetJobA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetJobA", hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetJobW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetJobW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetJobW$descriptor() {
        return GetJobW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetJobW$handle() {
        return GetJobW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetJobW$address() {
        return GetJobW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetJobW(HANDLE hPrinter, DWORD JobId, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetJobW(MemorySegment hPrinter, int JobId, int Level, MemorySegment pJob, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetJobW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetJobW", hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, Level, pJob, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumJobsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumJobsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumJobsA$descriptor() {
        return EnumJobsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumJobsA$handle() {
        return EnumJobsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumJobsA$address() {
        return EnumJobsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumJobsA(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumJobsA(MemorySegment hPrinter, int FirstJob, int NoJobs, int Level, MemorySegment pJob, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumJobsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumJobsA", hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumJobsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumJobsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumJobsW$descriptor() {
        return EnumJobsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumJobsW$handle() {
        return EnumJobsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumJobsW$address() {
        return EnumJobsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumJobsW(HANDLE hPrinter, DWORD FirstJob, DWORD NoJobs, DWORD Level, LPBYTE pJob, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumJobsW(MemorySegment hPrinter, int FirstJob, int NoJobs, int Level, MemorySegment pJob, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumJobsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumJobsW", hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(hPrinter, FirstJob, NoJobs, Level, pJob, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static FunctionDescriptor AddPrinterA$descriptor() {
        return AddPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MethodHandle AddPrinterA$handle() {
        return AddPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MemorySegment AddPrinterA$address() {
        return AddPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE AddPrinterA(LPSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MemorySegment AddPrinterA(MemorySegment pName, int Level, MemorySegment pPrinter) {
        var mh$ = AddPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterA", pName, Level, pPrinter);
            }
            return (MemorySegment)mh$.invokeExact(pName, Level, pPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static FunctionDescriptor AddPrinterW$descriptor() {
        return AddPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MethodHandle AddPrinterW$handle() {
        return AddPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MemorySegment AddPrinterW$address() {
        return AddPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE AddPrinterW(LPWSTR pName, DWORD Level, LPBYTE pPrinter)
     * }
     */
    public static MemorySegment AddPrinterW(MemorySegment pName, int Level, MemorySegment pPrinter) {
        var mh$ = AddPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterW", pName, Level, pPrinter);
            }
            return (MemorySegment)mh$.invokeExact(pName, Level, pPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor DeletePrinter$descriptor() {
        return DeletePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle DeletePrinter$handle() {
        return DeletePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment DeletePrinter$address() {
        return DeletePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinter(HANDLE hPrinter)
     * }
     */
    public static int DeletePrinter(MemorySegment hPrinter) {
        var mh$ = DeletePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static FunctionDescriptor SetPrinterA$descriptor() {
        return SetPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static MethodHandle SetPrinterA$handle() {
        return SetPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static MemorySegment SetPrinterA$address() {
        return SetPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static int SetPrinterA(MemorySegment hPrinter, int Level, MemorySegment pPrinter, int Command) {
        var mh$ = SetPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterA", hPrinter, Level, pPrinter, Command);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static FunctionDescriptor SetPrinterW$descriptor() {
        return SetPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static MethodHandle SetPrinterW$handle() {
        return SetPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static MemorySegment SetPrinterW$address() {
        return SetPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD Command)
     * }
     */
    public static int SetPrinterW(MemorySegment hPrinter, int Level, MemorySegment pPrinter, int Command) {
        var mh$ = SetPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterW", hPrinter, Level, pPrinter, Command);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterA$descriptor() {
        return GetPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterA$handle() {
        return GetPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterA$address() {
        return GetPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterA(MemorySegment hPrinter, int Level, MemorySegment pPrinter, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterA", hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterW$descriptor() {
        return GetPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterW$handle() {
        return GetPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterW$address() {
        return GetPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pPrinter, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterW(MemorySegment hPrinter, int Level, MemorySegment pPrinter, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterW", hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pPrinter, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterDriverA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterDriverA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static FunctionDescriptor AddPrinterDriverA$descriptor() {
        return AddPrinterDriverA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static MethodHandle AddPrinterDriverA$handle() {
        return AddPrinterDriverA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static MemorySegment AddPrinterDriverA$address() {
        return AddPrinterDriverA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterDriverA(LPSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static int AddPrinterDriverA(MemorySegment pName, int Level, MemorySegment pDriverInfo) {
        var mh$ = AddPrinterDriverA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterDriverA", pName, Level, pDriverInfo);
            }
            return (int)mh$.invokeExact(pName, Level, pDriverInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterDriverW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterDriverW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static FunctionDescriptor AddPrinterDriverW$descriptor() {
        return AddPrinterDriverW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static MethodHandle AddPrinterDriverW$handle() {
        return AddPrinterDriverW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static MemorySegment AddPrinterDriverW$address() {
        return AddPrinterDriverW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterDriverW(LPWSTR pName, DWORD Level, LPBYTE pDriverInfo)
     * }
     */
    public static int AddPrinterDriverW(MemorySegment pName, int Level, MemorySegment pDriverInfo) {
        var mh$ = AddPrinterDriverW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterDriverW", pName, Level, pDriverInfo);
            }
            return (int)mh$.invokeExact(pName, Level, pDriverInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterDriverExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterDriverExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExA(LPSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static FunctionDescriptor AddPrinterDriverExA$descriptor() {
        return AddPrinterDriverExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExA(LPSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static MethodHandle AddPrinterDriverExA$handle() {
        return AddPrinterDriverExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExA(LPSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static MemorySegment AddPrinterDriverExA$address() {
        return AddPrinterDriverExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExA(LPSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static int AddPrinterDriverExA(MemorySegment pName, int Level, MemorySegment lpbDriverInfo, int dwFileCopyFlags) {
        var mh$ = AddPrinterDriverExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterDriverExA", pName, Level, lpbDriverInfo, dwFileCopyFlags);
            }
            return (int)mh$.invokeExact(pName, Level, lpbDriverInfo, dwFileCopyFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterDriverExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterDriverExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExW(LPWSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static FunctionDescriptor AddPrinterDriverExW$descriptor() {
        return AddPrinterDriverExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExW(LPWSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static MethodHandle AddPrinterDriverExW$handle() {
        return AddPrinterDriverExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExW(LPWSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static MemorySegment AddPrinterDriverExW$address() {
        return AddPrinterDriverExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterDriverExW(LPWSTR pName, DWORD Level, PBYTE lpbDriverInfo, DWORD dwFileCopyFlags)
     * }
     */
    public static int AddPrinterDriverExW(MemorySegment pName, int Level, MemorySegment lpbDriverInfo, int dwFileCopyFlags) {
        var mh$ = AddPrinterDriverExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterDriverExW", pName, Level, lpbDriverInfo, dwFileCopyFlags);
            }
            return (int)mh$.invokeExact(pName, Level, lpbDriverInfo, dwFileCopyFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDriversA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrinterDriversA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrinterDriversA$descriptor() {
        return EnumPrinterDriversA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrinterDriversA$handle() {
        return EnumPrinterDriversA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrinterDriversA$address() {
        return EnumPrinterDriversA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrinterDriversA(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrinterDriversA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDriversA", pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDriversW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrinterDriversW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrinterDriversW$descriptor() {
        return EnumPrinterDriversW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrinterDriversW$handle() {
        return EnumPrinterDriversW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrinterDriversW$address() {
        return EnumPrinterDriversW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrinterDriversW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrinterDriversW(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrinterDriversW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDriversW", pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDriverA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverA$descriptor() {
        return GetPrinterDriverA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriverA$handle() {
        return GetPrinterDriverA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriverA$address() {
        return GetPrinterDriverA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriverA(HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriverA(MemorySegment hPrinter, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriverA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverA", hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDriverW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverW$descriptor() {
        return GetPrinterDriverW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriverW$handle() {
        return GetPrinterDriverW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriverW$address() {
        return GetPrinterDriverW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriverW(HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriverW(MemorySegment hPrinter, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriverW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverW", hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverDirectoryA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDriverDirectoryA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverDirectoryA$descriptor() {
        return GetPrinterDriverDirectoryA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriverDirectoryA$handle() {
        return GetPrinterDriverDirectoryA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriverDirectoryA$address() {
        return GetPrinterDriverDirectoryA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriverDirectoryA(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pDriverDirectory, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriverDirectoryA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverDirectoryA", pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverDirectoryW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDriverDirectoryW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverDirectoryW$descriptor() {
        return GetPrinterDriverDirectoryW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriverDirectoryW$handle() {
        return GetPrinterDriverDirectoryW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriverDirectoryW$address() {
        return GetPrinterDriverDirectoryW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriverDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverDirectory, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriverDirectoryW(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pDriverDirectory, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriverDirectoryW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverDirectoryW", pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pDriverDirectory, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDriverA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverA$descriptor() {
        return DeletePrinterDriverA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName)
     * }
     */
    public static MethodHandle DeletePrinterDriverA$handle() {
        return DeletePrinterDriverA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName)
     * }
     */
    public static MemorySegment DeletePrinterDriverA$address() {
        return DeletePrinterDriverA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName)
     * }
     */
    public static int DeletePrinterDriverA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pDriverName) {
        var mh$ = DeletePrinterDriverA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverA", pName, pEnvironment, pDriverName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDriverW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverW$descriptor() {
        return DeletePrinterDriverW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName)
     * }
     */
    public static MethodHandle DeletePrinterDriverW$handle() {
        return DeletePrinterDriverW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName)
     * }
     */
    public static MemorySegment DeletePrinterDriverW$address() {
        return DeletePrinterDriverW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName)
     * }
     */
    public static int DeletePrinterDriverW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pDriverName) {
        var mh$ = DeletePrinterDriverW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverW", pName, pEnvironment, pDriverName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDriverExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverExA$descriptor() {
        return DeletePrinterDriverExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static MethodHandle DeletePrinterDriverExA$handle() {
        return DeletePrinterDriverExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static MemorySegment DeletePrinterDriverExA$address() {
        return DeletePrinterDriverExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExA(LPSTR pName, LPSTR pEnvironment, LPSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static int DeletePrinterDriverExA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pDriverName, int dwDeleteFlag, int dwVersionFlag) {
        var mh$ = DeletePrinterDriverExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverExA", pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDriverExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverExW$descriptor() {
        return DeletePrinterDriverExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static MethodHandle DeletePrinterDriverExW$handle() {
        return DeletePrinterDriverExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static MemorySegment DeletePrinterDriverExW$address() {
        return DeletePrinterDriverExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterDriverExW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pDriverName, DWORD dwDeleteFlag, DWORD dwVersionFlag)
     * }
     */
    public static int DeletePrinterDriverExW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pDriverName, int dwDeleteFlag, int dwVersionFlag) {
        var mh$ = DeletePrinterDriverExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverExW", pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pDriverName, dwDeleteFlag, dwVersionFlag);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrintProcessorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrintProcessorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName)
     * }
     */
    public static FunctionDescriptor AddPrintProcessorA$descriptor() {
        return AddPrintProcessorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName)
     * }
     */
    public static MethodHandle AddPrintProcessorA$handle() {
        return AddPrintProcessorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName)
     * }
     */
    public static MemorySegment AddPrintProcessorA$address() {
        return AddPrintProcessorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPathName, LPSTR pPrintProcessorName)
     * }
     */
    public static int AddPrintProcessorA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPathName, MemorySegment pPrintProcessorName) {
        var mh$ = AddPrintProcessorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrintProcessorA", pName, pEnvironment, pPathName, pPrintProcessorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPathName, pPrintProcessorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrintProcessorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrintProcessorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName)
     * }
     */
    public static FunctionDescriptor AddPrintProcessorW$descriptor() {
        return AddPrintProcessorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName)
     * }
     */
    public static MethodHandle AddPrintProcessorW$handle() {
        return AddPrintProcessorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName)
     * }
     */
    public static MemorySegment AddPrintProcessorW$address() {
        return AddPrintProcessorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPathName, LPWSTR pPrintProcessorName)
     * }
     */
    public static int AddPrintProcessorW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPathName, MemorySegment pPrintProcessorName) {
        var mh$ = AddPrintProcessorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrintProcessorW", pName, pEnvironment, pPathName, pPrintProcessorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPathName, pPrintProcessorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintProcessorsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrintProcessorsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintProcessorsA$descriptor() {
        return EnumPrintProcessorsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintProcessorsA$handle() {
        return EnumPrintProcessorsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintProcessorsA$address() {
        return EnumPrintProcessorsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintProcessorsA(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pPrintProcessorInfo, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintProcessorsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintProcessorsA", pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintProcessorsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrintProcessorsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintProcessorsW$descriptor() {
        return EnumPrintProcessorsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintProcessorsW$handle() {
        return EnumPrintProcessorsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintProcessorsW$address() {
        return EnumPrintProcessorsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorsW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintProcessorsW(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pPrintProcessorInfo, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintProcessorsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintProcessorsW", pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrintProcessorDirectoryA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrintProcessorDirectoryA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrintProcessorDirectoryA$descriptor() {
        return GetPrintProcessorDirectoryA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrintProcessorDirectoryA$handle() {
        return GetPrintProcessorDirectoryA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrintProcessorDirectoryA$address() {
        return GetPrintProcessorDirectoryA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryA(LPSTR pName, LPSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrintProcessorDirectoryA(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pPrintProcessorInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrintProcessorDirectoryA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrintProcessorDirectoryA", pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrintProcessorDirectoryW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrintProcessorDirectoryW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrintProcessorDirectoryW$descriptor() {
        return GetPrintProcessorDirectoryW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrintProcessorDirectoryW$handle() {
        return GetPrintProcessorDirectoryW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrintProcessorDirectoryW$address() {
        return GetPrintProcessorDirectoryW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrintProcessorDirectoryW(LPWSTR pName, LPWSTR pEnvironment, DWORD Level, LPBYTE pPrintProcessorInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrintProcessorDirectoryW(MemorySegment pName, MemorySegment pEnvironment, int Level, MemorySegment pPrintProcessorInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrintProcessorDirectoryW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrintProcessorDirectoryW", pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, Level, pPrintProcessorInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintProcessorDatatypesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrintProcessorDatatypesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintProcessorDatatypesA$descriptor() {
        return EnumPrintProcessorDatatypesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintProcessorDatatypesA$handle() {
        return EnumPrintProcessorDatatypesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintProcessorDatatypesA$address() {
        return EnumPrintProcessorDatatypesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesA(LPSTR pName, LPSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintProcessorDatatypesA(MemorySegment pName, MemorySegment pPrintProcessorName, int Level, MemorySegment pDatatypes, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintProcessorDatatypesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintProcessorDatatypesA", pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrintProcessorDatatypesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrintProcessorDatatypesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPrintProcessorDatatypesW$descriptor() {
        return EnumPrintProcessorDatatypesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPrintProcessorDatatypesW$handle() {
        return EnumPrintProcessorDatatypesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPrintProcessorDatatypesW$address() {
        return EnumPrintProcessorDatatypesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPrintProcessorDatatypesW(LPWSTR pName, LPWSTR pPrintProcessorName, DWORD Level, LPBYTE pDatatypes, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPrintProcessorDatatypesW(MemorySegment pName, MemorySegment pPrintProcessorName, int Level, MemorySegment pDatatypes, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPrintProcessorDatatypesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrintProcessorDatatypesW", pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, pPrintProcessorName, Level, pDatatypes, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrintProcessorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrintProcessorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName)
     * }
     */
    public static FunctionDescriptor DeletePrintProcessorA$descriptor() {
        return DeletePrintProcessorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName)
     * }
     */
    public static MethodHandle DeletePrintProcessorA$handle() {
        return DeletePrintProcessorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName)
     * }
     */
    public static MemorySegment DeletePrintProcessorA$address() {
        return DeletePrintProcessorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProcessorName)
     * }
     */
    public static int DeletePrintProcessorA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPrintProcessorName) {
        var mh$ = DeletePrintProcessorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrintProcessorA", pName, pEnvironment, pPrintProcessorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProcessorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrintProcessorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrintProcessorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName)
     * }
     */
    public static FunctionDescriptor DeletePrintProcessorW$descriptor() {
        return DeletePrintProcessorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName)
     * }
     */
    public static MethodHandle DeletePrintProcessorW$handle() {
        return DeletePrintProcessorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName)
     * }
     */
    public static MemorySegment DeletePrintProcessorW$address() {
        return DeletePrintProcessorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrintProcessorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProcessorName)
     * }
     */
    public static int DeletePrintProcessorW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPrintProcessorName) {
        var mh$ = DeletePrintProcessorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrintProcessorW", pName, pEnvironment, pPrintProcessorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProcessorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartDocPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StartDocPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static FunctionDescriptor StartDocPrinterA$descriptor() {
        return StartDocPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static MethodHandle StartDocPrinterA$handle() {
        return StartDocPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static MemorySegment StartDocPrinterA$address() {
        return StartDocPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD StartDocPrinterA(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static int StartDocPrinterA(MemorySegment hPrinter, int Level, MemorySegment pDocInfo) {
        var mh$ = StartDocPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartDocPrinterA", hPrinter, Level, pDocInfo);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pDocInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartDocPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StartDocPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static FunctionDescriptor StartDocPrinterW$descriptor() {
        return StartDocPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static MethodHandle StartDocPrinterW$handle() {
        return StartDocPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static MemorySegment StartDocPrinterW$address() {
        return StartDocPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD StartDocPrinterW(HANDLE hPrinter, DWORD Level, LPBYTE pDocInfo)
     * }
     */
    public static int StartDocPrinterW(MemorySegment hPrinter, int Level, MemorySegment pDocInfo) {
        var mh$ = StartDocPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartDocPrinterW", hPrinter, Level, pDocInfo);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pDocInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class StartPagePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("StartPagePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL StartPagePrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor StartPagePrinter$descriptor() {
        return StartPagePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL StartPagePrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle StartPagePrinter$handle() {
        return StartPagePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL StartPagePrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment StartPagePrinter$address() {
        return StartPagePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL StartPagePrinter(HANDLE hPrinter)
     * }
     */
    public static int StartPagePrinter(MemorySegment hPrinter) {
        var mh$ = StartPagePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("StartPagePrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class WritePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WritePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
     * }
     */
    public static FunctionDescriptor WritePrinter$descriptor() {
        return WritePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
     * }
     */
    public static MethodHandle WritePrinter$handle() {
        return WritePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
     * }
     */
    public static MemorySegment WritePrinter$address() {
        return WritePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL WritePrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten)
     * }
     */
    public static int WritePrinter(MemorySegment hPrinter, MemorySegment pBuf, int cbBuf, MemorySegment pcWritten) {
        var mh$ = WritePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WritePrinter", hPrinter, pBuf, cbBuf, pcWritten);
            }
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pcWritten);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FlushPrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FlushPrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep)
     * }
     */
    public static FunctionDescriptor FlushPrinter$descriptor() {
        return FlushPrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep)
     * }
     */
    public static MethodHandle FlushPrinter$handle() {
        return FlushPrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep)
     * }
     */
    public static MemorySegment FlushPrinter$address() {
        return FlushPrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FlushPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pcWritten, DWORD cSleep)
     * }
     */
    public static int FlushPrinter(MemorySegment hPrinter, MemorySegment pBuf, int cbBuf, MemorySegment pcWritten, int cSleep) {
        var mh$ = FlushPrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FlushPrinter", hPrinter, pBuf, cbBuf, pcWritten, cSleep);
            }
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pcWritten, cSleep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EndPagePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EndPagePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EndPagePrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor EndPagePrinter$descriptor() {
        return EndPagePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EndPagePrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle EndPagePrinter$handle() {
        return EndPagePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EndPagePrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment EndPagePrinter$address() {
        return EndPagePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EndPagePrinter(HANDLE hPrinter)
     * }
     */
    public static int EndPagePrinter(MemorySegment hPrinter) {
        var mh$ = EndPagePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EndPagePrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AbortPrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AbortPrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AbortPrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor AbortPrinter$descriptor() {
        return AbortPrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AbortPrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle AbortPrinter$handle() {
        return AbortPrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AbortPrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment AbortPrinter$address() {
        return AbortPrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AbortPrinter(HANDLE hPrinter)
     * }
     */
    public static int AbortPrinter(MemorySegment hPrinter) {
        var mh$ = AbortPrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AbortPrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ReadPrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ReadPrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead)
     * }
     */
    public static FunctionDescriptor ReadPrinter$descriptor() {
        return ReadPrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead)
     * }
     */
    public static MethodHandle ReadPrinter$handle() {
        return ReadPrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead)
     * }
     */
    public static MemorySegment ReadPrinter$address() {
        return ReadPrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ReadPrinter(HANDLE hPrinter, LPVOID pBuf, DWORD cbBuf, LPDWORD pNoBytesRead)
     * }
     */
    public static int ReadPrinter(MemorySegment hPrinter, MemorySegment pBuf, int cbBuf, MemorySegment pNoBytesRead) {
        var mh$ = ReadPrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReadPrinter", hPrinter, pBuf, cbBuf, pNoBytesRead);
            }
            return (int)mh$.invokeExact(hPrinter, pBuf, cbBuf, pNoBytesRead);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EndDocPrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EndDocPrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EndDocPrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor EndDocPrinter$descriptor() {
        return EndDocPrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EndDocPrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle EndDocPrinter$handle() {
        return EndDocPrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EndDocPrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment EndDocPrinter$address() {
        return EndDocPrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EndDocPrinter(HANDLE hPrinter)
     * }
     */
    public static int EndDocPrinter(MemorySegment hPrinter) {
        var mh$ = EndDocPrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EndDocPrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddJobA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddJobA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor AddJobA$descriptor() {
        return AddJobA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle AddJobA$handle() {
        return AddJobA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment AddJobA$address() {
        return AddJobA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddJobA(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int AddJobA(MemorySegment hPrinter, int Level, MemorySegment pData, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = AddJobA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddJobA", hPrinter, Level, pData, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pData, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddJobW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddJobW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor AddJobW$descriptor() {
        return AddJobW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle AddJobW$handle() {
        return AddJobW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment AddJobW$address() {
        return AddJobW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddJobW(HANDLE hPrinter, DWORD Level, LPBYTE pData, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int AddJobW(MemorySegment hPrinter, int Level, MemorySegment pData, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = AddJobW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddJobW", hPrinter, Level, pData, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pData, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ScheduleJob {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ScheduleJob");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ScheduleJob(HANDLE hPrinter, DWORD JobId)
     * }
     */
    public static FunctionDescriptor ScheduleJob$descriptor() {
        return ScheduleJob.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ScheduleJob(HANDLE hPrinter, DWORD JobId)
     * }
     */
    public static MethodHandle ScheduleJob$handle() {
        return ScheduleJob.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ScheduleJob(HANDLE hPrinter, DWORD JobId)
     * }
     */
    public static MemorySegment ScheduleJob$address() {
        return ScheduleJob.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ScheduleJob(HANDLE hPrinter, DWORD JobId)
     * }
     */
    public static int ScheduleJob(MemorySegment hPrinter, int JobId) {
        var mh$ = ScheduleJob.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ScheduleJob", hPrinter, JobId);
            }
            return (int)mh$.invokeExact(hPrinter, JobId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrinterProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PrinterProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL PrinterProperties(HWND hWnd, HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor PrinterProperties$descriptor() {
        return PrinterProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL PrinterProperties(HWND hWnd, HANDLE hPrinter)
     * }
     */
    public static MethodHandle PrinterProperties$handle() {
        return PrinterProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL PrinterProperties(HWND hWnd, HANDLE hPrinter)
     * }
     */
    public static MemorySegment PrinterProperties$address() {
        return PrinterProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL PrinterProperties(HWND hWnd, HANDLE hPrinter)
     * }
     */
    public static int PrinterProperties(MemorySegment hWnd, MemorySegment hPrinter) {
        var mh$ = PrinterProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrinterProperties", hWnd, hPrinter);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DocumentPropertiesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DocumentPropertiesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode)
     * }
     */
    public static FunctionDescriptor DocumentPropertiesA$descriptor() {
        return DocumentPropertiesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode)
     * }
     */
    public static MethodHandle DocumentPropertiesA$handle() {
        return DocumentPropertiesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode)
     * }
     */
    public static MemorySegment DocumentPropertiesA$address() {
        return DocumentPropertiesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG DocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput, DWORD fMode)
     * }
     */
    public static int DocumentPropertiesA(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pDeviceName, MemorySegment pDevModeOutput, MemorySegment pDevModeInput, int fMode) {
        var mh$ = DocumentPropertiesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DocumentPropertiesA", hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DocumentPropertiesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DocumentPropertiesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode)
     * }
     */
    public static FunctionDescriptor DocumentPropertiesW$descriptor() {
        return DocumentPropertiesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode)
     * }
     */
    public static MethodHandle DocumentPropertiesW$handle() {
        return DocumentPropertiesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode)
     * }
     */
    public static MemorySegment DocumentPropertiesW$address() {
        return DocumentPropertiesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG DocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput, DWORD fMode)
     * }
     */
    public static int DocumentPropertiesW(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pDeviceName, MemorySegment pDevModeOutput, MemorySegment pDevModeInput, int fMode) {
        var mh$ = DocumentPropertiesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DocumentPropertiesW", hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput, fMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AdvancedDocumentPropertiesA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AdvancedDocumentPropertiesA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput)
     * }
     */
    public static FunctionDescriptor AdvancedDocumentPropertiesA$descriptor() {
        return AdvancedDocumentPropertiesA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput)
     * }
     */
    public static MethodHandle AdvancedDocumentPropertiesA$handle() {
        return AdvancedDocumentPropertiesA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput)
     * }
     */
    public static MemorySegment AdvancedDocumentPropertiesA$address() {
        return AdvancedDocumentPropertiesA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesA(HWND hWnd, HANDLE hPrinter, LPSTR pDeviceName, PDEVMODEA pDevModeOutput, PDEVMODEA pDevModeInput)
     * }
     */
    public static int AdvancedDocumentPropertiesA(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pDeviceName, MemorySegment pDevModeOutput, MemorySegment pDevModeInput) {
        var mh$ = AdvancedDocumentPropertiesA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AdvancedDocumentPropertiesA", hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AdvancedDocumentPropertiesW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AdvancedDocumentPropertiesW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput)
     * }
     */
    public static FunctionDescriptor AdvancedDocumentPropertiesW$descriptor() {
        return AdvancedDocumentPropertiesW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput)
     * }
     */
    public static MethodHandle AdvancedDocumentPropertiesW$handle() {
        return AdvancedDocumentPropertiesW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput)
     * }
     */
    public static MemorySegment AdvancedDocumentPropertiesW$address() {
        return AdvancedDocumentPropertiesW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG AdvancedDocumentPropertiesW(HWND hWnd, HANDLE hPrinter, LPWSTR pDeviceName, PDEVMODEW pDevModeOutput, PDEVMODEW pDevModeInput)
     * }
     */
    public static int AdvancedDocumentPropertiesW(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pDeviceName, MemorySegment pDevModeOutput, MemorySegment pDevModeInput) {
        var mh$ = AdvancedDocumentPropertiesW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AdvancedDocumentPropertiesW", hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pDeviceName, pDevModeOutput, pDevModeInput);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ExtDeviceMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ExtDeviceMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * LONG ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode)
     * }
     */
    public static FunctionDescriptor ExtDeviceMode$descriptor() {
        return ExtDeviceMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * LONG ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode)
     * }
     */
    public static MethodHandle ExtDeviceMode$handle() {
        return ExtDeviceMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * LONG ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode)
     * }
     */
    public static MemorySegment ExtDeviceMode$address() {
        return ExtDeviceMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * LONG ExtDeviceMode(HWND hWnd, HANDLE hInst, LPDEVMODEA pDevModeOutput, LPSTR pDeviceName, LPSTR pPort, LPDEVMODEA pDevModeInput, LPSTR pProfile, DWORD fMode)
     * }
     */
    public static int ExtDeviceMode(MemorySegment hWnd, MemorySegment hInst, MemorySegment pDevModeOutput, MemorySegment pDeviceName, MemorySegment pPort, MemorySegment pDevModeInput, MemorySegment pProfile, int fMode) {
        var mh$ = ExtDeviceMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ExtDeviceMode", hWnd, hInst, pDevModeOutput, pDeviceName, pPort, pDevModeInput, pProfile, fMode);
            }
            return (int)mh$.invokeExact(hWnd, hInst, pDevModeOutput, pDeviceName, pPort, pDevModeInput, pProfile, fMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDataA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDataA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDataA$descriptor() {
        return GetPrinterDataA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDataA$handle() {
        return GetPrinterDataA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDataA$address() {
        return GetPrinterDataA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDataA(MemorySegment hPrinter, MemorySegment pValueName, MemorySegment pType, MemorySegment pData, int nSize, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDataA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDataA", hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDataW$descriptor() {
        return GetPrinterDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDataW$handle() {
        return GetPrinterDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDataW$address() {
        return GetPrinterDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDataW(MemorySegment hPrinter, MemorySegment pValueName, MemorySegment pType, MemorySegment pData, int nSize, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDataW", hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDataExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDataExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDataExA$descriptor() {
        return GetPrinterDataExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDataExA$handle() {
        return GetPrinterDataExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDataExA$address() {
        return GetPrinterDataExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDataExA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName, MemorySegment pType, MemorySegment pData, int nSize, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDataExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDataExA", hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDataExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDataExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDataExW$descriptor() {
        return GetPrinterDataExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDataExW$handle() {
        return GetPrinterDataExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDataExW$address() {
        return GetPrinterDataExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, LPDWORD pType, LPBYTE pData, DWORD nSize, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDataExW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName, MemorySegment pType, MemorySegment pData, int nSize, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDataExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDataExW", hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, pType, pData, nSize, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDataA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrinterDataA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static FunctionDescriptor EnumPrinterDataA$descriptor() {
        return EnumPrinterDataA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static MethodHandle EnumPrinterDataA$handle() {
        return EnumPrinterDataA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static MemorySegment EnumPrinterDataA$address() {
        return EnumPrinterDataA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterDataA(HANDLE hPrinter, DWORD dwIndex, LPSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static int EnumPrinterDataA(MemorySegment hPrinter, int dwIndex, MemorySegment pValueName, int cbValueName, MemorySegment pcbValueName, MemorySegment pType, MemorySegment pData, int cbData, MemorySegment pcbData) {
        var mh$ = EnumPrinterDataA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDataA", hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
            }
            return (int)mh$.invokeExact(hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrinterDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static FunctionDescriptor EnumPrinterDataW$descriptor() {
        return EnumPrinterDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static MethodHandle EnumPrinterDataW$handle() {
        return EnumPrinterDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static MemorySegment EnumPrinterDataW$address() {
        return EnumPrinterDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterDataW(HANDLE hPrinter, DWORD dwIndex, LPWSTR pValueName, DWORD cbValueName, LPDWORD pcbValueName, LPDWORD pType, LPBYTE pData, DWORD cbData, LPDWORD pcbData)
     * }
     */
    public static int EnumPrinterDataW(MemorySegment hPrinter, int dwIndex, MemorySegment pValueName, int cbValueName, MemorySegment pcbValueName, MemorySegment pType, MemorySegment pData, int cbData, MemorySegment pcbData) {
        var mh$ = EnumPrinterDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDataW", hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
            }
            return (int)mh$.invokeExact(hPrinter, dwIndex, pValueName, cbValueName, pcbValueName, pType, pData, cbData, pcbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDataExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrinterDataExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static FunctionDescriptor EnumPrinterDataExA$descriptor() {
        return EnumPrinterDataExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static MethodHandle EnumPrinterDataExA$handle() {
        return EnumPrinterDataExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static MemorySegment EnumPrinterDataExA$address() {
        return EnumPrinterDataExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static int EnumPrinterDataExA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pEnumValues, int cbEnumValues, MemorySegment pcbEnumValues, MemorySegment pnEnumValues) {
        var mh$ = EnumPrinterDataExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDataExA", hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterDataExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrinterDataExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static FunctionDescriptor EnumPrinterDataExW$descriptor() {
        return EnumPrinterDataExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static MethodHandle EnumPrinterDataExW$handle() {
        return EnumPrinterDataExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static MemorySegment EnumPrinterDataExW$address() {
        return EnumPrinterDataExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPBYTE pEnumValues, DWORD cbEnumValues, LPDWORD pcbEnumValues, LPDWORD pnEnumValues)
     * }
     */
    public static int EnumPrinterDataExW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pEnumValues, int cbEnumValues, MemorySegment pcbEnumValues, MemorySegment pnEnumValues) {
        var mh$ = EnumPrinterDataExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterDataExW", hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pEnumValues, cbEnumValues, pcbEnumValues, pnEnumValues);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterKeyA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrinterKeyA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static FunctionDescriptor EnumPrinterKeyA$descriptor() {
        return EnumPrinterKeyA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static MethodHandle EnumPrinterKeyA$handle() {
        return EnumPrinterKeyA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static MemorySegment EnumPrinterKeyA$address() {
        return EnumPrinterKeyA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName, LPSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static int EnumPrinterKeyA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pSubkey, int cbSubkey, MemorySegment pcbSubkey) {
        var mh$ = EnumPrinterKeyA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterKeyA", hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPrinterKeyW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPrinterKeyW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static FunctionDescriptor EnumPrinterKeyW$descriptor() {
        return EnumPrinterKeyW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static MethodHandle EnumPrinterKeyW$handle() {
        return EnumPrinterKeyW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static MemorySegment EnumPrinterKeyW$address() {
        return EnumPrinterKeyW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumPrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName, LPWSTR pSubkey, DWORD cbSubkey, LPDWORD pcbSubkey)
     * }
     */
    public static int EnumPrinterKeyW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pSubkey, int cbSubkey, MemorySegment pcbSubkey) {
        var mh$ = EnumPrinterKeyW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPrinterKeyW", hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pSubkey, cbSubkey, pcbSubkey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterDataA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetPrinterDataA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor SetPrinterDataA$descriptor() {
        return SetPrinterDataA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MethodHandle SetPrinterDataA$handle() {
        return SetPrinterDataA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MemorySegment SetPrinterDataA$address() {
        return SetPrinterDataA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetPrinterDataA(HANDLE hPrinter, LPSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static int SetPrinterDataA(MemorySegment hPrinter, MemorySegment pValueName, int Type, MemorySegment pData, int cbData) {
        var mh$ = SetPrinterDataA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterDataA", hPrinter, pValueName, Type, pData, cbData);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetPrinterDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor SetPrinterDataW$descriptor() {
        return SetPrinterDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MethodHandle SetPrinterDataW$handle() {
        return SetPrinterDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MemorySegment SetPrinterDataW$address() {
        return SetPrinterDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetPrinterDataW(HANDLE hPrinter, LPWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static int SetPrinterDataW(MemorySegment hPrinter, MemorySegment pValueName, int Type, MemorySegment pData, int cbData) {
        var mh$ = SetPrinterDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterDataW", hPrinter, pValueName, Type, pData, cbData);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterDataExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetPrinterDataExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor SetPrinterDataExA$descriptor() {
        return SetPrinterDataExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MethodHandle SetPrinterDataExA$handle() {
        return SetPrinterDataExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MemorySegment SetPrinterDataExA$address() {
        return SetPrinterDataExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetPrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static int SetPrinterDataExA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName, int Type, MemorySegment pData, int cbData) {
        var mh$ = SetPrinterDataExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterDataExA", hPrinter, pKeyName, pValueName, Type, pData, cbData);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPrinterDataExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetPrinterDataExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static FunctionDescriptor SetPrinterDataExW$descriptor() {
        return SetPrinterDataExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MethodHandle SetPrinterDataExW$handle() {
        return SetPrinterDataExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static MemorySegment SetPrinterDataExW$address() {
        return SetPrinterDataExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetPrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName, DWORD Type, LPBYTE pData, DWORD cbData)
     * }
     */
    public static int SetPrinterDataExW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName, int Type, MemorySegment pData, int cbData) {
        var mh$ = SetPrinterDataExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPrinterDataExW", hPrinter, pKeyName, pValueName, Type, pData, cbData);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName, Type, pData, cbData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDataA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDataA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDataA$descriptor() {
        return DeletePrinterDataA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName)
     * }
     */
    public static MethodHandle DeletePrinterDataA$handle() {
        return DeletePrinterDataA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName)
     * }
     */
    public static MemorySegment DeletePrinterDataA$address() {
        return DeletePrinterDataA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterDataA(HANDLE hPrinter, LPSTR pValueName)
     * }
     */
    public static int DeletePrinterDataA(MemorySegment hPrinter, MemorySegment pValueName) {
        var mh$ = DeletePrinterDataA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDataA", hPrinter, pValueName);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDataW$descriptor() {
        return DeletePrinterDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName)
     * }
     */
    public static MethodHandle DeletePrinterDataW$handle() {
        return DeletePrinterDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName)
     * }
     */
    public static MemorySegment DeletePrinterDataW$address() {
        return DeletePrinterDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterDataW(HANDLE hPrinter, LPWSTR pValueName)
     * }
     */
    public static int DeletePrinterDataW(MemorySegment hPrinter, MemorySegment pValueName) {
        var mh$ = DeletePrinterDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDataW", hPrinter, pValueName);
            }
            return (int)mh$.invokeExact(hPrinter, pValueName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDataExA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDataExA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDataExA$descriptor() {
        return DeletePrinterDataExA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName)
     * }
     */
    public static MethodHandle DeletePrinterDataExA$handle() {
        return DeletePrinterDataExA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName)
     * }
     */
    public static MemorySegment DeletePrinterDataExA$address() {
        return DeletePrinterDataExA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExA(HANDLE hPrinter, LPCSTR pKeyName, LPCSTR pValueName)
     * }
     */
    public static int DeletePrinterDataExA(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName) {
        var mh$ = DeletePrinterDataExA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDataExA", hPrinter, pKeyName, pValueName);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDataExW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDataExW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName)
     * }
     */
    public static FunctionDescriptor DeletePrinterDataExW$descriptor() {
        return DeletePrinterDataExW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName)
     * }
     */
    public static MethodHandle DeletePrinterDataExW$handle() {
        return DeletePrinterDataExW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName)
     * }
     */
    public static MemorySegment DeletePrinterDataExW$address() {
        return DeletePrinterDataExW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterDataExW(HANDLE hPrinter, LPCWSTR pKeyName, LPCWSTR pValueName)
     * }
     */
    public static int DeletePrinterDataExW(MemorySegment hPrinter, MemorySegment pKeyName, MemorySegment pValueName) {
        var mh$ = DeletePrinterDataExW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDataExW", hPrinter, pKeyName, pValueName);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName, pValueName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterKeyA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterKeyA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName)
     * }
     */
    public static FunctionDescriptor DeletePrinterKeyA$descriptor() {
        return DeletePrinterKeyA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName)
     * }
     */
    public static MethodHandle DeletePrinterKeyA$handle() {
        return DeletePrinterKeyA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName)
     * }
     */
    public static MemorySegment DeletePrinterKeyA$address() {
        return DeletePrinterKeyA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyA(HANDLE hPrinter, LPCSTR pKeyName)
     * }
     */
    public static int DeletePrinterKeyA(MemorySegment hPrinter, MemorySegment pKeyName) {
        var mh$ = DeletePrinterKeyA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterKeyA", hPrinter, pKeyName);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterKeyW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterKeyW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName)
     * }
     */
    public static FunctionDescriptor DeletePrinterKeyW$descriptor() {
        return DeletePrinterKeyW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName)
     * }
     */
    public static MethodHandle DeletePrinterKeyW$handle() {
        return DeletePrinterKeyW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName)
     * }
     */
    public static MemorySegment DeletePrinterKeyW$address() {
        return DeletePrinterKeyW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeletePrinterKeyW(HANDLE hPrinter, LPCWSTR pKeyName)
     * }
     */
    public static int DeletePrinterKeyW(MemorySegment hPrinter, MemorySegment pKeyName) {
        var mh$ = DeletePrinterKeyW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterKeyW", hPrinter, pKeyName);
            }
            return (int)mh$.invokeExact(hPrinter, pKeyName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
     *     WORD Type;
     *     WORD Reserved0;
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     DWORD Count;
     *     PWORD pFields;
     * } *PPRINTER_NOTIFY_OPTIONS_TYPE
     * }
     */
    public static final AddressLayout PPRINTER_NOTIFY_OPTIONS_TYPE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
     *     WORD Type;
     *     WORD Reserved0;
     *     DWORD Reserved1;
     *     DWORD Reserved2;
     *     DWORD Count;
     *     PWORD pFields;
     * } *LPPRINTER_NOTIFY_OPTIONS_TYPE
     * }
     */
    public static final AddressLayout LPPRINTER_NOTIFY_OPTIONS_TYPE = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_OPTIONS {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
     * } *PPRINTER_NOTIFY_OPTIONS
     * }
     */
    public static final AddressLayout PPRINTER_NOTIFY_OPTIONS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_OPTIONS {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
     * } *LPPRINTER_NOTIFY_OPTIONS
     * }
     */
    public static final AddressLayout LPPRINTER_NOTIFY_OPTIONS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_INFO_DATA {
     *     WORD Type;
     *     WORD Field;
     *     DWORD Reserved;
     *     DWORD Id;
     *     union {
     *         DWORD adwData[2];
     *         struct {
     *             DWORD cbBuf;
     *             LPVOID pBuf;
     *         } Data;
     *     } NotifyData;
     * } *PPRINTER_NOTIFY_INFO_DATA
     * }
     */
    public static final AddressLayout PPRINTER_NOTIFY_INFO_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_INFO_DATA {
     *     WORD Type;
     *     WORD Field;
     *     DWORD Reserved;
     *     DWORD Id;
     *     union {
     *         DWORD adwData[2];
     *         struct {
     *             DWORD cbBuf;
     *             LPVOID pBuf;
     *         } Data;
     *     } NotifyData;
     * } *LPPRINTER_NOTIFY_INFO_DATA
     * }
     */
    public static final AddressLayout LPPRINTER_NOTIFY_INFO_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     PRINTER_NOTIFY_INFO_DATA aData[1];
     * } *PPRINTER_NOTIFY_INFO
     * }
     */
    public static final AddressLayout PPRINTER_NOTIFY_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_NOTIFY_INFO {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     PRINTER_NOTIFY_INFO_DATA aData[1];
     * } *LPPRINTER_NOTIFY_INFO
     * }
     */
    public static final AddressLayout LPPRINTER_NOTIFY_INFO = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BINARY_CONTAINER {
     *     DWORD cbBuf;
     *     LPBYTE pData;
     * } *PBINARY_CONTAINER
     * }
     */
    public static final AddressLayout PBINARY_CONTAINER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_DATA {
     *     DWORD dwBidiType;
     *     union {
     *         BOOL bData;
     *         LONG iData;
     *         LPWSTR sData;
     *         FLOAT fData;
     *         BINARY_CONTAINER biData;
     *     } u;
     * } *PBIDI_DATA
     * }
     */
    public static final AddressLayout PBIDI_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_DATA {
     *     DWORD dwBidiType;
     *     union {
     *         BOOL bData;
     *         LONG iData;
     *         LPWSTR sData;
     *         FLOAT fData;
     *         BINARY_CONTAINER biData;
     *     } u;
     * } *LPBIDI_DATA
     * }
     */
    public static final AddressLayout LPBIDI_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_REQUEST_DATA {
     *     DWORD dwReqNumber;
     *     LPWSTR pSchema;
     *     BIDI_DATA data;
     * } *PBIDI_REQUEST_DATA
     * }
     */
    public static final AddressLayout PBIDI_REQUEST_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_REQUEST_DATA {
     *     DWORD dwReqNumber;
     *     LPWSTR pSchema;
     *     BIDI_DATA data;
     * } *LPBIDI_REQUEST_DATA
     * }
     */
    public static final AddressLayout LPBIDI_REQUEST_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_REQUEST_CONTAINER {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     BIDI_REQUEST_DATA aData[1];
     * } *PBIDI_REQUEST_CONTAINER
     * }
     */
    public static final AddressLayout PBIDI_REQUEST_CONTAINER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_REQUEST_CONTAINER {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     BIDI_REQUEST_DATA aData[1];
     * } *LPBIDI_REQUEST_CONTAINER
     * }
     */
    public static final AddressLayout LPBIDI_REQUEST_CONTAINER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_RESPONSE_DATA {
     *     DWORD dwResult;
     *     DWORD dwReqNumber;
     *     LPWSTR pSchema;
     *     BIDI_DATA data;
     * } *PBIDI_RESPONSE_DATA
     * }
     */
    public static final AddressLayout PBIDI_RESPONSE_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_RESPONSE_DATA {
     *     DWORD dwResult;
     *     DWORD dwReqNumber;
     *     LPWSTR pSchema;
     *     BIDI_DATA data;
     * } *LPBIDI_RESPONSE_DATA
     * }
     */
    public static final AddressLayout LPBIDI_RESPONSE_DATA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_RESPONSE_CONTAINER {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     BIDI_RESPONSE_DATA aData[1];
     * } *PBIDI_RESPONSE_CONTAINER
     * }
     */
    public static final AddressLayout PBIDI_RESPONSE_CONTAINER = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _BIDI_RESPONSE_CONTAINER {
     *     DWORD Version;
     *     DWORD Flags;
     *     DWORD Count;
     *     BIDI_RESPONSE_DATA aData[1];
     * } *LPBIDI_RESPONSE_CONTAINER
     * }
     */
    public static final AddressLayout LPBIDI_RESPONSE_CONTAINER = winapi.C_POINTER;
    private static final int BIDI_NULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_NULL = 0
     * }
     */
    public static int BIDI_NULL() {
        return BIDI_NULL;
    }
    private static final int BIDI_INT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_INT = 1
     * }
     */
    public static int BIDI_INT() {
        return BIDI_INT;
    }
    private static final int BIDI_FLOAT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_FLOAT = 2
     * }
     */
    public static int BIDI_FLOAT() {
        return BIDI_FLOAT;
    }
    private static final int BIDI_BOOL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_BOOL = 3
     * }
     */
    public static int BIDI_BOOL() {
        return BIDI_BOOL;
    }
    private static final int BIDI_STRING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_STRING = 4
     * }
     */
    public static int BIDI_STRING() {
        return BIDI_STRING;
    }
    private static final int BIDI_TEXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_TEXT = 5
     * }
     */
    public static int BIDI_TEXT() {
        return BIDI_TEXT;
    }
    private static final int BIDI_ENUM = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_ENUM = 6
     * }
     */
    public static int BIDI_ENUM() {
        return BIDI_ENUM;
    }
    private static final int BIDI_BLOB = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BIDI_BLOB = 7
     * }
     */
    public static int BIDI_BLOB() {
        return BIDI_BLOB;
    }

    private static class WaitForPrinterChange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("WaitForPrinterChange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD WaitForPrinterChange(HANDLE hPrinter, DWORD Flags)
     * }
     */
    public static FunctionDescriptor WaitForPrinterChange$descriptor() {
        return WaitForPrinterChange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD WaitForPrinterChange(HANDLE hPrinter, DWORD Flags)
     * }
     */
    public static MethodHandle WaitForPrinterChange$handle() {
        return WaitForPrinterChange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD WaitForPrinterChange(HANDLE hPrinter, DWORD Flags)
     * }
     */
    public static MemorySegment WaitForPrinterChange$address() {
        return WaitForPrinterChange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD WaitForPrinterChange(HANDLE hPrinter, DWORD Flags)
     * }
     */
    public static int WaitForPrinterChange(MemorySegment hPrinter, int Flags) {
        var mh$ = WaitForPrinterChange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("WaitForPrinterChange", hPrinter, Flags);
            }
            return (int)mh$.invokeExact(hPrinter, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindFirstPrinterChangeNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FindFirstPrinterChangeNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions)
     * }
     */
    public static FunctionDescriptor FindFirstPrinterChangeNotification$descriptor() {
        return FindFirstPrinterChangeNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions)
     * }
     */
    public static MethodHandle FindFirstPrinterChangeNotification$handle() {
        return FindFirstPrinterChangeNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions)
     * }
     */
    public static MemorySegment FindFirstPrinterChangeNotification$address() {
        return FindFirstPrinterChangeNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE FindFirstPrinterChangeNotification(HANDLE hPrinter, DWORD fdwFilter, DWORD fdwOptions, PVOID pPrinterNotifyOptions)
     * }
     */
    public static MemorySegment FindFirstPrinterChangeNotification(MemorySegment hPrinter, int fdwFilter, int fdwOptions, MemorySegment pPrinterNotifyOptions) {
        var mh$ = FindFirstPrinterChangeNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindFirstPrinterChangeNotification", hPrinter, fdwFilter, fdwOptions, pPrinterNotifyOptions);
            }
            return (MemorySegment)mh$.invokeExact(hPrinter, fdwFilter, fdwOptions, pPrinterNotifyOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindNextPrinterChangeNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FindNextPrinterChangeNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo)
     * }
     */
    public static FunctionDescriptor FindNextPrinterChangeNotification$descriptor() {
        return FindNextPrinterChangeNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo)
     * }
     */
    public static MethodHandle FindNextPrinterChangeNotification$handle() {
        return FindNextPrinterChangeNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo)
     * }
     */
    public static MemorySegment FindNextPrinterChangeNotification$address() {
        return FindNextPrinterChangeNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindNextPrinterChangeNotification(HANDLE hChange, PDWORD pdwChange, LPVOID pvReserved, LPVOID *ppPrinterNotifyInfo)
     * }
     */
    public static int FindNextPrinterChangeNotification(MemorySegment hChange, MemorySegment pdwChange, MemorySegment pvReserved, MemorySegment ppPrinterNotifyInfo) {
        var mh$ = FindNextPrinterChangeNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindNextPrinterChangeNotification", hChange, pdwChange, pvReserved, ppPrinterNotifyInfo);
            }
            return (int)mh$.invokeExact(hChange, pdwChange, pvReserved, ppPrinterNotifyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePrinterNotifyInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FreePrinterNotifyInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo)
     * }
     */
    public static FunctionDescriptor FreePrinterNotifyInfo$descriptor() {
        return FreePrinterNotifyInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo)
     * }
     */
    public static MethodHandle FreePrinterNotifyInfo$handle() {
        return FreePrinterNotifyInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo)
     * }
     */
    public static MemorySegment FreePrinterNotifyInfo$address() {
        return FreePrinterNotifyInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FreePrinterNotifyInfo(PPRINTER_NOTIFY_INFO pPrinterNotifyInfo)
     * }
     */
    public static int FreePrinterNotifyInfo(MemorySegment pPrinterNotifyInfo) {
        var mh$ = FreePrinterNotifyInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePrinterNotifyInfo", pPrinterNotifyInfo);
            }
            return (int)mh$.invokeExact(pPrinterNotifyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FindClosePrinterChangeNotification {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FindClosePrinterChangeNotification");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL FindClosePrinterChangeNotification(HANDLE hChange)
     * }
     */
    public static FunctionDescriptor FindClosePrinterChangeNotification$descriptor() {
        return FindClosePrinterChangeNotification.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL FindClosePrinterChangeNotification(HANDLE hChange)
     * }
     */
    public static MethodHandle FindClosePrinterChangeNotification$handle() {
        return FindClosePrinterChangeNotification.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL FindClosePrinterChangeNotification(HANDLE hChange)
     * }
     */
    public static MemorySegment FindClosePrinterChangeNotification$address() {
        return FindClosePrinterChangeNotification.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL FindClosePrinterChangeNotification(HANDLE hChange)
     * }
     */
    public static int FindClosePrinterChangeNotification(MemorySegment hChange) {
        var mh$ = FindClosePrinterChangeNotification.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FindClosePrinterChangeNotification", hChange);
            }
            return (int)mh$.invokeExact(hChange);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrinterMessageBoxA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PrinterMessageBoxA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType)
     * }
     */
    public static FunctionDescriptor PrinterMessageBoxA$descriptor() {
        return PrinterMessageBoxA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType)
     * }
     */
    public static MethodHandle PrinterMessageBoxA$handle() {
        return PrinterMessageBoxA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType)
     * }
     */
    public static MemorySegment PrinterMessageBoxA$address() {
        return PrinterMessageBoxA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxA(HANDLE hPrinter, DWORD Error, HWND hWnd, LPSTR pText, LPSTR pCaption, DWORD dwType)
     * }
     */
    public static int PrinterMessageBoxA(MemorySegment hPrinter, int Error_, MemorySegment hWnd, MemorySegment pText, MemorySegment pCaption, int dwType) {
        var mh$ = PrinterMessageBoxA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrinterMessageBoxA", hPrinter, Error_, hWnd, pText, pCaption, dwType);
            }
            return (int)mh$.invokeExact(hPrinter, Error_, hWnd, pText, pCaption, dwType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class PrinterMessageBoxW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("PrinterMessageBoxW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType)
     * }
     */
    public static FunctionDescriptor PrinterMessageBoxW$descriptor() {
        return PrinterMessageBoxW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType)
     * }
     */
    public static MethodHandle PrinterMessageBoxW$handle() {
        return PrinterMessageBoxW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType)
     * }
     */
    public static MemorySegment PrinterMessageBoxW$address() {
        return PrinterMessageBoxW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD PrinterMessageBoxW(HANDLE hPrinter, DWORD Error, HWND hWnd, LPWSTR pText, LPWSTR pCaption, DWORD dwType)
     * }
     */
    public static int PrinterMessageBoxW(MemorySegment hPrinter, int Error_, MemorySegment hWnd, MemorySegment pText, MemorySegment pCaption, int dwType) {
        var mh$ = PrinterMessageBoxW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("PrinterMessageBoxW", hPrinter, Error_, hWnd, pText, pCaption, dwType);
            }
            return (int)mh$.invokeExact(hPrinter, Error_, hWnd, pText, pCaption, dwType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ClosePrinter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ClosePrinter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ClosePrinter(HANDLE hPrinter)
     * }
     */
    public static FunctionDescriptor ClosePrinter$descriptor() {
        return ClosePrinter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ClosePrinter(HANDLE hPrinter)
     * }
     */
    public static MethodHandle ClosePrinter$handle() {
        return ClosePrinter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ClosePrinter(HANDLE hPrinter)
     * }
     */
    public static MemorySegment ClosePrinter$address() {
        return ClosePrinter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ClosePrinter(HANDLE hPrinter)
     * }
     */
    public static int ClosePrinter(MemorySegment hPrinter) {
        var mh$ = ClosePrinter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ClosePrinter", hPrinter);
            }
            return (int)mh$.invokeExact(hPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddFormA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddFormA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static FunctionDescriptor AddFormA$descriptor() {
        return AddFormA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MethodHandle AddFormA$handle() {
        return AddFormA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MemorySegment AddFormA$address() {
        return AddFormA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddFormA(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static int AddFormA(MemorySegment hPrinter, int Level, MemorySegment pForm) {
        var mh$ = AddFormA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddFormA", hPrinter, Level, pForm);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddFormW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddFormW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static FunctionDescriptor AddFormW$descriptor() {
        return AddFormW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MethodHandle AddFormW$handle() {
        return AddFormW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MemorySegment AddFormW$address() {
        return AddFormW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddFormW(HANDLE hPrinter, DWORD Level, LPBYTE pForm)
     * }
     */
    public static int AddFormW(MemorySegment hPrinter, int Level, MemorySegment pForm) {
        var mh$ = AddFormW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddFormW", hPrinter, Level, pForm);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteFormA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeleteFormA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteFormA(HANDLE hPrinter, LPSTR pFormName)
     * }
     */
    public static FunctionDescriptor DeleteFormA$descriptor() {
        return DeleteFormA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteFormA(HANDLE hPrinter, LPSTR pFormName)
     * }
     */
    public static MethodHandle DeleteFormA$handle() {
        return DeleteFormA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteFormA(HANDLE hPrinter, LPSTR pFormName)
     * }
     */
    public static MemorySegment DeleteFormA$address() {
        return DeleteFormA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteFormA(HANDLE hPrinter, LPSTR pFormName)
     * }
     */
    public static int DeleteFormA(MemorySegment hPrinter, MemorySegment pFormName) {
        var mh$ = DeleteFormA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteFormA", hPrinter, pFormName);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteFormW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeleteFormW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteFormW(HANDLE hPrinter, LPWSTR pFormName)
     * }
     */
    public static FunctionDescriptor DeleteFormW$descriptor() {
        return DeleteFormW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteFormW(HANDLE hPrinter, LPWSTR pFormName)
     * }
     */
    public static MethodHandle DeleteFormW$handle() {
        return DeleteFormW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteFormW(HANDLE hPrinter, LPWSTR pFormName)
     * }
     */
    public static MemorySegment DeleteFormW$address() {
        return DeleteFormW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteFormW(HANDLE hPrinter, LPWSTR pFormName)
     * }
     */
    public static int DeleteFormW(MemorySegment hPrinter, MemorySegment pFormName) {
        var mh$ = DeleteFormW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteFormW", hPrinter, pFormName);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetFormA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetFormA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetFormA$descriptor() {
        return GetFormA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetFormA$handle() {
        return GetFormA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetFormA$address() {
        return GetFormA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetFormA(MemorySegment hPrinter, MemorySegment pFormName, int Level, MemorySegment pForm, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetFormA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetFormA", hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetFormW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetFormW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetFormW$descriptor() {
        return GetFormW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetFormW$handle() {
        return GetFormW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetFormW$address() {
        return GetFormW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetFormW(MemorySegment hPrinter, MemorySegment pFormName, int Level, MemorySegment pForm, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetFormW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetFormW", hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetFormA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetFormA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static FunctionDescriptor SetFormA$descriptor() {
        return SetFormA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MethodHandle SetFormA$handle() {
        return SetFormA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MemorySegment SetFormA$address() {
        return SetFormA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetFormA(HANDLE hPrinter, LPSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static int SetFormA(MemorySegment hPrinter, MemorySegment pFormName, int Level, MemorySegment pForm) {
        var mh$ = SetFormA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetFormA", hPrinter, pFormName, Level, pForm);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetFormW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetFormW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static FunctionDescriptor SetFormW$descriptor() {
        return SetFormW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MethodHandle SetFormW$handle() {
        return SetFormW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static MemorySegment SetFormW$address() {
        return SetFormW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetFormW(HANDLE hPrinter, LPWSTR pFormName, DWORD Level, LPBYTE pForm)
     * }
     */
    public static int SetFormW(MemorySegment hPrinter, MemorySegment pFormName, int Level, MemorySegment pForm) {
        var mh$ = SetFormW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetFormW", hPrinter, pFormName, Level, pForm);
            }
            return (int)mh$.invokeExact(hPrinter, pFormName, Level, pForm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumFormsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumFormsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumFormsA$descriptor() {
        return EnumFormsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumFormsA$handle() {
        return EnumFormsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumFormsA$address() {
        return EnumFormsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumFormsA(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumFormsA(MemorySegment hPrinter, int Level, MemorySegment pForm, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumFormsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumFormsA", hPrinter, Level, pForm, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pForm, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumFormsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumFormsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumFormsW$descriptor() {
        return EnumFormsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumFormsW$handle() {
        return EnumFormsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumFormsW$address() {
        return EnumFormsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumFormsW(HANDLE hPrinter, DWORD Level, LPBYTE pForm, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumFormsW(MemorySegment hPrinter, int Level, MemorySegment pForm, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumFormsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumFormsW", hPrinter, Level, pForm, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(hPrinter, Level, pForm, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumMonitorsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumMonitorsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumMonitorsA$descriptor() {
        return EnumMonitorsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumMonitorsA$handle() {
        return EnumMonitorsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumMonitorsA$address() {
        return EnumMonitorsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumMonitorsA(LPSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumMonitorsA(MemorySegment pName, int Level, MemorySegment pMonitor, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumMonitorsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumMonitorsA", pName, Level, pMonitor, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, Level, pMonitor, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumMonitorsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumMonitorsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumMonitorsW$descriptor() {
        return EnumMonitorsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumMonitorsW$handle() {
        return EnumMonitorsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumMonitorsW$address() {
        return EnumMonitorsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumMonitorsW(LPWSTR pName, DWORD Level, LPBYTE pMonitor, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumMonitorsW(MemorySegment pName, int Level, MemorySegment pMonitor, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumMonitorsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumMonitorsW", pName, Level, pMonitor, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, Level, pMonitor, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddMonitorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddMonitorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static FunctionDescriptor AddMonitorA$descriptor() {
        return AddMonitorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static MethodHandle AddMonitorA$handle() {
        return AddMonitorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static MemorySegment AddMonitorA$address() {
        return AddMonitorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddMonitorA(LPSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static int AddMonitorA(MemorySegment pName, int Level, MemorySegment pMonitors) {
        var mh$ = AddMonitorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddMonitorA", pName, Level, pMonitors);
            }
            return (int)mh$.invokeExact(pName, Level, pMonitors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddMonitorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddMonitorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static FunctionDescriptor AddMonitorW$descriptor() {
        return AddMonitorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static MethodHandle AddMonitorW$handle() {
        return AddMonitorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static MemorySegment AddMonitorW$address() {
        return AddMonitorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddMonitorW(LPWSTR pName, DWORD Level, LPBYTE pMonitors)
     * }
     */
    public static int AddMonitorW(MemorySegment pName, int Level, MemorySegment pMonitors) {
        var mh$ = AddMonitorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddMonitorW", pName, Level, pMonitors);
            }
            return (int)mh$.invokeExact(pName, Level, pMonitors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteMonitorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeleteMonitorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName)
     * }
     */
    public static FunctionDescriptor DeleteMonitorA$descriptor() {
        return DeleteMonitorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName)
     * }
     */
    public static MethodHandle DeleteMonitorA$handle() {
        return DeleteMonitorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName)
     * }
     */
    public static MemorySegment DeleteMonitorA$address() {
        return DeleteMonitorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteMonitorA(LPSTR pName, LPSTR pEnvironment, LPSTR pMonitorName)
     * }
     */
    public static int DeleteMonitorA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pMonitorName) {
        var mh$ = DeleteMonitorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteMonitorA", pName, pEnvironment, pMonitorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pMonitorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteMonitorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeleteMonitorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName)
     * }
     */
    public static FunctionDescriptor DeleteMonitorW$descriptor() {
        return DeleteMonitorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName)
     * }
     */
    public static MethodHandle DeleteMonitorW$handle() {
        return DeleteMonitorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName)
     * }
     */
    public static MemorySegment DeleteMonitorW$address() {
        return DeleteMonitorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeleteMonitorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pMonitorName)
     * }
     */
    public static int DeleteMonitorW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pMonitorName) {
        var mh$ = DeleteMonitorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteMonitorW", pName, pEnvironment, pMonitorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pMonitorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPortsA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPortsA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPortsA$descriptor() {
        return EnumPortsA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPortsA$handle() {
        return EnumPortsA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPortsA$address() {
        return EnumPortsA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPortsA(LPSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPortsA(MemorySegment pName, int Level, MemorySegment pPort, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPortsA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPortsA", pName, Level, pPort, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, Level, pPort, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumPortsW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumPortsW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static FunctionDescriptor EnumPortsW$descriptor() {
        return EnumPortsW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MethodHandle EnumPortsW$handle() {
        return EnumPortsW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static MemorySegment EnumPortsW$address() {
        return EnumPortsW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL EnumPortsW(LPWSTR pName, DWORD Level, LPBYTE pPort, DWORD cbBuf, LPDWORD pcbNeeded, LPDWORD pcReturned)
     * }
     */
    public static int EnumPortsW(MemorySegment pName, int Level, MemorySegment pPort, int cbBuf, MemorySegment pcbNeeded, MemorySegment pcReturned) {
        var mh$ = EnumPortsW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumPortsW", pName, Level, pPort, cbBuf, pcbNeeded, pcReturned);
            }
            return (int)mh$.invokeExact(pName, Level, pPort, cbBuf, pcbNeeded, pcReturned);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPortA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPortA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName)
     * }
     */
    public static FunctionDescriptor AddPortA$descriptor() {
        return AddPortA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName)
     * }
     */
    public static MethodHandle AddPortA$handle() {
        return AddPortA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName)
     * }
     */
    public static MemorySegment AddPortA$address() {
        return AddPortA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPortA(LPSTR pName, HWND hWnd, LPSTR pMonitorName)
     * }
     */
    public static int AddPortA(MemorySegment pName, MemorySegment hWnd, MemorySegment pMonitorName) {
        var mh$ = AddPortA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPortA", pName, hWnd, pMonitorName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pMonitorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPortW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPortW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName)
     * }
     */
    public static FunctionDescriptor AddPortW$descriptor() {
        return AddPortW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName)
     * }
     */
    public static MethodHandle AddPortW$handle() {
        return AddPortW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName)
     * }
     */
    public static MemorySegment AddPortW$address() {
        return AddPortW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPortW(LPWSTR pName, HWND hWnd, LPWSTR pMonitorName)
     * }
     */
    public static int AddPortW(MemorySegment pName, MemorySegment hWnd, MemorySegment pMonitorName) {
        var mh$ = AddPortW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPortW", pName, hWnd, pMonitorName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pMonitorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigurePortA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ConfigurePortA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static FunctionDescriptor ConfigurePortA$descriptor() {
        return ConfigurePortA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static MethodHandle ConfigurePortA$handle() {
        return ConfigurePortA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static MemorySegment ConfigurePortA$address() {
        return ConfigurePortA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ConfigurePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static int ConfigurePortA(MemorySegment pName, MemorySegment hWnd, MemorySegment pPortName) {
        var mh$ = ConfigurePortA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigurePortA", pName, hWnd, pPortName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pPortName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConfigurePortW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ConfigurePortW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static FunctionDescriptor ConfigurePortW$descriptor() {
        return ConfigurePortW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static MethodHandle ConfigurePortW$handle() {
        return ConfigurePortW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static MemorySegment ConfigurePortW$address() {
        return ConfigurePortW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL ConfigurePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static int ConfigurePortW(MemorySegment pName, MemorySegment hWnd, MemorySegment pPortName) {
        var mh$ = ConfigurePortW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConfigurePortW", pName, hWnd, pPortName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pPortName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePortA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePortA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static FunctionDescriptor DeletePortA$descriptor() {
        return DeletePortA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static MethodHandle DeletePortA$handle() {
        return DeletePortA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static MemorySegment DeletePortA$address() {
        return DeletePortA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePortA(LPSTR pName, HWND hWnd, LPSTR pPortName)
     * }
     */
    public static int DeletePortA(MemorySegment pName, MemorySegment hWnd, MemorySegment pPortName) {
        var mh$ = DeletePortA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePortA", pName, hWnd, pPortName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pPortName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePortW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePortW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static FunctionDescriptor DeletePortW$descriptor() {
        return DeletePortW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static MethodHandle DeletePortW$handle() {
        return DeletePortW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static MemorySegment DeletePortW$address() {
        return DeletePortW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePortW(LPWSTR pName, HWND hWnd, LPWSTR pPortName)
     * }
     */
    public static int DeletePortW(MemorySegment pName, MemorySegment hWnd, MemorySegment pPortName) {
        var mh$ = DeletePortW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePortW", pName, hWnd, pPortName);
            }
            return (int)mh$.invokeExact(pName, hWnd, pPortName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class XcvDataW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("XcvDataW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus)
     * }
     */
    public static FunctionDescriptor XcvDataW$descriptor() {
        return XcvDataW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus)
     * }
     */
    public static MethodHandle XcvDataW$handle() {
        return XcvDataW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus)
     * }
     */
    public static MemorySegment XcvDataW$address() {
        return XcvDataW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL XcvDataW(HANDLE hXcv, PCWSTR pszDataName, PBYTE pInputData, DWORD cbInputData, PBYTE pOutputData, DWORD cbOutputData, PDWORD pcbOutputNeeded, PDWORD pdwStatus)
     * }
     */
    public static int XcvDataW(MemorySegment hXcv, MemorySegment pszDataName, MemorySegment pInputData, int cbInputData, MemorySegment pOutputData, int cbOutputData, MemorySegment pcbOutputNeeded, MemorySegment pdwStatus) {
        var mh$ = XcvDataW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("XcvDataW", hXcv, pszDataName, pInputData, cbInputData, pOutputData, cbOutputData, pcbOutputNeeded, pdwStatus);
            }
            return (int)mh$.invokeExact(hXcv, pszDataName, pInputData, cbInputData, pOutputData, cbOutputData, pcbOutputNeeded, pdwStatus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDefaultPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetDefaultPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static FunctionDescriptor GetDefaultPrinterA$descriptor() {
        return GetDefaultPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static MethodHandle GetDefaultPrinterA$handle() {
        return GetDefaultPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static MemorySegment GetDefaultPrinterA$address() {
        return GetDefaultPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterA(LPSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static int GetDefaultPrinterA(MemorySegment pszBuffer, MemorySegment pcchBuffer) {
        var mh$ = GetDefaultPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDefaultPrinterA", pszBuffer, pcchBuffer);
            }
            return (int)mh$.invokeExact(pszBuffer, pcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetDefaultPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetDefaultPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static FunctionDescriptor GetDefaultPrinterW$descriptor() {
        return GetDefaultPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static MethodHandle GetDefaultPrinterW$handle() {
        return GetDefaultPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static MemorySegment GetDefaultPrinterW$address() {
        return GetDefaultPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetDefaultPrinterW(LPWSTR pszBuffer, LPDWORD pcchBuffer)
     * }
     */
    public static int GetDefaultPrinterW(MemorySegment pszBuffer, MemorySegment pcchBuffer) {
        var mh$ = GetDefaultPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetDefaultPrinterW", pszBuffer, pcchBuffer);
            }
            return (int)mh$.invokeExact(pszBuffer, pcchBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetDefaultPrinterA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetDefaultPrinterA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterA(LPCSTR pszPrinter)
     * }
     */
    public static FunctionDescriptor SetDefaultPrinterA$descriptor() {
        return SetDefaultPrinterA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterA(LPCSTR pszPrinter)
     * }
     */
    public static MethodHandle SetDefaultPrinterA$handle() {
        return SetDefaultPrinterA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterA(LPCSTR pszPrinter)
     * }
     */
    public static MemorySegment SetDefaultPrinterA$address() {
        return SetDefaultPrinterA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterA(LPCSTR pszPrinter)
     * }
     */
    public static int SetDefaultPrinterA(MemorySegment pszPrinter) {
        var mh$ = SetDefaultPrinterA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetDefaultPrinterA", pszPrinter);
            }
            return (int)mh$.invokeExact(pszPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetDefaultPrinterW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetDefaultPrinterW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterW(LPCWSTR pszPrinter)
     * }
     */
    public static FunctionDescriptor SetDefaultPrinterW$descriptor() {
        return SetDefaultPrinterW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterW(LPCWSTR pszPrinter)
     * }
     */
    public static MethodHandle SetDefaultPrinterW$handle() {
        return SetDefaultPrinterW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterW(LPCWSTR pszPrinter)
     * }
     */
    public static MemorySegment SetDefaultPrinterW$address() {
        return SetDefaultPrinterW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetDefaultPrinterW(LPCWSTR pszPrinter)
     * }
     */
    public static int SetDefaultPrinterW(MemorySegment pszPrinter) {
        var mh$ = SetDefaultPrinterW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetDefaultPrinterW", pszPrinter);
            }
            return (int)mh$.invokeExact(pszPrinter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPortA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetPortA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static FunctionDescriptor SetPortA$descriptor() {
        return SetPortA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static MethodHandle SetPortA$handle() {
        return SetPortA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static MemorySegment SetPortA$address() {
        return SetPortA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetPortA(LPSTR pName, LPSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static int SetPortA(MemorySegment pName, MemorySegment pPortName, int dwLevel, MemorySegment pPortInfo) {
        var mh$ = SetPortA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPortA", pName, pPortName, dwLevel, pPortInfo);
            }
            return (int)mh$.invokeExact(pName, pPortName, dwLevel, pPortInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetPortW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetPortW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static FunctionDescriptor SetPortW$descriptor() {
        return SetPortW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static MethodHandle SetPortW$handle() {
        return SetPortW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static MemorySegment SetPortW$address() {
        return SetPortW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL SetPortW(LPWSTR pName, LPWSTR pPortName, DWORD dwLevel, LPBYTE pPortInfo)
     * }
     */
    public static int SetPortW(MemorySegment pName, MemorySegment pPortName, int dwLevel, MemorySegment pPortInfo) {
        var mh$ = SetPortW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetPortW", pName, pPortName, dwLevel, pPortInfo);
            }
            return (int)mh$.invokeExact(pName, pPortName, dwLevel, pPortInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterConnectionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterConnectionA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionA(LPSTR pName)
     * }
     */
    public static FunctionDescriptor AddPrinterConnectionA$descriptor() {
        return AddPrinterConnectionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionA(LPSTR pName)
     * }
     */
    public static MethodHandle AddPrinterConnectionA$handle() {
        return AddPrinterConnectionA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionA(LPSTR pName)
     * }
     */
    public static MemorySegment AddPrinterConnectionA$address() {
        return AddPrinterConnectionA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionA(LPSTR pName)
     * }
     */
    public static int AddPrinterConnectionA(MemorySegment pName) {
        var mh$ = AddPrinterConnectionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterConnectionA", pName);
            }
            return (int)mh$.invokeExact(pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterConnectionW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionW(LPWSTR pName)
     * }
     */
    public static FunctionDescriptor AddPrinterConnectionW$descriptor() {
        return AddPrinterConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionW(LPWSTR pName)
     * }
     */
    public static MethodHandle AddPrinterConnectionW$handle() {
        return AddPrinterConnectionW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionW(LPWSTR pName)
     * }
     */
    public static MemorySegment AddPrinterConnectionW$address() {
        return AddPrinterConnectionW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterConnectionW(LPWSTR pName)
     * }
     */
    public static int AddPrinterConnectionW(MemorySegment pName) {
        var mh$ = AddPrinterConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterConnectionW", pName);
            }
            return (int)mh$.invokeExact(pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterConnectionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterConnectionA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionA(LPSTR pName)
     * }
     */
    public static FunctionDescriptor DeletePrinterConnectionA$descriptor() {
        return DeletePrinterConnectionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionA(LPSTR pName)
     * }
     */
    public static MethodHandle DeletePrinterConnectionA$handle() {
        return DeletePrinterConnectionA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionA(LPSTR pName)
     * }
     */
    public static MemorySegment DeletePrinterConnectionA$address() {
        return DeletePrinterConnectionA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionA(LPSTR pName)
     * }
     */
    public static int DeletePrinterConnectionA(MemorySegment pName) {
        var mh$ = DeletePrinterConnectionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterConnectionA", pName);
            }
            return (int)mh$.invokeExact(pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterConnectionW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterConnectionW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionW(LPWSTR pName)
     * }
     */
    public static FunctionDescriptor DeletePrinterConnectionW$descriptor() {
        return DeletePrinterConnectionW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionW(LPWSTR pName)
     * }
     */
    public static MethodHandle DeletePrinterConnectionW$handle() {
        return DeletePrinterConnectionW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionW(LPWSTR pName)
     * }
     */
    public static MemorySegment DeletePrinterConnectionW$address() {
        return DeletePrinterConnectionW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrinterConnectionW(LPWSTR pName)
     * }
     */
    public static int DeletePrinterConnectionW(MemorySegment pName) {
        var mh$ = DeletePrinterConnectionW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterConnectionW", pName);
            }
            return (int)mh$.invokeExact(pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ConnectToPrinterDlg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ConnectToPrinterDlg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HANDLE ConnectToPrinterDlg(HWND hwnd, DWORD Flags)
     * }
     */
    public static FunctionDescriptor ConnectToPrinterDlg$descriptor() {
        return ConnectToPrinterDlg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HANDLE ConnectToPrinterDlg(HWND hwnd, DWORD Flags)
     * }
     */
    public static MethodHandle ConnectToPrinterDlg$handle() {
        return ConnectToPrinterDlg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HANDLE ConnectToPrinterDlg(HWND hwnd, DWORD Flags)
     * }
     */
    public static MemorySegment ConnectToPrinterDlg$address() {
        return ConnectToPrinterDlg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HANDLE ConnectToPrinterDlg(HWND hwnd, DWORD Flags)
     * }
     */
    public static MemorySegment ConnectToPrinterDlg(MemorySegment hwnd, int Flags) {
        var mh$ = ConnectToPrinterDlg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ConnectToPrinterDlg", hwnd, Flags);
            }
            return (MemorySegment)mh$.invokeExact(hwnd, Flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_1A {
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDLLName;
     * } *PPROVIDOR_INFO_1A
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_1A {
     *     LPSTR pName;
     *     LPSTR pEnvironment;
     *     LPSTR pDLLName;
     * } *LPPROVIDOR_INFO_1A
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_1W {
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDLLName;
     * } *PPROVIDOR_INFO_1W
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_1W {
     *     LPWSTR pName;
     *     LPWSTR pEnvironment;
     *     LPWSTR pDLLName;
     * } *LPPROVIDOR_INFO_1W
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_1 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_2A {
     *     LPSTR pOrder;
     * } *PPROVIDOR_INFO_2A
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_2A {
     *     LPSTR pOrder;
     * } *LPPROVIDOR_INFO_2A
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_2A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_2W {
     *     LPWSTR pOrder;
     * } *PPROVIDOR_INFO_2W
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PROVIDOR_INFO_2W {
     *     LPWSTR pOrder;
     * } *LPPROVIDOR_INFO_2W
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_2W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2
     * }
     */
    public static final AddressLayout PPROVIDOR_INFO_2 = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2
     * }
     */
    public static final AddressLayout LPPROVIDOR_INFO_2 = winapi.C_POINTER;

    private static class AddPrintProvidorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrintProvidorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static FunctionDescriptor AddPrintProvidorA$descriptor() {
        return AddPrintProvidorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static MethodHandle AddPrintProvidorA$handle() {
        return AddPrintProvidorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static MemorySegment AddPrintProvidorA$address() {
        return AddPrintProvidorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrintProvidorA(LPSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static int AddPrintProvidorA(MemorySegment pName, int Level, MemorySegment pProvidorInfo) {
        var mh$ = AddPrintProvidorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrintProvidorA", pName, Level, pProvidorInfo);
            }
            return (int)mh$.invokeExact(pName, Level, pProvidorInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrintProvidorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrintProvidorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static FunctionDescriptor AddPrintProvidorW$descriptor() {
        return AddPrintProvidorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static MethodHandle AddPrintProvidorW$handle() {
        return AddPrintProvidorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static MemorySegment AddPrintProvidorW$address() {
        return AddPrintProvidorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrintProvidorW(LPWSTR pName, DWORD Level, LPBYTE pProvidorInfo)
     * }
     */
    public static int AddPrintProvidorW(MemorySegment pName, int Level, MemorySegment pProvidorInfo) {
        var mh$ = AddPrintProvidorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrintProvidorW", pName, Level, pProvidorInfo);
            }
            return (int)mh$.invokeExact(pName, Level, pProvidorInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrintProvidorA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrintProvidorA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName)
     * }
     */
    public static FunctionDescriptor DeletePrintProvidorA$descriptor() {
        return DeletePrintProvidorA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName)
     * }
     */
    public static MethodHandle DeletePrintProvidorA$handle() {
        return DeletePrintProvidorA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName)
     * }
     */
    public static MemorySegment DeletePrintProvidorA$address() {
        return DeletePrintProvidorA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorA(LPSTR pName, LPSTR pEnvironment, LPSTR pPrintProvidorName)
     * }
     */
    public static int DeletePrintProvidorA(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPrintProvidorName) {
        var mh$ = DeletePrintProvidorA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrintProvidorA", pName, pEnvironment, pPrintProvidorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProvidorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrintProvidorW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrintProvidorW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName)
     * }
     */
    public static FunctionDescriptor DeletePrintProvidorW$descriptor() {
        return DeletePrintProvidorW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName)
     * }
     */
    public static MethodHandle DeletePrintProvidorW$handle() {
        return DeletePrintProvidorW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName)
     * }
     */
    public static MemorySegment DeletePrintProvidorW$address() {
        return DeletePrintProvidorW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL DeletePrintProvidorW(LPWSTR pName, LPWSTR pEnvironment, LPWSTR pPrintProvidorName)
     * }
     */
    public static int DeletePrintProvidorW(MemorySegment pName, MemorySegment pEnvironment, MemorySegment pPrintProvidorName) {
        var mh$ = DeletePrintProvidorW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrintProvidorW", pName, pEnvironment, pPrintProvidorName);
            }
            return (int)mh$.invokeExact(pName, pEnvironment, pPrintProvidorName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsValidDevmodeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IsValidDevmodeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize)
     * }
     */
    public static FunctionDescriptor IsValidDevmodeA$descriptor() {
        return IsValidDevmodeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize)
     * }
     */
    public static MethodHandle IsValidDevmodeA$handle() {
        return IsValidDevmodeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize)
     * }
     */
    public static MemorySegment IsValidDevmodeA$address() {
        return IsValidDevmodeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsValidDevmodeA(PDEVMODEA pDevmode, size_t DevmodeSize)
     * }
     */
    public static int IsValidDevmodeA(MemorySegment pDevmode, long DevmodeSize) {
        var mh$ = IsValidDevmodeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsValidDevmodeA", pDevmode, DevmodeSize);
            }
            return (int)mh$.invokeExact(pDevmode, DevmodeSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IsValidDevmodeW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IsValidDevmodeW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize)
     * }
     */
    public static FunctionDescriptor IsValidDevmodeW$descriptor() {
        return IsValidDevmodeW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize)
     * }
     */
    public static MethodHandle IsValidDevmodeW$handle() {
        return IsValidDevmodeW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize)
     * }
     */
    public static MemorySegment IsValidDevmodeW$address() {
        return IsValidDevmodeW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL IsValidDevmodeW(PDEVMODEW pDevmode, size_t DevmodeSize)
     * }
     */
    public static int IsValidDevmodeW(MemorySegment pDevmode, long DevmodeSize) {
        var mh$ = IsValidDevmodeW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IsValidDevmodeW", pDevmode, DevmodeSize);
            }
            return (int)mh$.invokeExact(pDevmode, DevmodeSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PRINTER_OPTION_NO_CACHE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _PRINTER_OPTION_FLAGS.PRINTER_OPTION_NO_CACHE = 1
     * }
     */
    public static int PRINTER_OPTION_NO_CACHE() {
        return PRINTER_OPTION_NO_CACHE;
    }
    private static final int PRINTER_OPTION_CACHE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _PRINTER_OPTION_FLAGS.PRINTER_OPTION_CACHE = 2
     * }
     */
    public static int PRINTER_OPTION_CACHE() {
        return PRINTER_OPTION_CACHE;
    }
    private static final int PRINTER_OPTION_CLIENT_CHANGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _PRINTER_OPTION_FLAGS.PRINTER_OPTION_CLIENT_CHANGE = 4
     * }
     */
    public static int PRINTER_OPTION_CLIENT_CHANGE() {
        return PRINTER_OPTION_CLIENT_CHANGE;
    }
    private static final int PRINTER_OPTION_NO_CLIENT_DATA = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _PRINTER_OPTION_FLAGS.PRINTER_OPTION_NO_CLIENT_DATA = 8
     * }
     */
    public static int PRINTER_OPTION_NO_CLIENT_DATA() {
        return PRINTER_OPTION_NO_CLIENT_DATA;
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_OPTIONSA {
     *     UINT cbSize;
     *     DWORD dwFlags;
     * } *PPRINTER_OPTIONSA
     * }
     */
    public static final AddressLayout PPRINTER_OPTIONSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_OPTIONSA {
     *     UINT cbSize;
     *     DWORD dwFlags;
     * } *LPPRINTER_OPTIONSA
     * }
     */
    public static final AddressLayout LPPRINTER_OPTIONSA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_OPTIONSW {
     *     UINT cbSize;
     *     DWORD dwFlags;
     * } *PPRINTER_OPTIONSW
     * }
     */
    public static final AddressLayout PPRINTER_OPTIONSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_OPTIONSW {
     *     UINT cbSize;
     *     DWORD dwFlags;
     * } *LPPRINTER_OPTIONSW
     * }
     */
    public static final AddressLayout LPPRINTER_OPTIONSW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_OPTIONSA PPRINTER_OPTIONS
     * }
     */
    public static final AddressLayout PPRINTER_OPTIONS = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef LPPRINTER_OPTIONSA LPPRINTER_OPTIONS
     * }
     */
    public static final AddressLayout LPPRINTER_OPTIONS = winapi.C_POINTER;

    private static class OpenPrinter2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OpenPrinter2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2A(LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions)
     * }
     */
    public static FunctionDescriptor OpenPrinter2A$descriptor() {
        return OpenPrinter2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2A(LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions)
     * }
     */
    public static MethodHandle OpenPrinter2A$handle() {
        return OpenPrinter2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2A(LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions)
     * }
     */
    public static MemorySegment OpenPrinter2A$address() {
        return OpenPrinter2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL OpenPrinter2A(LPCSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSA pDefault, PPRINTER_OPTIONSA pOptions)
     * }
     */
    public static int OpenPrinter2A(MemorySegment pPrinterName, MemorySegment phPrinter, MemorySegment pDefault, MemorySegment pOptions) {
        var mh$ = OpenPrinter2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenPrinter2A", pPrinterName, phPrinter, pDefault, pOptions);
            }
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class OpenPrinter2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("OpenPrinter2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2W(LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions)
     * }
     */
    public static FunctionDescriptor OpenPrinter2W$descriptor() {
        return OpenPrinter2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2W(LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions)
     * }
     */
    public static MethodHandle OpenPrinter2W$handle() {
        return OpenPrinter2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL OpenPrinter2W(LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions)
     * }
     */
    public static MemorySegment OpenPrinter2W$address() {
        return OpenPrinter2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL OpenPrinter2W(LPCWSTR pPrinterName, LPHANDLE phPrinter, PPRINTER_DEFAULTSW pDefault, PPRINTER_OPTIONSW pOptions)
     * }
     */
    public static int OpenPrinter2W(MemorySegment pPrinterName, MemorySegment phPrinter, MemorySegment pDefault, MemorySegment pOptions) {
        var mh$ = OpenPrinter2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("OpenPrinter2W", pPrinterName, phPrinter, pDefault, pOptions);
            }
            return (int)mh$.invokeExact(pPrinterName, phPrinter, pDefault, pOptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_CONNECTION_INFO_1A {
     *     DWORD dwFlags;
     *     LPSTR pszDriverName;
     * } *PPRINTER_CONNECTION_INFO_1A
     * }
     */
    public static final AddressLayout PPRINTER_CONNECTION_INFO_1A = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _PRINTER_CONNECTION_INFO_1W {
     *     DWORD dwFlags;
     *     LPWSTR pszDriverName;
     * } *PPRINTER_CONNECTION_INFO_1W
     * }
     */
    public static final AddressLayout PPRINTER_CONNECTION_INFO_1W = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PPRINTER_CONNECTION_INFO_1A PPRINTER_CONNECTION_INFO_1
     * }
     */
    public static final AddressLayout PPRINTER_CONNECTION_INFO_1 = winapi.C_POINTER;

    private static class AddPrinterConnection2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterConnection2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2A(HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static FunctionDescriptor AddPrinterConnection2A$descriptor() {
        return AddPrinterConnection2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2A(HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static MethodHandle AddPrinterConnection2A$handle() {
        return AddPrinterConnection2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2A(HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static MemorySegment AddPrinterConnection2A$address() {
        return AddPrinterConnection2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2A(HWND hWnd, LPCSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static int AddPrinterConnection2A(MemorySegment hWnd, MemorySegment pszName, int dwLevel, MemorySegment pConnectionInfo) {
        var mh$ = AddPrinterConnection2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterConnection2A", hWnd, pszName, dwLevel, pConnectionInfo);
            }
            return (int)mh$.invokeExact(hWnd, pszName, dwLevel, pConnectionInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class AddPrinterConnection2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("AddPrinterConnection2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2W(HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static FunctionDescriptor AddPrinterConnection2W$descriptor() {
        return AddPrinterConnection2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2W(HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static MethodHandle AddPrinterConnection2W$handle() {
        return AddPrinterConnection2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2W(HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static MemorySegment AddPrinterConnection2W$address() {
        return AddPrinterConnection2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL AddPrinterConnection2W(HWND hWnd, LPCWSTR pszName, DWORD dwLevel, PVOID pConnectionInfo)
     * }
     */
    public static int AddPrinterConnection2W(MemorySegment hWnd, MemorySegment pszName, int dwLevel, MemorySegment pConnectionInfo) {
        var mh$ = AddPrinterConnection2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("AddPrinterConnection2W", hWnd, pszName, dwLevel, pConnectionInfo);
            }
            return (int)mh$.invokeExact(hWnd, pszName, dwLevel, pConnectionInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InstallPrinterDriverFromPackageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("InstallPrinterDriverFromPackageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor InstallPrinterDriverFromPackageA$descriptor() {
        return InstallPrinterDriverFromPackageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static MethodHandle InstallPrinterDriverFromPackageA$handle() {
        return InstallPrinterDriverFromPackageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static MemorySegment InstallPrinterDriverFromPackageA$address() {
        return InstallPrinterDriverFromPackageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszDriverName, LPCSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static int InstallPrinterDriverFromPackageA(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszDriverName, MemorySegment pszEnvironment, int dwFlags) {
        var mh$ = InstallPrinterDriverFromPackageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InstallPrinterDriverFromPackageA", pszServer, pszInfPath, pszDriverName, pszEnvironment, dwFlags);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszDriverName, pszEnvironment, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class InstallPrinterDriverFromPackageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("InstallPrinterDriverFromPackageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static FunctionDescriptor InstallPrinterDriverFromPackageW$descriptor() {
        return InstallPrinterDriverFromPackageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static MethodHandle InstallPrinterDriverFromPackageW$handle() {
        return InstallPrinterDriverFromPackageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static MemorySegment InstallPrinterDriverFromPackageW$address() {
        return InstallPrinterDriverFromPackageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT InstallPrinterDriverFromPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszDriverName, LPCWSTR pszEnvironment, DWORD dwFlags)
     * }
     */
    public static int InstallPrinterDriverFromPackageW(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszDriverName, MemorySegment pszEnvironment, int dwFlags) {
        var mh$ = InstallPrinterDriverFromPackageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("InstallPrinterDriverFromPackageW", pszServer, pszInfPath, pszDriverName, pszEnvironment, dwFlags);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszDriverName, pszEnvironment, dwFlags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UploadPrinterDriverPackageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UploadPrinterDriverPackageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static FunctionDescriptor UploadPrinterDriverPackageA$descriptor() {
        return UploadPrinterDriverPackageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static MethodHandle UploadPrinterDriverPackageA$handle() {
        return UploadPrinterDriverPackageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static MemorySegment UploadPrinterDriverPackageA$address() {
        return UploadPrinterDriverPackageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static int UploadPrinterDriverPackageA(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszEnvironment, int dwFlags, MemorySegment hwnd, MemorySegment pszDestInfPath, MemorySegment pcchDestInfPath) {
        var mh$ = UploadPrinterDriverPackageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UploadPrinterDriverPackageA", pszServer, pszInfPath, pszEnvironment, dwFlags, hwnd, pszDestInfPath, pcchDestInfPath);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszEnvironment, dwFlags, hwnd, pszDestInfPath, pcchDestInfPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class UploadPrinterDriverPackageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("UploadPrinterDriverPackageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static FunctionDescriptor UploadPrinterDriverPackageW$descriptor() {
        return UploadPrinterDriverPackageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static MethodHandle UploadPrinterDriverPackageW$handle() {
        return UploadPrinterDriverPackageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static MemorySegment UploadPrinterDriverPackageW$address() {
        return UploadPrinterDriverPackageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT UploadPrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment, DWORD dwFlags, HWND hwnd, LPWSTR pszDestInfPath, PULONG pcchDestInfPath)
     * }
     */
    public static int UploadPrinterDriverPackageW(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszEnvironment, int dwFlags, MemorySegment hwnd, MemorySegment pszDestInfPath, MemorySegment pcchDestInfPath) {
        var mh$ = UploadPrinterDriverPackageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("UploadPrinterDriverPackageW", pszServer, pszInfPath, pszEnvironment, dwFlags, hwnd, pszDestInfPath, pcchDestInfPath);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszEnvironment, dwFlags, hwnd, pszDestInfPath, pcchDestInfPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _CORE_PRINTER_DRIVERA {
     *     GUID CoreDriverGUID;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     CHAR szPackageID[260];
     * } *PCORE_PRINTER_DRIVERA
     * }
     */
    public static final AddressLayout PCORE_PRINTER_DRIVERA = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct _CORE_PRINTER_DRIVERW {
     *     GUID CoreDriverGUID;
     *     FILETIME ftDriverDate;
     *     DWORDLONG dwlDriverVersion;
     *     WCHAR szPackageID[260];
     * } *PCORE_PRINTER_DRIVERW
     * }
     */
    public static final AddressLayout PCORE_PRINTER_DRIVERW = winapi.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef PCORE_PRINTER_DRIVERA PCORE_PRINTER_DRIVER
     * }
     */
    public static final AddressLayout PCORE_PRINTER_DRIVER = winapi.C_POINTER;

    private static class GetCorePrinterDriversA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetCorePrinterDriversA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers)
     * }
     */
    public static FunctionDescriptor GetCorePrinterDriversA$descriptor() {
        return GetCorePrinterDriversA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers)
     * }
     */
    public static MethodHandle GetCorePrinterDriversA$handle() {
        return GetCorePrinterDriversA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers)
     * }
     */
    public static MemorySegment GetCorePrinterDriversA$address() {
        return GetCorePrinterDriversA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERA pCorePrinterDrivers)
     * }
     */
    public static int GetCorePrinterDriversA(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment pszzCoreDriverDependencies, int cCorePrinterDrivers, MemorySegment pCorePrinterDrivers) {
        var mh$ = GetCorePrinterDriversA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetCorePrinterDriversA", pszServer, pszEnvironment, pszzCoreDriverDependencies, cCorePrinterDrivers, pCorePrinterDrivers);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, pszzCoreDriverDependencies, cCorePrinterDrivers, pCorePrinterDrivers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetCorePrinterDriversW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetCorePrinterDriversW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers)
     * }
     */
    public static FunctionDescriptor GetCorePrinterDriversW$descriptor() {
        return GetCorePrinterDriversW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers)
     * }
     */
    public static MethodHandle GetCorePrinterDriversW$handle() {
        return GetCorePrinterDriversW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers)
     * }
     */
    public static MemorySegment GetCorePrinterDriversW$address() {
        return GetCorePrinterDriversW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetCorePrinterDriversW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszzCoreDriverDependencies, DWORD cCorePrinterDrivers, PCORE_PRINTER_DRIVERW pCorePrinterDrivers)
     * }
     */
    public static int GetCorePrinterDriversW(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment pszzCoreDriverDependencies, int cCorePrinterDrivers, MemorySegment pCorePrinterDrivers) {
        var mh$ = GetCorePrinterDriversW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetCorePrinterDriversW", pszServer, pszEnvironment, pszzCoreDriverDependencies, cCorePrinterDrivers, pCorePrinterDrivers);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, pszzCoreDriverDependencies, cCorePrinterDrivers, pCorePrinterDrivers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CorePrinterDriverInstalledA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            _GUID.layout(),
            _FILETIME.layout(),
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CorePrinterDriverInstalledA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledA(LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static FunctionDescriptor CorePrinterDriverInstalledA$descriptor() {
        return CorePrinterDriverInstalledA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledA(LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static MethodHandle CorePrinterDriverInstalledA$handle() {
        return CorePrinterDriverInstalledA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledA(LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static MemorySegment CorePrinterDriverInstalledA$address() {
        return CorePrinterDriverInstalledA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledA(LPCSTR pszServer, LPCSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static int CorePrinterDriverInstalledA(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment CoreDriverGUID, MemorySegment ftDriverDate, long dwlDriverVersion, MemorySegment pbDriverInstalled) {
        var mh$ = CorePrinterDriverInstalledA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CorePrinterDriverInstalledA", pszServer, pszEnvironment, CoreDriverGUID, ftDriverDate, dwlDriverVersion, pbDriverInstalled);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, CoreDriverGUID, ftDriverDate, dwlDriverVersion, pbDriverInstalled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class CorePrinterDriverInstalledW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            _GUID.layout(),
            _FILETIME.layout(),
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("CorePrinterDriverInstalledW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledW(LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static FunctionDescriptor CorePrinterDriverInstalledW$descriptor() {
        return CorePrinterDriverInstalledW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledW(LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static MethodHandle CorePrinterDriverInstalledW$handle() {
        return CorePrinterDriverInstalledW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledW(LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static MemorySegment CorePrinterDriverInstalledW$address() {
        return CorePrinterDriverInstalledW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT CorePrinterDriverInstalledW(LPCWSTR pszServer, LPCWSTR pszEnvironment, GUID CoreDriverGUID, FILETIME ftDriverDate, DWORDLONG dwlDriverVersion, BOOL *pbDriverInstalled)
     * }
     */
    public static int CorePrinterDriverInstalledW(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment CoreDriverGUID, MemorySegment ftDriverDate, long dwlDriverVersion, MemorySegment pbDriverInstalled) {
        var mh$ = CorePrinterDriverInstalledW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("CorePrinterDriverInstalledW", pszServer, pszEnvironment, CoreDriverGUID, ftDriverDate, dwlDriverVersion, pbDriverInstalled);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, CoreDriverGUID, ftDriverDate, dwlDriverVersion, pbDriverInstalled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverPackagePathA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDriverPackagePathA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverPackagePathA$descriptor() {
        return GetPrinterDriverPackagePathA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static MethodHandle GetPrinterDriverPackagePathA$handle() {
        return GetPrinterDriverPackagePathA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static MemorySegment GetPrinterDriverPackagePathA$address() {
        return GetPrinterDriverPackagePathA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathA(LPCSTR pszServer, LPCSTR pszEnvironment, LPCSTR pszLanguage, LPCSTR pszPackageID, LPSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static int GetPrinterDriverPackagePathA(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment pszLanguage, MemorySegment pszPackageID, MemorySegment pszDriverPackageCab, int cchDriverPackageCab, MemorySegment pcchRequiredSize) {
        var mh$ = GetPrinterDriverPackagePathA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverPackagePathA", pszServer, pszEnvironment, pszLanguage, pszPackageID, pszDriverPackageCab, cchDriverPackageCab, pcchRequiredSize);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, pszLanguage, pszPackageID, pszDriverPackageCab, cchDriverPackageCab, pcchRequiredSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriverPackagePathW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDriverPackagePathW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static FunctionDescriptor GetPrinterDriverPackagePathW$descriptor() {
        return GetPrinterDriverPackagePathW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static MethodHandle GetPrinterDriverPackagePathW$handle() {
        return GetPrinterDriverPackagePathW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static MemorySegment GetPrinterDriverPackagePathW$address() {
        return GetPrinterDriverPackagePathW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetPrinterDriverPackagePathW(LPCWSTR pszServer, LPCWSTR pszEnvironment, LPCWSTR pszLanguage, LPCWSTR pszPackageID, LPWSTR pszDriverPackageCab, DWORD cchDriverPackageCab, LPDWORD pcchRequiredSize)
     * }
     */
    public static int GetPrinterDriverPackagePathW(MemorySegment pszServer, MemorySegment pszEnvironment, MemorySegment pszLanguage, MemorySegment pszPackageID, MemorySegment pszDriverPackageCab, int cchDriverPackageCab, MemorySegment pcchRequiredSize) {
        var mh$ = GetPrinterDriverPackagePathW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriverPackagePathW", pszServer, pszEnvironment, pszLanguage, pszPackageID, pszDriverPackageCab, cchDriverPackageCab, pcchRequiredSize);
            }
            return (int)mh$.invokeExact(pszServer, pszEnvironment, pszLanguage, pszPackageID, pszDriverPackageCab, cchDriverPackageCab, pcchRequiredSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverPackageA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDriverPackageA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverPackageA$descriptor() {
        return DeletePrinterDriverPackageA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment)
     * }
     */
    public static MethodHandle DeletePrinterDriverPackageA$handle() {
        return DeletePrinterDriverPackageA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment)
     * }
     */
    public static MemorySegment DeletePrinterDriverPackageA$address() {
        return DeletePrinterDriverPackageA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageA(LPCSTR pszServer, LPCSTR pszInfPath, LPCSTR pszEnvironment)
     * }
     */
    public static int DeletePrinterDriverPackageA(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszEnvironment) {
        var mh$ = DeletePrinterDriverPackageA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverPackageA", pszServer, pszInfPath, pszEnvironment);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszEnvironment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeletePrinterDriverPackageW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeletePrinterDriverPackageW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment)
     * }
     */
    public static FunctionDescriptor DeletePrinterDriverPackageW$descriptor() {
        return DeletePrinterDriverPackageW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment)
     * }
     */
    public static MethodHandle DeletePrinterDriverPackageW$handle() {
        return DeletePrinterDriverPackageW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment)
     * }
     */
    public static MemorySegment DeletePrinterDriverPackageW$address() {
        return DeletePrinterDriverPackageW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT DeletePrinterDriverPackageW(LPCWSTR pszServer, LPCWSTR pszInfPath, LPCWSTR pszEnvironment)
     * }
     */
    public static int DeletePrinterDriverPackageW(MemorySegment pszServer, MemorySegment pszInfPath, MemorySegment pszEnvironment) {
        var mh$ = DeletePrinterDriverPackageW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeletePrinterDriverPackageW", pszServer, pszInfPath, pszEnvironment);
            }
            return (int)mh$.invokeExact(pszServer, pszInfPath, pszEnvironment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int kPropertyTypeString = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeString = 1
     * }
     */
    public static int kPropertyTypeString() {
        return kPropertyTypeString;
    }
    private static final int kPropertyTypeInt32 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeInt32 = 2
     * }
     */
    public static int kPropertyTypeInt32() {
        return kPropertyTypeInt32;
    }
    private static final int kPropertyTypeInt64 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeInt64 = 3
     * }
     */
    public static int kPropertyTypeInt64() {
        return kPropertyTypeInt64;
    }
    private static final int kPropertyTypeByte = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeByte = 4
     * }
     */
    public static int kPropertyTypeByte() {
        return kPropertyTypeByte;
    }
    private static final int kPropertyTypeTime = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeTime = 5
     * }
     */
    public static int kPropertyTypeTime() {
        return kPropertyTypeTime;
    }
    private static final int kPropertyTypeDevMode = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeDevMode = 6
     * }
     */
    public static int kPropertyTypeDevMode() {
        return kPropertyTypeDevMode;
    }
    private static final int kPropertyTypeSD = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeSD = 7
     * }
     */
    public static int kPropertyTypeSD() {
        return kPropertyTypeSD;
    }
    private static final int kPropertyTypeNotificationReply = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeNotificationReply = 8
     * }
     */
    public static int kPropertyTypeNotificationReply() {
        return kPropertyTypeNotificationReply;
    }
    private static final int kPropertyTypeNotificationOptions = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeNotificationOptions = 9
     * }
     */
    public static int kPropertyTypeNotificationOptions() {
        return kPropertyTypeNotificationOptions;
    }
    private static final int kPropertyTypeBuffer = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kPropertyTypeBuffer = 10
     * }
     */
    public static int kPropertyTypeBuffer() {
        return kPropertyTypeBuffer;
    }
    private static final int kAddingDocumentSequence = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kAddingDocumentSequence = 0
     * }
     */
    public static int kAddingDocumentSequence() {
        return kAddingDocumentSequence;
    }
    private static final int kDocumentSequenceAdded = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kDocumentSequenceAdded = 1
     * }
     */
    public static int kDocumentSequenceAdded() {
        return kDocumentSequenceAdded;
    }
    private static final int kAddingFixedDocument = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kAddingFixedDocument = 2
     * }
     */
    public static int kAddingFixedDocument() {
        return kAddingFixedDocument;
    }
    private static final int kFixedDocumentAdded = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kFixedDocumentAdded = 3
     * }
     */
    public static int kFixedDocumentAdded() {
        return kFixedDocumentAdded;
    }
    private static final int kAddingFixedPage = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kAddingFixedPage = 4
     * }
     */
    public static int kAddingFixedPage() {
        return kAddingFixedPage;
    }
    private static final int kFixedPageAdded = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kFixedPageAdded = 5
     * }
     */
    public static int kFixedPageAdded() {
        return kFixedPageAdded;
    }
    private static final int kResourceAdded = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kResourceAdded = 6
     * }
     */
    public static int kResourceAdded() {
        return kResourceAdded;
    }
    private static final int kFontAdded = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kFontAdded = 7
     * }
     */
    public static int kFontAdded() {
        return kFontAdded;
    }
    private static final int kImageAdded = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kImageAdded = 8
     * }
     */
    public static int kImageAdded() {
        return kImageAdded;
    }
    private static final int kXpsDocumentCommitted = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kXpsDocumentCommitted = 9
     * }
     */
    public static int kXpsDocumentCommitted() {
        return kXpsDocumentCommitted;
    }
    private static final int kJobProduction = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kJobProduction = 1
     * }
     */
    public static int kJobProduction() {
        return kJobProduction;
    }
    private static final int kJobConsumption = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.kJobConsumption = 2
     * }
     */
    public static int kJobConsumption() {
        return kJobConsumption;
    }

    private static class ReportJobProcessingProgress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ReportJobProcessingProgress");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT ReportJobProcessingProgress(HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress)
     * }
     */
    public static FunctionDescriptor ReportJobProcessingProgress$descriptor() {
        return ReportJobProcessingProgress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT ReportJobProcessingProgress(HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress)
     * }
     */
    public static MethodHandle ReportJobProcessingProgress$handle() {
        return ReportJobProcessingProgress.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT ReportJobProcessingProgress(HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress)
     * }
     */
    public static MemorySegment ReportJobProcessingProgress$address() {
        return ReportJobProcessingProgress.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT ReportJobProcessingProgress(HANDLE printerHandle, ULONG jobId, EPrintXPSJobOperation jobOperation, EPrintXPSJobProgress jobProgress)
     * }
     */
    public static int ReportJobProcessingProgress(MemorySegment printerHandle, int jobId, int jobOperation, int jobProgress) {
        var mh$ = ReportJobProcessingProgress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ReportJobProcessingProgress", printerHandle, jobId, jobOperation, jobProgress);
            }
            return (int)mh$.invokeExact(printerHandle, jobId, jobOperation, jobProgress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriver2A {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDriver2A");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2A(HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriver2A$descriptor() {
        return GetPrinterDriver2A.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2A(HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriver2A$handle() {
        return GetPrinterDriver2A.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2A(HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriver2A$address() {
        return GetPrinterDriver2A.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2A(HWND hWnd, HANDLE hPrinter, LPSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriver2A(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriver2A.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriver2A", hWnd, hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrinterDriver2W {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrinterDriver2W");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2W(HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static FunctionDescriptor GetPrinterDriver2W$descriptor() {
        return GetPrinterDriver2W.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2W(HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MethodHandle GetPrinterDriver2W$handle() {
        return GetPrinterDriver2W.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2W(HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static MemorySegment GetPrinterDriver2W$address() {
        return GetPrinterDriver2W.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrinterDriver2W(HWND hWnd, HANDLE hPrinter, LPWSTR pEnvironment, DWORD Level, LPBYTE pDriverInfo, DWORD cbBuf, LPDWORD pcbNeeded)
     * }
     */
    public static int GetPrinterDriver2W(MemorySegment hWnd, MemorySegment hPrinter, MemorySegment pEnvironment, int Level, MemorySegment pDriverInfo, int cbBuf, MemorySegment pcbNeeded) {
        var mh$ = GetPrinterDriver2W.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrinterDriver2W", hWnd, hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
            }
            return (int)mh$.invokeExact(hWnd, hPrinter, pEnvironment, Level, pDriverInfo, cbBuf, pcbNeeded);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PRINT_EXECUTION_CONTEXT_APPLICATION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_APPLICATION = 0
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_APPLICATION() {
        return PRINT_EXECUTION_CONTEXT_APPLICATION;
    }
    private static final int PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE() {
        return PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE;
    }
    private static final int PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST() {
        return PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST;
    }
    private static final int PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE() {
        return PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE;
    }
    private static final int PRINT_EXECUTION_CONTEXT_WOW64 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PRINT_EXECUTION_CONTEXT_WOW64 = 4
     * }
     */
    public static int PRINT_EXECUTION_CONTEXT_WOW64() {
        return PRINT_EXECUTION_CONTEXT_WOW64;
    }

    private static class GetPrintExecutionData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrintExecutionData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * BOOL GetPrintExecutionData(PRINT_EXECUTION_DATA *pData)
     * }
     */
    public static FunctionDescriptor GetPrintExecutionData$descriptor() {
        return GetPrintExecutionData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * BOOL GetPrintExecutionData(PRINT_EXECUTION_DATA *pData)
     * }
     */
    public static MethodHandle GetPrintExecutionData$handle() {
        return GetPrintExecutionData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * BOOL GetPrintExecutionData(PRINT_EXECUTION_DATA *pData)
     * }
     */
    public static MemorySegment GetPrintExecutionData$address() {
        return GetPrintExecutionData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * BOOL GetPrintExecutionData(PRINT_EXECUTION_DATA *pData)
     * }
     */
    public static int GetPrintExecutionData(MemorySegment pData) {
        var mh$ = GetPrintExecutionData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrintExecutionData", pData);
            }
            return (int)mh$.invokeExact(pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetJobNamedPropertyValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetJobNamedPropertyValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD GetJobNamedPropertyValue(HANDLE hPrinter, DWORD JobId, PCWSTR pszName, PrintPropertyValue *pValue)
     * }
     */
    public static FunctionDescriptor GetJobNamedPropertyValue$descriptor() {
        return GetJobNamedPropertyValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD GetJobNamedPropertyValue(HANDLE hPrinter, DWORD JobId, PCWSTR pszName, PrintPropertyValue *pValue)
     * }
     */
    public static MethodHandle GetJobNamedPropertyValue$handle() {
        return GetJobNamedPropertyValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD GetJobNamedPropertyValue(HANDLE hPrinter, DWORD JobId, PCWSTR pszName, PrintPropertyValue *pValue)
     * }
     */
    public static MemorySegment GetJobNamedPropertyValue$address() {
        return GetJobNamedPropertyValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD GetJobNamedPropertyValue(HANDLE hPrinter, DWORD JobId, PCWSTR pszName, PrintPropertyValue *pValue)
     * }
     */
    public static int GetJobNamedPropertyValue(MemorySegment hPrinter, int JobId, MemorySegment pszName, MemorySegment pValue) {
        var mh$ = GetJobNamedPropertyValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetJobNamedPropertyValue", hPrinter, JobId, pszName, pValue);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, pszName, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePrintPropertyValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FreePrintPropertyValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FreePrintPropertyValue(PrintPropertyValue *pValue)
     * }
     */
    public static FunctionDescriptor FreePrintPropertyValue$descriptor() {
        return FreePrintPropertyValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FreePrintPropertyValue(PrintPropertyValue *pValue)
     * }
     */
    public static MethodHandle FreePrintPropertyValue$handle() {
        return FreePrintPropertyValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FreePrintPropertyValue(PrintPropertyValue *pValue)
     * }
     */
    public static MemorySegment FreePrintPropertyValue$address() {
        return FreePrintPropertyValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FreePrintPropertyValue(PrintPropertyValue *pValue)
     * }
     */
    public static void FreePrintPropertyValue(MemorySegment pValue) {
        var mh$ = FreePrintPropertyValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePrintPropertyValue", pValue);
            }
            mh$.invokeExact(pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class FreePrintNamedPropertyArray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("FreePrintNamedPropertyArray");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void FreePrintNamedPropertyArray(DWORD cProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static FunctionDescriptor FreePrintNamedPropertyArray$descriptor() {
        return FreePrintNamedPropertyArray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void FreePrintNamedPropertyArray(DWORD cProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static MethodHandle FreePrintNamedPropertyArray$handle() {
        return FreePrintNamedPropertyArray.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void FreePrintNamedPropertyArray(DWORD cProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static MemorySegment FreePrintNamedPropertyArray$address() {
        return FreePrintNamedPropertyArray.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void FreePrintNamedPropertyArray(DWORD cProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static void FreePrintNamedPropertyArray(int cProperties, MemorySegment ppProperties) {
        var mh$ = FreePrintNamedPropertyArray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("FreePrintNamedPropertyArray", cProperties, ppProperties);
            }
            mh$.invokeExact(cProperties, ppProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SetJobNamedProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("SetJobNamedProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD SetJobNamedProperty(HANDLE hPrinter, DWORD JobId, const PrintNamedProperty *pProperty)
     * }
     */
    public static FunctionDescriptor SetJobNamedProperty$descriptor() {
        return SetJobNamedProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD SetJobNamedProperty(HANDLE hPrinter, DWORD JobId, const PrintNamedProperty *pProperty)
     * }
     */
    public static MethodHandle SetJobNamedProperty$handle() {
        return SetJobNamedProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD SetJobNamedProperty(HANDLE hPrinter, DWORD JobId, const PrintNamedProperty *pProperty)
     * }
     */
    public static MemorySegment SetJobNamedProperty$address() {
        return SetJobNamedProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD SetJobNamedProperty(HANDLE hPrinter, DWORD JobId, const PrintNamedProperty *pProperty)
     * }
     */
    public static int SetJobNamedProperty(MemorySegment hPrinter, int JobId, MemorySegment pProperty) {
        var mh$ = SetJobNamedProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SetJobNamedProperty", hPrinter, JobId, pProperty);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, pProperty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class DeleteJobNamedProperty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("DeleteJobNamedProperty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD DeleteJobNamedProperty(HANDLE hPrinter, DWORD JobId, PCWSTR pszName)
     * }
     */
    public static FunctionDescriptor DeleteJobNamedProperty$descriptor() {
        return DeleteJobNamedProperty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD DeleteJobNamedProperty(HANDLE hPrinter, DWORD JobId, PCWSTR pszName)
     * }
     */
    public static MethodHandle DeleteJobNamedProperty$handle() {
        return DeleteJobNamedProperty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD DeleteJobNamedProperty(HANDLE hPrinter, DWORD JobId, PCWSTR pszName)
     * }
     */
    public static MemorySegment DeleteJobNamedProperty$address() {
        return DeleteJobNamedProperty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD DeleteJobNamedProperty(HANDLE hPrinter, DWORD JobId, PCWSTR pszName)
     * }
     */
    public static int DeleteJobNamedProperty(MemorySegment hPrinter, int JobId, MemorySegment pszName) {
        var mh$ = DeleteJobNamedProperty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("DeleteJobNamedProperty", hPrinter, JobId, pszName);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, pszName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class EnumJobNamedProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("EnumJobNamedProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * DWORD EnumJobNamedProperties(HANDLE hPrinter, DWORD JobId, DWORD *pcProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static FunctionDescriptor EnumJobNamedProperties$descriptor() {
        return EnumJobNamedProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * DWORD EnumJobNamedProperties(HANDLE hPrinter, DWORD JobId, DWORD *pcProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static MethodHandle EnumJobNamedProperties$handle() {
        return EnumJobNamedProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * DWORD EnumJobNamedProperties(HANDLE hPrinter, DWORD JobId, DWORD *pcProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static MemorySegment EnumJobNamedProperties$address() {
        return EnumJobNamedProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * DWORD EnumJobNamedProperties(HANDLE hPrinter, DWORD JobId, DWORD *pcProperties, PrintNamedProperty **ppProperties)
     * }
     */
    public static int EnumJobNamedProperties(MemorySegment hPrinter, int JobId, MemorySegment pcProperties, MemorySegment ppProperties) {
        var mh$ = EnumJobNamedProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("EnumJobNamedProperties", hPrinter, JobId, pcProperties, ppProperties);
            }
            return (int)mh$.invokeExact(hPrinter, JobId, pcProperties, ppProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class GetPrintOutputInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("GetPrintOutputInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT GetPrintOutputInfo(HWND hWnd, PCWSTR pszPrinter, HANDLE *phFile, PWSTR *ppszOutputFile)
     * }
     */
    public static FunctionDescriptor GetPrintOutputInfo$descriptor() {
        return GetPrintOutputInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT GetPrintOutputInfo(HWND hWnd, PCWSTR pszPrinter, HANDLE *phFile, PWSTR *ppszOutputFile)
     * }
     */
    public static MethodHandle GetPrintOutputInfo$handle() {
        return GetPrintOutputInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT GetPrintOutputInfo(HWND hWnd, PCWSTR pszPrinter, HANDLE *phFile, PWSTR *ppszOutputFile)
     * }
     */
    public static MemorySegment GetPrintOutputInfo$address() {
        return GetPrintOutputInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT GetPrintOutputInfo(HWND hWnd, PCWSTR pszPrinter, HANDLE *phFile, PWSTR *ppszOutputFile)
     * }
     */
    public static int GetPrintOutputInfo(MemorySegment hWnd, MemorySegment pszPrinter, MemorySegment phFile, MemorySegment ppszOutputFile) {
        var mh$ = GetPrintOutputInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("GetPrintOutputInfo", hWnd, pszPrinter, phFile, ppszOutputFile);
            }
            return (int)mh$.invokeExact(hWnd, pszPrinter, phFile, ppszOutputFile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _calloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_calloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _calloc_base$descriptor() {
        return _calloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _calloc_base$handle() {
        return _calloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _calloc_base$address() {
        return _calloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _calloc_base(long _Count, long _Size) {
        var mh$ = _calloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_calloc_base", _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class calloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("calloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor calloc$descriptor() {
        return calloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle calloc$handle() {
        return calloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment calloc$address() {
        return calloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment calloc(long _Count, long _Size) {
        var mh$ = calloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("calloc", _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _callnewh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_callnewh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static FunctionDescriptor _callnewh$descriptor() {
        return _callnewh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static MethodHandle _callnewh$handle() {
        return _callnewh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static MemorySegment _callnewh$address() {
        return _callnewh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static int _callnewh(long _Size) {
        var mh$ = _callnewh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_callnewh", _Size);
            }
            return (int)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_expand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor _expand$descriptor() {
        return _expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle _expand$handle() {
        return _expand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _expand$address() {
        return _expand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _expand(MemorySegment _Block, long _Size) {
        var mh$ = _expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_expand", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _free_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_free_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static FunctionDescriptor _free_base$descriptor() {
        return _free_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static MethodHandle _free_base$handle() {
        return _free_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static MemorySegment _free_base$address() {
        return _free_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static void _free_base(MemorySegment _Block) {
        var mh$ = _free_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_free_base", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static FunctionDescriptor free$descriptor() {
        return free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static MethodHandle free$handle() {
        return free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static MemorySegment free$address() {
        return free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static void free(MemorySegment _Block) {
        var mh$ = free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _malloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_malloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static FunctionDescriptor _malloc_base$descriptor() {
        return _malloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MethodHandle _malloc_base$handle() {
        return _malloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MemorySegment _malloc_base$address() {
        return _malloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MemorySegment _malloc_base(long _Size) {
        var mh$ = _malloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_malloc_base", _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static FunctionDescriptor malloc$descriptor() {
        return malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MethodHandle malloc$handle() {
        return malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MemorySegment malloc$address() {
        return malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MemorySegment malloc(long _Size) {
        var mh$ = malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("malloc", _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _msize_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_msize_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static FunctionDescriptor _msize_base$descriptor() {
        return _msize_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static MethodHandle _msize_base$handle() {
        return _msize_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static MemorySegment _msize_base$address() {
        return _msize_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static long _msize_base(MemorySegment _Block) {
        var mh$ = _msize_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_msize_base", _Block);
            }
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _msize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_msize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static FunctionDescriptor _msize$descriptor() {
        return _msize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static MethodHandle _msize$handle() {
        return _msize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static MemorySegment _msize$address() {
        return _msize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static long _msize(MemorySegment _Block) {
        var mh$ = _msize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_msize", _Block);
            }
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _realloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_realloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor _realloc_base$descriptor() {
        return _realloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle _realloc_base$handle() {
        return _realloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _realloc_base$address() {
        return _realloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _realloc_base(MemorySegment _Block, long _Size) {
        var mh$ = _realloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_realloc_base", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor realloc$descriptor() {
        return realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle realloc$handle() {
        return realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment realloc$address() {
        return realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment realloc(MemorySegment _Block, long _Size) {
        var mh$ = realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("realloc", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _recalloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_recalloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _recalloc_base$descriptor() {
        return _recalloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _recalloc_base$handle() {
        return _recalloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc_base$address() {
        return _recalloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc_base(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_recalloc_base", _Block, _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _recalloc$descriptor() {
        return _recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _recalloc$handle() {
        return _recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc$address() {
        return _recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_recalloc", _Block, _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_aligned_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static FunctionDescriptor _aligned_free$descriptor() {
        return _aligned_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static MethodHandle _aligned_free$handle() {
        return _aligned_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static MemorySegment _aligned_free$address() {
        return _aligned_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static void _aligned_free(MemorySegment _Block) {
        var mh$ = _aligned_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_free", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_aligned_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_malloc$descriptor() {
        return _aligned_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_malloc$handle() {
        return _aligned_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_malloc$address() {
        return _aligned_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_malloc(long _Size, long _Alignment) {
        var mh$ = _aligned_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_malloc", _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_aligned_offset_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_malloc$descriptor() {
        return _aligned_offset_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_malloc$handle() {
        return _aligned_offset_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_malloc$address() {
        return _aligned_offset_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_malloc(long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_malloc", _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_msize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_aligned_msize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_msize$descriptor() {
        return _aligned_msize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_msize$handle() {
        return _aligned_msize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_msize$address() {
        return _aligned_msize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static long _aligned_msize(MemorySegment _Block, long _Alignment, long _Offset) {
        var mh$ = _aligned_msize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_msize", _Block, _Alignment, _Offset);
            }
            return (long)mh$.invokeExact(_Block, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_aligned_offset_realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_realloc$descriptor() {
        return _aligned_offset_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_realloc$handle() {
        return _aligned_offset_realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_realloc$address() {
        return _aligned_offset_realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_realloc(MemorySegment _Block, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_realloc", _Block, _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_aligned_offset_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_recalloc$descriptor() {
        return _aligned_offset_recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_recalloc$handle() {
        return _aligned_offset_recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_recalloc$address() {
        return _aligned_offset_recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_recalloc", _Block, _Count, _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_aligned_realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_realloc$descriptor() {
        return _aligned_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_realloc$handle() {
        return _aligned_realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_realloc$address() {
        return _aligned_realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_realloc(MemorySegment _Block, long _Size, long _Alignment) {
        var mh$ = _aligned_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_realloc", _Block, _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_aligned_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_recalloc$descriptor() {
        return _aligned_recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_recalloc$handle() {
        return _aligned_recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_recalloc$address() {
        return _aligned_recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment) {
        var mh$ = _aligned_recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_recalloc", _Block, _Count, _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef double max_align_t
     * }
     */
    public static final OfDouble max_align_t = winapi.C_DOUBLE;

    private static class bsearch_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("bsearch_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor bsearch_s$descriptor() {
        return bsearch_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle bsearch_s$handle() {
        return bsearch_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment bsearch_s$address() {
        return bsearch_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment bsearch_s(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = bsearch_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bsearch_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class qsort_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("qsort_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor qsort_s$descriptor() {
        return qsort_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle qsort_s$handle() {
        return qsort_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment qsort_s$address() {
        return qsort_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static void qsort_s(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = qsort_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("qsort_s", _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("bsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor bsearch$descriptor() {
        return bsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle bsearch$handle() {
        return bsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment bsearch$address() {
        return bsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment bsearch(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = bsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class qsort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("qsort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor qsort$descriptor() {
        return qsort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle qsort$handle() {
        return qsort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment qsort$address() {
        return qsort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static void qsort(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = qsort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("qsort", _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lfind_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_lfind_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor _lfind_s$descriptor() {
        return _lfind_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle _lfind_s$handle() {
        return _lfind_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lfind_s$address() {
        return _lfind_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lfind_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lfind_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lfind_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lfind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_lfind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor _lfind$descriptor() {
        return _lfind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle _lfind$handle() {
        return _lfind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lfind$address() {
        return _lfind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lfind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lfind", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lsearch_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_lsearch_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor _lsearch_s$descriptor() {
        return _lsearch_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle _lsearch_s$handle() {
        return _lsearch_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lsearch_s$address() {
        return _lsearch_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lsearch_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lsearch_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lsearch_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_lsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor _lsearch$descriptor() {
        return _lsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle _lsearch$handle() {
        return _lsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lsearch$address() {
        return _lsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lfind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("lfind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor lfind$descriptor() {
        return lfind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle lfind$handle() {
        return lfind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lfind$address() {
        return lfind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lfind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lfind", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("lsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor lsearch$descriptor() {
        return lsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle lsearch$handle() {
        return lsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lsearch$address() {
        return lsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_itow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _itow_s$descriptor() {
        return _itow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _itow_s$handle() {
        return _itow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _itow_s$address() {
        return _itow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _itow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_itow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _itow$descriptor() {
        return _itow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _itow$handle() {
        return _itow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itow$address() {
        return _itow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ltow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltow_s$descriptor() {
        return _ltow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ltow_s$handle() {
        return _ltow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ltow_s$address() {
        return _ltow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ltow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ltow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltow$descriptor() {
        return _ltow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ltow$handle() {
        return _ltow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltow$address() {
        return _ltow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ultow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultow_s$descriptor() {
        return _ultow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ultow_s$handle() {
        return _ultow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ultow_s$address() {
        return _ultow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ultow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ultow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultow$descriptor() {
        return _ultow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ultow$handle() {
        return _ultow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultow$address() {
        return _ultow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstod$descriptor() {
        return wcstod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstod$handle() {
        return wcstod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstod$address() {
        return wcstod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static double wcstod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstod", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstod_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstod_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstod_l$descriptor() {
        return _wcstod_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstod_l$handle() {
        return _wcstod_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstod_l$address() {
        return _wcstod_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _wcstod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstod_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstod_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstol$descriptor() {
        return wcstol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstol$handle() {
        return wcstol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstol$address() {
        return wcstol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static int wcstol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstol", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstol_l$descriptor() {
        return _wcstol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstol_l$handle() {
        return _wcstol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstol_l$address() {
        return _wcstol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _wcstol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstol_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoll$descriptor() {
        return wcstoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoll$handle() {
        return wcstoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoll$address() {
        return wcstoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long wcstoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoll", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoll_l$descriptor() {
        return _wcstoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoll_l$handle() {
        return _wcstoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoll_l$address() {
        return _wcstoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoll_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstoul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoul$descriptor() {
        return wcstoul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoul$handle() {
        return wcstoul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoul$address() {
        return wcstoul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static int wcstoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoul", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoul_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstoul_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoul_l$descriptor() {
        return _wcstoul_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoul_l$handle() {
        return _wcstoul_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoul_l$address() {
        return _wcstoul_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _wcstoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoul_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoul_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstoull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoull$descriptor() {
        return wcstoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoull$handle() {
        return wcstoull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoull$address() {
        return wcstoull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long wcstoull(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoull", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoull_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstoull_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoull_l$descriptor() {
        return _wcstoull_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoull_l$handle() {
        return _wcstoull_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoull_l$address() {
        return _wcstoull_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoull_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoull_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoull_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstold$descriptor() {
        return wcstold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstold$handle() {
        return wcstold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstold$address() {
        return wcstold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static double wcstold(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstold", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstold_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstold_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstold_l$descriptor() {
        return _wcstold_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstold_l$handle() {
        return _wcstold_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstold_l$address() {
        return _wcstold_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _wcstold_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstold_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstold_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_FLOAT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstof$descriptor() {
        return wcstof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstof$handle() {
        return wcstof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstof$address() {
        return wcstof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static float wcstof(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstof", _String, _EndPtr);
            }
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_FLOAT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstof_l$descriptor() {
        return _wcstof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstof_l$handle() {
        return _wcstof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstof_l$address() {
        return _wcstof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static float _wcstof_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstof_l", _String, _EndPtr, _Locale);
            }
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtof$descriptor() {
        return _wtof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtof$handle() {
        return _wtof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtof$address() {
        return _wtof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static double _wtof(MemorySegment _String) {
        var mh$ = _wtof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtof", _String);
            }
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtof_l$descriptor() {
        return _wtof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtof_l$handle() {
        return _wtof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtof_l$address() {
        return _wtof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static double _wtof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtof_l", _String, _Locale);
            }
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtoi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoi$descriptor() {
        return _wtoi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoi$handle() {
        return _wtoi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoi$address() {
        return _wtoi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static int _wtoi(MemorySegment _String) {
        var mh$ = _wtoi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtoi_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoi_l$descriptor() {
        return _wtoi_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoi_l$handle() {
        return _wtoi_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoi_l$address() {
        return _wtoi_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static int _wtoi_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoi_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtol$descriptor() {
        return _wtol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtol$handle() {
        return _wtol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtol$address() {
        return _wtol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static int _wtol(MemorySegment _String) {
        var mh$ = _wtol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtol", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtol_l$descriptor() {
        return _wtol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtol_l$handle() {
        return _wtol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtol_l$address() {
        return _wtol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static int _wtol_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtol_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoll$descriptor() {
        return _wtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoll$handle() {
        return _wtoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoll$address() {
        return _wtoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static long _wtoll(MemorySegment _String) {
        var mh$ = _wtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoll", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoll_l$descriptor() {
        return _wtoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoll_l$handle() {
        return _wtoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoll_l$address() {
        return _wtoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static long _wtoll_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoll_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64tow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_i64tow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64tow_s$descriptor() {
        return _i64tow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _i64tow_s$handle() {
        return _i64tow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _i64tow_s$address() {
        return _i64tow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _i64tow_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _i64tow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64tow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64tow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_i64tow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64tow$descriptor() {
        return _i64tow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _i64tow$handle() {
        return _i64tow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64tow$address() {
        return _i64tow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64tow(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _i64tow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64tow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64tow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ui64tow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64tow_s$descriptor() {
        return _ui64tow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ui64tow_s$handle() {
        return _ui64tow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow_s$address() {
        return _ui64tow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ui64tow_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ui64tow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64tow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64tow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ui64tow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64tow$descriptor() {
        return _ui64tow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ui64tow$handle() {
        return _ui64tow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow$address() {
        return _ui64tow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ui64tow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64tow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoi64$descriptor() {
        return _wtoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoi64$handle() {
        return _wtoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoi64$address() {
        return _wtoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static long _wtoi64(MemorySegment _String) {
        var mh$ = _wtoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi64", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wtoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoi64_l$descriptor() {
        return _wtoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoi64_l$handle() {
        return _wtoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoi64_l$address() {
        return _wtoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static long _wtoi64_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi64_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _wcstoi64$descriptor() {
        return _wcstoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _wcstoi64$handle() {
        return _wcstoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _wcstoi64$address() {
        return _wcstoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long _wcstoi64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _wcstoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoi64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoi64_l$descriptor() {
        return _wcstoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoi64_l$handle() {
        return _wcstoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoi64_l$address() {
        return _wcstoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoi64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoi64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoui64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstoui64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _wcstoui64$descriptor() {
        return _wcstoui64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _wcstoui64$handle() {
        return _wcstoui64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _wcstoui64$address() {
        return _wcstoui64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long _wcstoui64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _wcstoui64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoui64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoui64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstoui64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoui64_l$descriptor() {
        return _wcstoui64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoui64_l$handle() {
        return _wcstoui64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoui64_l$address() {
        return _wcstoui64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoui64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoui64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoui64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfullpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wfullpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _wfullpath$descriptor() {
        return _wfullpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MethodHandle _wfullpath$handle() {
        return _wfullpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wfullpath$address() {
        return _wfullpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wfullpath(MemorySegment _Buffer, MemorySegment _Path, long _BufferCount) {
        var mh$ = _wfullpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfullpath", _Buffer, _Path, _BufferCount);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wmakepath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wmakepath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wmakepath_s$descriptor() {
        return _wmakepath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wmakepath_s$handle() {
        return _wmakepath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wmakepath_s$address() {
        return _wmakepath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static int _wmakepath_s(MemorySegment _Buffer, long _BufferCount, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wmakepath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wmakepath_s", _Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wmakepath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wmakepath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wmakepath$descriptor() {
        return _wmakepath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wmakepath$handle() {
        return _wmakepath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wmakepath$address() {
        return _wmakepath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static void _wmakepath(MemorySegment _Buffer, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wmakepath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wmakepath", _Buffer, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wperror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wperror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static FunctionDescriptor _wperror$descriptor() {
        return _wperror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static MethodHandle _wperror$handle() {
        return _wperror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static MemorySegment _wperror$address() {
        return _wperror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static void _wperror(MemorySegment _ErrorMessage) {
        var mh$ = _wperror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wperror", _ErrorMessage);
            }
            mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsplitpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wsplitpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wsplitpath$descriptor() {
        return _wsplitpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wsplitpath$handle() {
        return _wsplitpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wsplitpath$address() {
        return _wsplitpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static void _wsplitpath(MemorySegment _FullPath, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wsplitpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsplitpath", _FullPath, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsplitpath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wsplitpath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static FunctionDescriptor _wsplitpath_s$descriptor() {
        return _wsplitpath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static MethodHandle _wsplitpath_s$handle() {
        return _wsplitpath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static MemorySegment _wsplitpath_s$address() {
        return _wsplitpath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static int _wsplitpath_s(MemorySegment _FullPath, MemorySegment _Drive, long _DriveCount, MemorySegment _Dir, long _DirCount, MemorySegment _Filename, long _FilenameCount, MemorySegment _Ext, long _ExtCount) {
        var mh$ = _wsplitpath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsplitpath_s", _FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
            }
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wdupenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wdupenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wdupenv_s$descriptor() {
        return _wdupenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wdupenv_s$handle() {
        return _wdupenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wdupenv_s$address() {
        return _wdupenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static int _wdupenv_s(MemorySegment _Buffer, MemorySegment _BufferCount, MemorySegment _VarName) {
        var mh$ = _wdupenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wdupenv_s", _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wgetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wgetenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wgetenv$descriptor() {
        return _wgetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wgetenv$handle() {
        return _wgetenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv$address() {
        return _wgetenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv(MemorySegment _VarName) {
        var mh$ = _wgetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wgetenv", _VarName);
            }
            return (MemorySegment)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wgetenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wgetenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wgetenv_s$descriptor() {
        return _wgetenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wgetenv_s$handle() {
        return _wgetenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv_s$address() {
        return _wgetenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static int _wgetenv_s(MemorySegment _RequiredCount, MemorySegment _Buffer, long _BufferCount, MemorySegment _VarName) {
        var mh$ = _wgetenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wgetenv_s", _RequiredCount, _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wputenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wputenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static FunctionDescriptor _wputenv$descriptor() {
        return _wputenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static MethodHandle _wputenv$handle() {
        return _wputenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static MemorySegment _wputenv$address() {
        return _wputenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static int _wputenv(MemorySegment _EnvString) {
        var mh$ = _wputenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wputenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wputenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wputenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static FunctionDescriptor _wputenv_s$descriptor() {
        return _wputenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static MethodHandle _wputenv_s$handle() {
        return _wputenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static MemorySegment _wputenv_s$address() {
        return _wputenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static int _wputenv_s(MemorySegment _Name, MemorySegment _Value) {
        var mh$ = _wputenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wputenv_s", _Name, _Value);
            }
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsearchenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wsearchenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _wsearchenv_s$descriptor() {
        return _wsearchenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MethodHandle _wsearchenv_s$handle() {
        return _wsearchenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wsearchenv_s$address() {
        return _wsearchenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static int _wsearchenv_s(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _wsearchenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsearchenv_s", _Filename, _VarName, _Buffer, _BufferCount);
            }
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsearchenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wsearchenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static FunctionDescriptor _wsearchenv$descriptor() {
        return _wsearchenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static MethodHandle _wsearchenv$handle() {
        return _wsearchenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static MemorySegment _wsearchenv$address() {
        return _wsearchenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static void _wsearchenv(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _ResultPath) {
        var mh$ = _wsearchenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsearchenv", _Filename, _VarName, _ResultPath);
            }
            mh$.invokeExact(_Filename, _VarName, _ResultPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wsystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static FunctionDescriptor _wsystem$descriptor() {
        return _wsystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static MethodHandle _wsystem$handle() {
        return _wsystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static MemorySegment _wsystem$address() {
        return _wsystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static int _wsystem(MemorySegment _Command) {
        var mh$ = _wsystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsystem", _Command);
            }
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _swab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_swab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static FunctionDescriptor _swab$descriptor() {
        return _swab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MethodHandle _swab$handle() {
        return _swab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MemorySegment _swab$address() {
        return _swab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static void _swab(MemorySegment _Buf1, MemorySegment _Buf2, int _SizeInBytes) {
        var mh$ = _swab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_swab", _Buf1, _Buf2, _SizeInBytes);
            }
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static FunctionDescriptor exit$descriptor() {
        return exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static MethodHandle exit$handle() {
        return exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static MemorySegment exit$address() {
        return exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static void exit(int _Code) {
        var mh$ = exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static FunctionDescriptor _exit$descriptor() {
        return _exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static MethodHandle _exit$handle() {
        return _exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static MemorySegment _exit$address() {
        return _exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static void _exit(int _Code) {
        var mh$ = _exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Exit$ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_Exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static FunctionDescriptor _Exit$descriptor() {
        return _Exit$.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static MethodHandle _Exit$handle() {
        return _Exit$.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static MemorySegment _Exit$address() {
        return _Exit$.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static void _Exit(int _Code) {
        var mh$ = _Exit$.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("quick_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static FunctionDescriptor quick_exit$descriptor() {
        return quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static MethodHandle quick_exit$handle() {
        return quick_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static MemorySegment quick_exit$address() {
        return quick_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static void quick_exit(int _Code) {
        var mh$ = quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("quick_exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = winapi.findOrThrow("abort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static FunctionDescriptor abort$descriptor() {
        return abort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static MethodHandle abort$handle() {
        return abort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static MemorySegment abort$address() {
        return abort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static void abort() {
        var mh$ = abort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abort");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_abort_behavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_set_abort_behavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static FunctionDescriptor _set_abort_behavior$descriptor() {
        return _set_abort_behavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static MethodHandle _set_abort_behavior$handle() {
        return _set_abort_behavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static MemorySegment _set_abort_behavior$address() {
        return _set_abort_behavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static int _set_abort_behavior(int _Flags, int _Mask) {
        var mh$ = _set_abort_behavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_abort_behavior", _Flags, _Mask);
            }
            return (int)mh$.invokeExact(_Flags, _Mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("atexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static FunctionDescriptor atexit$descriptor() {
        return atexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MethodHandle atexit$handle() {
        return atexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MemorySegment atexit$address() {
        return atexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static int atexit(MemorySegment x0) {
        var mh$ = atexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atexit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _onexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_onexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static FunctionDescriptor _onexit$descriptor() {
        return _onexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MethodHandle _onexit$handle() {
        return _onexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment _onexit$address() {
        return _onexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment _onexit(MemorySegment _Func) {
        var mh$ = _onexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_onexit", _Func);
            }
            return (MemorySegment)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class at_quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("at_quick_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static FunctionDescriptor at_quick_exit$descriptor() {
        return at_quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MethodHandle at_quick_exit$handle() {
        return at_quick_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MemorySegment at_quick_exit$address() {
        return at_quick_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static int at_quick_exit(MemorySegment x0) {
        var mh$ = at_quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("at_quick_exit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_purecall_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_set_purecall_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_purecall_handler$descriptor() {
        return _set_purecall_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MethodHandle _set_purecall_handler$handle() {
        return _set_purecall_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MemorySegment _set_purecall_handler$address() {
        return _set_purecall_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MemorySegment _set_purecall_handler(MemorySegment _Handler) {
        var mh$ = _set_purecall_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_purecall_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_purecall_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("_get_purecall_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static FunctionDescriptor _get_purecall_handler$descriptor() {
        return _get_purecall_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MethodHandle _get_purecall_handler$handle() {
        return _get_purecall_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MemorySegment _get_purecall_handler$address() {
        return _get_purecall_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MemorySegment _get_purecall_handler() {
        var mh$ = _get_purecall_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_purecall_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_set_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_invalid_parameter_handler$descriptor() {
        return _set_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MethodHandle _set_invalid_parameter_handler$handle() {
        return _set_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_invalid_parameter_handler$address() {
        return _set_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_invalid_parameter_handler(MemorySegment _Handler) {
        var mh$ = _set_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_invalid_parameter_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("_get_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static FunctionDescriptor _get_invalid_parameter_handler$descriptor() {
        return _get_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MethodHandle _get_invalid_parameter_handler$handle() {
        return _get_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_invalid_parameter_handler$address() {
        return _get_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_invalid_parameter_handler() {
        var mh$ = _get_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_invalid_parameter_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_thread_local_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_set_thread_local_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_thread_local_invalid_parameter_handler$descriptor() {
        return _set_thread_local_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MethodHandle _set_thread_local_invalid_parameter_handler$handle() {
        return _set_thread_local_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_thread_local_invalid_parameter_handler$address() {
        return _set_thread_local_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_thread_local_invalid_parameter_handler(MemorySegment _Handler) {
        var mh$ = _set_thread_local_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_thread_local_invalid_parameter_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_thread_local_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("_get_thread_local_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static FunctionDescriptor _get_thread_local_invalid_parameter_handler$descriptor() {
        return _get_thread_local_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MethodHandle _get_thread_local_invalid_parameter_handler$handle() {
        return _get_thread_local_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_thread_local_invalid_parameter_handler$address() {
        return _get_thread_local_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_thread_local_invalid_parameter_handler() {
        var mh$ = _get_thread_local_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_thread_local_invalid_parameter_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_error_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_set_error_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static FunctionDescriptor _set_error_mode$descriptor() {
        return _set_error_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static MethodHandle _set_error_mode$handle() {
        return _set_error_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static MemorySegment _set_error_mode$address() {
        return _set_error_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static int _set_error_mode(int _Mode) {
        var mh$ = _set_error_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_error_mode", _Mode);
            }
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sys_errlist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__sys_errlist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static FunctionDescriptor __sys_errlist$descriptor() {
        return __sys_errlist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MethodHandle __sys_errlist$handle() {
        return __sys_errlist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MemorySegment __sys_errlist$address() {
        return __sys_errlist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MemorySegment __sys_errlist() {
        var mh$ = __sys_errlist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sys_errlist");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sys_nerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__sys_nerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static FunctionDescriptor __sys_nerr$descriptor() {
        return __sys_nerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MethodHandle __sys_nerr$handle() {
        return __sys_nerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MemorySegment __sys_nerr$address() {
        return __sys_nerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MemorySegment __sys_nerr() {
        var mh$ = __sys_nerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sys_nerr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static MemorySegment perror$address() {
        return perror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static void perror(MemorySegment _ErrMsg) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", _ErrMsg);
            }
            mh$.invokeExact(_ErrMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__pgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__p__pgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static FunctionDescriptor __p__pgmptr$descriptor() {
        return __p__pgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MethodHandle __p__pgmptr$handle() {
        return __p__pgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MemorySegment __p__pgmptr$address() {
        return __p__pgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MemorySegment __p__pgmptr() {
        var mh$ = __p__pgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__pgmptr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__wpgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__p__wpgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static FunctionDescriptor __p__wpgmptr$descriptor() {
        return __p__wpgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MethodHandle __p__wpgmptr$handle() {
        return __p__wpgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MemorySegment __p__wpgmptr$address() {
        return __p__wpgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MemorySegment __p__wpgmptr() {
        var mh$ = __p__wpgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__wpgmptr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__p__fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static FunctionDescriptor __p__fmode$descriptor() {
        return __p__fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MethodHandle __p__fmode$handle() {
        return __p__fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MemorySegment __p__fmode$address() {
        return __p__fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MemorySegment __p__fmode() {
        var mh$ = __p__fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__fmode");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_pgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_get_pgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static FunctionDescriptor _get_pgmptr$descriptor() {
        return _get_pgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static MethodHandle _get_pgmptr$handle() {
        return _get_pgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static MemorySegment _get_pgmptr$address() {
        return _get_pgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static int _get_pgmptr(MemorySegment _Value) {
        var mh$ = _get_pgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_pgmptr", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_wpgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_get_wpgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static FunctionDescriptor _get_wpgmptr$descriptor() {
        return _get_wpgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static MethodHandle _get_wpgmptr$handle() {
        return _get_wpgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static MemorySegment _get_wpgmptr$address() {
        return _get_wpgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static int _get_wpgmptr(MemorySegment _Value) {
        var mh$ = _get_wpgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_wpgmptr", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_set_fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static FunctionDescriptor _set_fmode$descriptor() {
        return _set_fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static MethodHandle _set_fmode$handle() {
        return _set_fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static MemorySegment _set_fmode$address() {
        return _set_fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static int _set_fmode(int _Mode) {
        var mh$ = _set_fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_fmode", _Mode);
            }
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_get_fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static FunctionDescriptor _get_fmode$descriptor() {
        return _get_fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static MethodHandle _get_fmode$handle() {
        return _get_fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static MemorySegment _get_fmode$address() {
        return _get_fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static int _get_fmode(MemorySegment _PMode) {
        var mh$ = _get_fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_fmode", _PMode);
            }
            return (int)mh$.invokeExact(_PMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("abs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static FunctionDescriptor abs$descriptor() {
        return abs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static MethodHandle abs$handle() {
        return abs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static MemorySegment abs$address() {
        return abs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static int abs(int _Number) {
        var mh$ = abs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abs", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class labs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("labs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static FunctionDescriptor labs$descriptor() {
        return labs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static MethodHandle labs$handle() {
        return labs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static MemorySegment labs$address() {
        return labs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static int labs(int _Number) {
        var mh$ = labs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("labs", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("llabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static FunctionDescriptor llabs$descriptor() {
        return llabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static MethodHandle llabs$handle() {
        return llabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static MemorySegment llabs$address() {
        return llabs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static long llabs(long _Number) {
        var mh$ = llabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llabs", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _abs64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_abs64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static FunctionDescriptor _abs64$descriptor() {
        return _abs64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static MethodHandle _abs64$handle() {
        return _abs64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static MemorySegment _abs64$address() {
        return _abs64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static long _abs64(long _Number) {
        var mh$ = _abs64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_abs64", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_ushort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_SHORT,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_byteswap_ushort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_ushort$descriptor() {
        return _byteswap_ushort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static MethodHandle _byteswap_ushort$handle() {
        return _byteswap_ushort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static MemorySegment _byteswap_ushort$address() {
        return _byteswap_ushort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static short _byteswap_ushort(short _Number) {
        var mh$ = _byteswap_ushort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_ushort", _Number);
            }
            return (short)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_ulong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_byteswap_ulong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_ulong$descriptor() {
        return _byteswap_ulong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static MethodHandle _byteswap_ulong$handle() {
        return _byteswap_ulong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static MemorySegment _byteswap_ulong$address() {
        return _byteswap_ulong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static int _byteswap_ulong(int _Number) {
        var mh$ = _byteswap_ulong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_ulong", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_byteswap_uint64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_uint64$descriptor() {
        return _byteswap_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static MethodHandle _byteswap_uint64$handle() {
        return _byteswap_uint64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static MemorySegment _byteswap_uint64$address() {
        return _byteswap_uint64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static long _byteswap_uint64(long _Number) {
        var mh$ = _byteswap_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_uint64", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _div_t.layout(),
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static FunctionDescriptor div$descriptor() {
        return div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MethodHandle div$handle() {
        return div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MemorySegment div$address() {
        return div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int _Numerator, int _Denominator) {
        var mh$ = div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("div", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _ldiv_t.layout(),
            winapi.C_LONG,
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ldiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static FunctionDescriptor ldiv$descriptor() {
        return ldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MethodHandle ldiv$handle() {
        return ldiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MemorySegment ldiv$address() {
        return ldiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, int _Numerator, int _Denominator) {
        var mh$ = ldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldiv", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _lldiv_t.layout(),
            winapi.C_LONG_LONG,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("lldiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static FunctionDescriptor lldiv$descriptor() {
        return lldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MethodHandle lldiv$handle() {
        return lldiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MemorySegment lldiv$address() {
        return lldiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long _Numerator, long _Denominator) {
        var mh$ = lldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lldiv", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lrotl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_lrotl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _lrotl$descriptor() {
        return _lrotl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static MethodHandle _lrotl$handle() {
        return _lrotl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static MemorySegment _lrotl$address() {
        return _lrotl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static int _lrotl(int _Value, int _Shift) {
        var mh$ = _lrotl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lrotl", _Value, _Shift);
            }
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lrotr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_lrotr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _lrotr$descriptor() {
        return _lrotr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static MethodHandle _lrotr$handle() {
        return _lrotr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static MemorySegment _lrotr$address() {
        return _lrotr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static int _lrotr(int _Value, int _Shift) {
        var mh$ = _lrotr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lrotr", _Value, _Shift);
            }
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("srand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static FunctionDescriptor srand$descriptor() {
        return srand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static MethodHandle srand$handle() {
        return srand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static MemorySegment srand$address() {
        return srand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static void srand(int _Seed) {
        var mh$ = srand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand", _Seed);
            }
            mh$.invokeExact(_Seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT    );

        public static final MemorySegment ADDR = winapi.findOrThrow("rand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static FunctionDescriptor rand$descriptor() {
        return rand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static MethodHandle rand$handle() {
        return rand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static MemorySegment rand$address() {
        return rand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static int rand() {
        var mh$ = rand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rand");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_DOUBLE,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("atof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static FunctionDescriptor atof$descriptor() {
        return atof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static MethodHandle atof$handle() {
        return atof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static MemorySegment atof$address() {
        return atof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static double atof(MemorySegment _String) {
        var mh$ = atof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atof", _String);
            }
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("atoi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static FunctionDescriptor atoi$descriptor() {
        return atoi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static MethodHandle atoi$handle() {
        return atoi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static MemorySegment atoi$address() {
        return atoi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static int atoi(MemorySegment _String) {
        var mh$ = atoi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoi", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("atol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static FunctionDescriptor atol$descriptor() {
        return atol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static MethodHandle atol$handle() {
        return atol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static MemorySegment atol$address() {
        return atol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static int atol(MemorySegment _String) {
        var mh$ = atol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atol", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("atoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static FunctionDescriptor atoll$descriptor() {
        return atoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static MethodHandle atoll$handle() {
        return atoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static MemorySegment atoll$address() {
        return atoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static long atoll(MemorySegment _String) {
        var mh$ = atoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoll", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static FunctionDescriptor _atoi64$descriptor() {
        return _atoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static MethodHandle _atoi64$handle() {
        return _atoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static MemorySegment _atoi64$address() {
        return _atoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static long _atoi64(MemorySegment _String) {
        var mh$ = _atoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi64", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atof_l$descriptor() {
        return _atof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atof_l$handle() {
        return _atof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atof_l$address() {
        return _atof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static double _atof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atof_l", _String, _Locale);
            }
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atoi_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoi_l$descriptor() {
        return _atoi_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoi_l$handle() {
        return _atoi_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoi_l$address() {
        return _atoi_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoi_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoi_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atol_l$descriptor() {
        return _atol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atol_l$handle() {
        return _atol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atol_l$address() {
        return _atol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atol_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atol_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoll_l$descriptor() {
        return _atoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoll_l$handle() {
        return _atoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoll_l$address() {
        return _atoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _atoll_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoll_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoi64_l$descriptor() {
        return _atoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoi64_l$handle() {
        return _atoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoi64_l$address() {
        return _atoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _atoi64_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi64_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoflt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atoflt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static FunctionDescriptor _atoflt$descriptor() {
        return _atoflt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static MethodHandle _atoflt$handle() {
        return _atoflt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static MemorySegment _atoflt$address() {
        return _atoflt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static int _atoflt(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atoflt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoflt", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atodbl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atodbl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static FunctionDescriptor _atodbl$descriptor() {
        return _atodbl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static MethodHandle _atodbl$handle() {
        return _atodbl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static MemorySegment _atodbl$address() {
        return _atodbl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static int _atodbl(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atodbl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atodbl", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoldbl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atoldbl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static FunctionDescriptor _atoldbl$descriptor() {
        return _atoldbl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static MethodHandle _atoldbl$handle() {
        return _atoldbl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static MemorySegment _atoldbl$address() {
        return _atoldbl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static int _atoldbl(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atoldbl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoldbl", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoflt_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atoflt_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoflt_l$descriptor() {
        return _atoflt_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoflt_l$handle() {
        return _atoflt_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoflt_l$address() {
        return _atoflt_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoflt_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoflt_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoflt_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atodbl_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atodbl_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atodbl_l$descriptor() {
        return _atodbl_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atodbl_l$handle() {
        return _atodbl_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atodbl_l$address() {
        return _atodbl_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static int _atodbl_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atodbl_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atodbl_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoldbl_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_atoldbl_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoldbl_l$descriptor() {
        return _atoldbl_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoldbl_l$handle() {
        return _atoldbl_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoldbl_l$address() {
        return _atoldbl_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoldbl_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoldbl_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoldbl_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_FLOAT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("strtof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtof$descriptor() {
        return strtof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtof$handle() {
        return strtof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtof$address() {
        return strtof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static float strtof(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtof", _String, _EndPtr);
            }
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_FLOAT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtof_l$descriptor() {
        return _strtof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtof_l$handle() {
        return _strtof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtof_l$address() {
        return _strtof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static float _strtof_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtof_l", _String, _EndPtr, _Locale);
            }
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("strtod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtod$descriptor() {
        return strtod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtod$handle() {
        return strtod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtod$address() {
        return strtod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static double strtod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtod", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtod_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtod_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtod_l$descriptor() {
        return _strtod_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtod_l$handle() {
        return _strtod_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtod_l$address() {
        return _strtod_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _strtod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtod_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtod_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("strtold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtold$descriptor() {
        return strtold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtold$handle() {
        return strtold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtold$address() {
        return strtold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static double strtold(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtold", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtold_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_DOUBLE,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtold_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtold_l$descriptor() {
        return _strtold_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtold_l$handle() {
        return _strtold_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtold_l$address() {
        return _strtold_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _strtold_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtold_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtold_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("strtol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtol$descriptor() {
        return strtol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtol$handle() {
        return strtol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtol$address() {
        return strtol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static int strtol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtol", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtol_l$descriptor() {
        return _strtol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtol_l$handle() {
        return _strtol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtol_l$address() {
        return _strtol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _strtol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtol_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("strtoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoll$descriptor() {
        return strtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoll$handle() {
        return strtoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoll$address() {
        return strtoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long strtoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoll", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoll_l$descriptor() {
        return _strtoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoll_l$handle() {
        return _strtoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoll_l$address() {
        return _strtoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoll_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("strtoul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoul$descriptor() {
        return strtoul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoul$handle() {
        return strtoul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoul$address() {
        return strtoul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static int strtoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoul", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoul_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtoul_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoul_l$descriptor() {
        return _strtoul_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoul_l$handle() {
        return _strtoul_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoul_l$address() {
        return _strtoul_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _strtoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoul_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoul_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("strtoull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoull$descriptor() {
        return strtoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoull$handle() {
        return strtoull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoull$address() {
        return strtoull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long strtoull(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoull", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoull_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtoull_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoull_l$descriptor() {
        return _strtoull_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoull_l$handle() {
        return _strtoull_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoull_l$address() {
        return _strtoull_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoull_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoull_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoull_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _strtoi64$descriptor() {
        return _strtoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _strtoi64$handle() {
        return _strtoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _strtoi64$address() {
        return _strtoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long _strtoi64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _strtoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoi64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoi64_l$descriptor() {
        return _strtoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoi64_l$handle() {
        return _strtoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoi64_l$address() {
        return _strtoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoi64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoi64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoui64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtoui64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _strtoui64$descriptor() {
        return _strtoui64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _strtoui64$handle() {
        return _strtoui64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _strtoui64$address() {
        return _strtoui64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long _strtoui64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _strtoui64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoui64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoui64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_strtoui64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoui64_l$descriptor() {
        return _strtoui64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoui64_l$handle() {
        return _strtoui64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoui64_l$address() {
        return _strtoui64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoui64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoui64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoui64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_itoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _itoa_s$descriptor() {
        return _itoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _itoa_s$handle() {
        return _itoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _itoa_s$address() {
        return _itoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _itoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_itoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _itoa$descriptor() {
        return _itoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _itoa$handle() {
        return _itoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itoa$address() {
        return _itoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ltoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltoa_s$descriptor() {
        return _ltoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ltoa_s$handle() {
        return _ltoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ltoa_s$address() {
        return _ltoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ltoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ltoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltoa$descriptor() {
        return _ltoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ltoa$handle() {
        return _ltoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltoa$address() {
        return _ltoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ultoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultoa_s$descriptor() {
        return _ultoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ultoa_s$handle() {
        return _ultoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ultoa_s$address() {
        return _ultoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ultoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ultoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultoa$descriptor() {
        return _ultoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ultoa$handle() {
        return _ultoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultoa$address() {
        return _ultoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64toa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_i64toa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64toa_s$descriptor() {
        return _i64toa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _i64toa_s$handle() {
        return _i64toa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _i64toa_s$address() {
        return _i64toa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _i64toa_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _i64toa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64toa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64toa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_i64toa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64toa$descriptor() {
        return _i64toa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _i64toa$handle() {
        return _i64toa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64toa$address() {
        return _i64toa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64toa(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _i64toa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64toa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64toa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ui64toa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64toa_s$descriptor() {
        return _ui64toa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ui64toa_s$handle() {
        return _ui64toa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa_s$address() {
        return _ui64toa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ui64toa_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ui64toa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64toa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64toa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ui64toa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64toa$descriptor() {
        return _ui64toa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ui64toa$handle() {
        return _ui64toa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa$address() {
        return _ui64toa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ui64toa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64toa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ecvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ecvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _ecvt_s$descriptor() {
        return _ecvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _ecvt_s$handle() {
        return _ecvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt_s$address() {
        return _ecvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static int _ecvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _ecvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ecvt_s", _Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ecvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_ecvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _ecvt$descriptor() {
        return _ecvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _ecvt$handle() {
        return _ecvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt$address() {
        return _ecvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt(double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _ecvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ecvt", _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fcvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_fcvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _fcvt_s$descriptor() {
        return _fcvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _fcvt_s$handle() {
        return _fcvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt_s$address() {
        return _fcvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static int _fcvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _fcvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fcvt_s", _Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_fcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _fcvt$descriptor() {
        return _fcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _fcvt$handle() {
        return _fcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt$address() {
        return _fcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt(double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _fcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fcvt", _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gcvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_DOUBLE,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_gcvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static FunctionDescriptor _gcvt_s$descriptor() {
        return _gcvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static MethodHandle _gcvt_s$handle() {
        return _gcvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static MemorySegment _gcvt_s$address() {
        return _gcvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static int _gcvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _DigitCount) {
        var mh$ = _gcvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gcvt_s", _Buffer, _BufferCount, _Value, _DigitCount);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_gcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static FunctionDescriptor _gcvt$descriptor() {
        return _gcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MethodHandle _gcvt$handle() {
        return _gcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MemorySegment _gcvt$address() {
        return _gcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MemorySegment _gcvt(double _Value, int _DigitCount, MemorySegment _Buffer) {
        var mh$ = _gcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gcvt", _Value, _DigitCount, _Buffer);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mblen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("mblen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mblen$descriptor() {
        return mblen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static MethodHandle mblen$handle() {
        return mblen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static MemorySegment mblen$address() {
        return mblen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static int mblen(MemorySegment _Ch, long _MaxCount) {
        var mh$ = mblen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mblen", _Ch, _MaxCount);
            }
            return (int)mh$.invokeExact(_Ch, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mblen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_mblen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mblen_l$descriptor() {
        return _mblen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mblen_l$handle() {
        return _mblen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mblen_l$address() {
        return _mblen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static int _mblen_l(MemorySegment _Ch, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mblen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mblen_l", _Ch, _MaxCount, _Locale);
            }
            return (int)mh$.invokeExact(_Ch, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_mbstrlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static FunctionDescriptor _mbstrlen$descriptor() {
        return _mbstrlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static MethodHandle _mbstrlen$handle() {
        return _mbstrlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static MemorySegment _mbstrlen$address() {
        return _mbstrlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static long _mbstrlen(MemorySegment _String) {
        var mh$ = _mbstrlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrlen", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrlen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_mbstrlen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstrlen_l$descriptor() {
        return _mbstrlen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstrlen_l$handle() {
        return _mbstrlen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstrlen_l$address() {
        return _mbstrlen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _mbstrlen_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _mbstrlen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrlen_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrnlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_mbstrnlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor _mbstrnlen$descriptor() {
        return _mbstrnlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static MethodHandle _mbstrnlen$handle() {
        return _mbstrnlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static MemorySegment _mbstrnlen$address() {
        return _mbstrnlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static long _mbstrnlen(MemorySegment _String, long _MaxCount) {
        var mh$ = _mbstrnlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrnlen", _String, _MaxCount);
            }
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrnlen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_mbstrnlen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstrnlen_l$descriptor() {
        return _mbstrnlen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstrnlen_l$handle() {
        return _mbstrnlen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstrnlen_l$address() {
        return _mbstrnlen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _mbstrnlen_l(MemorySegment _String, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstrnlen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrnlen_l", _String, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_String, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbtowc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("mbtowc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static FunctionDescriptor mbtowc$descriptor() {
        return mbtowc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static MethodHandle mbtowc$handle() {
        return mbtowc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static MemorySegment mbtowc$address() {
        return mbtowc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static int mbtowc(MemorySegment _DstCh, MemorySegment _SrcCh, long _SrcSizeInBytes) {
        var mh$ = mbtowc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbtowc", _DstCh, _SrcCh, _SrcSizeInBytes);
            }
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbtowc_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_mbtowc_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbtowc_l$descriptor() {
        return _mbtowc_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbtowc_l$handle() {
        return _mbtowc_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbtowc_l$address() {
        return _mbtowc_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static int _mbtowc_l(MemorySegment _DstCh, MemorySegment _SrcCh, long _SrcSizeInBytes, MemorySegment _Locale) {
        var mh$ = _mbtowc_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbtowc_l", _DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
            }
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbstowcs_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("mbstowcs_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mbstowcs_s$descriptor() {
        return mbstowcs_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static MethodHandle mbstowcs_s$handle() {
        return mbstowcs_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static MemorySegment mbstowcs_s$address() {
        return mbstowcs_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static int mbstowcs_s(MemorySegment _PtNumOfCharConverted, MemorySegment _DstBuf, long _SizeInWords, MemorySegment _SrcBuf, long _MaxCount) {
        var mh$ = mbstowcs_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbstowcs_s", _PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbstowcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("mbstowcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mbstowcs$descriptor() {
        return mbstowcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static MethodHandle mbstowcs$handle() {
        return mbstowcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static MemorySegment mbstowcs$address() {
        return mbstowcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static long mbstowcs(MemorySegment _Dest, MemorySegment _Source, long _MaxCount) {
        var mh$ = mbstowcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbstowcs", _Dest, _Source, _MaxCount);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstowcs_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_mbstowcs_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstowcs_s_l$descriptor() {
        return _mbstowcs_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstowcs_s_l$handle() {
        return _mbstowcs_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstowcs_s_l$address() {
        return _mbstowcs_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static int _mbstowcs_s_l(MemorySegment _PtNumOfCharConverted, MemorySegment _DstBuf, long _SizeInWords, MemorySegment _SrcBuf, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstowcs_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstowcs_s_l", _PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstowcs_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_mbstowcs_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstowcs_l$descriptor() {
        return _mbstowcs_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstowcs_l$handle() {
        return _mbstowcs_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstowcs_l$address() {
        return _mbstowcs_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _mbstowcs_l(MemorySegment _Dest, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstowcs_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstowcs_l", _Dest, _Source, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wctomb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wctomb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static FunctionDescriptor wctomb$descriptor() {
        return wctomb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static MethodHandle wctomb$handle() {
        return wctomb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static MemorySegment wctomb$address() {
        return wctomb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static int wctomb(MemorySegment _MbCh, short _WCh) {
        var mh$ = wctomb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wctomb", _MbCh, _WCh);
            }
            return (int)mh$.invokeExact(_MbCh, _WCh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wctomb_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wctomb_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wctomb_l$descriptor() {
        return _wctomb_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wctomb_l$handle() {
        return _wctomb_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wctomb_l$address() {
        return _wctomb_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static int _wctomb_l(MemorySegment _MbCh, short _WCh, MemorySegment _Locale) {
        var mh$ = _wctomb_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wctomb_l", _MbCh, _WCh, _Locale);
            }
            return (int)mh$.invokeExact(_MbCh, _WCh, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wctomb_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_SHORT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wctomb_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static FunctionDescriptor wctomb_s$descriptor() {
        return wctomb_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static MethodHandle wctomb_s$handle() {
        return wctomb_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static MemorySegment wctomb_s$address() {
        return wctomb_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static int wctomb_s(MemorySegment _SizeConverted, MemorySegment _MbCh, long _SizeInBytes, short _WCh) {
        var mh$ = wctomb_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wctomb_s", _SizeConverted, _MbCh, _SizeInBytes, _WCh);
            }
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wctomb_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_SHORT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wctomb_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wctomb_s_l$descriptor() {
        return _wctomb_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wctomb_s_l$handle() {
        return _wctomb_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wctomb_s_l$address() {
        return _wctomb_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static int _wctomb_s_l(MemorySegment _SizeConverted, MemorySegment _MbCh, long _SizeInBytes, short _WCh, MemorySegment _Locale) {
        var mh$ = _wctomb_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wctomb_s_l", _SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
            }
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstombs_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstombs_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static FunctionDescriptor wcstombs_s$descriptor() {
        return wcstombs_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static MethodHandle wcstombs_s$handle() {
        return wcstombs_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static MemorySegment wcstombs_s$address() {
        return wcstombs_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static int wcstombs_s(MemorySegment _PtNumOfCharConverted, MemorySegment _Dst, long _DstSizeInBytes, MemorySegment _Src, long _MaxCountInBytes) {
        var mh$ = wcstombs_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstombs_s", _PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstombs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("wcstombs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor wcstombs$descriptor() {
        return wcstombs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static MethodHandle wcstombs$handle() {
        return wcstombs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static MemorySegment wcstombs$address() {
        return wcstombs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static long wcstombs(MemorySegment _Dest, MemorySegment _Source, long _MaxCount) {
        var mh$ = wcstombs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstombs", _Dest, _Source, _MaxCount);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstombs_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstombs_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstombs_s_l$descriptor() {
        return _wcstombs_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstombs_s_l$handle() {
        return _wcstombs_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstombs_s_l$address() {
        return _wcstombs_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static int _wcstombs_s_l(MemorySegment _PtNumOfCharConverted, MemorySegment _Dst, long _DstSizeInBytes, MemorySegment _Src, long _MaxCountInBytes, MemorySegment _Locale) {
        var mh$ = _wcstombs_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstombs_s_l", _PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstombs_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_wcstombs_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstombs_l$descriptor() {
        return _wcstombs_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstombs_l$handle() {
        return _wcstombs_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstombs_l$address() {
        return _wcstombs_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _wcstombs_l(MemorySegment _Dest, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _wcstombs_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstombs_l", _Dest, _Source, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fullpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_fullpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _fullpath$descriptor() {
        return _fullpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MethodHandle _fullpath$handle() {
        return _fullpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _fullpath$address() {
        return _fullpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _fullpath(MemorySegment _Buffer, MemorySegment _Path, long _BufferCount) {
        var mh$ = _fullpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fullpath", _Buffer, _Path, _BufferCount);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _makepath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_makepath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static FunctionDescriptor _makepath_s$descriptor() {
        return _makepath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MethodHandle _makepath_s$handle() {
        return _makepath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MemorySegment _makepath_s$address() {
        return _makepath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static int _makepath_s(MemorySegment _Buffer, long _BufferCount, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _makepath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_makepath_s", _Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _makepath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_makepath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static FunctionDescriptor _makepath$descriptor() {
        return _makepath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MethodHandle _makepath$handle() {
        return _makepath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MemorySegment _makepath$address() {
        return _makepath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static void _makepath(MemorySegment _Buffer, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _makepath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_makepath", _Buffer, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _splitpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_splitpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static FunctionDescriptor _splitpath$descriptor() {
        return _splitpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static MethodHandle _splitpath$handle() {
        return _splitpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static MemorySegment _splitpath$address() {
        return _splitpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static void _splitpath(MemorySegment _FullPath, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _splitpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_splitpath", _FullPath, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _splitpath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_splitpath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static FunctionDescriptor _splitpath_s$descriptor() {
        return _splitpath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static MethodHandle _splitpath_s$handle() {
        return _splitpath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static MemorySegment _splitpath_s$address() {
        return _splitpath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static int _splitpath_s(MemorySegment _FullPath, MemorySegment _Drive, long _DriveCount, MemorySegment _Dir, long _DirCount, MemorySegment _Filename, long _FilenameCount, MemorySegment _Ext, long _ExtCount) {
        var mh$ = _splitpath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_splitpath_s", _FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
            }
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static FunctionDescriptor getenv_s$descriptor() {
        return getenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static MethodHandle getenv_s$handle() {
        return getenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static MemorySegment getenv_s$address() {
        return getenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static int getenv_s(MemorySegment _RequiredCount, MemorySegment _Buffer, long _BufferCount, MemorySegment _VarName) {
        var mh$ = getenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getenv_s", _RequiredCount, _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___argc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__p___argc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static FunctionDescriptor __p___argc$descriptor() {
        return __p___argc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MethodHandle __p___argc$handle() {
        return __p___argc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MemorySegment __p___argc$address() {
        return __p___argc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MemorySegment __p___argc() {
        var mh$ = __p___argc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___argc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___argv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__p___argv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static FunctionDescriptor __p___argv$descriptor() {
        return __p___argv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MethodHandle __p___argv$handle() {
        return __p___argv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MemorySegment __p___argv$address() {
        return __p___argv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MemorySegment __p___argv() {
        var mh$ = __p___argv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___argv");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___wargv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__p___wargv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static FunctionDescriptor __p___wargv$descriptor() {
        return __p___wargv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MethodHandle __p___wargv$handle() {
        return __p___wargv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MemorySegment __p___wargv$address() {
        return __p___wargv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MemorySegment __p___wargv() {
        var mh$ = __p___wargv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___wargv");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__environ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__p__environ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static FunctionDescriptor __p__environ$descriptor() {
        return __p__environ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MethodHandle __p__environ$handle() {
        return __p__environ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MemorySegment __p__environ$address() {
        return __p__environ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MemorySegment __p__environ() {
        var mh$ = __p__environ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__environ");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__wenviron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER    );

        public static final MemorySegment ADDR = winapi.findOrThrow("__p__wenviron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static FunctionDescriptor __p__wenviron$descriptor() {
        return __p__wenviron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MethodHandle __p__wenviron$handle() {
        return __p__wenviron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MemorySegment __p__wenviron$address() {
        return __p__wenviron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MemorySegment __p__wenviron() {
        var mh$ = __p__wenviron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__wenviron");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("getenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static FunctionDescriptor getenv$descriptor() {
        return getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MethodHandle getenv$handle() {
        return getenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MemorySegment getenv$address() {
        return getenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MemorySegment getenv(MemorySegment _VarName) {
        var mh$ = getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getenv", _VarName);
            }
            return (MemorySegment)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _dupenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_dupenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static FunctionDescriptor _dupenv_s$descriptor() {
        return _dupenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static MethodHandle _dupenv_s$handle() {
        return _dupenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static MemorySegment _dupenv_s$address() {
        return _dupenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static int _dupenv_s(MemorySegment _Buffer, MemorySegment _BufferCount, MemorySegment _VarName) {
        var mh$ = _dupenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_dupenv_s", _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class system {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("system");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static FunctionDescriptor system$descriptor() {
        return system.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static MethodHandle system$handle() {
        return system.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static MemorySegment system$address() {
        return system.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static int system(MemorySegment _Command) {
        var mh$ = system.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("system", _Command);
            }
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_putenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static FunctionDescriptor _putenv$descriptor() {
        return _putenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static MethodHandle _putenv$handle() {
        return _putenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static MemorySegment _putenv$address() {
        return _putenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static int _putenv(MemorySegment _EnvString) {
        var mh$ = _putenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_putenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static FunctionDescriptor _putenv_s$descriptor() {
        return _putenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static MethodHandle _putenv_s$handle() {
        return _putenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static MemorySegment _putenv_s$address() {
        return _putenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static int _putenv_s(MemorySegment _Name, MemorySegment _Value) {
        var mh$ = _putenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putenv_s", _Name, _Value);
            }
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _searchenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_LONG_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_searchenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _searchenv_s$descriptor() {
        return _searchenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static MethodHandle _searchenv_s$handle() {
        return _searchenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _searchenv_s$address() {
        return _searchenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static int _searchenv_s(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _searchenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_searchenv_s", _Filename, _VarName, _Buffer, _BufferCount);
            }
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _searchenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_searchenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static FunctionDescriptor _searchenv$descriptor() {
        return _searchenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static MethodHandle _searchenv$handle() {
        return _searchenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static MemorySegment _searchenv$address() {
        return _searchenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static void _searchenv(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer) {
        var mh$ = _searchenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_searchenv", _Filename, _VarName, _Buffer);
            }
            mh$.invokeExact(_Filename, _VarName, _Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _seterrormode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_seterrormode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static FunctionDescriptor _seterrormode$descriptor() {
        return _seterrormode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static MethodHandle _seterrormode$handle() {
        return _seterrormode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static MemorySegment _seterrormode$address() {
        return _seterrormode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static void _seterrormode(int _Mode) {
        var mh$ = _seterrormode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_seterrormode", _Mode);
            }
            mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _beep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_INT,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_beep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static FunctionDescriptor _beep$descriptor() {
        return _beep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static MethodHandle _beep$handle() {
        return _beep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static MemorySegment _beep$address() {
        return _beep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static void _beep(int _Frequency, int _Duration) {
        var mh$ = _beep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_beep", _Frequency, _Duration);
            }
            mh$.invokeExact(_Frequency, _Duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _sleep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_LONG
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("_sleep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static FunctionDescriptor _sleep$descriptor() {
        return _sleep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static MethodHandle _sleep$handle() {
        return _sleep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static MemorySegment _sleep$address() {
        return _sleep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static void _sleep(int _Duration) {
        var mh$ = _sleep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_sleep", _Duration);
            }
            mh$.invokeExact(_Duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ecvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ecvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor ecvt$descriptor() {
        return ecvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle ecvt$handle() {
        return ecvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment ecvt$address() {
        return ecvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment ecvt(double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = ecvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ecvt", _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("fcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor fcvt$descriptor() {
        return fcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle fcvt$handle() {
        return fcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment fcvt$address() {
        return fcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment fcvt(double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = fcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fcvt", _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_DOUBLE,
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("gcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static FunctionDescriptor gcvt$descriptor() {
        return gcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MethodHandle gcvt$handle() {
        return gcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MemorySegment gcvt$address() {
        return gcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MemorySegment gcvt(double _Value, int _DigitCount, MemorySegment _DstBuf) {
        var mh$ = gcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gcvt", _Value, _DigitCount, _DstBuf);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _DstBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class itoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_INT,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("itoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor itoa$descriptor() {
        return itoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle itoa$handle() {
        return itoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment itoa$address() {
        return itoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment itoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = itoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("itoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ltoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ltoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor ltoa$descriptor() {
        return ltoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle ltoa$handle() {
        return ltoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ltoa$address() {
        return ltoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ltoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = ltoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ltoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class swab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("swab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static FunctionDescriptor swab$descriptor() {
        return swab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MethodHandle swab$handle() {
        return swab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MemorySegment swab$address() {
        return swab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static void swab(MemorySegment _Buf1, MemorySegment _Buf2, int _SizeInBytes) {
        var mh$ = swab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("swab", _Buf1, _Buf2, _SizeInBytes);
            }
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ultoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_INT
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("ultoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor ultoa$descriptor() {
        return ultoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle ultoa$handle() {
        return ultoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ultoa$address() {
        return ultoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ultoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = ultoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ultoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_INT,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("putenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static FunctionDescriptor putenv$descriptor() {
        return putenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static MethodHandle putenv$handle() {
        return putenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static MemorySegment putenv$address() {
        return putenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static int putenv(MemorySegment _EnvString) {
        var mh$ = putenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class onexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("onexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static FunctionDescriptor onexit$descriptor() {
        return onexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MethodHandle onexit$handle() {
        return onexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment onexit$address() {
        return onexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment onexit(MemorySegment _Func) {
        var mh$ = onexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("onexit", _Func);
            }
            return (MemorySegment)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int REGCLS_SINGLEUSE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_SINGLEUSE = 0
     * }
     */
    public static int REGCLS_SINGLEUSE() {
        return REGCLS_SINGLEUSE;
    }
    private static final int REGCLS_MULTIPLEUSE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_MULTIPLEUSE = 1
     * }
     */
    public static int REGCLS_MULTIPLEUSE() {
        return REGCLS_MULTIPLEUSE;
    }
    private static final int REGCLS_MULTI_SEPARATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_MULTI_SEPARATE = 2
     * }
     */
    public static int REGCLS_MULTI_SEPARATE() {
        return REGCLS_MULTI_SEPARATE;
    }
    private static final int REGCLS_SUSPENDED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_SUSPENDED = 4
     * }
     */
    public static int REGCLS_SUSPENDED() {
        return REGCLS_SUSPENDED;
    }
    private static final int REGCLS_SURROGATE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_SURROGATE = 8
     * }
     */
    public static int REGCLS_SURROGATE() {
        return REGCLS_SURROGATE;
    }
    private static final int REGCLS_AGILE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum tagREGCLS.REGCLS_AGILE = 16
     * }
     */
    public static int REGCLS_AGILE() {
        return REGCLS_AGILE;
    }
    private static final int COINITBASE_MULTITHREADED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum tagCOINITBASE.COINITBASE_MULTITHREADED = 0
     * }
     */
    public static int COINITBASE_MULTITHREADED() {
        return COINITBASE_MULTITHREADED;
    }

    private static class __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec$constants.LAYOUT, 0L, varValue);
    }

    private static class __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants {
        public static final AddressLayout LAYOUT = winapi.C_POINTER;
        public static final MemorySegment SEGMENT = winapi.findOrThrow("__MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static AddressLayout __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$layout() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$segment() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static MemorySegment __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec() {
        return __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.get(__MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec
     * }
     */
    public static void __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec(MemorySegment varValue) {
        __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.SEGMENT.set(__MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef IUnknown *LPUNKNOWN
     * }
     */
    public static final AddressLayout LPUNKNOWN = winapi.C_POINTER;

    private static class IID_IUnknown$constants {
        public static final GroupLayout LAYOUT = _GUID.layout();
        public static final MemorySegment SEGMENT = winapi.findOrThrow("IID_IUnknown").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUnknown
     * }
     */
    public static GroupLayout IID_IUnknown$layout() {
        return IID_IUnknown$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUnknown
     * }
     */
    public static MemorySegment IID_IUnknown() {
        return IID_IUnknown$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const IID IID_IUnknown
     * }
     */
    public static void IID_IUnknown(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, IID_IUnknown$constants.SEGMENT, 0L, IID_IUnknown$constants.LAYOUT.byteSize());
    }

    private static class IUnknown_QueryInterface_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IUnknown_QueryInterface_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HRESULT IUnknown_QueryInterface_Proxy(IUnknown *This, const IID *const riid, void **ppvObject)
     * }
     */
    public static FunctionDescriptor IUnknown_QueryInterface_Proxy$descriptor() {
        return IUnknown_QueryInterface_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HRESULT IUnknown_QueryInterface_Proxy(IUnknown *This, const IID *const riid, void **ppvObject)
     * }
     */
    public static MethodHandle IUnknown_QueryInterface_Proxy$handle() {
        return IUnknown_QueryInterface_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HRESULT IUnknown_QueryInterface_Proxy(IUnknown *This, const IID *const riid, void **ppvObject)
     * }
     */
    public static MemorySegment IUnknown_QueryInterface_Proxy$address() {
        return IUnknown_QueryInterface_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HRESULT IUnknown_QueryInterface_Proxy(IUnknown *This, const IID *const riid, void **ppvObject)
     * }
     */
    public static int IUnknown_QueryInterface_Proxy(MemorySegment This, MemorySegment riid, MemorySegment ppvObject) {
        var mh$ = IUnknown_QueryInterface_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_QueryInterface_Proxy", This, riid, ppvObject);
            }
            return (int)mh$.invokeExact(This, riid, ppvObject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_QueryInterface_Stub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IUnknown_QueryInterface_Stub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static FunctionDescriptor IUnknown_QueryInterface_Stub$descriptor() {
        return IUnknown_QueryInterface_Stub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MethodHandle IUnknown_QueryInterface_Stub$handle() {
        return IUnknown_QueryInterface_Stub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static MemorySegment IUnknown_QueryInterface_Stub$address() {
        return IUnknown_QueryInterface_Stub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void IUnknown_QueryInterface_Stub(IRpcStubBuffer *This, IRpcChannelBuffer *_pRpcChannelBuffer, PRPC_MESSAGE _pRpcMessage, DWORD *_pdwStubPhase)
     * }
     */
    public static void IUnknown_QueryInterface_Stub(MemorySegment This, MemorySegment _pRpcChannelBuffer, MemorySegment _pRpcMessage, MemorySegment _pdwStubPhase) {
        var mh$ = IUnknown_QueryInterface_Stub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_QueryInterface_Stub", This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
            }
            mh$.invokeExact(This, _pRpcChannelBuffer, _pRpcMessage, _pdwStubPhase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class IUnknown_AddRef_Proxy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            winapi.C_LONG,
            winapi.C_POINTER
        );

        public static final MemorySegment ADDR = winapi.findOrThrow("IUnknown_AddRef_Proxy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ULONG IUnknown_AddRef_Proxy(IUnknown *This)
     * }
     */
    public static FunctionDescriptor IUnknown_AddRef_Proxy$descriptor() {
        return IUnknown_AddRef_Proxy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ULONG IUnknown_AddRef_Proxy(IUnknown *This)
     * }
     */
    public static MethodHandle IUnknown_AddRef_Proxy$handle() {
        return IUnknown_AddRef_Proxy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ULONG IUnknown_AddRef_Proxy(IUnknown *This)
     * }
     */
    public static MemorySegment IUnknown_AddRef_Proxy$address() {
        return IUnknown_AddRef_Proxy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ULONG IUnknown_AddRef_Proxy(IUnknown *This)
     * }
     */
    public static int IUnknown_AddRef_Proxy(MemorySegment This) {
        var mh$ = IUnknown_AddRef_Proxy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("IUnknown_AddRef_Proxy", This);
            }
            return (int)mh$.invokeExact(This);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

