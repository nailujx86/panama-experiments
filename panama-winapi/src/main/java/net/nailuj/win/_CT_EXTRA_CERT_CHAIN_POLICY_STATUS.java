// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _CT_EXTRA_CERT_CHAIN_POLICY_STATUS {
 *     DWORD cbSize;
 *     LONG lErrorStatus;
 *     LONG lErrorSubStatus;
 *     DWORD cEntries;
 *     DWORD cValidated;
 * }
 * }
 */
public class _CT_EXTRA_CERT_CHAIN_POLICY_STATUS {

    _CT_EXTRA_CERT_CHAIN_POLICY_STATUS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG.withName("cbSize"),
        winapi.C_LONG.withName("lErrorStatus"),
        winapi.C_LONG.withName("lErrorSubStatus"),
        winapi.C_LONG.withName("cEntries"),
        winapi.C_LONG.withName("cValidated")
    ).withName("_CT_EXTRA_CERT_CHAIN_POLICY_STATUS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cbSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final OfInt cbSize$layout() {
        return cbSize$LAYOUT;
    }

    private static final long cbSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static final long cbSize$offset() {
        return cbSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static int cbSize(MemorySegment struct) {
        return struct.get(cbSize$LAYOUT, cbSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cbSize
     * }
     */
    public static void cbSize(MemorySegment struct, int fieldValue) {
        struct.set(cbSize$LAYOUT, cbSize$OFFSET, fieldValue);
    }

    private static final OfInt lErrorStatus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lErrorStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lErrorStatus
     * }
     */
    public static final OfInt lErrorStatus$layout() {
        return lErrorStatus$LAYOUT;
    }

    private static final long lErrorStatus$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lErrorStatus
     * }
     */
    public static final long lErrorStatus$offset() {
        return lErrorStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lErrorStatus
     * }
     */
    public static int lErrorStatus(MemorySegment struct) {
        return struct.get(lErrorStatus$LAYOUT, lErrorStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lErrorStatus
     * }
     */
    public static void lErrorStatus(MemorySegment struct, int fieldValue) {
        struct.set(lErrorStatus$LAYOUT, lErrorStatus$OFFSET, fieldValue);
    }

    private static final OfInt lErrorSubStatus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lErrorSubStatus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LONG lErrorSubStatus
     * }
     */
    public static final OfInt lErrorSubStatus$layout() {
        return lErrorSubStatus$LAYOUT;
    }

    private static final long lErrorSubStatus$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LONG lErrorSubStatus
     * }
     */
    public static final long lErrorSubStatus$offset() {
        return lErrorSubStatus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LONG lErrorSubStatus
     * }
     */
    public static int lErrorSubStatus(MemorySegment struct) {
        return struct.get(lErrorSubStatus$LAYOUT, lErrorSubStatus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LONG lErrorSubStatus
     * }
     */
    public static void lErrorSubStatus(MemorySegment struct, int fieldValue) {
        struct.set(lErrorSubStatus$LAYOUT, lErrorSubStatus$OFFSET, fieldValue);
    }

    private static final OfInt cEntries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cEntries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cEntries
     * }
     */
    public static final OfInt cEntries$layout() {
        return cEntries$LAYOUT;
    }

    private static final long cEntries$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cEntries
     * }
     */
    public static final long cEntries$offset() {
        return cEntries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cEntries
     * }
     */
    public static int cEntries(MemorySegment struct) {
        return struct.get(cEntries$LAYOUT, cEntries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cEntries
     * }
     */
    public static void cEntries(MemorySegment struct, int fieldValue) {
        struct.set(cEntries$LAYOUT, cEntries$OFFSET, fieldValue);
    }

    private static final OfInt cValidated$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cValidated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD cValidated
     * }
     */
    public static final OfInt cValidated$layout() {
        return cValidated$LAYOUT;
    }

    private static final long cValidated$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD cValidated
     * }
     */
    public static final long cValidated$offset() {
        return cValidated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD cValidated
     * }
     */
    public static int cValidated(MemorySegment struct) {
        return struct.get(cValidated$LAYOUT, cValidated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD cValidated
     * }
     */
    public static void cValidated(MemorySegment struct, int fieldValue) {
        struct.set(cValidated$LAYOUT, cValidated$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

