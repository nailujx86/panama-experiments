// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _XSTATE_CONTEXT {
 *     DWORD64 Mask;
 *     DWORD Length;
 *     BYTE Flags;
 *     BYTE Reserved0[3];
 *     PXSAVE_AREA Area;
 *     PVOID Buffer;
 * }
 * }
 */
public class _XSTATE_CONTEXT {

    _XSTATE_CONTEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_LONG_LONG.withName("Mask"),
        winapi.C_LONG.withName("Length"),
        winapi.C_CHAR.withName("Flags"),
        MemoryLayout.sequenceLayout(3, winapi.C_CHAR).withName("Reserved0"),
        winapi.C_POINTER.withName("Area"),
        winapi.C_POINTER.withName("Buffer")
    ).withName("_XSTATE_CONTEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Mask$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD64 Mask
     * }
     */
    public static final OfLong Mask$layout() {
        return Mask$LAYOUT;
    }

    private static final long Mask$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD64 Mask
     * }
     */
    public static final long Mask$offset() {
        return Mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD64 Mask
     * }
     */
    public static long Mask(MemorySegment struct) {
        return struct.get(Mask$LAYOUT, Mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD64 Mask
     * }
     */
    public static void Mask(MemorySegment struct, long fieldValue) {
        struct.set(Mask$LAYOUT, Mask$OFFSET, fieldValue);
    }

    private static final OfInt Length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD Length
     * }
     */
    public static final OfInt Length$layout() {
        return Length$LAYOUT;
    }

    private static final long Length$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD Length
     * }
     */
    public static final long Length$offset() {
        return Length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD Length
     * }
     */
    public static int Length(MemorySegment struct) {
        return struct.get(Length$LAYOUT, Length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD Length
     * }
     */
    public static void Length(MemorySegment struct, int fieldValue) {
        struct.set(Length$LAYOUT, Length$OFFSET, fieldValue);
    }

    private static final OfByte Flags$LAYOUT = (OfByte)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Flags
     * }
     */
    public static final OfByte Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Flags
     * }
     */
    public static byte Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Flags
     * }
     */
    public static void Flags(MemorySegment struct, byte fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final SequenceLayout Reserved0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Reserved0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * BYTE Reserved0[3]
     * }
     */
    public static final SequenceLayout Reserved0$layout() {
        return Reserved0$LAYOUT;
    }

    private static final long Reserved0$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * BYTE Reserved0[3]
     * }
     */
    public static final long Reserved0$offset() {
        return Reserved0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * BYTE Reserved0[3]
     * }
     */
    public static MemorySegment Reserved0(MemorySegment struct) {
        return struct.asSlice(Reserved0$OFFSET, Reserved0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * BYTE Reserved0[3]
     * }
     */
    public static void Reserved0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Reserved0$OFFSET, Reserved0$LAYOUT.byteSize());
    }

    private static long[] Reserved0$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * BYTE Reserved0[3]
     * }
     */
    public static long[] Reserved0$dimensions() {
        return Reserved0$DIMS;
    }
    private static final VarHandle Reserved0$ELEM_HANDLE = Reserved0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * BYTE Reserved0[3]
     * }
     */
    public static byte Reserved0(MemorySegment struct, long index0) {
        return (byte)Reserved0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * BYTE Reserved0[3]
     * }
     */
    public static void Reserved0(MemorySegment struct, long index0, byte fieldValue) {
        Reserved0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout Area$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Area"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PXSAVE_AREA Area
     * }
     */
    public static final AddressLayout Area$layout() {
        return Area$LAYOUT;
    }

    private static final long Area$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PXSAVE_AREA Area
     * }
     */
    public static final long Area$offset() {
        return Area$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PXSAVE_AREA Area
     * }
     */
    public static MemorySegment Area(MemorySegment struct) {
        return struct.get(Area$LAYOUT, Area$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PXSAVE_AREA Area
     * }
     */
    public static void Area(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Area$LAYOUT, Area$OFFSET, fieldValue);
    }

    private static final AddressLayout Buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PVOID Buffer
     * }
     */
    public static final AddressLayout Buffer$layout() {
        return Buffer$LAYOUT;
    }

    private static final long Buffer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PVOID Buffer
     * }
     */
    public static final long Buffer$offset() {
        return Buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PVOID Buffer
     * }
     */
    public static MemorySegment Buffer(MemorySegment struct) {
        return struct.get(Buffer$LAYOUT, Buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PVOID Buffer
     * }
     */
    public static void Buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Buffer$LAYOUT, Buffer$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

