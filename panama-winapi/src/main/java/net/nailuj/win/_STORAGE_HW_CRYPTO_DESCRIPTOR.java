// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _STORAGE_HW_CRYPTO_DESCRIPTOR {
 *     STORAGE_DESCRIPTOR_HEADER Header;
 *     DWORD NumKeysSupported;
 *     DWORD NumCryptoCapabilities;
 *     DWORD OffsetToCryptoCapabilities;
 *     DWORD SizeOfCryptoCapability;
 *     STORAGE_ICE_TYPE IceType;
 *     STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask;
 *     STORAGE_CRYPTO_KEY_TYPE KeyTypeBitmask;
 * }
 * }
 */
public class _STORAGE_HW_CRYPTO_DESCRIPTOR {

    _STORAGE_HW_CRYPTO_DESCRIPTOR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _STORAGE_DESCRIPTOR_HEADER.layout().withName("Header"),
        winapi.C_LONG.withName("NumKeysSupported"),
        winapi.C_LONG.withName("NumCryptoCapabilities"),
        winapi.C_LONG.withName("OffsetToCryptoCapabilities"),
        winapi.C_LONG.withName("SizeOfCryptoCapability"),
        winapi.C_INT.withName("IceType"),
        _STORAGE_SECURITY_COMPLIANCE_BITMASK.layout().withName("SecurityComplianceBitmask"),
        _STORAGE_CRYPTO_KEY_TYPE.layout().withName("KeyTypeBitmask"),
        MemoryLayout.paddingLayout(2)
    ).withName("_STORAGE_HW_CRYPTO_DESCRIPTOR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout Header$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Header"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * STORAGE_DESCRIPTOR_HEADER Header
     * }
     */
    public static final GroupLayout Header$layout() {
        return Header$LAYOUT;
    }

    private static final long Header$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * STORAGE_DESCRIPTOR_HEADER Header
     * }
     */
    public static final long Header$offset() {
        return Header$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * STORAGE_DESCRIPTOR_HEADER Header
     * }
     */
    public static MemorySegment Header(MemorySegment struct) {
        return struct.asSlice(Header$OFFSET, Header$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * STORAGE_DESCRIPTOR_HEADER Header
     * }
     */
    public static void Header(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Header$OFFSET, Header$LAYOUT.byteSize());
    }

    private static final OfInt NumKeysSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumKeysSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD NumKeysSupported
     * }
     */
    public static final OfInt NumKeysSupported$layout() {
        return NumKeysSupported$LAYOUT;
    }

    private static final long NumKeysSupported$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD NumKeysSupported
     * }
     */
    public static final long NumKeysSupported$offset() {
        return NumKeysSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD NumKeysSupported
     * }
     */
    public static int NumKeysSupported(MemorySegment struct) {
        return struct.get(NumKeysSupported$LAYOUT, NumKeysSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD NumKeysSupported
     * }
     */
    public static void NumKeysSupported(MemorySegment struct, int fieldValue) {
        struct.set(NumKeysSupported$LAYOUT, NumKeysSupported$OFFSET, fieldValue);
    }

    private static final OfInt NumCryptoCapabilities$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NumCryptoCapabilities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD NumCryptoCapabilities
     * }
     */
    public static final OfInt NumCryptoCapabilities$layout() {
        return NumCryptoCapabilities$LAYOUT;
    }

    private static final long NumCryptoCapabilities$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD NumCryptoCapabilities
     * }
     */
    public static final long NumCryptoCapabilities$offset() {
        return NumCryptoCapabilities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD NumCryptoCapabilities
     * }
     */
    public static int NumCryptoCapabilities(MemorySegment struct) {
        return struct.get(NumCryptoCapabilities$LAYOUT, NumCryptoCapabilities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD NumCryptoCapabilities
     * }
     */
    public static void NumCryptoCapabilities(MemorySegment struct, int fieldValue) {
        struct.set(NumCryptoCapabilities$LAYOUT, NumCryptoCapabilities$OFFSET, fieldValue);
    }

    private static final OfInt OffsetToCryptoCapabilities$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OffsetToCryptoCapabilities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD OffsetToCryptoCapabilities
     * }
     */
    public static final OfInt OffsetToCryptoCapabilities$layout() {
        return OffsetToCryptoCapabilities$LAYOUT;
    }

    private static final long OffsetToCryptoCapabilities$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD OffsetToCryptoCapabilities
     * }
     */
    public static final long OffsetToCryptoCapabilities$offset() {
        return OffsetToCryptoCapabilities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD OffsetToCryptoCapabilities
     * }
     */
    public static int OffsetToCryptoCapabilities(MemorySegment struct) {
        return struct.get(OffsetToCryptoCapabilities$LAYOUT, OffsetToCryptoCapabilities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD OffsetToCryptoCapabilities
     * }
     */
    public static void OffsetToCryptoCapabilities(MemorySegment struct, int fieldValue) {
        struct.set(OffsetToCryptoCapabilities$LAYOUT, OffsetToCryptoCapabilities$OFFSET, fieldValue);
    }

    private static final OfInt SizeOfCryptoCapability$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SizeOfCryptoCapability"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DWORD SizeOfCryptoCapability
     * }
     */
    public static final OfInt SizeOfCryptoCapability$layout() {
        return SizeOfCryptoCapability$LAYOUT;
    }

    private static final long SizeOfCryptoCapability$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DWORD SizeOfCryptoCapability
     * }
     */
    public static final long SizeOfCryptoCapability$offset() {
        return SizeOfCryptoCapability$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DWORD SizeOfCryptoCapability
     * }
     */
    public static int SizeOfCryptoCapability(MemorySegment struct) {
        return struct.get(SizeOfCryptoCapability$LAYOUT, SizeOfCryptoCapability$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DWORD SizeOfCryptoCapability
     * }
     */
    public static void SizeOfCryptoCapability(MemorySegment struct, int fieldValue) {
        struct.set(SizeOfCryptoCapability$LAYOUT, SizeOfCryptoCapability$OFFSET, fieldValue);
    }

    private static final OfInt IceType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("IceType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * STORAGE_ICE_TYPE IceType
     * }
     */
    public static final OfInt IceType$layout() {
        return IceType$LAYOUT;
    }

    private static final long IceType$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * STORAGE_ICE_TYPE IceType
     * }
     */
    public static final long IceType$offset() {
        return IceType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * STORAGE_ICE_TYPE IceType
     * }
     */
    public static int IceType(MemorySegment struct) {
        return struct.get(IceType$LAYOUT, IceType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * STORAGE_ICE_TYPE IceType
     * }
     */
    public static void IceType(MemorySegment struct, int fieldValue) {
        struct.set(IceType$LAYOUT, IceType$OFFSET, fieldValue);
    }

    private static final GroupLayout SecurityComplianceBitmask$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SecurityComplianceBitmask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask
     * }
     */
    public static final GroupLayout SecurityComplianceBitmask$layout() {
        return SecurityComplianceBitmask$LAYOUT;
    }

    private static final long SecurityComplianceBitmask$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask
     * }
     */
    public static final long SecurityComplianceBitmask$offset() {
        return SecurityComplianceBitmask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask
     * }
     */
    public static MemorySegment SecurityComplianceBitmask(MemorySegment struct) {
        return struct.asSlice(SecurityComplianceBitmask$OFFSET, SecurityComplianceBitmask$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * STORAGE_SECURITY_COMPLIANCE_BITMASK SecurityComplianceBitmask
     * }
     */
    public static void SecurityComplianceBitmask(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SecurityComplianceBitmask$OFFSET, SecurityComplianceBitmask$LAYOUT.byteSize());
    }

    private static final GroupLayout KeyTypeBitmask$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("KeyTypeBitmask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_KEY_TYPE KeyTypeBitmask
     * }
     */
    public static final GroupLayout KeyTypeBitmask$layout() {
        return KeyTypeBitmask$LAYOUT;
    }

    private static final long KeyTypeBitmask$OFFSET = 29;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_KEY_TYPE KeyTypeBitmask
     * }
     */
    public static final long KeyTypeBitmask$offset() {
        return KeyTypeBitmask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_KEY_TYPE KeyTypeBitmask
     * }
     */
    public static MemorySegment KeyTypeBitmask(MemorySegment struct) {
        return struct.asSlice(KeyTypeBitmask$OFFSET, KeyTypeBitmask$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * STORAGE_CRYPTO_KEY_TYPE KeyTypeBitmask
     * }
     */
    public static void KeyTypeBitmask(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KeyTypeBitmask$OFFSET, KeyTypeBitmask$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

