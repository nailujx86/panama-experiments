// Generated by jextract

package net.nailuj.win;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct TOUCHPAD_PARAMETERS {
 *     UINT versionNumber;
 *     UINT maxSupportedContacts;
 *     LEGACY_TOUCHPAD_FEATURES legacyTouchpadFeatures;
 *     BOOL touchpadPresent : 1;
 *     BOOL legacyTouchpadPresent : 1;
 *     BOOL externalMousePresent : 1;
 *     BOOL touchpadEnabled : 1;
 *     BOOL touchpadActive : 1;
 *     BOOL feedbackSupported : 1;
 *     BOOL clickForceSupported : 1;
 *     BOOL Reserved1 : 25;
 *     BOOL allowActiveWhenMousePresent : 1;
 *     BOOL feedbackEnabled : 1;
 *     BOOL tapEnabled : 1;
 *     BOOL tapAndDragEnabled : 1;
 *     BOOL twoFingerTapEnabled : 1;
 *     BOOL rightClickZoneEnabled : 1;
 *     BOOL mouseAccelSettingHonored : 1;
 *     BOOL panEnabled : 1;
 *     BOOL zoomEnabled : 1;
 *     BOOL scrollDirectionReversed : 1;
 *     BOOL Reserved2 : 22;
 *     TOUCHPAD_SENSITIVITY_LEVEL sensitivityLevel;
 *     UINT cursorSpeed;
 *     UINT feedbackIntensity;
 *     UINT clickForceSensitivity;
 *     UINT rightClickZoneWidth;
 *     UINT rightClickZoneHeight;
 * }
 * }
 */
public class TOUCHPAD_PARAMETERS {

    TOUCHPAD_PARAMETERS() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        winapi.C_INT.withName("versionNumber"),
        winapi.C_INT.withName("maxSupportedContacts"),
        winapi.C_INT.withName("legacyTouchpadFeatures"),
        MemoryLayout.paddingLayout(8),
        winapi.C_INT.withName("sensitivityLevel"),
        winapi.C_INT.withName("cursorSpeed"),
        winapi.C_INT.withName("feedbackIntensity"),
        winapi.C_INT.withName("clickForceSensitivity"),
        winapi.C_INT.withName("rightClickZoneWidth"),
        winapi.C_INT.withName("rightClickZoneHeight")
    ).withName("TOUCHPAD_PARAMETERS");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt versionNumber$LAYOUT = (OfInt)$LAYOUT.select(groupElement("versionNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT versionNumber
     * }
     */
    public static final OfInt versionNumber$layout() {
        return versionNumber$LAYOUT;
    }

    private static final long versionNumber$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT versionNumber
     * }
     */
    public static final long versionNumber$offset() {
        return versionNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT versionNumber
     * }
     */
    public static int versionNumber(MemorySegment struct) {
        return struct.get(versionNumber$LAYOUT, versionNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT versionNumber
     * }
     */
    public static void versionNumber(MemorySegment struct, int fieldValue) {
        struct.set(versionNumber$LAYOUT, versionNumber$OFFSET, fieldValue);
    }

    private static final OfInt maxSupportedContacts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxSupportedContacts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT maxSupportedContacts
     * }
     */
    public static final OfInt maxSupportedContacts$layout() {
        return maxSupportedContacts$LAYOUT;
    }

    private static final long maxSupportedContacts$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT maxSupportedContacts
     * }
     */
    public static final long maxSupportedContacts$offset() {
        return maxSupportedContacts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT maxSupportedContacts
     * }
     */
    public static int maxSupportedContacts(MemorySegment struct) {
        return struct.get(maxSupportedContacts$LAYOUT, maxSupportedContacts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT maxSupportedContacts
     * }
     */
    public static void maxSupportedContacts(MemorySegment struct, int fieldValue) {
        struct.set(maxSupportedContacts$LAYOUT, maxSupportedContacts$OFFSET, fieldValue);
    }

    private static final OfInt legacyTouchpadFeatures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("legacyTouchpadFeatures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * LEGACY_TOUCHPAD_FEATURES legacyTouchpadFeatures
     * }
     */
    public static final OfInt legacyTouchpadFeatures$layout() {
        return legacyTouchpadFeatures$LAYOUT;
    }

    private static final long legacyTouchpadFeatures$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * LEGACY_TOUCHPAD_FEATURES legacyTouchpadFeatures
     * }
     */
    public static final long legacyTouchpadFeatures$offset() {
        return legacyTouchpadFeatures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * LEGACY_TOUCHPAD_FEATURES legacyTouchpadFeatures
     * }
     */
    public static int legacyTouchpadFeatures(MemorySegment struct) {
        return struct.get(legacyTouchpadFeatures$LAYOUT, legacyTouchpadFeatures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * LEGACY_TOUCHPAD_FEATURES legacyTouchpadFeatures
     * }
     */
    public static void legacyTouchpadFeatures(MemorySegment struct, int fieldValue) {
        struct.set(legacyTouchpadFeatures$LAYOUT, legacyTouchpadFeatures$OFFSET, fieldValue);
    }

    private static final OfInt sensitivityLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sensitivityLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * TOUCHPAD_SENSITIVITY_LEVEL sensitivityLevel
     * }
     */
    public static final OfInt sensitivityLevel$layout() {
        return sensitivityLevel$LAYOUT;
    }

    private static final long sensitivityLevel$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * TOUCHPAD_SENSITIVITY_LEVEL sensitivityLevel
     * }
     */
    public static final long sensitivityLevel$offset() {
        return sensitivityLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * TOUCHPAD_SENSITIVITY_LEVEL sensitivityLevel
     * }
     */
    public static int sensitivityLevel(MemorySegment struct) {
        return struct.get(sensitivityLevel$LAYOUT, sensitivityLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * TOUCHPAD_SENSITIVITY_LEVEL sensitivityLevel
     * }
     */
    public static void sensitivityLevel(MemorySegment struct, int fieldValue) {
        struct.set(sensitivityLevel$LAYOUT, sensitivityLevel$OFFSET, fieldValue);
    }

    private static final OfInt cursorSpeed$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cursorSpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT cursorSpeed
     * }
     */
    public static final OfInt cursorSpeed$layout() {
        return cursorSpeed$LAYOUT;
    }

    private static final long cursorSpeed$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT cursorSpeed
     * }
     */
    public static final long cursorSpeed$offset() {
        return cursorSpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT cursorSpeed
     * }
     */
    public static int cursorSpeed(MemorySegment struct) {
        return struct.get(cursorSpeed$LAYOUT, cursorSpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT cursorSpeed
     * }
     */
    public static void cursorSpeed(MemorySegment struct, int fieldValue) {
        struct.set(cursorSpeed$LAYOUT, cursorSpeed$OFFSET, fieldValue);
    }

    private static final OfInt feedbackIntensity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("feedbackIntensity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT feedbackIntensity
     * }
     */
    public static final OfInt feedbackIntensity$layout() {
        return feedbackIntensity$LAYOUT;
    }

    private static final long feedbackIntensity$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT feedbackIntensity
     * }
     */
    public static final long feedbackIntensity$offset() {
        return feedbackIntensity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT feedbackIntensity
     * }
     */
    public static int feedbackIntensity(MemorySegment struct) {
        return struct.get(feedbackIntensity$LAYOUT, feedbackIntensity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT feedbackIntensity
     * }
     */
    public static void feedbackIntensity(MemorySegment struct, int fieldValue) {
        struct.set(feedbackIntensity$LAYOUT, feedbackIntensity$OFFSET, fieldValue);
    }

    private static final OfInt clickForceSensitivity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("clickForceSensitivity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT clickForceSensitivity
     * }
     */
    public static final OfInt clickForceSensitivity$layout() {
        return clickForceSensitivity$LAYOUT;
    }

    private static final long clickForceSensitivity$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT clickForceSensitivity
     * }
     */
    public static final long clickForceSensitivity$offset() {
        return clickForceSensitivity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT clickForceSensitivity
     * }
     */
    public static int clickForceSensitivity(MemorySegment struct) {
        return struct.get(clickForceSensitivity$LAYOUT, clickForceSensitivity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT clickForceSensitivity
     * }
     */
    public static void clickForceSensitivity(MemorySegment struct, int fieldValue) {
        struct.set(clickForceSensitivity$LAYOUT, clickForceSensitivity$OFFSET, fieldValue);
    }

    private static final OfInt rightClickZoneWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rightClickZoneWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT rightClickZoneWidth
     * }
     */
    public static final OfInt rightClickZoneWidth$layout() {
        return rightClickZoneWidth$LAYOUT;
    }

    private static final long rightClickZoneWidth$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT rightClickZoneWidth
     * }
     */
    public static final long rightClickZoneWidth$offset() {
        return rightClickZoneWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT rightClickZoneWidth
     * }
     */
    public static int rightClickZoneWidth(MemorySegment struct) {
        return struct.get(rightClickZoneWidth$LAYOUT, rightClickZoneWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT rightClickZoneWidth
     * }
     */
    public static void rightClickZoneWidth(MemorySegment struct, int fieldValue) {
        struct.set(rightClickZoneWidth$LAYOUT, rightClickZoneWidth$OFFSET, fieldValue);
    }

    private static final OfInt rightClickZoneHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rightClickZoneHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * UINT rightClickZoneHeight
     * }
     */
    public static final OfInt rightClickZoneHeight$layout() {
        return rightClickZoneHeight$LAYOUT;
    }

    private static final long rightClickZoneHeight$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * UINT rightClickZoneHeight
     * }
     */
    public static final long rightClickZoneHeight$offset() {
        return rightClickZoneHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * UINT rightClickZoneHeight
     * }
     */
    public static int rightClickZoneHeight(MemorySegment struct) {
        return struct.get(rightClickZoneHeight$LAYOUT, rightClickZoneHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * UINT rightClickZoneHeight
     * }
     */
    public static void rightClickZoneHeight(MemorySegment struct, int fieldValue) {
        struct.set(rightClickZoneHeight$LAYOUT, rightClickZoneHeight$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

